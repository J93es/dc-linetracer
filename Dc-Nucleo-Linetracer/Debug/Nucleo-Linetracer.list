
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d34  0800a980  0800a980  0001a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6b4  0800b6b4  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6bc  0800b6bc  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800b6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dc8  20000268  0800b92c  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003030  0800b92c  00023030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfb5  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e2  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000baa  00000000  00000000  00031510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016180  00000000  00000000  000320ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000faa3  00000000  00000000  0004823a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000763c8  00000000  00000000  00057cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005054  00000000  00000000  000ce0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d30fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a968 	.word	0x0800a968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800a968 	.word	0x0800a968

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b984 	b.w	8000f78 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f81a 	bl	8000cb0 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__popcountsi2>:
 8000c88:	0843      	lsrs	r3, r0, #1
 8000c8a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c8e:	1ac0      	subs	r0, r0, r3
 8000c90:	0883      	lsrs	r3, r0, #2
 8000c92:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000c96:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000c9a:	4418      	add	r0, r3
 8000c9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000ca0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000ca4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000ca8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000cac:	0e00      	lsrs	r0, r0, #24
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	9e08      	ldr	r6, [sp, #32]
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	460f      	mov	r7, r1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d14a      	bne.n	8000d56 <__udivmoddi4+0xa6>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4694      	mov	ip, r2
 8000cc4:	d965      	bls.n	8000d92 <__udivmoddi4+0xe2>
 8000cc6:	fab2 f382 	clz	r3, r2
 8000cca:	b143      	cbz	r3, 8000cde <__udivmoddi4+0x2e>
 8000ccc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd0:	f1c3 0220 	rsb	r2, r3, #32
 8000cd4:	409f      	lsls	r7, r3
 8000cd6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cda:	4317      	orrs	r7, r2
 8000cdc:	409c      	lsls	r4, r3
 8000cde:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ce2:	fa1f f58c 	uxth.w	r5, ip
 8000ce6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cea:	0c22      	lsrs	r2, r4, #16
 8000cec:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cf4:	fb01 f005 	mul.w	r0, r1, r5
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x62>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d04:	f080 811c 	bcs.w	8000f40 <__udivmoddi4+0x290>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f240 8119 	bls.w	8000f40 <__udivmoddi4+0x290>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4462      	add	r2, ip
 8000d12:	1a12      	subs	r2, r2, r0
 8000d14:	b2a4      	uxth	r4, r4
 8000d16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d22:	fb00 f505 	mul.w	r5, r0, r5
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x90>
 8000d2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d32:	f080 8107 	bcs.w	8000f44 <__udivmoddi4+0x294>
 8000d36:	42a5      	cmp	r5, r4
 8000d38:	f240 8104 	bls.w	8000f44 <__udivmoddi4+0x294>
 8000d3c:	4464      	add	r4, ip
 8000d3e:	3802      	subs	r0, #2
 8000d40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	2100      	movs	r1, #0
 8000d48:	b11e      	cbz	r6, 8000d52 <__udivmoddi4+0xa2>
 8000d4a:	40dc      	lsrs	r4, r3
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0xbc>
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	f000 80ed 	beq.w	8000f3a <__udivmoddi4+0x28a>
 8000d60:	2100      	movs	r1, #0
 8000d62:	e9c6 0500 	strd	r0, r5, [r6]
 8000d66:	4608      	mov	r0, r1
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	fab3 f183 	clz	r1, r3
 8000d70:	2900      	cmp	r1, #0
 8000d72:	d149      	bne.n	8000e08 <__udivmoddi4+0x158>
 8000d74:	42ab      	cmp	r3, r5
 8000d76:	d302      	bcc.n	8000d7e <__udivmoddi4+0xce>
 8000d78:	4282      	cmp	r2, r0
 8000d7a:	f200 80f8 	bhi.w	8000f6e <__udivmoddi4+0x2be>
 8000d7e:	1a84      	subs	r4, r0, r2
 8000d80:	eb65 0203 	sbc.w	r2, r5, r3
 8000d84:	2001      	movs	r0, #1
 8000d86:	4617      	mov	r7, r2
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d0e2      	beq.n	8000d52 <__udivmoddi4+0xa2>
 8000d8c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d90:	e7df      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000d92:	b902      	cbnz	r2, 8000d96 <__udivmoddi4+0xe6>
 8000d94:	deff      	udf	#255	; 0xff
 8000d96:	fab2 f382 	clz	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x210>
 8000da0:	1a8a      	subs	r2, r1, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2101      	movs	r1, #1
 8000dac:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db0:	fb07 2015 	mls	r0, r7, r5, r2
 8000db4:	0c22      	lsrs	r2, r4, #16
 8000db6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dba:	fb0e f005 	mul.w	r0, lr, r5
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x124>
 8000dc2:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x122>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2b8>
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	1a12      	subs	r2, r2, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ddc:	fb07 2210 	mls	r2, r7, r0, r2
 8000de0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x14e>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x14c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2c2>
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e06:	e79f      	b.n	8000d48 <__udivmoddi4+0x98>
 8000e08:	f1c1 0720 	rsb	r7, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa05 f401 	lsl.w	r4, r5, r1
 8000e1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e1e:	40fd      	lsrs	r5, r7
 8000e20:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e24:	4323      	orrs	r3, r4
 8000e26:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e32:	0c1c      	lsrs	r4, r3, #16
 8000e34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e38:	fb08 f50e 	mul.w	r5, r8, lr
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	fa00 f001 	lsl.w	r0, r0, r1
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b0>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2b4>
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2b4>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4464      	add	r4, ip
 8000e60:	1b64      	subs	r4, r4, r5
 8000e62:	b29d      	uxth	r5, r3
 8000e64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e68:	fb09 4413 	mls	r4, r9, r3, r4
 8000e6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e70:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1da>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2ac>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2ac>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e8e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46ae      	mov	lr, r5
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x29c>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x298>
 8000ea0:	b156      	cbz	r6, 8000eb8 <__udivmoddi4+0x208>
 8000ea2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ea6:	eb64 040e 	sbc.w	r4, r4, lr
 8000eaa:	fa04 f707 	lsl.w	r7, r4, r7
 8000eae:	40ca      	lsrs	r2, r1
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	4317      	orrs	r7, r2
 8000eb4:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	f1c3 0120 	rsb	r1, r3, #32
 8000ec4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ecc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed0:	409d      	lsls	r5, r3
 8000ed2:	432a      	orrs	r2, r5
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ee4:	0c11      	lsrs	r1, r2, #16
 8000ee6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eea:	fb00 f50e 	mul.w	r5, r0, lr
 8000eee:	428d      	cmp	r5, r1
 8000ef0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x258>
 8000ef6:	eb1c 0101 	adds.w	r1, ip, r1
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b0>
 8000f00:	428d      	cmp	r5, r1
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b0>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4461      	add	r1, ip
 8000f08:	1b49      	subs	r1, r1, r5
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f10:	fb07 1115 	mls	r1, r7, r5, r1
 8000f14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f18:	fb05 f10e 	mul.w	r1, r5, lr
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x282>
 8000f20:	eb1c 0202 	adds.w	r2, ip, r2
 8000f24:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2a:	4291      	cmp	r1, r2
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	3d02      	subs	r5, #2
 8000f30:	4462      	add	r2, ip
 8000f32:	1a52      	subs	r2, r2, r1
 8000f34:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0xfc>
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000f40:	4639      	mov	r1, r7
 8000f42:	e6e6      	b.n	8000d12 <__udivmoddi4+0x62>
 8000f44:	4610      	mov	r0, r2
 8000f46:	e6fb      	b.n	8000d40 <__udivmoddi4+0x90>
 8000f48:	4548      	cmp	r0, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f0>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f54:	3b01      	subs	r3, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f0>
 8000f58:	4645      	mov	r5, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x282>
 8000f5c:	462b      	mov	r3, r5
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1da>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x258>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b0>
 8000f68:	3d02      	subs	r5, #2
 8000f6a:	4462      	add	r2, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x124>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e70a      	b.n	8000d88 <__udivmoddi4+0xd8>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x14e>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b089      	sub	sp, #36	; 0x24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	332c      	adds	r3, #44	; 0x2c
 80010e6:	4619      	mov	r1, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010f2:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	40d3      	lsrs	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	211f      	movs	r1, #31
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 011f 	and.w	r1, r3, #31
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001168:	b480      	push	{r7}
 800116a:	b08d      	sub	sp, #52	; 0x34
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	330c      	adds	r3, #12
 8001178:	4619      	mov	r1, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	617a      	str	r2, [r7, #20]
  return result;
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011a8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011ac:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	6a39      	ldr	r1, [r7, #32]
 80011b0:	fa91 f1a1 	rbit	r1, r1
 80011b4:	61f9      	str	r1, [r7, #28]
  return result;
 80011b6:	69f9      	ldr	r1, [r7, #28]
 80011b8:	fab1 f181 	clz	r1, r1
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	40cb      	lsrs	r3, r1
 80011c0:	2107      	movs	r1, #7
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011d0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011d4:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d8:	fa91 f1a1 	rbit	r1, r1
 80011dc:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80011de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e0:	fab1 f181 	clz	r1, r1
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	40cb      	lsrs	r3, r1
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	431a      	orrs	r2, r3
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80011f4:	bf00      	nop
 80011f6:	3734      	adds	r7, #52	; 0x34
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60da      	str	r2, [r3, #12]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f023 0201 	bic.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60da      	str	r2, [r3, #12]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_HSI_IsReady+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800

080012cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 0203 	bic.w	r2, r3, #3
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <LL_RCC_GetSysClkSource+0x18>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800

08001364 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40023800 	.word	0x40023800

0800138c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800

080013b4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <LL_RCC_SetTIMPrescaler+0x28>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013c6:	4905      	ldr	r1, [pc, #20]	; (80013dc <LL_RCC_SetTIMPrescaler+0x28>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800

080013e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_RCC_PLL_Enable+0x1c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <LL_RCC_PLL_Enable+0x1c>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <LL_RCC_PLL_IsReady+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800143c:	4013      	ands	r3, r2
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4311      	orrs	r1, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	0192      	lsls	r2, r2, #6
 8001448:	430a      	orrs	r2, r1
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800
 8001470:	ffbf8000 	.word	0xffbf8000

08001474 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800147e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800

080014a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800

080014d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40023800 	.word	0x40023800

08001504 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <LL_SYSCFG_SetEXTISource+0x58>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3302      	adds	r3, #2
 8001516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	43db      	mvns	r3, r3
 8001520:	ea02 0103 	and.w	r1, r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	60bb      	str	r3, [r7, #8]
  return result;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	fa03 f202 	lsl.w	r2, r3, r2
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <LL_SYSCFG_SetEXTISource+0x58>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	430a      	orrs	r2, r1
 800154a:	3302      	adds	r3, #2
 800154c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40013800 	.word	0x40013800

08001560 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <LL_FLASH_SetLatency+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 0207 	bic.w	r2, r3, #7
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <LL_FLASH_SetLatency+0x24>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023c00 	.word	0x40023c00

08001588 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_FLASH_GetLatency+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80015b4:	4904      	ldr	r1, [pc, #16]	; (80015c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40007000 	.word	0x40007000

080015cc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000

080015f4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f023 0210 	bic.w	r2, r3, #16
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0208 	bic.w	r2, r3, #8
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d01c      	beq.n	80016aa <LL_TIM_OC_DisableFast+0x4a>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b04      	cmp	r3, #4
 8001674:	d017      	beq.n	80016a6 <LL_TIM_OC_DisableFast+0x46>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d012      	beq.n	80016a2 <LL_TIM_OC_DisableFast+0x42>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b40      	cmp	r3, #64	; 0x40
 8001680:	d00d      	beq.n	800169e <LL_TIM_OC_DisableFast+0x3e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001688:	d007      	beq.n	800169a <LL_TIM_OC_DisableFast+0x3a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d101      	bne.n	8001696 <LL_TIM_OC_DisableFast+0x36>
 8001692:	2305      	movs	r3, #5
 8001694:	e00a      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 8001696:	2306      	movs	r3, #6
 8001698:	e008      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3318      	adds	r3, #24
 80016b2:	4619      	mov	r1, r3
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LL_TIM_OC_DisableFast+0x84>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	440b      	add	r3, r1
 80016bc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	4908      	ldr	r1, [pc, #32]	; (80016e8 <LL_TIM_OC_DisableFast+0x88>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2304      	movs	r3, #4
 80016cc:	408b      	lsls	r3, r1
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	601a      	str	r2, [r3, #0]

}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	0800b08c 	.word	0x0800b08c
 80016e8:	0800b094 	.word	0x0800b094

080016ec <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d01c      	beq.n	8001736 <LL_TIM_OC_EnablePreload+0x4a>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d017      	beq.n	8001732 <LL_TIM_OC_EnablePreload+0x46>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d012      	beq.n	800172e <LL_TIM_OC_EnablePreload+0x42>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b40      	cmp	r3, #64	; 0x40
 800170c:	d00d      	beq.n	800172a <LL_TIM_OC_EnablePreload+0x3e>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d007      	beq.n	8001726 <LL_TIM_OC_EnablePreload+0x3a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171c:	d101      	bne.n	8001722 <LL_TIM_OC_EnablePreload+0x36>
 800171e:	2305      	movs	r3, #5
 8001720:	e00a      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001722:	2306      	movs	r3, #6
 8001724:	e008      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3318      	adds	r3, #24
 800173e:	4619      	mov	r1, r3
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <LL_TIM_OC_EnablePreload+0x80>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	440b      	add	r3, r1
 8001748:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <LL_TIM_OC_EnablePreload+0x84>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	4619      	mov	r1, r3
 8001756:	2308      	movs	r3, #8
 8001758:	408b      	lsls	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	0800b08c 	.word	0x0800b08c
 8001770:	0800b094 	.word	0x0800b094

08001774 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d01c      	beq.n	80017c0 <LL_TIM_IC_SetActiveInput+0x4c>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d017      	beq.n	80017bc <LL_TIM_IC_SetActiveInput+0x48>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d012      	beq.n	80017b8 <LL_TIM_IC_SetActiveInput+0x44>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d00d      	beq.n	80017b4 <LL_TIM_IC_SetActiveInput+0x40>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179e:	d007      	beq.n	80017b0 <LL_TIM_IC_SetActiveInput+0x3c>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d101      	bne.n	80017ac <LL_TIM_IC_SetActiveInput+0x38>
 80017a8:	2305      	movs	r3, #5
 80017aa:	e00a      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017ac:	2306      	movs	r3, #6
 80017ae:	e008      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e006      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e004      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e002      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017c0:	2300      	movs	r3, #0
 80017c2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3318      	adds	r3, #24
 80017c8:	4619      	mov	r1, r3
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <LL_TIM_IC_SetActiveInput+0x94>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	440b      	add	r3, r1
 80017d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <LL_TIM_IC_SetActiveInput+0x98>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	4619      	mov	r1, r3
 80017e0:	2303      	movs	r3, #3
 80017e2:	408b      	lsls	r3, r1
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	7df9      	ldrb	r1, [r7, #23]
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <LL_TIM_IC_SetActiveInput+0x98>)
 80017f0:	5c41      	ldrb	r1, [r0, r1]
 80017f2:	408b      	lsls	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0800b08c 	.word	0x0800b08c
 800180c:	0800b09c 	.word	0x0800b09c

08001810 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d01c      	beq.n	800185c <LL_TIM_IC_SetPrescaler+0x4c>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d017      	beq.n	8001858 <LL_TIM_IC_SetPrescaler+0x48>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d012      	beq.n	8001854 <LL_TIM_IC_SetPrescaler+0x44>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d00d      	beq.n	8001850 <LL_TIM_IC_SetPrescaler+0x40>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183a:	d007      	beq.n	800184c <LL_TIM_IC_SetPrescaler+0x3c>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	d101      	bne.n	8001848 <LL_TIM_IC_SetPrescaler+0x38>
 8001844:	2305      	movs	r3, #5
 8001846:	e00a      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001848:	2306      	movs	r3, #6
 800184a:	e008      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 800184c:	2304      	movs	r3, #4
 800184e:	e006      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001850:	2303      	movs	r3, #3
 8001852:	e004      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3318      	adds	r3, #24
 8001864:	4619      	mov	r1, r3
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <LL_TIM_IC_SetPrescaler+0x94>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	440b      	add	r3, r1
 800186e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	490c      	ldr	r1, [pc, #48]	; (80018a8 <LL_TIM_IC_SetPrescaler+0x98>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	4619      	mov	r1, r3
 800187c:	230c      	movs	r3, #12
 800187e:	408b      	lsls	r3, r1
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7df9      	ldrb	r1, [r7, #23]
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <LL_TIM_IC_SetPrescaler+0x98>)
 800188c:	5c41      	ldrb	r1, [r0, r1]
 800188e:	408b      	lsls	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0800b08c 	.word	0x0800b08c
 80018a8:	0800b09c 	.word	0x0800b09c

080018ac <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d01c      	beq.n	80018f8 <LL_TIM_IC_SetFilter+0x4c>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d017      	beq.n	80018f4 <LL_TIM_IC_SetFilter+0x48>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d012      	beq.n	80018f0 <LL_TIM_IC_SetFilter+0x44>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	d00d      	beq.n	80018ec <LL_TIM_IC_SetFilter+0x40>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d6:	d007      	beq.n	80018e8 <LL_TIM_IC_SetFilter+0x3c>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018de:	d101      	bne.n	80018e4 <LL_TIM_IC_SetFilter+0x38>
 80018e0:	2305      	movs	r3, #5
 80018e2:	e00a      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018e4:	2306      	movs	r3, #6
 80018e6:	e008      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e006      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018ec:	2303      	movs	r3, #3
 80018ee:	e004      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e002      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3318      	adds	r3, #24
 8001900:	4619      	mov	r1, r3
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LL_TIM_IC_SetFilter+0x94>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	440b      	add	r3, r1
 800190a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	490c      	ldr	r1, [pc, #48]	; (8001944 <LL_TIM_IC_SetFilter+0x98>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	4619      	mov	r1, r3
 8001918:	23f0      	movs	r3, #240	; 0xf0
 800191a:	408b      	lsls	r3, r1
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	7df9      	ldrb	r1, [r7, #23]
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <LL_TIM_IC_SetFilter+0x98>)
 8001928:	5c41      	ldrb	r1, [r0, r1]
 800192a:	408b      	lsls	r3, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	0800b08c 	.word	0x0800b08c
 8001944:	0800b09c 	.word	0x0800b09c

08001948 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d01c      	beq.n	8001994 <LL_TIM_IC_SetPolarity+0x4c>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d017      	beq.n	8001990 <LL_TIM_IC_SetPolarity+0x48>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b10      	cmp	r3, #16
 8001964:	d012      	beq.n	800198c <LL_TIM_IC_SetPolarity+0x44>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d00d      	beq.n	8001988 <LL_TIM_IC_SetPolarity+0x40>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	d007      	beq.n	8001984 <LL_TIM_IC_SetPolarity+0x3c>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d101      	bne.n	8001980 <LL_TIM_IC_SetPolarity+0x38>
 800197c:	2305      	movs	r3, #5
 800197e:	e00a      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001980:	2306      	movs	r3, #6
 8001982:	e008      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001994:	2300      	movs	r3, #0
 8001996:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	490b      	ldr	r1, [pc, #44]	; (80019cc <LL_TIM_IC_SetPolarity+0x84>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	4619      	mov	r1, r3
 80019a4:	230a      	movs	r3, #10
 80019a6:	408b      	lsls	r3, r1
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	4907      	ldr	r1, [pc, #28]	; (80019cc <LL_TIM_IC_SetPolarity+0x84>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	4619      	mov	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	408b      	lsls	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	0800b0a4 	.word	0x0800b0a4

080019d0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 0207 	bic.w	r2, r3, #7
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60da      	str	r2, [r3, #12]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	615a      	str	r2, [r3, #20]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b089      	sub	sp, #36	; 0x24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	613b      	str	r3, [r7, #16]
  return result;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2103      	movs	r1, #3
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	61bb      	str	r3, [r7, #24]
  return result;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	613b      	str	r3, [r7, #16]
  return result;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2103      	movs	r1, #3
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	60da      	str	r2, [r3, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	041a      	lsls	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b94:	f7ff fc9e 	bl	80014d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b9c:	f7ff fc82 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba0:	2007      	movs	r0, #7
 8001ba2:	f7ff f9eb 	bl	8000f7c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 f81b 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001baa:	f000 fc79 	bl	80024a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bae:	f000 f865 	bl	8001c7c <MX_ADC1_Init>
  MX_I2C3_Init();
 8001bb2:	f000 f8f1 	bl	8001d98 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001bb6:	f000 f9b1 	bl	8001f1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bba:	f000 f9e7 	bl	8001f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bbe:	f000 fa5f 	bl	8002080 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001bc2:	f000 fad7 	bl	8002174 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001bc6:	f000 fc1b 	bl	8002400 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001bca:	f000 fb13 	bl	80021f4 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001bce:	f000 f951 	bl	8001e74 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001bd2:	f000 fb49 	bl	8002268 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001bd6:	f000 fbad 	bl	8002334 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001bda:	f004 ff4b 	bl	8006a74 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001bde:	e7fe      	b.n	8001bde <main+0x52>

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff fcbb 	bl	8001560 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001bea:	bf00      	nop
 8001bec:	f7ff fccc 	bl	8001588 <LL_FLASH_GetLatency>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d1fa      	bne.n	8001bec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001bf6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001bfa:	f7ff fcd3 	bl	80015a4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f7ff fb64 	bl	80012cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001c04:	f7ff fb40 	bl	8001288 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c08:	bf00      	nop
 8001c0a:	f7ff fb4d 	bl	80012a8 <LL_RCC_HSI_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d1fa      	bne.n	8001c0a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001c14:	2300      	movs	r3, #0
 8001c16:	2264      	movs	r2, #100	; 0x64
 8001c18:	2108      	movs	r1, #8
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fc04 	bl	8001428 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001c20:	f7ff fbde 	bl	80013e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001c24:	bf00      	nop
 8001c26:	f7ff fbeb 	bl	8001400 <LL_RCC_PLL_IsReady>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d1fa      	bne.n	8001c26 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001c30:	bf00      	nop
 8001c32:	f7ff fccb 	bl	80015cc <LL_PWR_IsActiveFlag_VOS>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0fa      	beq.n	8001c32 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff fb7d 	bl	800133c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001c42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c46:	f7ff fb8d 	bl	8001364 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fb9e 	bl	800138c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fb51 	bl	80012f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c56:	bf00      	nop
 8001c58:	f7ff fb62 	bl	8001320 <LL_RCC_GetSysClkSource>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d1fa      	bne.n	8001c58 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <SystemClock_Config+0x98>)
 8001c64:	f002 ffac 	bl	8004bc0 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <SystemClock_Config+0x98>)
 8001c6a:	f002 ffb7 	bl	8004bdc <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fba0 	bl	80013b4 <LL_RCC_SetTIMPrescaler>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	05f5e100 	.word	0x05f5e100

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b090      	sub	sp, #64	; 0x40
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb6:	f7ff fc0d 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fbda 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f7ff fbd7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482b      	ldr	r0, [pc, #172]	; (8001d84 <MX_ADC1_Init+0x108>)
 8001cd8:	f001 fe68 	bl	80039ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ADC_Battery_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <MX_ADC1_Init+0x10c>)
 8001cee:	f001 fe5d 	bl	80039ac <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001cf2:	f7ff f967 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f9b7 	bl	8001070 <NVIC_EncodePriority>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4619      	mov	r1, r3
 8001d06:	2012      	movs	r0, #18
 8001d08:	f7ff f988 	bl	800101c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8001d0c:	2012      	movs	r0, #18
 8001d0e:	f7ff f967 	bl	8000fe0 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001d1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d22:	4619      	mov	r1, r3
 8001d24:	4819      	ldr	r0, [pc, #100]	; (8001d8c <MX_ADC1_Init+0x110>)
 8001d26:	f001 fbb7 	bl	8003498 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	4619      	mov	r1, r3
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_ADC1_Init+0x110>)
 8001d46:	f001 fbd3 	bl	80034f0 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4e:	480f      	ldr	r0, [pc, #60]	; (8001d8c <MX_ADC1_Init+0x110>)
 8001d50:	f7ff f9f7 	bl	8001142 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d58:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <MX_ADC1_Init+0x114>)
 8001d62:	f001 fb7b 	bl	800345c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <MX_ADC1_Init+0x118>)
 8001d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_ADC1_Init+0x110>)
 8001d6e:	f7ff f9b2 	bl	80010d6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_144CYCLES);
 8001d72:	2206      	movs	r2, #6
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <MX_ADC1_Init+0x118>)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_ADC1_Init+0x110>)
 8001d78:	f7ff f9f6 	bl	8001168 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3740      	adds	r7, #64	; 0x40
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40012000 	.word	0x40012000
 8001d90:	40012300 	.word	0x40012300
 8001d94:	03200006 	.word	0x03200006

08001d98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	2220      	movs	r2, #32
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f006 fca0 	bl	80086ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f7ff fb59 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff fb56 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dcc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001dde:	2304      	movs	r3, #4
 8001de0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	481f      	ldr	r0, [pc, #124]	; (8001e64 <MX_I2C3_Init+0xcc>)
 8001de8:	f001 fde0 	bl	80039ac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df2:	2302      	movs	r3, #2
 8001df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001e02:	2304      	movs	r3, #4
 8001e04:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4817      	ldr	r0, [pc, #92]	; (8001e68 <MX_I2C3_Init+0xd0>)
 8001e0c:	f001 fdce 	bl	80039ac <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001e10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e14:	f7ff fb46 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001e18:	4814      	ldr	r0, [pc, #80]	; (8001e6c <MX_I2C3_Init+0xd4>)
 8001e1a:	f7ff fa24 	bl	8001266 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_I2C3_Init+0xd4>)
 8001e20:	f7ff f9fe 	bl	8001220 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <MX_I2C3_Init+0xd4>)
 8001e26:	f7ff f9eb 	bl	8001200 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_I2C3_Init+0xd8>)
 8001e30:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001e40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001e46:	f107 0318 	add.w	r3, r7, #24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <MX_I2C3_Init+0xd4>)
 8001e4e:	f001 ff2d 	bl	8003cac <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001e52:	2100      	movs	r1, #0
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_I2C3_Init+0xd4>)
 8001e56:	f7ff f9f3 	bl	8001240 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3738      	adds	r7, #56	; 0x38
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40005c00 	.word	0x40005c00
 8001e70:	000186a0 	.word	0x000186a0

08001e74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b090      	sub	sp, #64	; 0x40
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	2228      	movs	r2, #40	; 0x28
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 fc32 	bl	80086ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001e98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e9c:	f7ff fb02 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f7ff fae7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001ea6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001eaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eac:	2302      	movs	r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4813      	ldr	r0, [pc, #76]	; (8001f14 <MX_SPI2_Init+0xa0>)
 8001ec6:	f001 fd71 	bl	80039ac <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001ece:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ed2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ef6:	f107 0318 	add.w	r3, r7, #24
 8001efa:	4619      	mov	r1, r3
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_SPI2_Init+0xa4>)
 8001efe:	f002 f86c 	bl	8003fda <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001f02:	2100      	movs	r1, #0
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SPI2_Init+0xa4>)
 8001f06:	f7ff fb75 	bl	80015f4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3740      	adds	r7, #64	; 0x40
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40003800 	.word	0x40003800

08001f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fab7 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001f36:	2363      	movs	r3, #99	; 0x63
 8001f38:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f50:	f002 f908 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001f54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f58:	f7ff fb72 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f62:	f7ff fd35 	bl	80019d0 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001f66:	2108      	movs	r1, #8
 8001f68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f6c:	f7ff fb55 	bl	800161a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001f70:	2100      	movs	r1, #0
 8001f72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f76:	f7ff fd53 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001f7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f7e:	f7ff fd62 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff fa76 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001fb8:	2004      	movs	r0, #4
 8001fba:	f7ff fa5b 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MotorR_Encoder1_Pin|MotorR_Encoder2_Pin;
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4827      	ldr	r0, [pc, #156]	; (8002078 <MX_TIM3_Init+0xec>)
 8001fdc:	f001 fce6 	bl	80039ac <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4826      	ldr	r0, [pc, #152]	; (800207c <MX_TIM3_Init+0xf0>)
 8001fe4:	f7ff fd09 	bl	80019fa <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fec:	2101      	movs	r1, #1
 8001fee:	4823      	ldr	r0, [pc, #140]	; (800207c <MX_TIM3_Init+0xf0>)
 8001ff0:	f7ff fbc0 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4820      	ldr	r0, [pc, #128]	; (800207c <MX_TIM3_Init+0xf0>)
 8001ffa:	f7ff fc09 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2101      	movs	r1, #1
 8002002:	481e      	ldr	r0, [pc, #120]	; (800207c <MX_TIM3_Init+0xf0>)
 8002004:	f7ff fc52 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002008:	2200      	movs	r2, #0
 800200a:	2101      	movs	r1, #1
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <MX_TIM3_Init+0xf0>)
 800200e:	f7ff fc9b 	bl	8001948 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002016:	2110      	movs	r1, #16
 8002018:	4818      	ldr	r0, [pc, #96]	; (800207c <MX_TIM3_Init+0xf0>)
 800201a:	f7ff fbab 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800201e:	2200      	movs	r2, #0
 8002020:	2110      	movs	r1, #16
 8002022:	4816      	ldr	r0, [pc, #88]	; (800207c <MX_TIM3_Init+0xf0>)
 8002024:	f7ff fbf4 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002028:	2200      	movs	r2, #0
 800202a:	2110      	movs	r1, #16
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <MX_TIM3_Init+0xf0>)
 800202e:	f7ff fc3d 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002032:	2200      	movs	r2, #0
 8002034:	2110      	movs	r1, #16
 8002036:	4811      	ldr	r0, [pc, #68]	; (800207c <MX_TIM3_Init+0xf0>)
 8002038:	f7ff fc86 	bl	8001948 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 8;
 800203c:	2308      	movs	r3, #8
 800203e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002040:	2300      	movs	r3, #0
 8002042:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <MX_TIM3_Init+0xf0>)
 8002056:	f002 f885 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <MX_TIM3_Init+0xf0>)
 800205c:	f7ff faf0 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002060:	2100      	movs	r1, #0
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_TIM3_Init+0xf0>)
 8002064:	f7ff fcdc 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_TIM3_Init+0xf0>)
 800206a:	f7ff fcec 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	; 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020800 	.word	0x40020800
 800207c:	40000400 	.word	0x40000400

08002080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80020a6:	2004      	movs	r0, #4
 80020a8:	f7ff f9fc 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7ff f9e1 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = MotorL_Encoder1_Pin|MotorL_Encoder2_Pin;
 80020b2:	23c0      	movs	r3, #192	; 0xc0
 80020b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020b6:	2302      	movs	r3, #2
 80020b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <MX_TIM4_Init+0xec>)
 80020d0:	f001 fc6c 	bl	80039ac <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 80020d4:	2101      	movs	r1, #1
 80020d6:	4826      	ldr	r0, [pc, #152]	; (8002170 <MX_TIM4_Init+0xf0>)
 80020d8:	f7ff fc8f 	bl	80019fa <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80020dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020e0:	2101      	movs	r1, #1
 80020e2:	4823      	ldr	r0, [pc, #140]	; (8002170 <MX_TIM4_Init+0xf0>)
 80020e4:	f7ff fb46 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2101      	movs	r1, #1
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <MX_TIM4_Init+0xf0>)
 80020ee:	f7ff fb8f 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2101      	movs	r1, #1
 80020f6:	481e      	ldr	r0, [pc, #120]	; (8002170 <MX_TIM4_Init+0xf0>)
 80020f8:	f7ff fbd8 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	481b      	ldr	r0, [pc, #108]	; (8002170 <MX_TIM4_Init+0xf0>)
 8002102:	f7ff fc21 	bl	8001948 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210a:	2110      	movs	r1, #16
 800210c:	4818      	ldr	r0, [pc, #96]	; (8002170 <MX_TIM4_Init+0xf0>)
 800210e:	f7ff fb31 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002112:	2200      	movs	r2, #0
 8002114:	2110      	movs	r1, #16
 8002116:	4816      	ldr	r0, [pc, #88]	; (8002170 <MX_TIM4_Init+0xf0>)
 8002118:	f7ff fb7a 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800211c:	2200      	movs	r2, #0
 800211e:	2110      	movs	r1, #16
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_TIM4_Init+0xf0>)
 8002122:	f7ff fbc3 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002126:	2200      	movs	r2, #0
 8002128:	2110      	movs	r1, #16
 800212a:	4811      	ldr	r0, [pc, #68]	; (8002170 <MX_TIM4_Init+0xf0>)
 800212c:	f7ff fc0c 	bl	8001948 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 8;
 8002130:	2308      	movs	r3, #8
 8002132:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <MX_TIM4_Init+0xf0>)
 800214a:	f002 f80b 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <MX_TIM4_Init+0xf0>)
 8002150:	f7ff fa76 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002154:	2100      	movs	r1, #0
 8002156:	4806      	ldr	r0, [pc, #24]	; (8002170 <MX_TIM4_Init+0xf0>)
 8002158:	f7ff fc62 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_TIM4_Init+0xf0>)
 800215e:	f7ff fc72 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3730      	adds	r7, #48	; 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40020400 	.word	0x40020400
 8002170:	40000800 	.word	0x40000800

08002174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8002188:	2008      	movs	r0, #8
 800218a:	f7ff f98b 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 800218e:	f7fe ff19 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8002192:	4603      	mov	r3, r0
 8002194:	2202      	movs	r2, #2
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff69 	bl	8001070 <NVIC_EncodePriority>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	2032      	movs	r0, #50	; 0x32
 80021a4:	f7fe ff3a 	bl	800101c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80021a8:	2032      	movs	r0, #50	; 0x32
 80021aa:	f7fe ff19 	bl	8000fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 80021b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80021ba:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	480a      	ldr	r0, [pc, #40]	; (80021f0 <MX_TIM5_Init+0x7c>)
 80021c6:	f001 ffcd 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80021ca:	4809      	ldr	r0, [pc, #36]	; (80021f0 <MX_TIM5_Init+0x7c>)
 80021cc:	f7ff fa38 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021d0:	2100      	movs	r1, #0
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_TIM5_Init+0x7c>)
 80021d4:	f7ff fbfc 	bl	80019d0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80021d8:	2100      	movs	r1, #0
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_TIM5_Init+0x7c>)
 80021dc:	f7ff fc20 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <MX_TIM5_Init+0x7c>)
 80021e2:	f7ff fc30 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000c00 	.word	0x40000c00

080021f4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8002208:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800220c:	f7ff f962 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002210:	f7fe fed8 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8002214:	4603      	mov	r3, r0
 8002216:	2201      	movs	r2, #1
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe ff28 	bl	8001070 <NVIC_EncodePriority>
 8002220:	4603      	mov	r3, r0
 8002222:	4619      	mov	r1, r3
 8002224:	2018      	movs	r0, #24
 8002226:	f7fe fef9 	bl	800101c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800222a:	2018      	movs	r0, #24
 800222c:	f7fe fed8 	bl	8000fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8002238:	f24c 3350 	movw	r3, #50000	; 0xc350
 800223c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4807      	ldr	r0, [pc, #28]	; (8002264 <MX_TIM9_Init+0x70>)
 8002248:	f001 ff8c 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM9_Init+0x70>)
 800224e:	f7ff f9f7 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002252:	2100      	movs	r1, #0
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <MX_TIM9_Init+0x70>)
 8002256:	f7ff fbbb 	bl	80019d0 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40014000 	.word	0x40014000

08002268 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	; 0x50
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800226e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	2220      	movs	r2, #32
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f006 fa30 	bl	80086ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 800229c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022a0:	f7ff f918 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022a8:	2300      	movs	r3, #0
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 49999;
 80022ac:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 80022b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ba:	4619      	mov	r1, r3
 80022bc:	481b      	ldr	r0, [pc, #108]	; (800232c <MX_TIM10_Init+0xc4>)
 80022be:	f001 ff51 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 80022c2:	481a      	ldr	r0, [pc, #104]	; (800232c <MX_TIM10_Init+0xc4>)
 80022c4:	f7ff f9bc 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM10, LL_TIM_CHANNEL_CH1);
 80022c8:	2101      	movs	r1, #1
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <MX_TIM10_Init+0xc4>)
 80022cc:	f7ff fa0e 	bl	80016ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022d0:	2360      	movs	r3, #96	; 0x60
 80022d2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM10, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <MX_TIM10_Init+0xc4>)
 80022ee:	f001 ffb3 	bl	8004258 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM10, LL_TIM_CHANNEL_CH1);
 80022f2:	2101      	movs	r1, #1
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <MX_TIM10_Init+0xc4>)
 80022f6:	f7ff f9b3 	bl	8001660 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7ff f8ba 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM10 GPIO Configuration
  PB8   ------> TIM10_CH1
  */
  GPIO_InitStruct.Pin = MotorL_PWM_Pin;
 8002300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002304:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002306:	2302      	movs	r3, #2
 8002308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002312:	2302      	movs	r3, #2
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002316:	2303      	movs	r3, #3
 8002318:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorL_PWM_GPIO_Port, &GPIO_InitStruct);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_TIM10_Init+0xc8>)
 8002320:	f001 fb44 	bl	80039ac <LL_GPIO_Init>

}
 8002324:	bf00      	nop
 8002326:	3750      	adds	r7, #80	; 0x50
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40014400 	.word	0x40014400
 8002330:	40020400 	.word	0x40020400

08002334 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b094      	sub	sp, #80	; 0x50
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800233a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	2220      	movs	r2, #32
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f006 f9ca 	bl	80086ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8002368:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800236c:	f7ff f8b2 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002374:	2300      	movs	r3, #0
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65534;
 8002378:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800237e:	2300      	movs	r3, #0
 8002380:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8002382:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002386:	4619      	mov	r1, r3
 8002388:	481b      	ldr	r0, [pc, #108]	; (80023f8 <MX_TIM11_Init+0xc4>)
 800238a:	f001 feeb 	bl	8004164 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 800238e:	481a      	ldr	r0, [pc, #104]	; (80023f8 <MX_TIM11_Init+0xc4>)
 8002390:	f7ff f956 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8002394:	2101      	movs	r1, #1
 8002396:	4818      	ldr	r0, [pc, #96]	; (80023f8 <MX_TIM11_Init+0xc4>)
 8002398:	f7ff f9a8 	bl	80016ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800239c:	2360      	movs	r3, #96	; 0x60
 800239e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	461a      	mov	r2, r3
 80023b6:	2101      	movs	r1, #1
 80023b8:	480f      	ldr	r0, [pc, #60]	; (80023f8 <MX_TIM11_Init+0xc4>)
 80023ba:	f001 ff4d 	bl	8004258 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80023be:	2101      	movs	r1, #1
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <MX_TIM11_Init+0xc4>)
 80023c2:	f7ff f94d 	bl	8001660 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7ff f854 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM11 GPIO Configuration
  PB9   ------> TIM11_CH1
  */
  GPIO_InitStruct.Pin = MotorR_PWM_Pin;
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023d2:	2302      	movs	r3, #2
 80023d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80023de:	2302      	movs	r3, #2
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80023e2:	2303      	movs	r3, #3
 80023e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorR_PWM_GPIO_Port, &GPIO_InitStruct);
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4804      	ldr	r0, [pc, #16]	; (80023fc <MX_TIM11_Init+0xc8>)
 80023ec:	f001 fade 	bl	80039ac <LL_GPIO_Init>

}
 80023f0:	bf00      	nop
 80023f2:	3750      	adds	r7, #80	; 0x50
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40014800 	.word	0x40014800
 80023fc:	40020400 	.word	0x40020400

08002400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800242a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800242e:	f7ff f839 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff f81e 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002438:	230c      	movs	r3, #12
 800243a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800243c:	2302      	movs	r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800244c:	2307      	movs	r3, #7
 800244e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4810      	ldr	r0, [pc, #64]	; (8002498 <MX_USART2_UART_Init+0x98>)
 8002456:	f001 faa9 	bl	80039ac <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800245a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800245e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800246c:	230c      	movs	r3, #12
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4619      	mov	r1, r3
 800247e:	4807      	ldr	r0, [pc, #28]	; (800249c <MX_USART2_UART_Init+0x9c>)
 8002480:	f002 fb20 	bl	8004ac4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART2_UART_Init+0x9c>)
 8002486:	f7ff fafe 	bl	8001a86 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_USART2_UART_Init+0x9c>)
 800248c:	f7ff faeb 	bl	8001a66 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3738      	adds	r7, #56	; 0x38
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40020000 	.word	0x40020000
 800249c:	40004400 	.word	0x40004400

080024a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80024a6:	f107 0318 	add.w	r3, r7, #24
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80024c0:	2004      	movs	r0, #4
 80024c2:	f7fe ffd7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80024c6:	2080      	movs	r0, #128	; 0x80
 80024c8:	f7fe ffd4 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7fe ffd1 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7fe ffce 	bl	8001474 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 80024d8:	213f      	movs	r1, #63	; 0x3f
 80024da:	483a      	ldr	r0, [pc, #232]	; (80025c4 <MX_GPIO_Init+0x124>)
 80024dc:	f7ff fb47 	bl	8001b6e <LL_GPIO_ResetOutputPin>
                          |MotorR_1_Pin|MotorR_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 80024e0:	2130      	movs	r1, #48	; 0x30
 80024e2:	4839      	ldr	r0, [pc, #228]	; (80025c8 <MX_GPIO_Init+0x128>)
 80024e4:	f7ff fb43 	bl	8001b6e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin);
 80024e8:	2134      	movs	r1, #52	; 0x34
 80024ea:	4838      	ldr	r0, [pc, #224]	; (80025cc <MX_GPIO_Init+0x12c>)
 80024ec:	f7ff fb3f 	bl	8001b6e <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80024f0:	4937      	ldr	r1, [pc, #220]	; (80025d0 <MX_GPIO_Init+0x130>)
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7ff f806 	bl	8001504 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80024f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80024fe:	2301      	movs	r3, #1
 8002500:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002502:	2300      	movs	r3, #0
 8002504:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002506:	2302      	movs	r3, #2
 8002508:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800250a:	f107 0318 	add.w	r3, r7, #24
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f8c8 	bl	80036a4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251a:	482a      	ldr	r0, [pc, #168]	; (80025c4 <MX_GPIO_Init+0x124>)
 800251c:	f7ff faf8 	bl	8001b10 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002526:	4827      	ldr	r0, [pc, #156]	; (80025c4 <MX_GPIO_Init+0x124>)
 8002528:	f7ff fac3 	bl	8001ab2 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 800252c:	233f      	movs	r3, #63	; 0x3f
 800252e:	603b      	str	r3, [r7, #0]
                          |MotorR_1_Pin|MotorR_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002530:	2301      	movs	r3, #1
 8002532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800253c:	2302      	movs	r3, #2
 800253e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002540:	463b      	mov	r3, r7
 8002542:	4619      	mov	r1, r3
 8002544:	481f      	ldr	r0, [pc, #124]	; (80025c4 <MX_GPIO_Init+0x124>)
 8002546:	f001 fa31 	bl	80039ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800254a:	2310      	movs	r3, #16
 800254c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800254e:	2301      	movs	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800255e:	463b      	mov	r3, r7
 8002560:	4619      	mov	r1, r3
 8002562:	4819      	ldr	r0, [pc, #100]	; (80025c8 <MX_GPIO_Init+0x128>)
 8002564:	f001 fa22 	bl	80039ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002568:	2320      	movs	r3, #32
 800256a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800256c:	2301      	movs	r3, #1
 800256e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4811      	ldr	r0, [pc, #68]	; (80025c8 <MX_GPIO_Init+0x128>)
 8002582:	f001 fa13 	bl	80039ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin;
 8002586:	2334      	movs	r3, #52	; 0x34
 8002588:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800258a:	2301      	movs	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002596:	2302      	movs	r3, #2
 8002598:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	463b      	mov	r3, r7
 800259c:	4619      	mov	r1, r3
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <MX_GPIO_Init+0x12c>)
 80025a0:	f001 fa04 	bl	80039ac <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin;
 80025a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	463b      	mov	r3, r7
 80025b4:	4619      	mov	r1, r3
 80025b6:	4803      	ldr	r0, [pc, #12]	; (80025c4 <MX_GPIO_Init+0x124>)
 80025b8:	f001 f9f8 	bl	80039ac <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	00f00003 	.word	0x00f00003

080025d4 <LL_ADC_REG_SetSequencerRanks>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	332c      	adds	r3, #44	; 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	617a      	str	r2, [r7, #20]
  return result;
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	40d3      	lsrs	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	211f      	movs	r1, #31
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f003 011f 	and.w	r1, r3, #31
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	431a      	orrs	r2, r3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	b29b      	uxth	r3, r3
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f06f 0202 	mvn.w	r2, #2
 80026ae:	601a      	str	r2, [r3, #0]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f06f 0201 	mvn.w	r2, #1
 80026ca:	611a      	str	r2, [r3, #16]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <Custom_GPIO_Set+0x22>
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026f8:	e000      	b.n	80026fc <Custom_GPIO_Set+0x24>
 80026fa:	2100      	movs	r1, #0
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	400b      	ands	r3, r1
 8002700:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <ADC_Read>:
void	Sensor_Stop();
void	Sensor_Calibration();



__STATIC_INLINE uint16_t	ADC_Read() {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800271a:	b672      	cpsid	i
}
 800271c:	bf00      	nop
	uint16_t adcValue;
	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <ADC_Read+0x44>)
 8002720:	f7ff ffbe 	bl	80026a0 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <ADC_Read+0x44>)
 8002726:	f7ff ff8b 	bl	8002640 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 800272a:	bf00      	nop
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <ADC_Read+0x44>)
 800272e:	f7ff ffa4 	bl	800267a <LL_ADC_IsActiveFlag_EOCS>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f9      	beq.n	800272c <ADC_Read+0x18>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8002738:	4807      	ldr	r0, [pc, #28]	; (8002758 <ADC_Read+0x44>)
 800273a:	f7ff ff91 	bl	8002660 <LL_ADC_REG_ReadConversionData12>
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
	LL_ADC_ClearFlag_EOCS(ADC1);
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <ADC_Read+0x44>)
 8002744:	f7ff ffac 	bl	80026a0 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 8002748:	b662      	cpsie	i
}
 800274a:	bf00      	nop
	__enable_irq();
	return adcValue;
 800274c:	88fb      	ldrh	r3, [r7, #6]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40012000 	.word	0x40012000

0800275c <Sensor_ADC_Midian_Filter>:




__STATIC_INLINE uint8_t	Sensor_ADC_Midian_Filter() {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
	uint16_t sensorMidian[3];

	sensorMidian[0] = ADC_Read();
 8002762:	f7ff ffd7 	bl	8002714 <ADC_Read>
 8002766:	4603      	mov	r3, r0
 8002768:	803b      	strh	r3, [r7, #0]
	sensorMidian[1] = ADC_Read();
 800276a:	f7ff ffd3 	bl	8002714 <ADC_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	807b      	strh	r3, [r7, #2]
	sensorMidian[2] = ADC_Read();
 8002772:	f7ff ffcf 	bl	8002714 <ADC_Read>
 8002776:	4603      	mov	r3, r0
 8002778:	80bb      	strh	r3, [r7, #4]

	if (sensorMidian[0] > sensorMidian[1]) {
 800277a:	883a      	ldrh	r2, [r7, #0]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	429a      	cmp	r2, r3
 8002780:	d90e      	bls.n	80027a0 <Sensor_ADC_Midian_Filter+0x44>
		INT_SWAP(sensorMidian[0], sensorMidian[1]);
 8002782:	883a      	ldrh	r2, [r7, #0]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4053      	eors	r3, r2
 8002788:	b29b      	uxth	r3, r3
 800278a:	803b      	strh	r3, [r7, #0]
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	883b      	ldrh	r3, [r7, #0]
 8002790:	4053      	eors	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	807b      	strh	r3, [r7, #2]
 8002796:	883a      	ldrh	r2, [r7, #0]
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	4053      	eors	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	803b      	strh	r3, [r7, #0]
	}
	if (sensorMidian[1] > sensorMidian[2]) {
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d90e      	bls.n	80027c6 <Sensor_ADC_Midian_Filter+0x6a>
		INT_SWAP(sensorMidian[1], sensorMidian[2]);
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	4053      	eors	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	88ba      	ldrh	r2, [r7, #4]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4053      	eors	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	80bb      	strh	r3, [r7, #4]
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	88bb      	ldrh	r3, [r7, #4]
 80027c0:	4053      	eors	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	807b      	strh	r3, [r7, #2]
	}

	return sensorMidian[1] >> 4;
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <Make_Sensor_Raw_Vals>:





__STATIC_INLINE void	Make_Sensor_Raw_Vals(uint8_t idx) {
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <Make_Sensor_Raw_Vals+0x4c>)
 80027e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e8:	480f      	ldr	r0, [pc, #60]	; (8002828 <Make_Sensor_Raw_Vals+0x50>)
 80027ea:	f7ff fef3 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx] = Sensor_ADC_Midian_Filter();
 80027ee:	79fc      	ldrb	r4, [r7, #7]
 80027f0:	f7ff ffb4 	bl	800275c <Sensor_ADC_Midian_Filter>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <Make_Sensor_Raw_Vals+0x54>)
 80027fa:	551a      	strb	r2, [r3, r4]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <Make_Sensor_Raw_Vals+0x58>)
 80027fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <Make_Sensor_Raw_Vals+0x50>)
 8002804:	f7ff fee6 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx + 8] = Sensor_ADC_Midian_Filter();
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f103 0408 	add.w	r4, r3, #8
 800280e:	f7ff ffa5 	bl	800275c <Sensor_ADC_Midian_Filter>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <Make_Sensor_Raw_Vals+0x54>)
 8002818:	551a      	strb	r2, [r3, r4]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	03200006 	.word	0x03200006
 8002828:	40012000 	.word	0x40012000
 800282c:	20002e8c 	.word	0x20002e8c
 8002830:	03500007 	.word	0x03500007

08002834 <Make_Sensor_Norm_Vals>:




// normalized value 계산
__STATIC_INLINE void	Make_Sensor_Norm_Vals(uint8_t idx) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
 * 		& ( (sensorRawVals[idx] < blackMaxs[idx]) - 0x01 )  ) \
 * 		| ( (sensorRawVals[idx] < whiteMaxs[idx]) - 0x01 );
*/


	if (sensorRawVals[idx] < blackMaxs[idx])
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <Make_Sensor_Norm_Vals+0x80>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	491b      	ldr	r1, [pc, #108]	; (80028b8 <Make_Sensor_Norm_Vals+0x84>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	429a      	cmp	r2, r3
 8002850:	d204      	bcs.n	800285c <Make_Sensor_Norm_Vals+0x28>
		sensorNormVals[idx] = 0;
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <Make_Sensor_Norm_Vals+0x88>)
 8002856:	2100      	movs	r1, #0
 8002858:	54d1      	strb	r1, [r2, r3]
	else if (sensorRawVals[idx] > whiteMaxs[idx])
		sensorNormVals[idx] = 255;
	else
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);

}
 800285a:	e025      	b.n	80028a8 <Make_Sensor_Norm_Vals+0x74>
	else if (sensorRawVals[idx] > whiteMaxs[idx])
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <Make_Sensor_Norm_Vals+0x80>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	4916      	ldr	r1, [pc, #88]	; (80028c0 <Make_Sensor_Norm_Vals+0x8c>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	429a      	cmp	r2, r3
 800286e:	d904      	bls.n	800287a <Make_Sensor_Norm_Vals+0x46>
		sensorNormVals[idx] = 255;
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <Make_Sensor_Norm_Vals+0x88>)
 8002874:	21ff      	movs	r1, #255	; 0xff
 8002876:	54d1      	strb	r1, [r2, r3]
}
 8002878:	e016      	b.n	80028a8 <Make_Sensor_Norm_Vals+0x74>
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <Make_Sensor_Norm_Vals+0x80>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <Make_Sensor_Norm_Vals+0x84>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	1aca      	subs	r2, r1, r3
 800288e:	4613      	mov	r3, r2
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	490b      	ldr	r1, [pc, #44]	; (80028c4 <Make_Sensor_Norm_Vals+0x90>)
 8002898:	5c8a      	ldrb	r2, [r1, r2]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	fb93 f2f2 	sdiv	r2, r3, r2
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	b2d1      	uxtb	r1, r2
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <Make_Sensor_Norm_Vals+0x88>)
 80028a6:	54d1      	strb	r1, [r2, r3]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	20002e8c 	.word	0x20002e8c
 80028b8:	20002ecc 	.word	0x20002ecc
 80028bc:	20002e9c 	.word	0x20002e9c
 80028c0:	20002ebc 	.word	0x20002ebc
 80028c4:	20002eac 	.word	0x20002eac

080028c8 <Make_Sensor_State>:



// sensor state 계산
__STATIC_INLINE void	Make_Sensor_State(uint8_t idx) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]

	state = ( state & ~(0x01 << idx) ) | ( (sensorNormVals[idx] > threshold ? 1 : 0) << idx );
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2201      	movs	r2, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	b21b      	sxth	r3, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	b21a      	sxth	r2, r3
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <Make_Sensor_State+0x5c>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	490e      	ldr	r1, [pc, #56]	; (8002928 <Make_Sensor_State+0x60>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	b2d9      	uxtb	r1, r3
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <Make_Sensor_State+0x64>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4299      	cmp	r1, r3
 80028fc:	bf8c      	ite	hi
 80028fe:	2301      	movhi	r3, #1
 8002900:	2300      	movls	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21b      	sxth	r3, r3
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <Make_Sensor_State+0x5c>)
 8002916:	801a      	strh	r2, [r3, #0]
//		state |= 0x01 << (IR_SENSOR_LEN - 1 - idx);
//	}
//	else {
//		state &= ~(0x01 << (IR_SENSOR_LEN - 1 - idx));
//	}
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20002edc 	.word	0x20002edc
 8002928:	20002e9c 	.word	0x20002e9c
 800292c:	2000005c 	.word	0x2000005c

08002930 <Make_Voltage_Raw_Val>:



__STATIC_INLINE float	Make_Voltage_Raw_Val() {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <Make_Voltage_Raw_Val+0x38>)
 8002936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800293a:	480c      	ldr	r0, [pc, #48]	; (800296c <Make_Voltage_Raw_Val+0x3c>)
 800293c:	f7ff fe4a 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
	return 3.3f * 21.f * (float)ADC_Read() / 4095.f;
 8002940:	f7ff fee8 	bl	8002714 <ADC_Read>
 8002944:	4603      	mov	r3, r0
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002970 <Make_Voltage_Raw_Val+0x40>
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002956:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002974 <Make_Voltage_Raw_Val+0x44>
 800295a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800295e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	bd80      	pop	{r7, pc}
 8002968:	03800008 	.word	0x03800008
 800296c:	40012000 	.word	0x40012000
 8002970:	428a9999 	.word	0x428a9999
 8002974:	457ff000 	.word	0x457ff000

08002978 <Make_Battery_Voltage>:



__STATIC_INLINE void	Make_Battery_Voltage() {
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
	static uint8_t	sensingVoltageIdx = 0;
	static float	sensingVoltageMidian[3];


	switch(sensingVoltageIdx) {
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <Make_Battery_Voltage+0xd8>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b02      	cmp	r3, #2
 8002984:	dc02      	bgt.n	800298c <Make_Battery_Voltage+0x14>
 8002986:	2b00      	cmp	r3, #0
 8002988:	da03      	bge.n	8002992 <Make_Battery_Voltage+0x1a>
			sensingVoltage = sensingVoltageMidian[1];
			sensingVoltageIdx = 0;

			break;
	}
}
 800298a:	e05c      	b.n	8002a46 <Make_Battery_Voltage+0xce>
	switch(sensingVoltageIdx) {
 800298c:	2b03      	cmp	r3, #3
 800298e:	d013      	beq.n	80029b8 <Make_Battery_Voltage+0x40>
}
 8002990:	e059      	b.n	8002a46 <Make_Battery_Voltage+0xce>
			sensingVoltageMidian[sensingVoltageIdx] = Make_Voltage_Raw_Val();
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <Make_Battery_Voltage+0xd8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461c      	mov	r4, r3
 8002998:	f7ff ffca 	bl	8002930 <Make_Voltage_Raw_Val>
 800299c:	eef0 7a40 	vmov.f32	s15, s0
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029a2:	00a3      	lsls	r3, r4, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	edc3 7a00 	vstr	s15, [r3]
			sensingVoltageIdx++;
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <Make_Battery_Voltage+0xd8>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <Make_Battery_Voltage+0xd8>)
 80029b4:	701a      	strb	r2, [r3, #0]
			break;
 80029b6:	e046      	b.n	8002a46 <Make_Battery_Voltage+0xce>
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	dd09      	ble.n	80029e2 <Make_Battery_Voltage+0x6a>
				FLOAT_SWAP(tmp, sensingVoltageMidian[0], sensingVoltageMidian[1]);
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6053      	str	r3, [r2, #4]
			if (sensingVoltageMidian[1] > sensingVoltageMidian[2]) {
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	dd09      	ble.n	8002a0c <Make_Battery_Voltage+0x94>
				FLOAT_SWAP(tmp, sensingVoltageMidian[1], sensingVoltageMidian[2]);
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a04:	6053      	str	r3, [r2, #4]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6093      	str	r3, [r2, #8]
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a20:	dd09      	ble.n	8002a36 <Make_Battery_Voltage+0xbe>
				FLOAT_SWAP(tmp, sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6053      	str	r3, [r2, #4]
			sensingVoltage = sensingVoltageMidian[1];
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <Make_Battery_Voltage+0xdc>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <Make_Battery_Voltage+0xe0>)
 8002a3c:	6013      	str	r3, [r2, #0]
			sensingVoltageIdx = 0;
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <Make_Battery_Voltage+0xd8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
			break;
 8002a44:	bf00      	nop
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000289 	.word	0x20000289
 8002a54:	2000028c 	.word	0x2000028c
 8002a58:	20002ee0 	.word	0x20002ee0

08002a5c <Position_Windowing>:



__STATIC_INLINE void	Position_Windowing() {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0

	int		window = (positionVal + 30000) / 4000;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <Position_Windowing+0x50>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002a6a:	3330      	adds	r3, #48	; 0x30
 8002a6c:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <Position_Windowing+0x54>)
 8002a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a72:	1212      	asrs	r2, r2, #8
 8002a74:	17db      	asrs	r3, r3, #31
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	607b      	str	r3, [r7, #4]

	positionIdxMax = GET_MIN(window + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b0d      	cmp	r3, #13
 8002a7e:	bfa8      	it	ge
 8002a80:	230d      	movge	r3, #13
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3302      	adds	r3, #2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <Position_Windowing+0x58>)
 8002a8a:	701a      	strb	r2, [r3, #0]
	positionIdxMin = GET_MAX(window - WINDOW_SIZE_HALF + 1, 0);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	bfb8      	it	lt
 8002a92:	2301      	movlt	r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <Position_Windowing+0x5c>)
 8002a9c:	701a      	strb	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20001444 	.word	0x20001444
 8002ab0:	10624dd3 	.word	0x10624dd3
 8002ab4:	20000020 	.word	0x20000020
 8002ab8:	20000021 	.word	0x20000021

08002abc <Sum_Position_Val>:





__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]


	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <Sum_Position_Val+0x60>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	79fa      	ldrb	r2, [r7, #7]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d31e      	bcc.n	8002b10 <Sum_Position_Val+0x54>
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <Sum_Position_Val+0x64>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d818      	bhi.n	8002b10 <Sum_Position_Val+0x54>

		positionSum += positionTable[idx] * sensorNormVals[idx];
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <Sum_Position_Val+0x68>)
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	490f      	ldr	r1, [pc, #60]	; (8002b28 <Sum_Position_Val+0x6c>)
 8002aea:	5c8a      	ldrb	r2, [r1, r2]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <Sum_Position_Val+0x70>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <Sum_Position_Val+0x70>)
 8002afa:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <Sum_Position_Val+0x6c>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <Sum_Position_Val+0x74>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <Sum_Position_Val+0x74>)
 8002b0e:	6013      	str	r3, [r2, #0]
	}
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	20000021 	.word	0x20000021
 8002b20:	20000020 	.word	0x20000020
 8002b24:	20000060 	.word	0x20000060
 8002b28:	20002e9c 	.word	0x20002e9c
 8002b2c:	2000144c 	.word	0x2000144c
 8002b30:	20001450 	.word	0x20001450

08002b34 <Make_Position_Val>:



__STATIC_INLINE void	Make_Position_Val() {
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

		positionVal = positionSum / (sensorNormValsSum + 1);
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <Make_Position_Val+0x2c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <Make_Position_Val+0x30>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <Make_Position_Val+0x34>)
 8002b48:	6013      	str	r3, [r2, #0]

		positionSum = 0;
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <Make_Position_Val+0x2c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <Make_Position_Val+0x30>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	2000144c 	.word	0x2000144c
 8002b64:	20001450 	.word	0x20001450
 8002b68:	20001444 	.word	0x20001444

08002b6c <Sensor_TIM5_IRQ>:



__STATIC_INLINE void	Sensor_TIM5_IRQ() {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	static uint8_t	tim5Idx = 0;

	// 다음 IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | tim5Idx | 0x08;
 8002b70:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <Sensor_TIM5_IRQ+0x11c>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f023 0307 	bic.w	r3, r3, #7
 8002b78:	4a44      	ldr	r2, [pc, #272]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <Sensor_TIM5_IRQ+0x11c>)
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	6153      	str	r3, [r2, #20]

	Make_Sensor_Raw_Vals(tim5Idx);
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fe24 	bl	80027d8 <Make_Sensor_Raw_Vals>

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <Sensor_TIM5_IRQ+0x11c>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4a3c      	ldr	r2, [pc, #240]	; (8002c88 <Sensor_TIM5_IRQ+0x11c>)
 8002b96:	f023 0308 	bic.w	r3, r3, #8
 8002b9a:	6153      	str	r3, [r2, #20]

	Make_Sensor_Norm_Vals(tim5Idx);
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe47 	bl	8002834 <Make_Sensor_Norm_Vals>
	Make_Sensor_Norm_Vals(tim5Idx + 8);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	3308      	adds	r3, #8
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe40 	bl	8002834 <Make_Sensor_Norm_Vals>

	Make_Sensor_State(tim5Idx);
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe85 	bl	80028c8 <Make_Sensor_State>
	Make_Sensor_State(tim5Idx + 8);
 8002bbe:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe7e 	bl	80028c8 <Make_Sensor_State>



	switch(tim5Idx) {
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	d84d      	bhi.n	8002c70 <Sensor_TIM5_IRQ+0x104>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <Sensor_TIM5_IRQ+0x70>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bfd 	.word	0x08002bfd
 8002be0:	08002c1b 	.word	0x08002c1b
 8002be4:	08002c1b 	.word	0x08002c1b
 8002be8:	08002c35 	.word	0x08002c35
 8002bec:	08002c35 	.word	0x08002c35
 8002bf0:	08002c35 	.word	0x08002c35
 8002bf4:	08002c35 	.word	0x08002c35
 8002bf8:	08002c53 	.word	0x08002c53
		case 0:
			Position_Windowing();
 8002bfc:	f7ff ff2e 	bl	8002a5c <Position_Windowing>
			Sum_Position_Val(tim5Idx);
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff59 	bl	8002abc <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff52 	bl	8002abc <Sum_Position_Val>

			break;
 8002c18:	e02a      	b.n	8002c70 <Sensor_TIM5_IRQ+0x104>


		case 1:
		case 2:
			Sum_Position_Val(tim5Idx);
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff4c 	bl	8002abc <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	3308      	adds	r3, #8
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff45 	bl	8002abc <Sum_Position_Val>

			break;
 8002c32:	e01d      	b.n	8002c70 <Sensor_TIM5_IRQ+0x104>

		case 3:
		case 4:
		case 5:
		case 6:
			Make_Battery_Voltage();
 8002c34:	f7ff fea0 	bl	8002978 <Make_Battery_Voltage>
			Sum_Position_Val(tim5Idx);
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff3d 	bl	8002abc <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3308      	adds	r3, #8
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff36 	bl	8002abc <Sum_Position_Val>

			break;
 8002c50:	e00e      	b.n	8002c70 <Sensor_TIM5_IRQ+0x104>


		case 7:
			Sum_Position_Val(tim5Idx);
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff30 	bl	8002abc <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3308      	adds	r3, #8
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff29 	bl	8002abc <Sum_Position_Val>
			Make_Position_Val();
 8002c6a:	f7ff ff63 	bl	8002b34 <Make_Position_Val>

			break;
 8002c6e:	bf00      	nop


	}

	// 인덱스 증가
	tim5Idx = (tim5Idx + 1) & 0x07;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <Sensor_TIM5_IRQ+0x120>)
 8002c80:	701a      	strb	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	20000288 	.word	0x20000288

08002c90 <Make_Target_Encoder_Value_L>:
#define ENCODER_VALUE_ADJUST_THRESHOLD_MIN	16384




__STATIC_INLINE float	Make_Target_Encoder_Value_L(float speed) {
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	ed87 0a01 	vstr	s0, [r7, #4]
//	22.61946710cm 를 가려면 작은 톱니가 4.05588235 바퀴를 가야함
//
//	1cm 를 가려면 0.17943939667 바퀴 가야함
//	100cm 를 가려면 17.943939667 바퀴 가야함

	targetEncoderValueL += 256 * 17.944 * speed / 2000;
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <Make_Target_Encoder_Value_L+0x78>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc5a 	bl	8000558 <__aeabi_f2d>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fc55 	bl	8000558 <__aeabi_f2d>
 8002cae:	a314      	add	r3, pc, #80	; (adr r3, 8002d00 <Make_Target_Encoder_Value_L+0x70>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fca8 	bl	8000608 <__aeabi_dmul>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <Make_Target_Encoder_Value_L+0x7c>)
 8002cc6:	f7fd fdc9 	bl	800085c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd fae3 	bl	800029c <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ff6b 	bl	8000bb8 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <Make_Target_Encoder_Value_L+0x78>)
 8002ce6:	6013      	str	r3, [r2, #0]

	return targetEncoderValueL;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <Make_Target_Encoder_Value_L+0x78>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	ee07 3a90 	vmov	s15, r3
}
 8002cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	f3af 8000 	nop.w
 8002d00:	fbe76c8b 	.word	0xfbe76c8b
 8002d04:	40b1f1a9 	.word	0x40b1f1a9
 8002d08:	2000143c 	.word	0x2000143c
 8002d0c:	409f4000 	.word	0x409f4000

08002d10 <Get_Current_Encoder_Value_L>:


__STATIC_INLINE int32_t	Get_Current_Encoder_Value_L() {
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

	return TIM4->CNT;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <Get_Current_Encoder_Value_L+0x14>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40000800 	.word	0x40000800

08002d28 <Get_Duty_Ratio_L>:


__STATIC_INLINE float	Get_Duty_Ratio_L(int32_t errorL) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

	float	errorDiffL = errorL - prevErrorL;
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <Get_Duty_Ratio_L+0x74>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d40:	edc7 7a05 	vstr	s15, [r7, #20]
	float	voltageL = pCoef * errorL + dCoef * errorDiffL;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <Get_Duty_Ratio_L+0x78>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <Get_Duty_Ratio_L+0x7c>)
 8002d5a:	edd3 6a00 	vldr	s13, [r3]
 8002d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	edc7 7a04 	vstr	s15, [r7, #16]
	float	dutyRatioL = voltageL / sensingVoltage;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <Get_Duty_Ratio_L+0x80>)
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	edd7 6a04 	vldr	s13, [r7, #16]
 8002d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d7c:	edc7 7a03 	vstr	s15, [r7, #12]

	prevErrorL = errorL;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <Get_Duty_Ratio_L+0x74>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]

	return dutyRatioL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ee07 3a90 	vmov	s15, r3
}
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20001434 	.word	0x20001434
 8002da0:	20000004 	.word	0x20000004
 8002da4:	20000008 	.word	0x20000008
 8002da8:	20002ee0 	.word	0x20002ee0

08002dac <Get_Level_CCR_L>:


__STATIC_INLINE uint32_t	Get_Level_CCR_L(float dutyRatioL) {
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	ed87 0a01 	vstr	s0, [r7, #4]

	uint32_t	levelCCR_L = ABS(dutyRatioL * levelMaxCCR_L);
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <Get_Level_CCR_L+0x84>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d50e      	bpl.n	8002df2 <Get_Level_CCR_L+0x46>
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <Get_Level_CCR_L+0x84>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de8:	eef1 7a67 	vneg.f32	s15, s15
 8002dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df0:	e00b      	b.n	8002e0a <Get_Level_CCR_L+0x5e>
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <Get_Level_CCR_L+0x84>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	edc7 7a03 	vstr	s15, [r7, #12]

	if (levelCCR_L > levelMaxCCR_L) {
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <Get_Level_CCR_L+0x84>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d902      	bls.n	8002e20 <Get_Level_CCR_L+0x74>
		levelCCR_L = levelMaxCCR_L;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <Get_Level_CCR_L+0x84>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
	}

	return levelCCR_L;
 8002e20:	68fb      	ldr	r3, [r7, #12]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000142c 	.word	0x2000142c

08002e34 <Motor_CCR_Control>:





__STATIC_INLINE void	Motor_CCR_Control(uint32_t levelCCR_L, uint32_t levelCCR_R) {
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

	TIM10->CCR1 = levelCCR_L;
 8002e3e:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <Motor_CCR_Control+0x24>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6353      	str	r3, [r2, #52]	; 0x34
	TIM11->CCR1 = levelCCR_R;
 8002e44:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <Motor_CCR_Control+0x28>)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <Motor_Direction_Control>:


__STATIC_INLINE void	Motor_Direction_Control(float dutyRatioL, float dutyRatioR) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e6a:	edc7 0a00 	vstr	s1, [r7]
	Custom_GPIO_Set(GPIOB, 1 << 4, dutyRatioL > 0 ? 1 : 0); // PB4
 8002e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	bfcc      	ite	gt
 8002e7c:	2301      	movgt	r3, #1
 8002e7e:	2300      	movle	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	2110      	movs	r1, #16
 8002e86:	481a      	ldr	r0, [pc, #104]	; (8002ef0 <Motor_Direction_Control+0x90>)
 8002e88:	f7ff fc26 	bl	80026d8 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOB, 1 << 5, dutyRatioL < 0 ? 1 : 0); // PB5
 8002e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	bf4c      	ite	mi
 8002e9a:	2301      	movmi	r3, #1
 8002e9c:	2300      	movpl	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	4812      	ldr	r0, [pc, #72]	; (8002ef0 <Motor_Direction_Control+0x90>)
 8002ea6:	f7ff fc17 	bl	80026d8 <Custom_GPIO_Set>

	Custom_GPIO_Set(GPIOC, 1 << 4, dutyRatioR < 0 ? 1 : 0); // PC4
 8002eaa:	edd7 7a00 	vldr	s15, [r7]
 8002eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	bf4c      	ite	mi
 8002eb8:	2301      	movmi	r3, #1
 8002eba:	2300      	movpl	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <Motor_Direction_Control+0x94>)
 8002ec4:	f7ff fc08 	bl	80026d8 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOC, 1 << 5, dutyRatioR > 0 ? 1 : 0); // PC5
 8002ec8:	edd7 7a00 	vldr	s15, [r7]
 8002ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	bfcc      	ite	gt
 8002ed6:	2301      	movgt	r3, #1
 8002ed8:	2300      	movle	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	2120      	movs	r1, #32
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <Motor_Direction_Control+0x94>)
 8002ee2:	f7ff fbf9 	bl	80026d8 <Custom_GPIO_Set>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800

08002ef8 <Adjust_Encder_Values_L>:





__STATIC_INLINE	void	Adjust_Encder_Values_L() {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0

	uint32_t	curEncoderValueL = Get_Current_Encoder_Value_L();
 8002efe:	f7ff ff07 	bl	8002d10 <Get_Current_Encoder_Value_L>
 8002f02:	4603      	mov	r3, r0
 8002f04:	60fb      	str	r3, [r7, #12]

	if (curEncoderValueL > ENCODER_VALUE_ADJUST_THRESHOLD_MAX) {
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f0c:	d917      	bls.n	8002f3e <Adjust_Encder_Values_L+0x46>

		int32_t	adjustValue = curEncoderValueL - ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f14:	607b      	str	r3, [r7, #4]
		targetEncoderValueL -= adjustValue;
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <Adjust_Encder_Values_L+0x84>)
 8002f18:	ed93 7a00 	vldr	s14, [r3]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <Adjust_Encder_Values_L+0x84>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
		TIM4->CNT -= adjustValue;
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <Adjust_Encder_Values_L+0x88>)
 8002f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4912      	ldr	r1, [pc, #72]	; (8002f80 <Adjust_Encder_Values_L+0x88>)
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	624b      	str	r3, [r1, #36]	; 0x24
	else if (curEncoderValueL < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueL;
		targetEncoderValueL -= adjustValue;
		TIM4->CNT -= adjustValue;
	}
}
 8002f3c:	e01a      	b.n	8002f74 <Adjust_Encder_Values_L+0x7c>
	else if (curEncoderValueL < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f44:	d216      	bcs.n	8002f74 <Adjust_Encder_Values_L+0x7c>
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8002f4c:	60bb      	str	r3, [r7, #8]
		targetEncoderValueL -= adjustValue;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <Adjust_Encder_Values_L+0x84>)
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <Adjust_Encder_Values_L+0x84>)
 8002f64:	edc3 7a00 	vstr	s15, [r3]
		TIM4->CNT -= adjustValue;
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <Adjust_Encder_Values_L+0x88>)
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4904      	ldr	r1, [pc, #16]	; (8002f80 <Adjust_Encder_Values_L+0x88>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000143c 	.word	0x2000143c
 8002f80:	40000800 	.word	0x40000800

08002f84 <Motor_Speed_Control>:




__STATIC_INLINE void	Motor_Speed_Control(float speedL, float speedR) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	ed2d 8b02 	vpush	{d8}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f92:	edc7 0a00 	vstr	s1, [r7]

	int32_t	errorL = Make_Target_Encoder_Value_L(speedL) - Get_Current_Encoder_Value_L();
 8002f96:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f9a:	f7ff fe79 	bl	8002c90 <Make_Target_Encoder_Value_L>
 8002f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8002fa2:	f7ff feb5 	bl	8002d10 <Get_Current_Encoder_Value_L>
 8002fa6:	ee07 0a90 	vmov	s15, r0
 8002faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb6:	ee17 3a90 	vmov	r3, s15
 8002fba:	617b      	str	r3, [r7, #20]
//	int32_t errorR = Make_Target_Encoder_Value_R(speedR) - Get_Current_Encoder_Value_R();

	float	dutyRatioL = Get_Duty_Ratio_L(errorL);
 8002fbc:	6978      	ldr	r0, [r7, #20]
 8002fbe:	f7ff feb3 	bl	8002d28 <Get_Duty_Ratio_L>
 8002fc2:	ed87 0a04 	vstr	s0, [r7, #16]
//	float	dutyRatioR = Get_Duty_Ratio_R(errorR);

	uint32_t levelCCR_L = Get_Level_CCR_L(dutyRatioL);
 8002fc6:	ed97 0a04 	vldr	s0, [r7, #16]
 8002fca:	f7ff feef 	bl	8002dac <Get_Level_CCR_L>
 8002fce:	60f8      	str	r0, [r7, #12]
//	uint32_t levelCCR_R = Get_Level_CCR_R(dutyRatioR);

	Motor_CCR_Control(levelCCR_L, levelCCR_L);	// 추후 L을 R로 변경
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff ff2e 	bl	8002e34 <Motor_CCR_Control>
	Motor_Direction_Control(dutyRatioL, dutyRatioL);// 추후 L을 R로 변경
 8002fd8:	edd7 0a04 	vldr	s1, [r7, #16]
 8002fdc:	ed97 0a04 	vldr	s0, [r7, #16]
 8002fe0:	f7ff ff3e 	bl	8002e60 <Motor_Direction_Control>

	Adjust_Encder_Values_L();
 8002fe4:	f7ff ff88 	bl	8002ef8 <Adjust_Encder_Values_L>
}
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	ecbd 8b02 	vpop	{d8}
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <Drive_Speed_Accele_Control>:
#include "motor.h"



// 가속도 및 속도 제어
__STATIC_INLINE void	Drive_Speed_Accele_Control() {
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

	if (curSpeed == targetSpeed) {
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 8002ffa:	ed93 7a00 	vldr	s14, [r3]
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	eeb4 7a67 	vcmp.f32	s14, s15
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d104      	bne.n	8003018 <Drive_Speed_Accele_Control+0x24>

		// 속도를 targetSpeed 까지 올린 후, curAccele을 0으로 변환
		// 혹은 직선 가속 후 targetSpeed 까지 도달하지 못하고 감속한 후 감속이 종료되었으면 , curAccele을 0으로 변환
		curAccele = 0;
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
		if (curSpeed < targetSpeed) {

			curSpeed = targetSpeed;
		}
	}
}
 8003016:	e062      	b.n	80030de <Drive_Speed_Accele_Control+0xea>
	else if (curSpeed < targetSpeed) {
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d538      	bpl.n	80030a0 <Drive_Speed_Accele_Control+0xac>
		curAccele += 0.01f;
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80030f4 <Drive_Speed_Accele_Control+0x100>
 8003038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800303c:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 800303e:	edc3 7a00 	vstr	s15, [r3]
		if (curAccele > targetAccele) {
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <Drive_Speed_Accele_Control+0x104>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	dd03      	ble.n	8003060 <Drive_Speed_Accele_Control+0x6c>
			curAccele = targetAccele;
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <Drive_Speed_Accele_Control+0x104>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 800305e:	6013      	str	r3, [r2, #0]
		curSpeed += curAccele / 2000;
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <Drive_Speed_Accele_Control+0xfc>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eddf 6a25 	vldr	s13, [pc, #148]	; 80030fc <Drive_Speed_Accele_Control+0x108>
 800306a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 800307a:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed > targetSpeed) {
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 8003080:	ed93 7a00 	vldr	s14, [r3]
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	dc00      	bgt.n	8003096 <Drive_Speed_Accele_Control+0xa2>
}
 8003094:	e023      	b.n	80030de <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	e01e      	b.n	80030de <Drive_Speed_Accele_Control+0xea>
		curSpeed -= decele / 2000;
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <Drive_Speed_Accele_Control+0x10c>)
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	eddf 6a15 	vldr	s13, [pc, #84]	; 80030fc <Drive_Speed_Accele_Control+0x108>
 80030aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 80030ba:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed < targetSpeed) {
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 80030c0:	ed93 7a00 	vldr	s14, [r3]
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	d400      	bmi.n	80030d6 <Drive_Speed_Accele_Control+0xe2>
}
 80030d4:	e003      	b.n	80030de <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <Drive_Speed_Accele_Control+0xf8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <Drive_Speed_Accele_Control+0xf4>)
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	20000034 	.word	0x20000034
 80030ec:	20000030 	.word	0x20000030
 80030f0:	20000028 	.word	0x20000028
 80030f4:	3c23d70a 	.word	0x3c23d70a
 80030f8:	20000024 	.word	0x20000024
 80030fc:	44fa0000 	.word	0x44fa0000
 8003100:	2000002c 	.word	0x2000002c

08003104 <Drive_TIM9_IRQ>:
}



// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0

	// 가속도 및 속도 제어
	Drive_Speed_Accele_Control();
 800310a:	f7ff ff73 	bl	8002ff4 <Drive_Speed_Accele_Control>
//	//position 값에 따른 좌우 모터 속도 조정
//	float speedL = finalSpeed * (1 + (positionVal - curInlineVal) * positionCoef);
//	float speedR = finalSpeed * (1 - (positionVal - curInlineVal) * positionCoef);


	float speedL = curSpeed;
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <Drive_TIM9_IRQ+0x2c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	607b      	str	r3, [r7, #4]
	float speedR = curSpeed;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <Drive_TIM9_IRQ+0x2c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	603b      	str	r3, [r7, #0]
	Motor_Speed_Control(speedL, speedR);
 800311a:	edd7 0a00 	vldr	s1, [r7]
 800311e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003122:	f7ff ff2f 	bl	8002f84 <Motor_Speed_Control>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000034 	.word	0x20000034

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003138:	e7fe      	b.n	8003138 <NMI_Handler+0x4>

0800313a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 800313e:	f004 fb1b 	bl	8007778 <Motor_Power_Off>
 8003142:	e7fc      	b.n	800313e <HardFault_Handler+0x4>

08003144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 8003148:	f004 fb16 	bl	8007778 <Motor_Power_Off>
 800314c:	e7fc      	b.n	8003148 <MemManage_Handler+0x4>

0800314e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 8003152:	f004 fb11 	bl	8007778 <Motor_Power_Off>
 8003156:	e7fc      	b.n	8003152 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 800315c:	f004 fb0c 	bl	8007778 <Motor_Power_Off>
 8003160:	e7fc      	b.n	800315c <UsageFault_Handler+0x4>

08003162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <SysTick_Handler+0x18>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <SysTick_Handler+0x18>)
 8003198:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000284 	.word	0x20000284

080031a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	Drive_TIM9_IRQ();
 80031bc:	f7ff ffa2 	bl	8003104 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM9);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80031c2:	f7ff fa7b 	bl	80026bc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40014000 	.word	0x40014000

080031d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	Sensor_TIM5_IRQ();
 80031d4:	f7ff fcca 	bl	8002b6c <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM5);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM5_IRQHandler+0x14>)
 80031da:	f7ff fa6f 	bl	80026bc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40000c00 	.word	0x40000c00

080031e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_kill>:

int _kill(int pid, int sig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003202:	f005 fa7f 	bl	8008704 <__errno>
 8003206:	4603      	mov	r3, r0
 8003208:	2216      	movs	r2, #22
 800320a:	601a      	str	r2, [r3, #0]
	return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_exit>:

void _exit (int status)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffe7 	bl	80031f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800322a:	e7fe      	b.n	800322a <_exit+0x12>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323e:	f3af 8000 	nop.w
 8003242:	4601      	mov	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
	}

return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e009      	b.n	800328c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fbdf 	bl	8006a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf1      	blt.n	8003278 <_write+0x12>
	}
	return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_close>:

int _close(int file)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c6:	605a      	str	r2, [r3, #4]
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_isatty>:

int _isatty(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	return 1;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_sbrk+0x5c>)
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <_sbrk+0x60>)
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <_sbrk+0x64>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <_sbrk+0x64>)
 8003326:	4a12      	ldr	r2, [pc, #72]	; (8003370 <_sbrk+0x68>)
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	429a      	cmp	r2, r3
 8003336:	d207      	bcs.n	8003348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003338:	f005 f9e4 	bl	8008704 <__errno>
 800333c:	4603      	mov	r3, r0
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003346:	e009      	b.n	800335c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <_sbrk+0x64>)
 8003358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20020000 	.word	0x20020000
 8003368:	00000400 	.word	0x00000400
 800336c:	20000298 	.word	0x20000298
 8003370:	20003030 	.word	0x20003030

08003374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <SystemInit+0x20>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <SystemInit+0x20>)
 8003380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <Reset_Handler>:
 8003398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d0 <LoopFillZerobss+0x12>
 800339c:	480d      	ldr	r0, [pc, #52]	; (80033d4 <LoopFillZerobss+0x16>)
 800339e:	490e      	ldr	r1, [pc, #56]	; (80033d8 <LoopFillZerobss+0x1a>)
 80033a0:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <LoopFillZerobss+0x1e>)
 80033a2:	2300      	movs	r3, #0
 80033a4:	e002      	b.n	80033ac <LoopCopyDataInit>

080033a6 <CopyDataInit>:
 80033a6:	58d4      	ldr	r4, [r2, r3]
 80033a8:	50c4      	str	r4, [r0, r3]
 80033aa:	3304      	adds	r3, #4

080033ac <LoopCopyDataInit>:
 80033ac:	18c4      	adds	r4, r0, r3
 80033ae:	428c      	cmp	r4, r1
 80033b0:	d3f9      	bcc.n	80033a6 <CopyDataInit>
 80033b2:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <LoopFillZerobss+0x22>)
 80033b4:	4c0b      	ldr	r4, [pc, #44]	; (80033e4 <LoopFillZerobss+0x26>)
 80033b6:	2300      	movs	r3, #0
 80033b8:	e001      	b.n	80033be <LoopFillZerobss>

080033ba <FillZerobss>:
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	3204      	adds	r2, #4

080033be <LoopFillZerobss>:
 80033be:	42a2      	cmp	r2, r4
 80033c0:	d3fb      	bcc.n	80033ba <FillZerobss>
 80033c2:	f7ff ffd7 	bl	8003374 <SystemInit>
 80033c6:	f005 f9a3 	bl	8008710 <__libc_init_array>
 80033ca:	f7fe fbdf 	bl	8001b8c <main>
 80033ce:	4770      	bx	lr
 80033d0:	20020000 	.word	0x20020000
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000268 	.word	0x20000268
 80033dc:	0800b6c4 	.word	0x0800b6c4
 80033e0:	20000268 	.word	0x20000268
 80033e4:	20003030 	.word	0x20003030

080033e8 <DMA1_Stream0_IRQHandler>:
 80033e8:	e7fe      	b.n	80033e8 <DMA1_Stream0_IRQHandler>

080033ea <LL_ADC_SetCommonClock>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_REG_SetSequencerLength>:
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_ADC_IsEnabled>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800346a:	480a      	ldr	r0, [pc, #40]	; (8003494 <LL_ADC_CommonInit+0x38>)
 800346c:	f7ff ffe3 	bl	8003436 <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ffb4 	bl	80033ea <LL_ADC_SetCommonClock>
 8003482:	e001      	b.n	8003488 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40012000 	.word	0x40012000

08003498 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffc5 	bl	8003436 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d117      	bne.n	80034e2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80034ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	6811      	ldr	r1, [r2, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	e001      	b.n	80034e6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff99 	bl	8003436 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d12b      	bne.n	8003562 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	e005      	b.n	8003532 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <LL_ADC_REG_Init+0x80>)
 8003538:	4013      	ands	r3, r2
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	4311      	orrs	r1, r2
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	6912      	ldr	r2, [r2, #16]
 800354c:	430a      	orrs	r2, r1
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff58 	bl	8003410 <LL_ADC_REG_SetSequencerLength>
 8003560:	e001      	b.n	8003566 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	c0fffcfd 	.word	0xc0fffcfd

08003574 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <LL_EXTI_EnableIT_0_31+0x20>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4904      	ldr	r1, [pc, #16]	; (8003594 <LL_EXTI_EnableIT_0_31+0x20>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40013c00 	.word	0x40013c00

08003598 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <LL_EXTI_DisableIT_0_31+0x24>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <LL_EXTI_DisableIT_0_31+0x24>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]

}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <LL_EXTI_DisableEvent_0_31+0x24>)
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4904      	ldr	r1, [pc, #16]	; (8003608 <LL_EXTI_DisableEvent_0_31+0x24>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40013c00 	.word	0x40013c00

0800360c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	4904      	ldr	r1, [pc, #16]	; (800362c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40013c00 	.word	0x40013c00

08003630 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	43db      	mvns	r3, r3
 8003640:	4904      	ldr	r1, [pc, #16]	; (8003654 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003642:	4013      	ands	r3, r2
 8003644:	608b      	str	r3, [r1, #8]

}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40013c00 	.word	0x40013c00

08003658 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	4904      	ldr	r1, [pc, #16]	; (8003678 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4313      	orrs	r3, r2
 800366a:	60cb      	str	r3, [r1, #12]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40013c00 	.word	0x40013c00

0800367c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	43db      	mvns	r3, r3
 800368c:	4904      	ldr	r1, [pc, #16]	; (80036a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800368e:	4013      	ands	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	791b      	ldrb	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d065      	beq.n	8003784 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d06b      	beq.n	8003798 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	795b      	ldrb	r3, [r3, #5]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d01c      	beq.n	8003702 <LL_EXTI_Init+0x5e>
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	dc25      	bgt.n	8003718 <LL_EXTI_Init+0x74>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <LL_EXTI_Init+0x32>
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d00b      	beq.n	80036ec <LL_EXTI_Init+0x48>
 80036d4:	e020      	b.n	8003718 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff82 	bl	80035e4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff45 	bl	8003574 <LL_EXTI_EnableIT_0_31>
          break;
 80036ea:	e018      	b.n	800371e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff51 	bl	8003598 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff60 	bl	80035c0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003700:	e00d      	b.n	800371e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff34 	bl	8003574 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff55 	bl	80035c0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003716:	e002      	b.n	800371e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
          break;
 800371c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	799b      	ldrb	r3, [r3, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d038      	beq.n	8003798 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	799b      	ldrb	r3, [r3, #6]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d01c      	beq.n	8003768 <LL_EXTI_Init+0xc4>
 800372e:	2b03      	cmp	r3, #3
 8003730:	dc25      	bgt.n	800377e <LL_EXTI_Init+0xda>
 8003732:	2b01      	cmp	r3, #1
 8003734:	d002      	beq.n	800373c <LL_EXTI_Init+0x98>
 8003736:	2b02      	cmp	r3, #2
 8003738:	d00b      	beq.n	8003752 <LL_EXTI_Init+0xae>
 800373a:	e020      	b.n	800377e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff9b 	bl	800367c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff5e 	bl	800360c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003750:	e022      	b.n	8003798 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff6a 	bl	8003630 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff79 	bl	8003658 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003766:	e017      	b.n	8003798 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff4d 	bl	800360c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff6e 	bl	8003658 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800377c:	e00c      	b.n	8003798 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
            break;
 8003782:	e009      	b.n	8003798 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff05 	bl	8003598 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff26 	bl	80035e4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <LL_GPIO_SetPinMode>:
{
 80037a2:	b480      	push	{r7}
 80037a4:	b089      	sub	sp, #36	; 0x24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	613b      	str	r3, [r7, #16]
  return result;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2103      	movs	r1, #3
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	401a      	ands	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	61bb      	str	r3, [r7, #24]
  return result;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	431a      	orrs	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	3724      	adds	r7, #36	; 0x24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_GPIO_SetPinOutputType>:
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	43db      	mvns	r3, r3
 8003814:	401a      	ands	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	431a      	orrs	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	605a      	str	r2, [r3, #4]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_GPIO_SetPinSpeed>:
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	613b      	str	r3, [r7, #16]
  return result;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2103      	movs	r1, #3
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	61bb      	str	r3, [r7, #24]
  return result;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	609a      	str	r2, [r3, #8]
}
 8003882:	bf00      	nop
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_GPIO_SetPinPull>:
{
 800388e:	b480      	push	{r7}
 8003890:	b089      	sub	sp, #36	; 0x24
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	613b      	str	r3, [r7, #16]
  return result;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2103      	movs	r1, #3
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	401a      	ands	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	61bb      	str	r3, [r7, #24]
  return result;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	431a      	orrs	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	60da      	str	r2, [r3, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3724      	adds	r7, #36	; 0x24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_GPIO_SetAFPin_0_7>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	613b      	str	r3, [r7, #16]
  return result;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	210f      	movs	r1, #15
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	61bb      	str	r3, [r7, #24]
  return result;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_GPIO_SetAFPin_8_15>:
{
 800394a:	b480      	push	{r7}
 800394c:	b089      	sub	sp, #36	; 0x24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	613b      	str	r3, [r7, #16]
  return result;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	210f      	movs	r1, #15
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	401a      	ands	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	61bb      	str	r3, [r7, #24]
  return result;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039a0:	bf00      	nop
 80039a2:	3724      	adds	r7, #36	; 0x24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	613b      	str	r3, [r7, #16]
  return result;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	fab3 f383 	clz	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039d6:	e050      	b.n	8003a7a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d042      	beq.n	8003a74 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d003      	beq.n	80039fe <LL_GPIO_Init+0x52>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d10d      	bne.n	8003a1a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	461a      	mov	r2, r3
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff12 	bl	8003830 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	461a      	mov	r2, r3
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fef3 	bl	8003800 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff33 	bl	800388e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d11a      	bne.n	8003a66 <LL_GPIO_Init+0xba>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	60bb      	str	r3, [r7, #8]
  return result;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b07      	cmp	r3, #7
 8003a46:	d807      	bhi.n	8003a58 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff4b 	bl	80038ec <LL_GPIO_SetAFPin_0_7>
 8003a56:	e006      	b.n	8003a66 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff72 	bl	800394a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe97 	bl	80037a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1a7      	bne.n	80039d8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <LL_I2C_Enable>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_I2C_Disable>:
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_I2C_ConfigFilters>:
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f023 021f 	bic.w	r2, r3, #31
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	430b      	orrs	r3, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_I2C_SetOwnAddress1>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	609a      	str	r2, [r3, #8]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <LL_I2C_ConfigSpeed+0x124>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0c9b      	lsrs	r3, r3, #18
 8003b50:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	493a      	ldr	r1, [pc, #232]	; (8003c58 <LL_I2C_ConfigSpeed+0x128>)
 8003b6e:	428b      	cmp	r3, r1
 8003b70:	d802      	bhi.n	8003b78 <LL_I2C_ConfigSpeed+0x48>
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3301      	adds	r3, #1
 8003b76:	e009      	b.n	8003b8c <LL_I2C_ConfigSpeed+0x5c>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4936      	ldr	r1, [pc, #216]	; (8003c5c <LL_I2C_ConfigSpeed+0x12c>)
 8003b84:	fba1 1303 	umull	r1, r3, r1, r3
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <LL_I2C_ConfigSpeed+0x128>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d939      	bls.n	8003c0e <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d117      	bne.n	8003bd0 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc8:	e01d      	b.n	8003c06 <LL_I2C_ConfigSpeed+0xd6>
 8003bca:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bce:	e01a      	b.n	8003c06 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c00:	e001      	b.n	8003c06 <LL_I2C_ConfigSpeed+0xd6>
 8003c02:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e011      	b.n	8003c32 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c1c:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	e000      	b.n	8003c30 <LL_I2C_ConfigSpeed+0x100>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	61da      	str	r2, [r3, #28]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	431bde83 	.word	0x431bde83
 8003c58:	000186a0 	.word	0x000186a0
 8003c5c:	10624dd3 	.word	0x10624dd3

08003c60 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 021a 	bic.w	r2, r3, #26
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fefb 	bl	8003ab2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f89d 	bl	8003e00 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fefe 	bl	8003ad2 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003cd6:	6939      	ldr	r1, [r7, #16]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff25 	bl	8003b30 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6959      	ldr	r1, [r3, #20]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff04 	bl	8003afe <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ffaf 	bl	8003c60 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fec5 	bl	8003a92 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffb9 	bl	8003c86 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <LL_RCC_GetSysClkSource>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <LL_RCC_GetSysClkSource+0x18>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800

08003d3c <LL_RCC_GetAHBPrescaler>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <LL_RCC_GetAPB1Prescaler>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <LL_RCC_GetAPB2Prescaler>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <LL_RCC_PLL_GetN+0x18>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40023800 	.word	0x40023800

08003dc8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <LL_RCC_PLL_GetP+0x18>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <LL_RCC_PLL_GetDivider+0x18>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e08:	f000 f820 	bl	8003e4c <RCC_GetSystemClockFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f840 	bl	8003e9c <RCC_GetHCLKClockFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f84e 	bl	8003ec8 <RCC_GetPCLK1ClockFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f85a 	bl	8003ef0 <RCC_GetPCLK2ClockFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e56:	f7ff ff63 	bl	8003d20 <LL_RCC_GetSysClkSource>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d00c      	beq.n	8003e7a <RCC_GetSystemClockFreq+0x2e>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d80f      	bhi.n	8003e84 <RCC_GetSystemClockFreq+0x38>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <RCC_GetSystemClockFreq+0x22>
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d003      	beq.n	8003e74 <RCC_GetSystemClockFreq+0x28>
 8003e6c:	e00a      	b.n	8003e84 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <RCC_GetSystemClockFreq+0x48>)
 8003e70:	607b      	str	r3, [r7, #4]
      break;
 8003e72:	e00a      	b.n	8003e8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <RCC_GetSystemClockFreq+0x4c>)
 8003e76:	607b      	str	r3, [r7, #4]
      break;
 8003e78:	e007      	b.n	8003e8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e7a:	2008      	movs	r0, #8
 8003e7c:	f000 f84c 	bl	8003f18 <RCC_PLL_GetFreqDomain_SYS>
 8003e80:	6078      	str	r0, [r7, #4]
      break;
 8003e82:	e002      	b.n	8003e8a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <RCC_GetSystemClockFreq+0x48>)
 8003e86:	607b      	str	r3, [r7, #4]
      break;
 8003e88:	bf00      	nop
  }

  return frequency;
 8003e8a:	687b      	ldr	r3, [r7, #4]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ea4:	f7ff ff4a 	bl	8003d3c <LL_RCC_GetAHBPrescaler>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <RCC_GetHCLKClockFreq+0x28>)
 8003eb2:	5cd3      	ldrb	r3, [r2, r3]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	40d3      	lsrs	r3, r2
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	0800b0ac 	.word	0x0800b0ac

08003ec8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ed0:	f7ff ff42 	bl	8003d58 <LL_RCC_GetAPB1Prescaler>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	0a9b      	lsrs	r3, r3, #10
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <RCC_GetPCLK1ClockFreq+0x24>)
 8003eda:	5cd3      	ldrb	r3, [r2, r3]
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	40d3      	lsrs	r3, r2
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	0800b0bc 	.word	0x0800b0bc

08003ef0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ef8:	f7ff ff3c 	bl	8003d74 <LL_RCC_GetAPB2Prescaler>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0b5b      	lsrs	r3, r3, #13
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	40d3      	lsrs	r3, r2
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	0800b0bc 	.word	0x0800b0bc

08003f18 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f2c:	f7ff ff30 	bl	8003d90 <LL_RCC_PLL_GetMainSource>
 8003f30:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3e:	d003      	beq.n	8003f48 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f40:	e005      	b.n	8003f4e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f44:	617b      	str	r3, [r7, #20]
      break;
 8003f46:	e005      	b.n	8003f54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f4a:	617b      	str	r3, [r7, #20]
      break;
 8003f4c:	e002      	b.n	8003f54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f50:	617b      	str	r3, [r7, #20]
      break;
 8003f52:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d113      	bne.n	8003f82 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f5a:	f7ff ff43 	bl	8003de4 <LL_RCC_PLL_GetDivider>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f66:	f7ff ff21 	bl	8003dac <LL_RCC_PLL_GetN>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	fb03 f404 	mul.w	r4, r3, r4
 8003f70:	f7ff ff2a 	bl	8003dc8 <LL_RCC_PLL_GetP>
 8003f74:	4603      	mov	r3, r0
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	3301      	adds	r3, #1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f80:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f82:	693b      	ldr	r3, [r7, #16]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	007a1200 	.word	0x007a1200

08003f94 <LL_SPI_IsEnabled>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d101      	bne.n	8003fac <LL_SPI_IsEnabled+0x18>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <LL_SPI_IsEnabled+0x1a>
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ffd3 	bl	8003f94 <LL_SPI_IsEnabled>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d139      	bne.n	8004068 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffc:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	6811      	ldr	r1, [r2, #0]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	6852      	ldr	r2, [r2, #4]
 8004008:	4311      	orrs	r1, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	4311      	orrs	r1, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	68d2      	ldr	r2, [r2, #12]
 8004014:	4311      	orrs	r1, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6912      	ldr	r2, [r2, #16]
 800401a:	4311      	orrs	r1, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	6952      	ldr	r2, [r2, #20]
 8004020:	4311      	orrs	r1, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6992      	ldr	r2, [r2, #24]
 8004026:	4311      	orrs	r1, r2
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	69d2      	ldr	r2, [r2, #28]
 800402c:	4311      	orrs	r1, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	6a12      	ldr	r2, [r2, #32]
 8004032:	430a      	orrs	r2, r1
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f023 0204 	bic.w	r2, r3, #4
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d105      	bne.n	8004064 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ffab 	bl	8003fba <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	61da      	str	r2, [r3, #28]
  return status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <LL_TIM_SetPrescaler>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_TIM_SetAutoReload>:
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_TIM_SetRepetitionCounter>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <LL_TIM_OC_SetCompareCH1>:
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_TIM_OC_SetCompareCH2>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_TIM_OC_SetCompareCH3>:
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_TIM_OC_SetCompareCH4>:
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a31      	ldr	r2, [pc, #196]	; (800423c <LL_TIM_Init+0xd8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00f      	beq.n	800419c <LL_TIM_Init+0x38>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d00b      	beq.n	800419c <LL_TIM_Init+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <LL_TIM_Init+0xdc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d007      	beq.n	800419c <LL_TIM_Init+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <LL_TIM_Init+0xe0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <LL_TIM_Init+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <LL_TIM_Init+0xe4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d106      	bne.n	80041aa <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <LL_TIM_Init+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01b      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d017      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <LL_TIM_Init+0xdc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <LL_TIM_Init+0xe0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00f      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <LL_TIM_Init+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <LL_TIM_Init+0xe8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <LL_TIM_Init+0xec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <LL_TIM_Init+0x86>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <LL_TIM_Init+0xf0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d106      	bne.n	80041f8 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff48 	bl	800409a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff34 	bl	800407e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <LL_TIM_Init+0xd8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d105      	bne.n	800422a <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff46 	bl	80040b6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff89 	bl	8004142 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40010000 	.word	0x40010000
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800

08004258 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d027      	beq.n	80042c0 <LL_TIM_OC_Init+0x68>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d82a      	bhi.n	80042ce <LL_TIM_OC_Init+0x76>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	d018      	beq.n	80042b2 <LL_TIM_OC_Init+0x5a>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d822      	bhi.n	80042ce <LL_TIM_OC_Init+0x76>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d003      	beq.n	8004296 <LL_TIM_OC_Init+0x3e>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b10      	cmp	r3, #16
 8004292:	d007      	beq.n	80042a4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004294:	e01b      	b.n	80042ce <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f81f 	bl	80042dc <OC1Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e015      	b.n	80042d0 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f87e 	bl	80043a8 <OC2Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e00e      	b.n	80042d0 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f8e1 	bl	800447c <OC3Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	75fb      	strb	r3, [r7, #23]
      break;
 80042be:	e007      	b.n	80042d0 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f944 	bl	8004550 <OC4Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	e000      	b.n	80042d0 <LL_TIM_OC_Init+0x78>
      break;
 80042ce:	bf00      	nop
  }

  return result;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0202 	bic.w	r2, r3, #2
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <OC1Config+0xc8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d11e      	bne.n	800437c <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0208 	bic.w	r2, r3, #8
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0204 	bic.w	r2, r3, #4
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fe9f 	bl	80040d2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40010000 	.word	0x40010000

080043a8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f023 0210 	bic.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0220 	bic.w	r2, r3, #32
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0210 	bic.w	r2, r3, #16
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <OC2Config+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d11f      	bne.n	8004450 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	019b      	lsls	r3, r3, #6
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	019b      	lsls	r3, r3, #6
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe43 	bl	80040ee <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40010000 	.word	0x40010000

0800447c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <OC3Config+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d11f      	bne.n	8004522 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	029b      	lsls	r3, r3, #10
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	015b      	lsls	r3, r3, #5
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff fde8 	bl	800410a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000

08004550 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	031b      	lsls	r3, r3, #12
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	031b      	lsls	r3, r3, #12
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <OC4Config+0xa0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d107      	bne.n	80045c8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	019b      	lsls	r3, r3, #6
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fda3 	bl	8004126 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40010000 	.word	0x40010000

080045f4 <LL_USART_IsEnabled>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_USART_SetStopBitsLength>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_USART_SetHWFlowCtrl>:
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	615a      	str	r2, [r3, #20]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_USART_SetBaudRate>:
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b0c0      	sub	sp, #256	; 0x100
 800466e:	af00      	add	r7, sp, #0
 8004670:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004674:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004678:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800467c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	f040 810c 	bne.w	80048a4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800468c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004696:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800469a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800469e:	4622      	mov	r2, r4
 80046a0:	462b      	mov	r3, r5
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	6639      	str	r1, [r7, #96]	; 0x60
 80046a6:	415b      	adcs	r3, r3
 80046a8:	667b      	str	r3, [r7, #100]	; 0x64
 80046aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046ae:	4621      	mov	r1, r4
 80046b0:	eb12 0801 	adds.w	r8, r2, r1
 80046b4:	4629      	mov	r1, r5
 80046b6:	eb43 0901 	adc.w	r9, r3, r1
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ce:	4690      	mov	r8, r2
 80046d0:	4699      	mov	r9, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	eb18 0303 	adds.w	r3, r8, r3
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046dc:	462b      	mov	r3, r5
 80046de:	eb49 0303 	adc.w	r3, r9, r3
 80046e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046ea:	2200      	movs	r2, #0
 80046ec:	469a      	mov	sl, r3
 80046ee:	4693      	mov	fp, r2
 80046f0:	eb1a 030a 	adds.w	r3, sl, sl
 80046f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046f6:	eb4b 030b 	adc.w	r3, fp, fp
 80046fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004704:	f7fc faa8 	bl	8000c58 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <LL_USART_SetBaudRate+0x238>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	b29b      	uxth	r3, r3
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	b29c      	uxth	r4, r3
 800471a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004724:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004728:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	6539      	str	r1, [r7, #80]	; 0x50
 8004734:	415b      	adcs	r3, r3
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
 8004738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	64b9      	str	r1, [r7, #72]	; 0x48
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004770:	464b      	mov	r3, r9
 8004772:	460a      	mov	r2, r1
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800477c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004786:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800478a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800478e:	460b      	mov	r3, r1
 8004790:	18db      	adds	r3, r3, r3
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	4613      	mov	r3, r2
 8004796:	eb42 0303 	adc.w	r3, r2, r3
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047a0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80047a4:	f7fc fa58 	bl	8000c58 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	4b3c      	ldr	r3, [pc, #240]	; (80048a0 <LL_USART_SetBaudRate+0x238>)
 80047b0:	fba3 2301 	umull	r2, r3, r3, r1
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2264      	movs	r2, #100	; 0x64
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	1acb      	subs	r3, r1, r3
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047c4:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <LL_USART_SetBaudRate+0x238>)
 80047c6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4423      	add	r3, r4
 80047da:	b29c      	uxth	r4, r3
 80047dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047ea:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80047ee:	4642      	mov	r2, r8
 80047f0:	464b      	mov	r3, r9
 80047f2:	1891      	adds	r1, r2, r2
 80047f4:	63b9      	str	r1, [r7, #56]	; 0x38
 80047f6:	415b      	adcs	r3, r3
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047fe:	4641      	mov	r1, r8
 8004800:	1851      	adds	r1, r2, r1
 8004802:	6339      	str	r1, [r7, #48]	; 0x30
 8004804:	4649      	mov	r1, r9
 8004806:	414b      	adcs	r3, r1
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004816:	4659      	mov	r1, fp
 8004818:	00cb      	lsls	r3, r1, #3
 800481a:	4651      	mov	r1, sl
 800481c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004820:	4651      	mov	r1, sl
 8004822:	00ca      	lsls	r2, r1, #3
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	4603      	mov	r3, r0
 800482a:	4642      	mov	r2, r8
 800482c:	189b      	adds	r3, r3, r2
 800482e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004832:	464b      	mov	r3, r9
 8004834:	460a      	mov	r2, r1
 8004836:	eb42 0303 	adc.w	r3, r2, r3
 800483a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800483e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004842:	2200      	movs	r2, #0
 8004844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004848:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800484c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004850:	460b      	mov	r3, r1
 8004852:	18db      	adds	r3, r3, r3
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
 8004856:	4613      	mov	r3, r2
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004862:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004866:	f7fc f9f7 	bl	8000c58 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <LL_USART_SetBaudRate+0x238>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	2164      	movs	r1, #100	; 0x64
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	3332      	adds	r3, #50	; 0x32
 8004882:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <LL_USART_SetBaudRate+0x238>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b29b      	uxth	r3, r3
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	b29b      	uxth	r3, r3
 8004892:	4423      	add	r3, r4
 8004894:	b29b      	uxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489c:	609a      	str	r2, [r3, #8]
}
 800489e:	e108      	b.n	8004ab2 <LL_USART_SetBaudRate+0x44a>
 80048a0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80048a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048b2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80048b6:	4642      	mov	r2, r8
 80048b8:	464b      	mov	r3, r9
 80048ba:	1891      	adds	r1, r2, r2
 80048bc:	6239      	str	r1, [r7, #32]
 80048be:	415b      	adcs	r3, r3
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c6:	4641      	mov	r1, r8
 80048c8:	1854      	adds	r4, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb43 0501 	adc.w	r5, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	00eb      	lsls	r3, r5, #3
 80048da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048de:	00e2      	lsls	r2, r4, #3
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	18e3      	adds	r3, r4, r3
 80048e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048ec:	464b      	mov	r3, r9
 80048ee:	eb45 0303 	adc.w	r3, r5, r3
 80048f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004900:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004910:	4629      	mov	r1, r5
 8004912:	008b      	lsls	r3, r1, #2
 8004914:	4621      	mov	r1, r4
 8004916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491a:	4621      	mov	r1, r4
 800491c:	008a      	lsls	r2, r1, #2
 800491e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004922:	f7fc f999 	bl	8000c58 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4b65      	ldr	r3, [pc, #404]	; (8004ac0 <LL_USART_SetBaudRate+0x458>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	b29b      	uxth	r3, r3
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	b29c      	uxth	r4, r3
 8004938:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800493c:	2200      	movs	r2, #0
 800493e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004942:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004946:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800494a:	4642      	mov	r2, r8
 800494c:	464b      	mov	r3, r9
 800494e:	1891      	adds	r1, r2, r2
 8004950:	61b9      	str	r1, [r7, #24]
 8004952:	415b      	adcs	r3, r3
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495a:	4641      	mov	r1, r8
 800495c:	1851      	adds	r1, r2, r1
 800495e:	6139      	str	r1, [r7, #16]
 8004960:	4649      	mov	r1, r9
 8004962:	414b      	adcs	r3, r1
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004972:	4659      	mov	r1, fp
 8004974:	00cb      	lsls	r3, r1, #3
 8004976:	4651      	mov	r1, sl
 8004978:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497c:	4651      	mov	r1, sl
 800497e:	00ca      	lsls	r2, r1, #3
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	4603      	mov	r3, r0
 8004986:	4642      	mov	r2, r8
 8004988:	189b      	adds	r3, r3, r2
 800498a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800498e:	464b      	mov	r3, r9
 8004990:	460a      	mov	r2, r1
 8004992:	eb42 0303 	adc.w	r3, r2, r3
 8004996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800499a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80049b4:	4649      	mov	r1, r9
 80049b6:	008b      	lsls	r3, r1, #2
 80049b8:	4641      	mov	r1, r8
 80049ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049be:	4641      	mov	r1, r8
 80049c0:	008a      	lsls	r2, r1, #2
 80049c2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80049c6:	f7fc f947 	bl	8000c58 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <LL_USART_SetBaudRate+0x458>)
 80049d2:	fba3 2301 	umull	r2, r3, r3, r1
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2264      	movs	r2, #100	; 0x64
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	1acb      	subs	r3, r1, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	; 0x32
 80049e4:	4a36      	ldr	r2, [pc, #216]	; (8004ac0 <LL_USART_SetBaudRate+0x458>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4423      	add	r3, r4
 80049f6:	b29c      	uxth	r4, r3
 80049f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049fc:	2200      	movs	r2, #0
 80049fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a00:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a02:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a06:	4642      	mov	r2, r8
 8004a08:	464b      	mov	r3, r9
 8004a0a:	1891      	adds	r1, r2, r2
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	415b      	adcs	r3, r3
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a16:	4641      	mov	r1, r8
 8004a18:	1851      	adds	r1, r2, r1
 8004a1a:	6039      	str	r1, [r7, #0]
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	414b      	adcs	r3, r1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a2e:	4659      	mov	r1, fp
 8004a30:	00cb      	lsls	r3, r1, #3
 8004a32:	4651      	mov	r1, sl
 8004a34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a38:	4651      	mov	r1, sl
 8004a3a:	00ca      	lsls	r2, r1, #3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4603      	mov	r3, r0
 8004a42:	4642      	mov	r2, r8
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	673b      	str	r3, [r7, #112]	; 0x70
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	677b      	str	r3, [r7, #116]	; 0x74
 8004a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a56:	2200      	movs	r2, #0
 8004a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004a68:	4649      	mov	r1, r9
 8004a6a:	008b      	lsls	r3, r1, #2
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a72:	4641      	mov	r1, r8
 8004a74:	008a      	lsls	r2, r1, #2
 8004a76:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a7a:	f7fc f8ed 	bl	8000c58 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <LL_USART_SetBaudRate+0x458>)
 8004a84:	fba3 1302 	umull	r1, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	2164      	movs	r1, #100	; 0x64
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	3332      	adds	r3, #50	; 0x32
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <LL_USART_SetBaudRate+0x458>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4423      	add	r3, r4
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab0:	609a      	str	r2, [r3, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	51eb851f 	.word	0x51eb851f

08004ac4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fd8c 	bl	80045f4 <LL_USART_IsEnabled>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d149      	bne.n	8004b76 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004aea:	f023 030c 	bic.w	r3, r3, #12
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	6851      	ldr	r1, [r2, #4]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	68d2      	ldr	r2, [r2, #12]
 8004af6:	4311      	orrs	r1, r2
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	6912      	ldr	r2, [r2, #16]
 8004afc:	4311      	orrs	r1, r2
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	6992      	ldr	r2, [r2, #24]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fd83 	bl	800461c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fd90 	bl	8004642 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f96a 	bl	8003e00 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <LL_USART_Init+0xbc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d102      	bne.n	8004b3a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e00c      	b.n	8004b54 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <LL_USART_Init+0xc0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d102      	bne.n	8004b48 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e005      	b.n	8004b54 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <LL_USART_Init+0xc4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004b62:	2300      	movs	r3, #0
 8004b64:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fd79 	bl	8004668 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40011000 	.word	0x40011000
 8004b84:	40004400 	.word	0x40004400
 8004b88:	40011400 	.word	0x40011400

08004b8c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <LL_InitTick+0x30>)
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <LL_InitTick+0x30>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <LL_InitTick+0x30>)
 8004bac:	2205      	movs	r2, #5
 8004bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000e010 	.word	0xe000e010

08004bc0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ffdd 	bl	8004b8c <LL_InitTick>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <LL_SetSystemCoreClock+0x1c>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6013      	str	r3, [r2, #0]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000000 	.word	0x20000000

08004bfc <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
	_file = file;
 8004c08:	4a07      	ldr	r2, [pc, #28]	; (8004c28 <__Custom_Exception_Set_Message+0x2c>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6013      	str	r3, [r2, #0]
	_line = line;
 8004c0e:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <__Custom_Exception_Set_Message+0x30>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6013      	str	r3, [r2, #0]
	_message = message;
 8004c14:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <__Custom_Exception_Set_Message+0x34>)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000029c 	.word	0x2000029c
 8004c2c:	200002a0 	.word	0x200002a0
 8004c30:	200002a4 	.word	0x200002a4

08004c34 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8004c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c3c:	4803      	ldr	r0, [pc, #12]	; (8004c4c <Custom_FileSystem_Load+0x18>)
 8004c3e:	f000 f851 	bl	8004ce4 <Custom_Flash_Read>
	filesystemLoaded = true;
 8004c42:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <Custom_FileSystem_Load+0x1c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	200002a8 	.word	0x200002a8
 8004c50:	200012a9 	.word	0x200012a9

08004c54 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <Custom_Flash_Check_Error+0x78>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <Custom_Flash_Check_Error+0x24>
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <Custom_Flash_Check_Error+0x7c>)
 8004c6c:	2113      	movs	r1, #19
 8004c6e:	4819      	ldr	r0, [pc, #100]	; (8004cd4 <Custom_Flash_Check_Error+0x80>)
 8004c70:	f7ff ffc4 	bl	8004bfc <__Custom_Exception_Set_Message>
 8004c74:	2300      	movs	r3, #0
 8004c76:	e024      	b.n	8004cc2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d006      	beq.n	8004c90 <Custom_Flash_Check_Error+0x3c>
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <Custom_Flash_Check_Error+0x84>)
 8004c84:	2114      	movs	r1, #20
 8004c86:	4813      	ldr	r0, [pc, #76]	; (8004cd4 <Custom_Flash_Check_Error+0x80>)
 8004c88:	f7ff ffb8 	bl	8004bfc <__Custom_Exception_Set_Message>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e018      	b.n	8004cc2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <Custom_Flash_Check_Error+0x54>
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <Custom_Flash_Check_Error+0x88>)
 8004c9c:	2115      	movs	r1, #21
 8004c9e:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <Custom_Flash_Check_Error+0x80>)
 8004ca0:	f7ff ffac 	bl	8004bfc <__Custom_Exception_Set_Message>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e00c      	b.n	8004cc2 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <Custom_Flash_Check_Error+0x6c>
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <Custom_Flash_Check_Error+0x8c>)
 8004cb4:	2116      	movs	r1, #22
 8004cb6:	4807      	ldr	r0, [pc, #28]	; (8004cd4 <Custom_Flash_Check_Error+0x80>)
 8004cb8:	f7ff ffa0 	bl	8004bfc <__Custom_Exception_Set_Message>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <Custom_Flash_Check_Error+0x6e>

	return true;
 8004cc0:	2301      	movs	r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023c00 	.word	0x40023c00
 8004cd0:	0800a980 	.word	0x0800a980
 8004cd4:	0800a99c 	.word	0x0800a99c
 8004cd8:	0800a9c4 	.word	0x0800a9c4
 8004cdc:	0800a9e4 	.word	0x0800a9e4
 8004ce0:	0800aa04 	.word	0x0800aa04

08004ce4 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf4:	d306      	bcc.n	8004d04 <Custom_Flash_Read+0x20>
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <Custom_Flash_Read+0x5c>)
 8004cf8:	211d      	movs	r1, #29
 8004cfa:	4812      	ldr	r0, [pc, #72]	; (8004d44 <Custom_Flash_Read+0x60>)
 8004cfc:	f7ff ff7e 	bl	8004bfc <__Custom_Exception_Set_Message>
 8004d00:	2300      	movs	r3, #0
 8004d02:	e019      	b.n	8004d38 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e00f      	b.n	8004d2a <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004d10:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004d14:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	440b      	add	r3, r1
 8004d1e:	7812      	ldrb	r2, [r2, #0]
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d8eb      	bhi.n	8004d0a <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8004d32:	f7ff ff8f 	bl	8004c54 <Custom_Flash_Check_Error>
 8004d36:	4603      	mov	r3, r0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	0800aa1c 	.word	0x0800aa1c
 8004d44:	0800a99c 	.word	0x0800a99c

08004d48 <LL_SPI_Enable>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_SPI_SetTransferDirection>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d101      	bne.n	8004da6 <LL_SPI_IsActiveFlag_TXE+0x18>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d101      	bne.n	8004dcc <LL_SPI_IsActiveFlag_BSY+0x18>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <LL_SPI_IsActiveFlag_BSY+0x1a>
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	330c      	adds	r3, #12
 8004dea:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <Custom_GPIO_Set>:
		uint32_t value) {
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <Custom_GPIO_Set+0x22>
 8004e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e1e:	e000      	b.n	8004e22 <Custom_GPIO_Set+0x24>
 8004e20:	2100      	movs	r1, #0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	400b      	ands	r3, r1
 8004e26:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	615a      	str	r2, [r3, #20]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8004e42:	bf00      	nop
 8004e44:	480b      	ldr	r0, [pc, #44]	; (8004e74 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e46:	f7ff ffa2 	bl	8004d8e <LL_SPI_IsActiveFlag_TXE>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f9      	beq.n	8004e44 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4807      	ldr	r0, [pc, #28]	; (8004e74 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e56:	f7ff ffc0 	bl	8004dda <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8004e5a:	bf00      	nop
 8004e5c:	4805      	ldr	r0, [pc, #20]	; (8004e74 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e5e:	f7ff ffa9 	bl	8004db4 <LL_SPI_IsActiveFlag_BSY>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f9      	bne.n	8004e5c <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40003800 	.word	0x40003800

08004e78 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 8004e82:	2200      	movs	r2, #0
 8004e84:	2110      	movs	r1, #16
 8004e86:	4811      	ldr	r0, [pc, #68]	; (8004ecc <Custom_OLED_Write_Command+0x54>)
 8004e88:	f7ff ffb9 	bl	8004dfe <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2104      	movs	r1, #4
 8004e90:	480f      	ldr	r0, [pc, #60]	; (8004ed0 <Custom_OLED_Write_Command+0x58>)
 8004e92:	f7ff ffb4 	bl	8004dfe <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e009      	b.n	8004eb0 <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff ffc7 	bl	8004e38 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d8f1      	bhi.n	8004e9c <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2104      	movs	r1, #4
 8004ebc:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <Custom_OLED_Write_Command+0x58>)
 8004ebe:	f7ff ff9e 	bl	8004dfe <Custom_GPIO_Set>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	40020400 	.word	0x40020400

08004ed4 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 8004ede:	2201      	movs	r2, #1
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	4817      	ldr	r0, [pc, #92]	; (8004f40 <Custom_OLED_Write_Data+0x6c>)
 8004ee4:	f7ff ff8b 	bl	8004dfe <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2104      	movs	r1, #4
 8004eec:	4815      	ldr	r0, [pc, #84]	; (8004f44 <Custom_OLED_Write_Data+0x70>)
 8004eee:	f7ff ff86 	bl	8004dfe <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e016      	b.n	8004f26 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff95 	bl	8004e38 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff8c 	bl	8004e38 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d8e4      	bhi.n	8004ef8 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	2104      	movs	r1, #4
 8004f32:	4804      	ldr	r0, [pc, #16]	; (8004f44 <Custom_OLED_Write_Data+0x70>)
 8004f34:	f7ff ff63 	bl	8004dfe <Custom_GPIO_Set>
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40020000 	.word	0x40020000
 8004f44:	40020400 	.word	0x40020400

08004f48 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	71fb      	strb	r3, [r7, #7]
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71bb      	strb	r3, [r7, #6]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	717b      	strb	r3, [r7, #5]
 8004f62:	4613      	mov	r3, r2
 8004f64:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8004f66:	2315      	movs	r3, #21
 8004f68:	723b      	strb	r3, [r7, #8]
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	727b      	strb	r3, [r7, #9]
 8004f6e:	797b      	ldrb	r3, [r7, #5]
 8004f70:	72bb      	strb	r3, [r7, #10]
 8004f72:	2375      	movs	r3, #117	; 0x75
 8004f74:	72fb      	strb	r3, [r7, #11]
 8004f76:	79bb      	ldrb	r3, [r7, #6]
 8004f78:	733b      	strb	r3, [r7, #12]
 8004f7a:	793b      	ldrb	r3, [r7, #4]
 8004f7c:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 8004f7e:	f107 0308 	add.w	r3, r7, #8
 8004f82:	2106      	movs	r1, #6
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff77 	bl	8004e78 <Custom_OLED_Write_Command>
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}

08004f92 <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 8004f9c:	233f      	movs	r3, #63	; 0x3f
 8004f9e:	225f      	movs	r2, #95	; 0x5f
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7ff ffd0 	bl	8004f48 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004fa8:	2300      	movs	r3, #0
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e007      	b.n	8004fbe <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 8004fae:	1cbb      	adds	r3, r7, #2
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff8e 	bl	8004ed4 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004fc4:	dbf3      	blt.n	8004fae <Custom_OLED_Clear+0x1c>
    }
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <Custom_OLED_Init>:

void Custom_OLED_Init() {
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8004fd6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004fda:	480e      	ldr	r0, [pc, #56]	; (8005014 <Custom_OLED_Init+0x44>)
 8004fdc:	f7ff fec4 	bl	8004d68 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8004fe0:	480c      	ldr	r0, [pc, #48]	; (8005014 <Custom_OLED_Init+0x44>)
 8004fe2:	f7ff feb1 	bl	8004d48 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <Custom_OLED_Init+0x48>)
 8004fe8:	463c      	mov	r4, r7
 8004fea:	461d      	mov	r5, r3
 8004fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ff4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ff8:	6020      	str	r0, [r4, #0]
 8004ffa:	3404      	adds	r4, #4
 8004ffc:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 8004ffe:	463b      	mov	r3, r7
 8005000:	2125      	movs	r1, #37	; 0x25
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff ff38 	bl	8004e78 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8005008:	f7ff ffc3 	bl	8004f92 <Custom_OLED_Clear>
}
 800500c:	bf00      	nop
 800500e:	3728      	adds	r7, #40	; 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	bdb0      	pop	{r4, r5, r7, pc}
 8005014:	40003800 	.word	0x40003800
 8005018:	0800aa64 	.word	0x0800aa64

0800501c <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	461a      	mov	r2, r3
 800502a:	4623      	mov	r3, r4
 800502c:	71fb      	strb	r3, [r7, #7]
 800502e:	4603      	mov	r3, r0
 8005030:	80bb      	strh	r3, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	71bb      	strb	r3, [r7, #6]
 8005036:	4613      	mov	r3, r2
 8005038:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 800503a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800503e:	461a      	mov	r2, r3
 8005040:	0092      	lsls	r2, r2, #2
 8005042:	4413      	add	r3, r2
 8005044:	b2da      	uxtb	r2, r3
 8005046:	79bb      	ldrb	r3, [r7, #6]
 8005048:	4413      	add	r3, r2
 800504a:	b2db      	uxtb	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 8005050:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	b2da      	uxtb	r2, r3
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	4413      	add	r3, r2
 800505c:	b2db      	uxtb	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b5f      	cmp	r3, #95	; 0x5f
 8005066:	d802      	bhi.n	800506e <Custom_OLED_Putchar+0x52>
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	2b3f      	cmp	r3, #63	; 0x3f
 800506c:	d902      	bls.n	8005074 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005072:	e06a      	b.n	800514a <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	78f9      	ldrb	r1, [r7, #3]
 800507a:	79b8      	ldrb	r0, [r7, #6]
 800507c:	f7ff ff64 	bl	8004f48 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 8005080:	79fa      	ldrb	r2, [r7, #7]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	4a32      	ldr	r2, [pc, #200]	; (8005154 <Custom_OLED_Putchar+0x138>)
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e048      	b.n	8005126 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e03f      	b.n	800511a <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e034      	b.n	800510a <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e029      	b.n	80050fa <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	4413      	add	r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	fa42 f303 	asr.w	r3, r2, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <Custom_OLED_Putchar+0xa6>
 80050be:	88b8      	ldrh	r0, [r7, #4]
 80050c0:	e000      	b.n	80050c4 <Custom_OLED_Putchar+0xa8>
 80050c2:	2000      	movs	r0, #0
 80050c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80050cc:	69f9      	ldr	r1, [r7, #28]
 80050ce:	fb02 f101 	mul.w	r1, r2, r1
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	440a      	add	r2, r1
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	00da      	lsls	r2, r3, #3
 80050dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	441a      	add	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <Custom_OLED_Putchar+0x13c>)
 80050ee:	4601      	mov	r1, r0
 80050f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	3301      	adds	r3, #1
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	dbd0      	blt.n	80050a6 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3301      	adds	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	dbc5      	blt.n	80050a0 <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	3301      	adds	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b07      	cmp	r3, #7
 800511e:	ddbc      	ble.n	800509a <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	3301      	adds	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b04      	cmp	r3, #4
 800512a:	ddb3      	ble.n	8005094 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 800512c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005130:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005134:	fb03 f202 	mul.w	r2, r3, r2
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4619      	mov	r1, r3
 8005142:	4805      	ldr	r0, [pc, #20]	; (8005158 <Custom_OLED_Putchar+0x13c>)
 8005144:	f7ff fec6 	bl	8004ed4 <Custom_OLED_Write_Data>
	return 0;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3724      	adds	r7, #36	; 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	bf00      	nop
 8005154:	0800b0c4 	.word	0x0800b0c4
 8005158:	200012ac 	.word	0x200012ac

0800515c <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 800515c:	b40f      	push	{r0, r1, r2, r3}
 800515e:	b590      	push	{r4, r7, lr}
 8005160:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8005164:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 8005172:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8005176:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800517a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800517e:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8005180:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005184:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005188:	f107 0008 	add.w	r0, r7, #8
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8005192:	f003 faa1 	bl	80086d8 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 800519c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051a0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80051aa:	e226      	b.n	80055fa <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80051ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80051b0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80051b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b2f      	cmp	r3, #47	; 0x2f
 80051be:	f040 81f7 	bne.w	80055b0 <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 80051c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051c6:	3301      	adds	r3, #1
 80051c8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80051cc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80051d0:	5cd3      	ldrb	r3, [r2, r3]
 80051d2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 80051d6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80051da:	2b2f      	cmp	r3, #47	; 0x2f
 80051dc:	d105      	bne.n	80051ea <Custom_OLED_Printf+0x8e>
				cursor += 1;
 80051de:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051e2:	3301      	adds	r3, #1
 80051e4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80051e8:	e1e2      	b.n	80055b0 <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 80051ea:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80051ee:	3b23      	subs	r3, #35	; 0x23
 80051f0:	2b56      	cmp	r3, #86	; 0x56
 80051f2:	f200 81d7 	bhi.w	80055a4 <Custom_OLED_Printf+0x448>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <Custom_OLED_Printf+0xa0>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005415 	.word	0x08005415
 8005200:	080055a5 	.word	0x080055a5
 8005204:	080055a5 	.word	0x080055a5
 8005208:	080055a5 	.word	0x080055a5
 800520c:	080055a5 	.word	0x080055a5
 8005210:	080055a5 	.word	0x080055a5
 8005214:	080055a5 	.word	0x080055a5
 8005218:	080055a5 	.word	0x080055a5
 800521c:	080055a5 	.word	0x080055a5
 8005220:	080055a5 	.word	0x080055a5
 8005224:	080055a5 	.word	0x080055a5
 8005228:	080055a5 	.word	0x080055a5
 800522c:	080055a5 	.word	0x080055a5
 8005230:	08005359 	.word	0x08005359
 8005234:	08005359 	.word	0x08005359
 8005238:	08005359 	.word	0x08005359
 800523c:	08005359 	.word	0x08005359
 8005240:	08005359 	.word	0x08005359
 8005244:	08005359 	.word	0x08005359
 8005248:	08005359 	.word	0x08005359
 800524c:	080055a5 	.word	0x080055a5
 8005250:	080055a5 	.word	0x080055a5
 8005254:	080055a5 	.word	0x080055a5
 8005258:	080055a5 	.word	0x080055a5
 800525c:	080055a5 	.word	0x080055a5
 8005260:	080055a5 	.word	0x080055a5
 8005264:	080055a5 	.word	0x080055a5
 8005268:	080055a5 	.word	0x080055a5
 800526c:	080055a5 	.word	0x080055a5
 8005270:	080055a5 	.word	0x080055a5
 8005274:	08005405 	.word	0x08005405
 8005278:	080055a5 	.word	0x080055a5
 800527c:	080055a5 	.word	0x080055a5
 8005280:	080055a5 	.word	0x080055a5
 8005284:	080055a5 	.word	0x080055a5
 8005288:	080055a5 	.word	0x080055a5
 800528c:	080055a5 	.word	0x080055a5
 8005290:	080055a5 	.word	0x080055a5
 8005294:	080055a5 	.word	0x080055a5
 8005298:	080055a5 	.word	0x080055a5
 800529c:	080053f3 	.word	0x080053f3
 80052a0:	080055a5 	.word	0x080055a5
 80052a4:	080055a5 	.word	0x080055a5
 80052a8:	080055a5 	.word	0x080055a5
 80052ac:	080055a5 	.word	0x080055a5
 80052b0:	080055a5 	.word	0x080055a5
 80052b4:	080055a5 	.word	0x080055a5
 80052b8:	080055a5 	.word	0x080055a5
 80052bc:	080055a5 	.word	0x080055a5
 80052c0:	080055a5 	.word	0x080055a5
 80052c4:	080055a5 	.word	0x080055a5
 80052c8:	080055a5 	.word	0x080055a5
 80052cc:	080055a5 	.word	0x080055a5
 80052d0:	080055a5 	.word	0x080055a5
 80052d4:	080055a5 	.word	0x080055a5
 80052d8:	080055a5 	.word	0x080055a5
 80052dc:	080055a5 	.word	0x080055a5
 80052e0:	080055a5 	.word	0x080055a5
 80052e4:	080055a5 	.word	0x080055a5
 80052e8:	080055a5 	.word	0x080055a5
 80052ec:	080055a5 	.word	0x080055a5
 80052f0:	080055a5 	.word	0x080055a5
 80052f4:	0800540d 	.word	0x0800540d
 80052f8:	08005391 	.word	0x08005391
 80052fc:	080053a3 	.word	0x080053a3
 8005300:	080055a5 	.word	0x080055a5
 8005304:	080055a5 	.word	0x080055a5
 8005308:	080055a5 	.word	0x080055a5
 800530c:	08005387 	.word	0x08005387
 8005310:	080055a5 	.word	0x080055a5
 8005314:	080055a5 	.word	0x080055a5
 8005318:	080055a5 	.word	0x080055a5
 800531c:	080053fd 	.word	0x080053fd
 8005320:	080053c1 	.word	0x080053c1
 8005324:	080053ad 	.word	0x080053ad
 8005328:	080055a5 	.word	0x080055a5
 800532c:	080053b7 	.word	0x080053b7
 8005330:	080053e9 	.word	0x080053e9
 8005334:	080055a5 	.word	0x080055a5
 8005338:	0800537d 	.word	0x0800537d
 800533c:	080053d5 	.word	0x080053d5
 8005340:	080053cb 	.word	0x080053cb
 8005344:	080055a5 	.word	0x080055a5
 8005348:	080053df 	.word	0x080053df
 800534c:	08005373 	.word	0x08005373
 8005350:	080055a5 	.word	0x080055a5
 8005354:	08005399 	.word	0x08005399
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 800535e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005362:	3b30      	subs	r3, #48	; 0x30
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	00d2      	lsls	r2, r2, #3
 800536a:	4413      	add	r3, r2
 800536c:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 8005370:	e118      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 8005372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005376:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800537a:	e113      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 800537c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005380:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005384:	e10e      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8005386:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800538a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800538e:	e109      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 8005390:	231f      	movs	r3, #31
 8005392:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005396:	e105      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 8005398:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800539c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053a0:	e100      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80053a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80053a6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053aa:	e0fb      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80053ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80053b0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053b4:	e0f6      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 80053b6:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 80053ba:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053be:	e0f1      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 80053c0:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80053c4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053c8:	e0ec      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 80053ca:	f240 73ef 	movw	r3, #2031	; 0x7ef
 80053ce:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053d2:	e0e7      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 80053d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80053d8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053dc:	e0e2      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 80053de:	f647 031f 	movw	r3, #30751	; 0x781f
 80053e2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053e6:	e0dd      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 80053e8:	f64f 030f 	movw	r3, #63503	; 0xf80f
 80053ec:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053f0:	e0d8      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 80053f2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80053f6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053fa:	e0d3      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005402:	e0cf      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800540a:	e0cb      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8005412:	e0c7      	b.n	80055a4 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005420:	e099      	b.n	8005556 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 8005422:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005426:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800542a:	4413      	add	r3, r2
 800542c:	3302      	adds	r3, #2
 800542e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005432:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d924      	bls.n	8005486 <Custom_OLED_Printf+0x32a>
 800543c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005440:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005444:	4413      	add	r3, r2
 8005446:	3302      	adds	r3, #2
 8005448:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800544c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005450:	5cd3      	ldrb	r3, [r2, r3]
 8005452:	2b46      	cmp	r3, #70	; 0x46
 8005454:	d817      	bhi.n	8005486 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 8005456:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8005460:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005464:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005468:	4413      	add	r3, r2
 800546a:	3302      	adds	r3, #2
 800546c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005470:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005474:	5cd3      	ldrb	r3, [r2, r3]
 8005476:	461a      	mov	r2, r3
 8005478:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800547c:	4413      	add	r3, r2
 800547e:	3b37      	subs	r3, #55	; 0x37
 8005480:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005484:	e062      	b.n	800554c <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 8005486:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800548a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800548e:	4413      	add	r3, r2
 8005490:	3302      	adds	r3, #2
 8005492:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005496:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d924      	bls.n	80054ea <Custom_OLED_Printf+0x38e>
 80054a0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054a8:	4413      	add	r3, r2
 80054aa:	3302      	adds	r3, #2
 80054ac:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054b0:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	2b66      	cmp	r3, #102	; 0x66
 80054b8:	d817      	bhi.n	80054ea <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 80054ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 80054c4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054c8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054cc:	4413      	add	r3, r2
 80054ce:	3302      	adds	r3, #2
 80054d0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054d4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054d8:	5cd3      	ldrb	r3, [r2, r3]
 80054da:	461a      	mov	r2, r3
 80054dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054e0:	4413      	add	r3, r2
 80054e2:	3b57      	subs	r3, #87	; 0x57
 80054e4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80054e8:	e030      	b.n	800554c <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 80054ea:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054f2:	4413      	add	r3, r2
 80054f4:	3302      	adds	r3, #2
 80054f6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054fa:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	2b2f      	cmp	r3, #47	; 0x2f
 8005502:	d923      	bls.n	800554c <Custom_OLED_Printf+0x3f0>
 8005504:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005508:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800550c:	4413      	add	r3, r2
 800550e:	3302      	adds	r3, #2
 8005510:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005514:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005518:	5cd3      	ldrb	r3, [r2, r3]
 800551a:	2b39      	cmp	r3, #57	; 0x39
 800551c:	d816      	bhi.n	800554c <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 800551e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8005528:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800552c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005530:	4413      	add	r3, r2
 8005532:	3302      	adds	r3, #2
 8005534:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005538:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800553c:	5cd3      	ldrb	r3, [r2, r3]
 800553e:	461a      	mov	r2, r3
 8005540:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005544:	4413      	add	r3, r2
 8005546:	3b30      	subs	r3, #48	; 0x30
 8005548:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 800554c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005550:	3301      	adds	r3, #1
 8005552:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005556:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800555a:	2b05      	cmp	r3, #5
 800555c:	f67f af61 	bls.w	8005422 <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 8005560:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b29b      	uxth	r3, r3
 800557a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800557e:	b29b      	uxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	b29b      	uxth	r3, r3
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	b29b      	uxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 8005598:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800559c:	3306      	adds	r3, #6
 800559e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80055a2:	bf00      	nop
				}

				cursor += 2;
 80055a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055a8:	3302      	adds	r3, #2
 80055aa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80055ae:	e024      	b.n	80055fa <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80055b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80055b4:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80055b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055bc:	4413      	add	r3, r2
 80055be:	7818      	ldrb	r0, [r3, #0]
 80055c0:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 80055c4:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80055c8:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 80055cc:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4623      	mov	r3, r4
 80055d4:	f7ff fd22 	bl	800501c <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 80055d8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80055dc:	461a      	mov	r2, r3
 80055de:	0052      	lsls	r2, r2, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80055ea:	4413      	add	r3, r2
 80055ec:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 80055f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055f4:	3301      	adds	r3, #1
 80055f6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 80055fa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80055fe:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8005602:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005606:	4413      	add	r3, r2
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f47f adce 	bne.w	80051ac <Custom_OLED_Printf+0x50>
	}
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800561e:	b004      	add	sp, #16
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop

08005624 <LL_GPIO_ReadInputPort>:
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	return uwTick;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <Custom_Delay_Get_SysTick+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000284 	.word	0x20000284

08005654 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 8005672:	f7ff ffe3 	bl	800563c <Custom_Delay_Get_SysTick>
 8005676:	4602      	mov	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	741a      	strb	r2, [r3, #16]
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffc3 	bl	8005624 <LL_GPIO_ReadInputPort>
 800569e:	4602      	mov	r2, r0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 80056b4:	f7ff ffc2 	bl	800563c <Custom_Delay_Get_SysTick>
 80056b8:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7c1b      	ldrb	r3, [r3, #16]
 80056be:	3b01      	subs	r3, #1
 80056c0:	2b07      	cmp	r3, #7
 80056c2:	d873      	bhi.n	80057ac <Custom_Switch_State_Machine+0x120>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <Custom_Switch_State_Machine+0x40>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	08005701 	.word	0x08005701
 80056d4:	080057ad 	.word	0x080057ad
 80056d8:	08005737 	.word	0x08005737
 80056dc:	080057ad 	.word	0x080057ad
 80056e0:	080057ad 	.word	0x080057ad
 80056e4:	080057ad 	.word	0x080057ad
 80056e8:	08005781 	.word	0x08005781

		case LONG_OFF:
			if (currentPushed) {
 80056ec:	7bbb      	ldrb	r3, [r7, #14]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d05b      	beq.n	80057aa <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2250      	movs	r2, #80	; 0x50
 80056fc:	609a      	str	r2, [r3, #8]
			}
			break;
 80056fe:	e054      	b.n	80057aa <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	429a      	cmp	r2, r3
 800570e:	d808      	bhi.n	8005722 <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005720:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68d9      	ldr	r1, [r3, #12]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	1acb      	subs	r3, r1, r3
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	609a      	str	r2, [r3, #8]
			break;
 8005734:	e03a      	b.n	80057ac <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8005736:	7bbb      	ldrb	r3, [r7, #14]
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d006      	beq.n	8005750 <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2208      	movs	r2, #8
 8005746:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2250      	movs	r2, #80	; 0x50
 800574c:	609a      	str	r2, [r3, #8]
				break;
 800574e:	e02d      	b.n	80057ac <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	1acb      	subs	r3, r1, r3
 800575c:	429a      	cmp	r2, r3
 800575e:	d805      	bhi.n	800576c <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800576a:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68d9      	ldr	r1, [r3, #12]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	1acb      	subs	r3, r1, r3
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	609a      	str	r2, [r3, #8]
			break;
 800577e:	e015      	b.n	80057ac <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	1acb      	subs	r3, r1, r3
 800578c:	429a      	cmp	r2, r3
 800578e:	d802      	bhi.n	8005796 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68d9      	ldr	r1, [r3, #12]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1acb      	subs	r3, r1, r3
 80057a2:	441a      	add	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
			break;
 80057a8:	e000      	b.n	80057ac <Custom_Switch_State_Machine+0x120>
			break;
 80057aa:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2, sw3;
	if (!isInitialized) {
 80057c2:	4b59      	ldr	r3, [pc, #356]	; (8005928 <Custom_Switch_Read+0x16c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d014      	beq.n	80057fa <Custom_Switch_Read+0x3e>
		isInitialized = true;
 80057d0:	4b55      	ldr	r3, [pc, #340]	; (8005928 <Custom_Switch_Read+0x16c>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 80057d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057da:	4954      	ldr	r1, [pc, #336]	; (800592c <Custom_Switch_Read+0x170>)
 80057dc:	4854      	ldr	r0, [pc, #336]	; (8005930 <Custom_Switch_Read+0x174>)
 80057de:	f7ff ff39 	bl	8005654 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 80057e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e6:	4951      	ldr	r1, [pc, #324]	; (800592c <Custom_Switch_Read+0x170>)
 80057e8:	4852      	ldr	r0, [pc, #328]	; (8005934 <Custom_Switch_Read+0x178>)
 80057ea:	f7ff ff33 	bl	8005654 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw3, SW3_PORT, SW3_PIN);
 80057ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057f2:	494e      	ldr	r1, [pc, #312]	; (800592c <Custom_Switch_Read+0x170>)
 80057f4:	4850      	ldr	r0, [pc, #320]	; (8005938 <Custom_Switch_Read+0x17c>)
 80057f6:	f7ff ff2d 	bl	8005654 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 80057fa:	484d      	ldr	r0, [pc, #308]	; (8005930 <Custom_Switch_Read+0x174>)
 80057fc:	f7ff ff46 	bl	800568c <Custom_Switch_State_Machine>
 8005800:	4603      	mov	r3, r0
 8005802:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8005804:	484b      	ldr	r0, [pc, #300]	; (8005934 <Custom_Switch_Read+0x178>)
 8005806:	f7ff ff41 	bl	800568c <Custom_Switch_State_Machine>
 800580a:	4603      	mov	r3, r0
 800580c:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3PushEvent = Custom_Switch_State_Machine(&sw3);
 800580e:	484a      	ldr	r0, [pc, #296]	; (8005938 <Custom_Switch_Read+0x17c>)
 8005810:	f7ff ff3c 	bl	800568c <Custom_Switch_State_Machine>
 8005814:	4603      	mov	r3, r0
 8005816:	717b      	strb	r3, [r7, #5]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if(sw1PushEvent) {
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <Custom_Switch_Read+0xa4>
		if (sw2.state & SHORT_ON){
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <Custom_Switch_Read+0x178>)
 8005820:	7c1b      	ldrb	r3, [r3, #16]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <Custom_Switch_Read+0x82>
			sw2PushEvent = true;
 800582a:	2301      	movs	r3, #1
 800582c:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw1.state;
 800582e:	4b40      	ldr	r3, [pc, #256]	; (8005930 <Custom_Switch_Read+0x174>)
 8005830:	7c1a      	ldrb	r2, [r3, #16]
 8005832:	4b40      	ldr	r3, [pc, #256]	; (8005934 <Custom_Switch_Read+0x178>)
 8005834:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw1.timer;
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <Custom_Switch_Read+0x174>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a3e      	ldr	r2, [pc, #248]	; (8005934 <Custom_Switch_Read+0x178>)
 800583c:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 800583e:	4b3e      	ldr	r3, [pc, #248]	; (8005938 <Custom_Switch_Read+0x17c>)
 8005840:	7c1b      	ldrb	r3, [r3, #16]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d051      	beq.n	80058ee <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 800584a:	2301      	movs	r3, #1
 800584c:	717b      	strb	r3, [r7, #5]
			sw3.state = sw1.state;
 800584e:	4b38      	ldr	r3, [pc, #224]	; (8005930 <Custom_Switch_Read+0x174>)
 8005850:	7c1a      	ldrb	r2, [r3, #16]
 8005852:	4b39      	ldr	r3, [pc, #228]	; (8005938 <Custom_Switch_Read+0x17c>)
 8005854:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw1.timer;
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <Custom_Switch_Read+0x174>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4a37      	ldr	r2, [pc, #220]	; (8005938 <Custom_Switch_Read+0x17c>)
 800585c:	6093      	str	r3, [r2, #8]
 800585e:	e046      	b.n	80058ee <Custom_Switch_Read+0x132>
		}
	}
	else if(sw2PushEvent) {
 8005860:	79bb      	ldrb	r3, [r7, #6]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <Custom_Switch_Read+0xec>
		if (sw1.state & SHORT_ON){
 8005866:	4b32      	ldr	r3, [pc, #200]	; (8005930 <Custom_Switch_Read+0x174>)
 8005868:	7c1b      	ldrb	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <Custom_Switch_Read+0xca>
			sw1PushEvent = true;
 8005872:	2301      	movs	r3, #1
 8005874:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw2.state;
 8005876:	4b2f      	ldr	r3, [pc, #188]	; (8005934 <Custom_Switch_Read+0x178>)
 8005878:	7c1a      	ldrb	r2, [r3, #16]
 800587a:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <Custom_Switch_Read+0x174>)
 800587c:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw2.timer;
 800587e:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <Custom_Switch_Read+0x178>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <Custom_Switch_Read+0x174>)
 8005884:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <Custom_Switch_Read+0x17c>)
 8005888:	7c1b      	ldrb	r3, [r3, #16]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d02d      	beq.n	80058ee <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 8005892:	2301      	movs	r3, #1
 8005894:	717b      	strb	r3, [r7, #5]
			sw3.state = sw2.state;
 8005896:	4b27      	ldr	r3, [pc, #156]	; (8005934 <Custom_Switch_Read+0x178>)
 8005898:	7c1a      	ldrb	r2, [r3, #16]
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <Custom_Switch_Read+0x17c>)
 800589c:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw2.timer;
 800589e:	4b25      	ldr	r3, [pc, #148]	; (8005934 <Custom_Switch_Read+0x178>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4a25      	ldr	r2, [pc, #148]	; (8005938 <Custom_Switch_Read+0x17c>)
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	e022      	b.n	80058ee <Custom_Switch_Read+0x132>
		}
	}
	else if(sw3PushEvent) {
 80058a8:	797b      	ldrb	r3, [r7, #5]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01f      	beq.n	80058ee <Custom_Switch_Read+0x132>
		if (sw1.state & SHORT_ON){
 80058ae:	4b20      	ldr	r3, [pc, #128]	; (8005930 <Custom_Switch_Read+0x174>)
 80058b0:	7c1b      	ldrb	r3, [r3, #16]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <Custom_Switch_Read+0x112>
			sw1PushEvent = true;
 80058ba:	2301      	movs	r3, #1
 80058bc:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw3.state;
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <Custom_Switch_Read+0x17c>)
 80058c0:	7c1a      	ldrb	r2, [r3, #16]
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <Custom_Switch_Read+0x174>)
 80058c4:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw3.timer;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <Custom_Switch_Read+0x17c>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4a19      	ldr	r2, [pc, #100]	; (8005930 <Custom_Switch_Read+0x174>)
 80058cc:	6093      	str	r3, [r2, #8]
		}
		if (sw2.state & SHORT_ON) {
 80058ce:	4b19      	ldr	r3, [pc, #100]	; (8005934 <Custom_Switch_Read+0x178>)
 80058d0:	7c1b      	ldrb	r3, [r3, #16]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <Custom_Switch_Read+0x132>
			sw2PushEvent = true;
 80058da:	2301      	movs	r3, #1
 80058dc:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw3.state;
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <Custom_Switch_Read+0x17c>)
 80058e0:	7c1a      	ldrb	r2, [r3, #16]
 80058e2:	4b14      	ldr	r3, [pc, #80]	; (8005934 <Custom_Switch_Read+0x178>)
 80058e4:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw3.timer;
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <Custom_Switch_Read+0x17c>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <Custom_Switch_Read+0x178>)
 80058ec:	6093      	str	r3, [r2, #8]
		}
	}


	uint8_t buttonPushEvent = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	713b      	strb	r3, [r7, #4]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <Custom_Switch_Read+0x144>
 80058f8:	793b      	ldrb	r3, [r7, #4]
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	713b      	strb	r3, [r7, #4]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8005900:	79bb      	ldrb	r3, [r7, #6]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <Custom_Switch_Read+0x152>
 8005906:	793b      	ldrb	r3, [r7, #4]
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	713b      	strb	r3, [r7, #4]
	if (sw3PushEvent) buttonPushEvent |= CUSTOM_SW_3;
 800590e:	797b      	ldrb	r3, [r7, #5]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <Custom_Switch_Read+0x160>
 8005914:	793b      	ldrb	r3, [r7, #4]
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	713b      	strb	r3, [r7, #4]

	return buttonPushEvent;
 800591c:	793b      	ldrb	r3, [r7, #4]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	200013ec 	.word	0x200013ec
 800592c:	40020800 	.word	0x40020800
 8005930:	200013f0 	.word	0x200013f0
 8005934:	20001404 	.word	0x20001404
 8005938:	20001418 	.word	0x20001418

0800593c <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting() {
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0

	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <Pre_Drive_Setting+0x1c>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <Pre_Drive_Setting+0x10>
		Pre_Drive_Var_Adjust_Second_Drive();
 8005948:	f000 f836 	bl	80059b8 <Pre_Drive_Var_Adjust_Second_Drive>
	}

	if (optimizeLevel >= OPTIMIZE_LEVEL_NONE) {
		Pre_Drive_Var_Adjust_First_Drive();
 800594c:	f000 f806 	bl	800595c <Pre_Drive_Var_Adjust_First_Drive>
	}

	Pre_Drive_Var_Init();
 8005950:	f000 fa2c 	bl	8005dac <Pre_Drive_Var_Init>

}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20002e7a 	.word	0x20002e7a

0800595c <Pre_Drive_Var_Adjust_First_Drive>:



// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust_First_Drive() {
 800595c:	b5b0      	push	{r4, r5, r7, lr}
 800595e:	b09c      	sub	sp, #112	; 0x70
 8005960:	af02      	add	r7, sp, #8

	t_driveMenu_Int		intValues[] = {
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <Pre_Drive_Var_Adjust_First_Drive+0x54>)
 8005964:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005968:	461d      	mov	r5, r3
 800596a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800596e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005972:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "Threshold",			&threshold,			10 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	t_driveMenu_Float	floatValues[] = {
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <Pre_Drive_Var_Adjust_First_Drive+0x58>)
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	4611      	mov	r1, r2
 8005982:	2248      	movs	r2, #72	; 0x48
 8005984:	4618      	mov	r0, r3
 8005986:	f002 feea 	bl	800875e <memcpy>
			{ "Pit In Len",			&pitInLen,			0.01f },
			{ "Target Speed",		&targetSpeed_init,	0.05f },
			{ "CurveDecel Coef",	&curveDeceleCoef,	500 },
			//{ "Position Coef",		&positionCoef,		0.000001f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 800598a:	2303      	movs	r3, #3
 800598c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_TRUE);
 8005990:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005994:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005998:	1d39      	adds	r1, r7, #4
 800599a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800599e:	2401      	movs	r4, #1
 80059a0:	9400      	str	r4, [sp, #0]
 80059a2:	f000 f8bb 	bl	8005b1c <Pre_Drive_Var_Adjust_Switch_Cntl>
}
 80059a6:	bf00      	nop
 80059a8:	3768      	adds	r7, #104	; 0x68
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bdb0      	pop	{r4, r5, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	0800aa8c 	.word	0x0800aa8c
 80059b4:	0800aaa4 	.word	0x0800aaa4

080059b8 <Pre_Drive_Var_Adjust_Second_Drive>:



static void Pre_Drive_Var_Adjust_Second_Drive() {
 80059b8:	b5b0      	push	{r4, r5, r7, lr}
 80059ba:	b0aa      	sub	sp, #168	; 0xa8
 80059bc:	af02      	add	r7, sp, #8

	float acceleStartLen = acceleStartTick / TICK_PER_M;
 80059be:	4b49      	ldr	r3, [pc, #292]	; (8005ae4 <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 80059c0:	ed93 7a00 	vldr	s14, [r3]
 80059c4:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ae8 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 80059c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059cc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float deceleEndLen = deceleEndTick / TICK_PER_M;
 80059d0:	4b46      	ldr	r3, [pc, #280]	; (8005aec <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 80059d2:	ed93 7a00 	vldr	s14, [r3]
 80059d6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005ae8 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 80059da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059de:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	t_driveMenu_Int		intValues[] = {
 80059e2:	4b43      	ldr	r3, [pc, #268]	; (8005af0 <Pre_Drive_Var_Adjust_Second_Drive+0x138>)
 80059e4:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80059e8:	461d      	mov	r5, r3
 80059ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80059f2:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "optimize level",		&optimizeLevel,		1 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	t_driveMenu_Float	floatValues[] = {
 80059fc:	4a3d      	ldr	r2, [pc, #244]	; (8005af4 <Pre_Drive_Var_Adjust_Second_Drive+0x13c>)
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	460a      	mov	r2, r1
 8005a12:	709a      	strb	r2, [r3, #2]
 8005a14:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <Pre_Drive_Var_Adjust_Second_Drive+0x140>)
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	4a37      	ldr	r2, [pc, #220]	; (8005afc <Pre_Drive_Var_Adjust_Second_Drive+0x144>)
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a28:	6018      	str	r0, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	8019      	strh	r1, [r3, #0]
 8005a2e:	3302      	adds	r3, #2
 8005a30:	0c0a      	lsrs	r2, r1, #16
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <Pre_Drive_Var_Adjust_Second_Drive+0x148>)
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
 8005a48:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <Pre_Drive_Var_Adjust_Second_Drive+0x14c>)
 8005a4a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a50:	c407      	stmia	r4!, {r0, r1, r2}
 8005a52:	8023      	strh	r3, [r4, #0]
 8005a54:	3402      	adds	r4, #2
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	7023      	strb	r3, [r4, #0]
 8005a5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <Pre_Drive_Var_Adjust_Second_Drive+0x150>)
 8005a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a64:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <Pre_Drive_Var_Adjust_Second_Drive+0x154>)
 8005a66:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a6c:	c407      	stmia	r4!, {r0, r1, r2}
 8005a6e:	7023      	strb	r3, [r4, #0]
 8005a70:	f107 0359 	add.w	r3, r7, #89	; 0x59
 8005a74:	2200      	movs	r2, #0
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
 8005a82:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <Pre_Drive_Var_Adjust_Second_Drive+0x15c>)
 8005a84:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a8a:	c407      	stmia	r4!, {r0, r1, r2}
 8005a8c:	8023      	strh	r3, [r4, #0]
 8005a8e:	3402      	adds	r4, #2
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	7023      	strb	r3, [r4, #0]
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <Pre_Drive_Var_Adjust_Second_Drive+0x160>)
 8005a96:	677b      	str	r3, [r7, #116]	; 0x74
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 8005a9a:	67bb      	str	r3, [r7, #120]	; 0x78
			//{ "Decele",				&decele_init,		0.25f },
			{ "acceleStart len",	&acceleStartLen,	0.025f },
			{ "decelEnd len",		&deceleEndLen,		0.05f },
			{ "decelEnd ratio",		&deceleEndRatio,	0.05f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8005a9c:	2305      	movs	r3, #5
 8005a9e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_FALSE);
 8005aa2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8005aa6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8005aaa:	1d39      	adds	r1, r7, #4
 8005aac:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005ab0:	2400      	movs	r4, #0
 8005ab2:	9400      	str	r4, [sp, #0]
 8005ab4:	f000 f832 	bl	8005b1c <Pre_Drive_Var_Adjust_Switch_Cntl>

	acceleStartTick = acceleStartLen * TICK_PER_M;
 8005ab8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005abc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005ae8 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 8005ac6:	edc3 7a00 	vstr	s15, [r3]
	deceleEndTick = deceleEndLen * TICK_PER_M;
 8005aca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ace:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005ae8 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 8005ad8:	edc3 7a00 	vstr	s15, [r3]

}
 8005adc:	bf00      	nop
 8005ade:	37a0      	adds	r7, #160	; 0xa0
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae4:	20000050 	.word	0x20000050
 8005ae8:	4519089d 	.word	0x4519089d
 8005aec:	20000054 	.word	0x20000054
 8005af0:	0800aaec 	.word	0x0800aaec
 8005af4:	0800ab04 	.word	0x0800ab04
 8005af8:	20000038 	.word	0x20000038
 8005afc:	0800ab14 	.word	0x0800ab14
 8005b00:	20000014 	.word	0x20000014
 8005b04:	0800ab24 	.word	0x0800ab24
 8005b08:	3ccccccd 	.word	0x3ccccccd
 8005b0c:	0800ab34 	.word	0x0800ab34
 8005b10:	3d4ccccd 	.word	0x3d4ccccd
 8005b14:	0800ab44 	.word	0x0800ab44
 8005b18:	20000058 	.word	0x20000058

08005b1c <Pre_Drive_Var_Adjust_Switch_Cntl>:


static void Pre_Drive_Var_Adjust_Switch_Cntl(t_driveMenu_Int *intValues, t_driveMenu_Float *floatValues, \
											uint8_t intValCnt, uint8_t floatValCnt, uint8_t isEnd) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	71fb      	strb	r3, [r7, #7]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71bb      	strb	r3, [r7, #6]

	uint8_t	sw = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	777b      	strb	r3, [r7, #29]


	for (uint8_t i = 0; i < intValCnt; i++) {
 8005b36:	2300      	movs	r3, #0
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e074      	b.n	8005c26 <Pre_Drive_Var_Adjust_Switch_Cntl+0x10a>

		Custom_OLED_Clear();
 8005b3c:	f7ff fa29 	bl	8004f92 <Custom_OLED_Clear>

		// 정수 변수 초기화
		if (i < intValCnt) {
 8005b40:	7ffa      	ldrb	r2, [r7, #31]
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d26b      	bcs.n	8005c20 <Pre_Drive_Var_Adjust_Switch_Cntl+0x104>

			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005b48:	e063      	b.n	8005c12 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>

				// OLED에 변수명 변수값 출력
				Custom_OLED_Printf("/2%s", intValues[i].valName);
 8005b4a:	7ffa      	ldrb	r2, [r7, #31]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	461a      	mov	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	488d      	ldr	r0, [pc, #564]	; (8005d94 <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005b5e:	f7ff fafd 	bl	800515c <Custom_OLED_Printf>
				Custom_OLED_Printf("/A/4%5d", *(intValues[i].val));
 8005b62:	7ffa      	ldrb	r2, [r7, #31]
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4887      	ldr	r0, [pc, #540]	; (8005d98 <Pre_Drive_Var_Adjust_Switch_Cntl+0x27c>)
 8005b7c:	f7ff faee 	bl	800515c <Custom_OLED_Printf>

				// 변수 값 빼기
				if (sw == CUSTOM_SW_1) {
 8005b80:	7f7b      	ldrb	r3, [r7, #29]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d121      	bne.n	8005bca <Pre_Drive_Var_Adjust_Switch_Cntl+0xae>
					*(intValues[i].val) -= intValues[i].changeVal;
 8005b86:	7ffa      	ldrb	r2, [r7, #31]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	461a      	mov	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	7d1b      	ldrb	r3, [r3, #20]
 8005b98:	b2d9      	uxtb	r1, r3
 8005b9a:	7ffa      	ldrb	r2, [r7, #31]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	b2d8      	uxtb	r0, r3
 8005bb0:	7ffa      	ldrb	r2, [r7, #31]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	1a42      	subs	r2, r0, r1
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e023      	b.n	8005c12 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
				}
				// 변수값 더하기
				else if (sw == CUSTOM_SW_2) {
 8005bca:	7f7b      	ldrb	r3, [r7, #29]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d120      	bne.n	8005c12 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
					*(intValues[i].val) += intValues[i].changeVal;
 8005bd0:	7ffa      	ldrb	r2, [r7, #31]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	7d1b      	ldrb	r3, [r3, #20]
 8005be2:	b2d8      	uxtb	r0, r3
 8005be4:	7ffa      	ldrb	r2, [r7, #31]
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b2d9      	uxtb	r1, r3
 8005bfa:	7ffa      	ldrb	r2, [r7, #31]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	461a      	mov	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	1842      	adds	r2, r0, r1
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005c12:	f7ff fdd3 	bl	80057bc <Custom_Switch_Read>
 8005c16:	4603      	mov	r3, r0
 8005c18:	777b      	strb	r3, [r7, #29]
 8005c1a:	7f7b      	ldrb	r3, [r7, #29]
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d194      	bne.n	8005b4a <Pre_Drive_Var_Adjust_Switch_Cntl+0x2e>
	for (uint8_t i = 0; i < intValCnt; i++) {
 8005c20:	7ffb      	ldrb	r3, [r7, #31]
 8005c22:	3301      	adds	r3, #1
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	7ffa      	ldrb	r2, [r7, #31]
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d386      	bcc.n	8005b3c <Pre_Drive_Var_Adjust_Switch_Cntl+0x20>
			}
		}
	}


	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	77bb      	strb	r3, [r7, #30]
 8005c32:	e0a3      	b.n	8005d7c <Pre_Drive_Var_Adjust_Switch_Cntl+0x260>

		Custom_OLED_Clear();
 8005c34:	f7ff f9ad 	bl	8004f92 <Custom_OLED_Clear>

		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005c38:	e095      	b.n	8005d66 <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>

			uint32_t num1 = (uint32_t)(*(floatValues[i].val));
 8005c3a:	7fba      	ldrb	r2, [r7, #30]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c54:	ee17 3a90 	vmov	r3, s15
 8005c58:	61bb      	str	r3, [r7, #24]
			uint32_t num2 = (uint32_t)( *(floatValues[i].val) * 100000 - num1 * 100000 );
 8005c5a:	7fba      	ldrb	r2, [r7, #30]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	461a      	mov	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	edd3 7a00 	vldr	s15, [r3]
 8005c70:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005d9c <Pre_Drive_Var_Adjust_Switch_Cntl+0x280>
 8005c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	4a49      	ldr	r2, [pc, #292]	; (8005da0 <Pre_Drive_Var_Adjust_Switch_Cntl+0x284>)
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c90:	ee17 3a90 	vmov	r3, s15
 8005c94:	617b      	str	r3, [r7, #20]

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/2%s", floatValues[i].valName);
 8005c96:	7fba      	ldrb	r2, [r7, #30]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	483a      	ldr	r0, [pc, #232]	; (8005d94 <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005caa:	f7ff fa57 	bl	800515c <Custom_OLED_Printf>
			Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	483c      	ldr	r0, [pc, #240]	; (8005da4 <Pre_Drive_Var_Adjust_Switch_Cntl+0x288>)
 8005cb4:	f7ff fa52 	bl	800515c <Custom_OLED_Printf>

			if (isEnd == CUSTOM_TRUE && i == floatValCnt - 1) {
 8005cb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
 8005cc0:	7fba      	ldrb	r2, [r7, #30]
 8005cc2:	79bb      	ldrb	r3, [r7, #6]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d102      	bne.n	8005cd0 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
				Custom_OLED_Printf("/g/0Ready to Drive");
 8005cca:	4837      	ldr	r0, [pc, #220]	; (8005da8 <Pre_Drive_Var_Adjust_Switch_Cntl+0x28c>)
 8005ccc:	f7ff fa46 	bl	800515c <Custom_OLED_Printf>
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8005cd0:	7f7b      	ldrb	r3, [r7, #29]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d122      	bne.n	8005d1c <Pre_Drive_Var_Adjust_Switch_Cntl+0x200>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 8005cd6:	7fba      	ldrb	r2, [r7, #30]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	edd3 7a05 	vldr	s15, [r3, #20]
 8005cea:	7fba      	ldrb	r2, [r7, #30]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	ed93 7a00 	vldr	s14, [r3]
 8005d00:	7fba      	ldrb	r2, [r7, #30]
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4413      	add	r3, r2
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d16:	edc3 7a00 	vstr	s15, [r3]
 8005d1a:	e024      	b.n	8005d66 <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8005d1c:	7f7b      	ldrb	r3, [r7, #29]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d121      	bne.n	8005d66 <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
				*(floatValues[i].val) += floatValues[i].changeVal;
 8005d22:	7fba      	ldrb	r2, [r7, #30]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	ed93 7a05 	vldr	s14, [r3, #20]
 8005d36:	7fba      	ldrb	r2, [r7, #30]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	edd3 7a00 	vldr	s15, [r3]
 8005d4c:	7fba      	ldrb	r2, [r7, #30]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	461a      	mov	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d62:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005d66:	f7ff fd29 	bl	80057bc <Custom_Switch_Read>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	777b      	strb	r3, [r7, #29]
 8005d6e:	7f7b      	ldrb	r3, [r7, #29]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	f47f af62 	bne.w	8005c3a <Pre_Drive_Var_Adjust_Switch_Cntl+0x11e>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005d76:	7fbb      	ldrb	r3, [r7, #30]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	77bb      	strb	r3, [r7, #30]
 8005d7c:	7fba      	ldrb	r2, [r7, #30]
 8005d7e:	79bb      	ldrb	r3, [r7, #6]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	f4ff af57 	bcc.w	8005c34 <Pre_Drive_Var_Adjust_Switch_Cntl+0x118>
			}
		}
	}

	Custom_OLED_Clear();
 8005d86:	f7ff f904 	bl	8004f92 <Custom_OLED_Clear>
}
 8005d8a:	bf00      	nop
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	0800ab54 	.word	0x0800ab54
 8005d98:	0800ab5c 	.word	0x0800ab5c
 8005d9c:	47c35000 	.word	0x47c35000
 8005da0:	000186a0 	.word	0x000186a0
 8005da4:	0800ab64 	.word	0x0800ab64
 8005da8:	0800ab70 	.word	0x0800ab70

08005dac <Pre_Drive_Var_Init>:



// 주행 전 초기값 대입
static void Pre_Drive_Var_Init() {
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
	/*
	 * 인터럽트에서 쓰는 변수
	 */

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR_L = TIM10->ARR + 1;
 8005db2:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <Pre_Drive_Var_Init+0x16c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	3301      	adds	r3, #1
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b58      	ldr	r3, [pc, #352]	; (8005f1c <Pre_Drive_Var_Init+0x170>)
 8005dbc:	601a      	str	r2, [r3, #0]
	levelMaxCCR_R = TIM11->ARR + 1;
 8005dbe:	4b58      	ldr	r3, [pc, #352]	; (8005f20 <Pre_Drive_Var_Init+0x174>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <Pre_Drive_Var_Init+0x178>)
 8005dc8:	601a      	str	r2, [r3, #0]
	prevErrorL = 0;
 8005dca:	4b57      	ldr	r3, [pc, #348]	; (8005f28 <Pre_Drive_Var_Init+0x17c>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 8005dd0:	4b56      	ldr	r3, [pc, #344]	; (8005f2c <Pre_Drive_Var_Init+0x180>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	targetEncoderValueL = 0;
 8005dd6:	4b56      	ldr	r3, [pc, #344]	; (8005f30 <Pre_Drive_Var_Init+0x184>)
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
	targetEncoderValueR = 0;
 8005dde:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <Pre_Drive_Var_Init+0x188>)
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]

	dutyRatioSignL = 1;
 8005de6:	4b54      	ldr	r3, [pc, #336]	; (8005f38 <Pre_Drive_Var_Init+0x18c>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	701a      	strb	r2, [r3, #0]
	dutyRatioSignR = 1;
 8005dec:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <Pre_Drive_Var_Init+0x190>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]

	// 가속도 변수 초기화
	targetAccele = targetAccele_init;
 8005df2:	4b53      	ldr	r3, [pc, #332]	; (8005f40 <Pre_Drive_Var_Init+0x194>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a53      	ldr	r2, [pc, #332]	; (8005f44 <Pre_Drive_Var_Init+0x198>)
 8005df8:	6013      	str	r3, [r2, #0]
	curAccele = 0;
 8005dfa:	4b53      	ldr	r3, [pc, #332]	; (8005f48 <Pre_Drive_Var_Init+0x19c>)
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = targetSpeed_init;
 8005e02:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <Pre_Drive_Var_Init+0x1a0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a52      	ldr	r2, [pc, #328]	; (8005f50 <Pre_Drive_Var_Init+0x1a4>)
 8005e08:	6013      	str	r3, [r2, #0]
	decele = decele_init;
 8005e0a:	4b52      	ldr	r3, [pc, #328]	; (8005f54 <Pre_Drive_Var_Init+0x1a8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a52      	ldr	r2, [pc, #328]	; (8005f58 <Pre_Drive_Var_Init+0x1ac>)
 8005e10:	6013      	str	r3, [r2, #0]
	curSpeed = MIN_SPEED;
 8005e12:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <Pre_Drive_Var_Init+0x1b0>)
 8005e14:	4a52      	ldr	r2, [pc, #328]	; (8005f60 <Pre_Drive_Var_Init+0x1b4>)
 8005e16:	601a      	str	r2, [r3, #0]

	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 8005e18:	4b52      	ldr	r3, [pc, #328]	; (8005f64 <Pre_Drive_Var_Init+0x1b8>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 8005e1e:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <Pre_Drive_Var_Init+0x1bc>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

	// positionVal을 windowing하여 구하는 것에 사용되는 변수 초기화
	positionSum = 0;
 8005e24:	4b51      	ldr	r3, [pc, #324]	; (8005f6c <Pre_Drive_Var_Init+0x1c0>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 8005e2a:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <Pre_Drive_Var_Init+0x1c4>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick_L = 0;
 8005e30:	4950      	ldr	r1, [pc, #320]	; (8005f74 <Pre_Drive_Var_Init+0x1c8>)
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9c1 2300 	strd	r2, r3, [r1]
	curTick_R = 0;
 8005e3e:	494e      	ldr	r1, [pc, #312]	; (8005f78 <Pre_Drive_Var_Init+0x1cc>)
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9c1 2300 	strd	r2, r3, [r1]

	// 2차 주행 inline 관현 값 초기화
	targetInlineVal = 0;
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <Pre_Drive_Var_Init+0x1d0>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
	curInlineVal = 0;
 8005e52:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <Pre_Drive_Var_Init+0x1d4>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
	/*
	 * 주행문에서 쓰는 변수
	 */

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 8005e58:	4b4a      	ldr	r3, [pc, #296]	; (8005f84 <Pre_Drive_Var_Init+0x1d8>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]

	// state machine 의 상태 업데이트
	driveState = DRIVE_STATE_IDLE;
 8005e5e:	4b4a      	ldr	r3, [pc, #296]	; (8005f88 <Pre_Drive_Var_Init+0x1dc>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 8005e64:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <Pre_Drive_Var_Init+0x1e0>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	801a      	strh	r2, [r3, #0]

	// 현재 마크가 시작된 tick
	markStartTick_L = 0;
 8005e6a:	4b49      	ldr	r3, [pc, #292]	; (8005f90 <Pre_Drive_Var_Init+0x1e4>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
	markStartTick_R = 0;
 8005e70:	4b48      	ldr	r3, [pc, #288]	; (8005f94 <Pre_Drive_Var_Init+0x1e8>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <Pre_Drive_Var_Init+0x1ec>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]

	// driveData 인덱스 초기화
	driveDataIdx = 0;
 8005e7c:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <Pre_Drive_Var_Init+0x1f0>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	801a      	strh	r2, [r3, #0]


	// 1차 주행에서만 초기화할 변수
	if (optimizeLevel == OPTIMIZE_LEVEL_NONE) {
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <Pre_Drive_Var_Init+0x1f4>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12e      	bne.n	8005ee8 <Pre_Drive_Var_Init+0x13c>

		optimizeLevel = OPTIMIZE_LEVEL_NONE;
 8005e8a:	4b45      	ldr	r3, [pc, #276]	; (8005fa0 <Pre_Drive_Var_Init+0x1f4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e013      	b.n	8005ebe <Pre_Drive_Var_Init+0x112>
			t_driveData temp = T_DRIVE_DATA_INIT;
 8005e96:	463b      	mov	r3, r7
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	809a      	strh	r2, [r3, #4]

			driveDataBuffer[i] = temp;
 8005e9e:	4941      	ldr	r1, [pc, #260]	; (8005fa4 <Pre_Drive_Var_Init+0x1f8>)
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	4413      	add	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	440b      	add	r3, r1
 8005eac:	461a      	mov	r2, r3
 8005eae:	463b      	mov	r3, r7
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	6010      	str	r0, [r2, #0]
 8005eb4:	889b      	ldrh	r3, [r3, #4]
 8005eb6:	8093      	strh	r3, [r2, #4]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d3e7      	bcc.n	8005e96 <Pre_Drive_Var_Init+0xea>
		}

		// driveData의 0, 1번째 값 초기화
		// 0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠
		// 실질적으로 주행은 1번 인덱스부터 시작
		driveDataBuffer[0].markState = MARK_STRAIGHT;
 8005ec6:	4b37      	ldr	r3, [pc, #220]	; (8005fa4 <Pre_Drive_Var_Init+0x1f8>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	711a      	strb	r2, [r3, #4]


		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	e007      	b.n	8005ee2 <Pre_Drive_Var_Init+0x136>

			crossCntTableBuffer[i] = 0;
 8005ed2:	4a35      	ldr	r2, [pc, #212]	; (8005fa8 <Pre_Drive_Var_Init+0x1fc>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d9f4      	bls.n	8005ed2 <Pre_Drive_Var_Init+0x126>
		}
	}

	// 2, 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8005ee8:	4b2d      	ldr	r3, [pc, #180]	; (8005fa0 <Pre_Drive_Var_Init+0x1f4>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <Pre_Drive_Var_Init+0x150>

		// isReadAllMark 값 정상으로 변경
		isReadAllMark = CUSTOM_TRUE;
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <Pre_Drive_Var_Init+0x200>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]

		// 부스트 컨트롤 상태 업데이트
		starightBoostCntl = BOOST_CNTL_IDLE;
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <Pre_Drive_Var_Init+0x204>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
	}

	// 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_CURVE){
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <Pre_Drive_Var_Init+0x1f4>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d902      	bls.n	8005f0a <Pre_Drive_Var_Init+0x15e>

		// 커브 인라인 상태 업데이트
		curveInlineCntl = INLINE_CNTL_IDLE;
 8005f04:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <Pre_Drive_Var_Init+0x208>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40014400 	.word	0x40014400
 8005f1c:	2000142c 	.word	0x2000142c
 8005f20:	40014800 	.word	0x40014800
 8005f24:	20001430 	.word	0x20001430
 8005f28:	20001434 	.word	0x20001434
 8005f2c:	20001438 	.word	0x20001438
 8005f30:	2000143c 	.word	0x2000143c
 8005f34:	20001440 	.word	0x20001440
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	2000000d 	.word	0x2000000d
 8005f40:	20000014 	.word	0x20000014
 8005f44:	20000024 	.word	0x20000024
 8005f48:	20000028 	.word	0x20000028
 8005f4c:	20000010 	.word	0x20000010
 8005f50:	20000030 	.word	0x20000030
 8005f54:	20000018 	.word	0x20000018
 8005f58:	2000002c 	.word	0x2000002c
 8005f5c:	20000034 	.word	0x20000034
 8005f60:	3c23d70a 	.word	0x3c23d70a
 8005f64:	20001444 	.word	0x20001444
 8005f68:	20001448 	.word	0x20001448
 8005f6c:	2000144c 	.word	0x2000144c
 8005f70:	20001450 	.word	0x20001450
 8005f74:	20001458 	.word	0x20001458
 8005f78:	20001460 	.word	0x20001460
 8005f7c:	20001468 	.word	0x20001468
 8005f80:	2000146c 	.word	0x2000146c
 8005f84:	20000048 	.word	0x20000048
 8005f88:	20001470 	.word	0x20001470
 8005f8c:	20002e78 	.word	0x20002e78
 8005f90:	20002e7c 	.word	0x20002e7c
 8005f94:	20002e80 	.word	0x20002e80
 8005f98:	20002e84 	.word	0x20002e84
 8005f9c:	20002c74 	.word	0x20002c74
 8005fa0:	20002e7a 	.word	0x20002e7a
 8005fa4:	20002074 	.word	0x20002074
 8005fa8:	20002d78 	.word	0x20002d78
 8005fac:	20000049 	.word	0x20000049
 8005fb0:	20001471 	.word	0x20001471
 8005fb4:	20001472 	.word	0x20001472

08005fb8 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8005fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8005fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8005fea:	bf00      	nop
 8005fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d1f8      	bne.n	8005fec <Custom_Delay_us+0x34>
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ffcc 	bl	8005fb8 <Custom_Delay_us>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006032:	edc7 0a00 	vstr	s1, [r7]

	targetSpeed = pinSpeed;
 8006036:	4a25      	ldr	r2, [pc, #148]	; (80060cc <Drive_Fit_In+0xa4>)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2 * s);
 800603c:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <Drive_Fit_In+0xa8>)
 800603e:	edd3 7a00 	vldr	s15, [r3]
 8006042:	ed97 7a00 	vldr	s14, [r7]
 8006046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800604a:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <Drive_Fit_In+0xa8>)
 800604c:	edd3 6a00 	vldr	s13, [r3]
 8006050:	edd7 7a00 	vldr	s15, [r7]
 8006054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	d512      	bpl.n	800608c <Drive_Fit_In+0x64>
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <Drive_Fit_In+0xa8>)
 8006068:	edd3 7a00 	vldr	s15, [r3]
 800606c:	ed97 7a00 	vldr	s14, [r7]
 8006070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <Drive_Fit_In+0xa8>)
 8006076:	edd3 6a00 	vldr	s13, [r3]
 800607a:	edd7 7a00 	vldr	s15, [r7]
 800607e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	eef1 7a67 	vneg.f32	s15, s15
 800608a:	e00f      	b.n	80060ac <Drive_Fit_In+0x84>
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <Drive_Fit_In+0xa8>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	ed97 7a00 	vldr	s14, [r7]
 8006096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <Drive_Fit_In+0xa8>)
 800609c:	edd3 6a00 	vldr	s13, [r3]
 80060a0:	edd7 7a00 	vldr	s15, [r7]
 80060a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80060b0:	ee77 6a07 	vadd.f32	s13, s14, s14
 80060b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <Drive_Fit_In+0xac>)
 80060ba:	ed83 7a00 	vstr	s14, [r3]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20000030 	.word	0x20000030
 80060d0:	20000034 	.word	0x20000034
 80060d4:	2000002c 	.word	0x2000002c

080060d8 <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End(uint8_t exitEcho) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]

	// endMark || lineOut
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <Is_Drive_End+0x64>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d803      	bhi.n	80060f2 <Is_Drive_End+0x1a>
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <Is_Drive_End+0x68>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b06      	cmp	r3, #6
 80060f0:	d11f      	bne.n	8006132 <Is_Drive_End+0x5a>

		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <Is_Drive_End+0x6c>)
 80060f4:	edd3 7a00 	vldr	s15, [r3]
 80060f8:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006148 <Is_Drive_End+0x70>
 80060fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006100:	f7ff ff92 	bl	8006028 <Drive_Fit_In>

		while (curSpeed > DRIVE_END_DELAY_SPEED) {
 8006104:	bf00      	nop
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <Is_Drive_End+0x74>)
 8006108:	edd3 7a00 	vldr	s15, [r3]
 800610c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006150 <Is_Drive_End+0x78>
 8006110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006118:	dcf5      	bgt.n	8006106 <Is_Drive_End+0x2e>
			//Drive_Speed_Cntl();
		}

		Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 800611a:	20c8      	movs	r0, #200	; 0xc8
 800611c:	f7ff ff74 	bl	8006008 <Custom_Delay_ms>

		if (endMarkCnt >= 2) {
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <Is_Drive_End+0x64>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d902      	bls.n	800612e <Is_Drive_End+0x56>

			exitEcho = EXIT_ECHO_END_MARK;
 8006128:	2301      	movs	r3, #1
 800612a:	71fb      	strb	r3, [r7, #7]
 800612c:	e001      	b.n	8006132 <Is_Drive_End+0x5a>
		}
		else {

			exitEcho = EXIT_ECHO_LINE_OUT;
 800612e:	2302      	movs	r3, #2
 8006130:	71fb      	strb	r3, [r7, #7]
		}
	}

	return exitEcho;
 8006132:	79fb      	ldrb	r3, [r7, #7]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20002e84 	.word	0x20002e84
 8006140:	20000048 	.word	0x20000048
 8006144:	2000004c 	.word	0x2000004c
 8006148:	3c23d70a 	.word	0x3c23d70a
 800614c:	20000034 	.word	0x20000034
 8006150:	3dcccccd 	.word	0x3dcccccd

08006154 <Mark_Masking>:





__STATIC_INLINE void	Mark_Masking() {
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0

	lineMasking = LINE_MASKING_TOOL >> (positionIdxMin - 1);
 8006158:	4b1f      	ldr	r3, [pc, #124]	; (80061d8 <Mark_Masking+0x84>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8006164:	fa42 f303 	asr.w	r3, r2, r3
 8006168:	b29a      	uxth	r2, r3
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <Mark_Masking+0x88>)
 800616c:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = MARK_MASKING_TOOL >> GET_MIN(positionIdxMax + 3, IR_SENSOR_LEN - 2);
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <Mark_Masking+0x8c>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b0a      	cmp	r3, #10
 8006176:	d809      	bhi.n	800618c <Mark_Masking+0x38>
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <Mark_Masking+0x8c>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3303      	adds	r3, #3
 8006180:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006184:	fa42 f303 	asr.w	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	e000      	b.n	800618e <Mark_Masking+0x3a>
 800618c:	2303      	movs	r3, #3
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <Mark_Masking+0x90>)
 8006190:	8013      	strh	r3, [r2, #0]
	leftMarkMasking = MARK_MASKING_TOOL >> GET_MAX(positionIdxMin - 4, 0);
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <Mark_Masking+0x84>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b04      	cmp	r3, #4
 800619a:	d909      	bls.n	80061b0 <Mark_Masking+0x5c>
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <Mark_Masking+0x84>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	3b04      	subs	r3, #4
 80061a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80061a8:	fa42 f303 	asr.w	r3, r2, r3
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	e001      	b.n	80061b4 <Mark_Masking+0x60>
 80061b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80061b4:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <Mark_Masking+0x94>)
 80061b6:	8013      	strh	r3, [r2, #0]
	bothMarkMasking = rightMarkMasking | leftMarkMasking;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <Mark_Masking+0x90>)
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <Mark_Masking+0x94>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <Mark_Masking+0x98>)
 80061ca:	801a      	strh	r2, [r3, #0]
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000021 	.word	0x20000021
 80061dc:	20000040 	.word	0x20000040
 80061e0:	20000020 	.word	0x20000020
 80061e4:	20000042 	.word	0x20000042
 80061e8:	20000044 	.word	0x20000044
 80061ec:	20000046 	.word	0x20000046

080061f0 <Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Decision(uint16_t sensorStateSum) {
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	80fb      	strh	r3, [r7, #6]

	// cross
	if (sensorStateSum == ALL_MARK_MASKING) {
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <Decision+0x1c>

		markState = MARK_CROSS;
 8006204:	4b22      	ldr	r3, [pc, #136]	; (8006290 <Decision+0xa0>)
 8006206:	2205      	movs	r2, #5
 8006208:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 800620a:	e03b      	b.n	8006284 <Decision+0x94>
	else if ( (sensorStateSum & bothMarkMasking) == bothMarkMasking ) {
 800620c:	4b21      	ldr	r3, [pc, #132]	; (8006294 <Decision+0xa4>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	4013      	ands	r3, r2
 8006216:	b29a      	uxth	r2, r3
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <Decision+0xa4>)
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	429a      	cmp	r2, r3
 8006220:	d103      	bne.n	800622a <Decision+0x3a>
		markState = MARK_END;
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <Decision+0xa0>)
 8006224:	2204      	movs	r2, #4
 8006226:	701a      	strb	r2, [r3, #0]
}
 8006228:	e02c      	b.n	8006284 <Decision+0x94>
	else if ( (sensorStateSum & leftMarkMasking) == leftMarkMasking ) {
 800622a:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <Decision+0xa8>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29a      	uxth	r2, r3
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	4013      	ands	r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <Decision+0xa8>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	429a      	cmp	r2, r3
 800623e:	d10b      	bne.n	8006258 <Decision+0x68>
		if (markState == MARK_CURVE_L) {
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <Decision+0xa0>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d103      	bne.n	8006250 <Decision+0x60>
			markState = MARK_STRAIGHT;
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <Decision+0xa0>)
 800624a:	2201      	movs	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
}
 800624e:	e019      	b.n	8006284 <Decision+0x94>
			markState = MARK_CURVE_L;
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <Decision+0xa0>)
 8006252:	2203      	movs	r2, #3
 8006254:	701a      	strb	r2, [r3, #0]
}
 8006256:	e015      	b.n	8006284 <Decision+0x94>
	else if ( (sensorStateSum & rightMarkMasking) == rightMarkMasking ) {
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <Decision+0xac>)
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	4013      	ands	r3, r2
 8006262:	b29a      	uxth	r2, r3
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <Decision+0xac>)
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	429a      	cmp	r2, r3
 800626c:	d10a      	bne.n	8006284 <Decision+0x94>
		if (markState == MARK_CURVE_R) {
 800626e:	4b08      	ldr	r3, [pc, #32]	; (8006290 <Decision+0xa0>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <Decision+0x8e>
			markState = MARK_STRAIGHT;
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <Decision+0xa0>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
}
 800627c:	e002      	b.n	8006284 <Decision+0x94>
			markState = MARK_CURVE_R;
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <Decision+0xa0>)
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000048 	.word	0x20000048
 8006294:	20000046 	.word	0x20000046
 8006298:	20000044 	.word	0x20000044
 800629c:	20000042 	.word	0x20000042

080062a0 <Drive_State_Machine>:





__STATIC_INLINE void	Drive_State_Machine() {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0

	static uint32_t	lineOutStartTime;


	switch (driveState) {
 80062a4:	4b4f      	ldr	r3, [pc, #316]	; (80063e4 <Drive_State_Machine+0x144>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	f200 8099 	bhi.w	80063e0 <Drive_State_Machine+0x140>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <Drive_State_Machine+0x14>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062c9 	.word	0x080062c9
 80062b8:	08006333 	.word	0x08006333
 80062bc:	0800636d 	.word	0x0800636d
 80062c0:	0800639b 	.word	0x0800639b
 80062c4:	080063ad 	.word	0x080063ad


		case DRIVE_STATE_IDLE :

				Mark_Masking();
 80062c8:	f7ff ff44 	bl	8006154 <Mark_Masking>

				// 라인 센서 4개 이상 인식
				if (__builtin_popcount(state & lineMasking) >= 4) {
 80062cc:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <Drive_State_Machine+0x148>)
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	4b46      	ldr	r3, [pc, #280]	; (80063ec <Drive_State_Machine+0x14c>)
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4013      	ands	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fa fcd3 	bl	8000c88 <__popcountsi2>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	dd06      	ble.n	80062f6 <Drive_State_Machine+0x56>

					sensorStateSum = 0x00;
 80062e8:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <Drive_State_Machine+0x150>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	801a      	strh	r2, [r3, #0]

					driveState = DRIVE_STATE_CROSS;
 80062ee:	4b3d      	ldr	r3, [pc, #244]	; (80063e4 <Drive_State_Machine+0x144>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
					lineOutStartTime = uwTick;

					driveState = DRIVE_DECISION_LINE_OUT;
				}

				break;
 80062f4:	e06d      	b.n	80063d2 <Drive_State_Machine+0x132>
				else if (__builtin_popcount(state & bothMarkMasking) != 0) {
 80062f6:	4b3c      	ldr	r3, [pc, #240]	; (80063e8 <Drive_State_Machine+0x148>)
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	4b3d      	ldr	r3, [pc, #244]	; (80063f4 <Drive_State_Machine+0x154>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	4013      	ands	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <Drive_State_Machine+0x78>
					sensorStateSum = 0x00;
 800630a:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <Drive_State_Machine+0x150>)
 800630c:	2200      	movs	r2, #0
 800630e:	801a      	strh	r2, [r3, #0]
					driveState = DRIVE_STATE_MARKER;
 8006310:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <Drive_State_Machine+0x144>)
 8006312:	2202      	movs	r2, #2
 8006314:	701a      	strb	r2, [r3, #0]
				break;
 8006316:	e05c      	b.n	80063d2 <Drive_State_Machine+0x132>
				else if (state == 0x00) {
 8006318:	4b33      	ldr	r3, [pc, #204]	; (80063e8 <Drive_State_Machine+0x148>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d157      	bne.n	80063d2 <Drive_State_Machine+0x132>
					lineOutStartTime = uwTick;
 8006322:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <Drive_State_Machine+0x158>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a35      	ldr	r2, [pc, #212]	; (80063fc <Drive_State_Machine+0x15c>)
 8006328:	6013      	str	r3, [r2, #0]
					driveState = DRIVE_DECISION_LINE_OUT;
 800632a:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <Drive_State_Machine+0x144>)
 800632c:	2204      	movs	r2, #4
 800632e:	701a      	strb	r2, [r3, #0]
				break;
 8006330:	e04f      	b.n	80063d2 <Drive_State_Machine+0x132>


		case DRIVE_STATE_CROSS:

				// accum
				sensorStateSum |= state;
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <Drive_State_Machine+0x148>)
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29a      	uxth	r2, r3
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <Drive_State_Machine+0x150>)
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	4313      	orrs	r3, r2
 800633e:	b29a      	uxth	r2, r3
 8006340:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <Drive_State_Machine+0x150>)
 8006342:	801a      	strh	r2, [r3, #0]

				// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
				if (sensorStateSum == ALL_MARK_MASKING && __builtin_popcount(state & bothMarkMasking) == 0) {
 8006344:	4b2a      	ldr	r3, [pc, #168]	; (80063f0 <Drive_State_Machine+0x150>)
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800634c:	4293      	cmp	r3, r2
 800634e:	d142      	bne.n	80063d6 <Drive_State_Machine+0x136>
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <Drive_State_Machine+0x148>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29a      	uxth	r2, r3
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <Drive_State_Machine+0x154>)
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	4013      	ands	r3, r2
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d138      	bne.n	80063d6 <Drive_State_Machine+0x136>

					driveState = DRIVE_STATE_DECISION;
 8006364:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <Drive_State_Machine+0x144>)
 8006366:	2203      	movs	r2, #3
 8006368:	701a      	strb	r2, [r3, #0]
				}

				break;
 800636a:	e034      	b.n	80063d6 <Drive_State_Machine+0x136>


		case DRIVE_STATE_MARKER :

				// accum
				sensorStateSum |= state;
 800636c:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <Drive_State_Machine+0x148>)
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29a      	uxth	r2, r3
 8006372:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <Drive_State_Machine+0x150>)
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <Drive_State_Machine+0x150>)
 800637c:	801a      	strh	r2, [r3, #0]

				// 마커 센서가 0개 일 때
				if (__builtin_popcount(state & bothMarkMasking) == 0) {
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <Drive_State_Machine+0x148>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29a      	uxth	r2, r3
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <Drive_State_Machine+0x154>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	4013      	ands	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d123      	bne.n	80063da <Drive_State_Machine+0x13a>

					driveState = DRIVE_STATE_DECISION;
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <Drive_State_Machine+0x144>)
 8006394:	2203      	movs	r2, #3
 8006396:	701a      	strb	r2, [r3, #0]
				}

				break;
 8006398:	e01f      	b.n	80063da <Drive_State_Machine+0x13a>



		case DRIVE_STATE_DECISION :

				Decision(sensorStateSum);
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <Drive_State_Machine+0x150>)
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff ff26 	bl	80061f0 <Decision>

				driveState = DRIVE_STATE_IDLE;
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <Drive_State_Machine+0x144>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]

				break;
 80063aa:	e019      	b.n	80063e0 <Drive_State_Machine+0x140>



		case DRIVE_DECISION_LINE_OUT :

				if (state != 0x00) {
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <Drive_State_Machine+0x148>)
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <Drive_State_Machine+0x11e>

					driveState = DRIVE_STATE_IDLE;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <Drive_State_Machine+0x144>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {

					markState = MARK_LINE_OUT;
				}

				break ;
 80063bc:	e00f      	b.n	80063de <Drive_State_Machine+0x13e>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <Drive_State_Machine+0x158>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <Drive_State_Machine+0x15c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d909      	bls.n	80063de <Drive_State_Machine+0x13e>
					markState = MARK_LINE_OUT;
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <Drive_State_Machine+0x160>)
 80063cc:	2206      	movs	r2, #6
 80063ce:	701a      	strb	r2, [r3, #0]
				break ;
 80063d0:	e005      	b.n	80063de <Drive_State_Machine+0x13e>
				break;
 80063d2:	bf00      	nop
 80063d4:	e004      	b.n	80063e0 <Drive_State_Machine+0x140>
				break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <Drive_State_Machine+0x140>
				break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <Drive_State_Machine+0x140>
				break ;
 80063de:	bf00      	nop

	}
}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20001470 	.word	0x20001470
 80063e8:	20002edc 	.word	0x20002edc
 80063ec:	20000040 	.word	0x20000040
 80063f0:	20002e86 	.word	0x20002e86
 80063f4:	20000046 	.word	0x20000046
 80063f8:	20000284 	.word	0x20000284
 80063fc:	20002e88 	.word	0x20002e88
 8006400:	20000048 	.word	0x20000048

08006404 <First_Drive>:




//1차 주행
void First_Drive() {
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0

	uint8_t exitEcho = EXIT_ECHO_IDLE;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

	uint32_t startTime = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	60bb      	str	r3, [r7, #8]
	uint32_t endTime = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	607b      	str	r3, [r7, #4]

	Custom_OLED_Clear();
 8006416:	f7fe fdbc 	bl	8004f92 <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting();
 800641a:	f7ff fa8f 	bl	800593c <Pre_Drive_Setting>

	Sensor_Start();
 800641e:	f001 fabf 	bl	80079a0 <Sensor_Start>
	Motor_Start();
 8006422:	f001 f9bb 	bl	800779c <Motor_Start>
	Speed_Control_Start();
 8006426:	f001 fa0b 	bl	8007840 <Speed_Control_Start>

	startTime = uwTick;
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <First_Drive+0x78>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60bb      	str	r3, [r7, #8]

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 8006430:	f7ff ff36 	bl	80062a0 <Drive_State_Machine>
		First_Drive_Ctrl();
 8006434:	f000 f826 	bl	8006484 <First_Drive_Ctrl>

		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End(exitEcho)) ) {
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fe4c 	bl	80060d8 <Is_Drive_End>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f2      	beq.n	8006430 <First_Drive+0x2c>

			endTime = uwTick;
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <First_Drive+0x78>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	607b      	str	r3, [r7, #4]
			break;
 8006450:	bf00      	nop
		}
	}

	Motor_Stop();
 8006452:	f001 f9cb 	bl	80077ec <Motor_Stop>
	Speed_Control_Stop();
 8006456:	f001 f9ff 	bl	8007858 <Speed_Control_Stop>
	Sensor_Stop();
 800645a:	f001 fab9 	bl	80079d0 <Sensor_Stop>


	First_Drive_Data_Cntl(exitEcho);
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 f90d 	bl	8006680 <First_Drive_Data_Cntl>

	Custom_OLED_Printf("%u", endTime - startTime);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	4619      	mov	r1, r3
 800646e:	4804      	ldr	r0, [pc, #16]	; (8006480 <First_Drive+0x7c>)
 8006470:	f7fe fe74 	bl	800515c <Custom_OLED_Printf>
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000284 	.word	0x20000284
 8006480:	0800abb4 	.word	0x0800abb4

08006484 <First_Drive_Ctrl>:





__STATIC_INLINE void First_Drive_Ctrl() {
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0

	if (markState == MARK_LINE_OUT) {
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <First_Drive_Ctrl+0x34>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b06      	cmp	r3, #6
 800648e:	d011      	beq.n	80064b4 <First_Drive_Ctrl+0x30>

		return ;
	}

	// markState가 변경되었을 경우
	else if (markState != driveDataBuffer[driveDataIdx].markState) {
 8006490:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <First_Drive_Ctrl+0x38>)
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <First_Drive_Ctrl+0x3c>)
 8006498:	460b      	mov	r3, r1
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	440b      	add	r3, r1
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <First_Drive_Ctrl+0x34>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d003      	beq.n	80064b6 <First_Drive_Ctrl+0x32>

		// driveData 값 업데이트
		Set_First_Drive_Data();
 80064ae:	f000 f809 	bl	80064c4 <Set_First_Drive_Data>
 80064b2:	e000      	b.n	80064b6 <First_Drive_Ctrl+0x32>
		return ;
 80064b4:	bf00      	nop
	}
}
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000048 	.word	0x20000048
 80064bc:	20002c74 	.word	0x20002c74
 80064c0:	20002074 	.word	0x20002074

080064c4 <Set_First_Drive_Data>:



__STATIC_INLINE void Set_First_Drive_Data() {
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0

	// 크로스, 엔드마크가 아닐 경우
	if (markState != MARK_CROSS && markState != MARK_END) {
 80064c8:	4b63      	ldr	r3, [pc, #396]	; (8006658 <Set_First_Drive_Data+0x194>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d058      	beq.n	8006582 <Set_First_Drive_Data+0xbe>
 80064d0:	4b61      	ldr	r3, [pc, #388]	; (8006658 <Set_First_Drive_Data+0x194>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d054      	beq.n	8006582 <Set_First_Drive_Data+0xbe>

		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
		driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L - markStartTick_L;
 80064d8:	4b60      	ldr	r3, [pc, #384]	; (800665c <Set_First_Drive_Data+0x198>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	b292      	uxth	r2, r2
 80064e0:	4b5f      	ldr	r3, [pc, #380]	; (8006660 <Set_First_Drive_Data+0x19c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	495f      	ldr	r1, [pc, #380]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 80064e8:	8809      	ldrh	r1, [r1, #0]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	b298      	uxth	r0, r3
 80064ee:	4a5e      	ldr	r2, [pc, #376]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 80064f0:	460b      	mov	r3, r1
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	440b      	add	r3, r1
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	4602      	mov	r2, r0
 80064fc:	801a      	strh	r2, [r3, #0]
		driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R - markStartTick_R;
 80064fe:	4b5b      	ldr	r3, [pc, #364]	; (800666c <Set_First_Drive_Data+0x1a8>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	b292      	uxth	r2, r2
 8006506:	4b5a      	ldr	r3, [pc, #360]	; (8006670 <Set_First_Drive_Data+0x1ac>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	4955      	ldr	r1, [pc, #340]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 800650e:	8809      	ldrh	r1, [r1, #0]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	b298      	uxth	r0, r3
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 8006516:	460b      	mov	r3, r1
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	440b      	add	r3, r1
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	3302      	adds	r3, #2
 8006522:	4602      	mov	r2, r0
 8006524:	801a      	strh	r2, [r3, #0]

		// 종료 시점에서의 읽은 크로스의 개수
		driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8006526:	4b53      	ldr	r3, [pc, #332]	; (8006674 <Set_First_Drive_Data+0x1b0>)
 8006528:	881a      	ldrh	r2, [r3, #0]
 800652a:	4b4e      	ldr	r3, [pc, #312]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	4619      	mov	r1, r3
 8006530:	b2d0      	uxtb	r0, r2
 8006532:	4a4d      	ldr	r2, [pc, #308]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 8006534:	460b      	mov	r3, r1
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	440b      	add	r3, r1
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	3305      	adds	r3, #5
 8006540:	4602      	mov	r2, r0
 8006542:	701a      	strb	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 8006544:	4b47      	ldr	r3, [pc, #284]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	3301      	adds	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	4b45      	ldr	r3, [pc, #276]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 800654e:	801a      	strh	r2, [r3, #0]

		// markStartTick 업데이트
		markStartTick_L = curTick_L;
 8006550:	4b42      	ldr	r3, [pc, #264]	; (800665c <Set_First_Drive_Data+0x198>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	4b42      	ldr	r3, [pc, #264]	; (8006660 <Set_First_Drive_Data+0x19c>)
 8006558:	601a      	str	r2, [r3, #0]
		markStartTick_R = curTick_R;
 800655a:	4b44      	ldr	r3, [pc, #272]	; (800666c <Set_First_Drive_Data+0x1a8>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	4b43      	ldr	r3, [pc, #268]	; (8006670 <Set_First_Drive_Data+0x1ac>)
 8006562:	601a      	str	r2, [r3, #0]


		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBuffer[driveDataIdx].markState = markState;
 8006564:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <Set_First_Drive_Data+0x194>)
 800656c:	7818      	ldrb	r0, [r3, #0]
 800656e:	4a3e      	ldr	r2, [pc, #248]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 8006570:	460b      	mov	r3, r1
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	440b      	add	r3, r1
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	4602      	mov	r2, r0
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	e065      	b.n	800664e <Set_First_Drive_Data+0x18a>
	}

	else {

		// 크로스일 경우
		if (markState == MARK_CROSS) {
 8006582:	4b35      	ldr	r3, [pc, #212]	; (8006658 <Set_First_Drive_Data+0x194>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b05      	cmp	r3, #5
 8006588:	d10f      	bne.n	80065aa <Set_First_Drive_Data+0xe6>
			 *    n번째 크로스(crossCnt)		0		1		...		50
			 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
			 *
			 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
			 */
			crossCntTableBuffer[crossCnt] = driveDataIdx + 1;
 800658a:	4b36      	ldr	r3, [pc, #216]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	4a39      	ldr	r2, [pc, #228]	; (8006674 <Set_First_Drive_Data+0x1b0>)
 8006590:	8812      	ldrh	r2, [r2, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	b299      	uxth	r1, r3
 8006596:	4b38      	ldr	r3, [pc, #224]	; (8006678 <Set_First_Drive_Data+0x1b4>)
 8006598:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			crossCnt += 1;
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <Set_First_Drive_Data+0x1b0>)
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	4b33      	ldr	r3, [pc, #204]	; (8006674 <Set_First_Drive_Data+0x1b0>)
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e043      	b.n	8006632 <Set_First_Drive_Data+0x16e>
		}

		// 엔드마크일 경우
		else if (markState == MARK_END){
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <Set_First_Drive_Data+0x194>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d13f      	bne.n	8006632 <Set_First_Drive_Data+0x16e>

			endMarkCnt += 1;
 80065b2:	4b32      	ldr	r3, [pc, #200]	; (800667c <Set_First_Drive_Data+0x1b8>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <Set_First_Drive_Data+0x1b8>)
 80065bc:	701a      	strb	r2, [r3, #0]

			if (endMarkCnt >= 2) {
 80065be:	4b2f      	ldr	r3, [pc, #188]	; (800667c <Set_First_Drive_Data+0x1b8>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d935      	bls.n	8006632 <Set_First_Drive_Data+0x16e>

				// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
				driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L - markStartTick_L;
 80065c6:	4b25      	ldr	r3, [pc, #148]	; (800665c <Set_First_Drive_Data+0x198>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	b292      	uxth	r2, r2
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <Set_First_Drive_Data+0x19c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4923      	ldr	r1, [pc, #140]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 80065d6:	8809      	ldrh	r1, [r1, #0]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	b298      	uxth	r0, r3
 80065dc:	4a22      	ldr	r2, [pc, #136]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 80065de:	460b      	mov	r3, r1
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	440b      	add	r3, r1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	4602      	mov	r2, r0
 80065ea:	801a      	strh	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R - markStartTick_R;
 80065ec:	4b1f      	ldr	r3, [pc, #124]	; (800666c <Set_First_Drive_Data+0x1a8>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	b292      	uxth	r2, r2
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <Set_First_Drive_Data+0x1ac>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	491a      	ldr	r1, [pc, #104]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 80065fc:	8809      	ldrh	r1, [r1, #0]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	b298      	uxth	r0, r3
 8006602:	4a19      	ldr	r2, [pc, #100]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 8006604:	460b      	mov	r3, r1
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	440b      	add	r3, r1
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	3302      	adds	r3, #2
 8006610:	4602      	mov	r2, r0
 8006612:	801a      	strh	r2, [r3, #0]

				// 종료 시점에서의 읽은 크로스의 개수
				driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <Set_First_Drive_Data+0x1b0>)
 8006616:	881a      	ldrh	r2, [r3, #0]
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	4619      	mov	r1, r3
 800661e:	b2d0      	uxtb	r0, r2
 8006620:	4a11      	ldr	r2, [pc, #68]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 8006622:	460b      	mov	r3, r1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	440b      	add	r3, r1
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	3305      	adds	r3, #5
 800662e:	4602      	mov	r2, r0
 8006630:	701a      	strb	r2, [r3, #0]
			}
		}

		// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
		markState = driveDataBuffer[driveDataIdx].markState;
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <Set_First_Drive_Data+0x1a0>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <Set_First_Drive_Data+0x1a4>)
 800663a:	460b      	mov	r3, r1
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	440b      	add	r3, r1
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4413      	add	r3, r2
 8006644:	3304      	adds	r3, #4
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <Set_First_Drive_Data+0x194>)
 800664a:	701a      	strb	r2, [r3, #0]
	}

}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000048 	.word	0x20000048
 800665c:	20001458 	.word	0x20001458
 8006660:	20002e7c 	.word	0x20002e7c
 8006664:	20002c74 	.word	0x20002c74
 8006668:	20002074 	.word	0x20002074
 800666c:	20001460 	.word	0x20001460
 8006670:	20002e80 	.word	0x20002e80
 8006674:	20002e78 	.word	0x20002e78
 8006678:	20002d78 	.word	0x20002d78
 800667c:	20002e84 	.word	0x20002e84

08006680 <First_Drive_Data_Cntl>:





static void First_Drive_Data_Cntl(uint8_t exitEcho) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	617b      	str	r3, [r7, #20]
	uint16_t markCnt_L = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	827b      	strh	r3, [r7, #18]
	uint16_t markCnt_R = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	823b      	strh	r3, [r7, #16]
	uint16_t crossCnt = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	81fb      	strh	r3, [r7, #14]

	if (exitEcho == EXIT_ECHO_END_MARK) {
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b01      	cmp	r3, #1
 800669e:	f040 808e 	bne.w	80067be <First_Drive_Data_Cntl+0x13e>

		// 마크 개수 세기
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 80066a2:	2301      	movs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e04a      	b.n	800673e <First_Drive_Data_Cntl+0xbe>

			// 현재상태가 좌측 곡선인 경우
			if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 80066a8:	494e      	ldr	r1, [pc, #312]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	440b      	add	r3, r1
 80066b6:	3304      	adds	r3, #4
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d103      	bne.n	80066c6 <First_Drive_Data_Cntl+0x46>

				markCnt_L += 1;
 80066be:	8a7b      	ldrh	r3, [r7, #18]
 80066c0:	3301      	adds	r3, #1
 80066c2:	827b      	strh	r3, [r7, #18]
 80066c4:	e038      	b.n	8006738 <First_Drive_Data_Cntl+0xb8>
			}

			// 현재상태가 우측 곡선인 경우
			else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 80066c6:	4947      	ldr	r1, [pc, #284]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	440b      	add	r3, r1
 80066d4:	3304      	adds	r3, #4
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d103      	bne.n	80066e4 <First_Drive_Data_Cntl+0x64>

				markCnt_R += 1;
 80066dc:	8a3b      	ldrh	r3, [r7, #16]
 80066de:	3301      	adds	r3, #1
 80066e0:	823b      	strh	r3, [r7, #16]
 80066e2:	e029      	b.n	8006738 <First_Drive_Data_Cntl+0xb8>
			}

			// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
			else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 80066e4:	493f      	ldr	r1, [pc, #252]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	440b      	add	r3, r1
 80066f2:	3304      	adds	r3, #4
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d11e      	bne.n	8006738 <First_Drive_Data_Cntl+0xb8>

				// 이전 상태가 좌측 곡선이었을 경우
				if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	4939      	ldr	r1, [pc, #228]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 8006700:	4613      	mov	r3, r2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	4413      	add	r3, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	440b      	add	r3, r1
 800670a:	3304      	adds	r3, #4
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b03      	cmp	r3, #3
 8006710:	d103      	bne.n	800671a <First_Drive_Data_Cntl+0x9a>
					markCnt_L += 1;
 8006712:	8a7b      	ldrh	r3, [r7, #18]
 8006714:	3301      	adds	r3, #1
 8006716:	827b      	strh	r3, [r7, #18]
 8006718:	e00e      	b.n	8006738 <First_Drive_Data_Cntl+0xb8>
				}

				// 이전 상태가 우측 곡선이었을 경우
				else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	1e5a      	subs	r2, r3, #1
 800671e:	4931      	ldr	r1, [pc, #196]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 8006720:	4613      	mov	r3, r2
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4413      	add	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	440b      	add	r3, r1
 800672a:	3304      	adds	r3, #4
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d102      	bne.n	8006738 <First_Drive_Data_Cntl+0xb8>
					markCnt_R += 1;
 8006732:	8a3b      	ldrh	r3, [r7, #16]
 8006734:	3301      	adds	r3, #1
 8006736:	823b      	strh	r3, [r7, #16]
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3301      	adds	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	4929      	ldr	r1, [pc, #164]	; (80067e4 <First_Drive_Data_Cntl+0x164>)
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	440b      	add	r3, r1
 800674c:	3304      	adds	r3, #4
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <First_Drive_Data_Cntl+0xdc>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675a:	d3a5      	bcc.n	80066a8 <First_Drive_Data_Cntl+0x28>
				}
			}
		}

		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e005      	b.n	800676e <First_Drive_Data_Cntl+0xee>

			crossCnt++;
 8006762:	89fb      	ldrh	r3, [r7, #14]
 8006764:	3301      	adds	r3, #1
 8006766:	81fb      	strh	r3, [r7, #14]
		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	3301      	adds	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <First_Drive_Data_Cntl+0x168>)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <First_Drive_Data_Cntl+0x100>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d9f0      	bls.n	8006762 <First_Drive_Data_Cntl+0xe2>
		}

		Custom_OLED_Clear();
 8006780:	f7fe fc07 	bl	8004f92 <Custom_OLED_Clear>

		// OLED에 exitEcho 변수명 및 마크 개수 출력
		Custom_OLED_Printf("/0end mark");
 8006784:	4819      	ldr	r0, [pc, #100]	; (80067ec <First_Drive_Data_Cntl+0x16c>)
 8006786:	f7fe fce9 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 800678a:	8a7b      	ldrh	r3, [r7, #18]
 800678c:	4619      	mov	r1, r3
 800678e:	4818      	ldr	r0, [pc, #96]	; (80067f0 <First_Drive_Data_Cntl+0x170>)
 8006790:	f7fe fce4 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 8006794:	8a3b      	ldrh	r3, [r7, #16]
 8006796:	4619      	mov	r1, r3
 8006798:	4816      	ldr	r0, [pc, #88]	; (80067f4 <First_Drive_Data_Cntl+0x174>)
 800679a:	f7fe fcdf 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/3cross:    %d", crossCnt);
 800679e:	89fb      	ldrh	r3, [r7, #14]
 80067a0:	4619      	mov	r1, r3
 80067a2:	4815      	ldr	r0, [pc, #84]	; (80067f8 <First_Drive_Data_Cntl+0x178>)
 80067a4:	f7fe fcda 	bl	800515c <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 80067a8:	bf00      	nop
 80067aa:	f7ff f807 	bl	80057bc <Custom_Switch_Read>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d1fa      	bne.n	80067aa <First_Drive_Data_Cntl+0x12a>

		First_Drive_Data_Update_Cntl(exitEcho);
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f822 	bl	8006800 <First_Drive_Data_Update_Cntl>
 80067bc:	e00b      	b.n	80067d6 <First_Drive_Data_Cntl+0x156>
	}

	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d108      	bne.n	80067d6 <First_Drive_Data_Cntl+0x156>

		Custom_OLED_Printf("/0line out");
 80067c4:	480d      	ldr	r0, [pc, #52]	; (80067fc <First_Drive_Data_Cntl+0x17c>)
 80067c6:	f7fe fcc9 	bl	800515c <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 80067ca:	bf00      	nop
 80067cc:	f7fe fff6 	bl	80057bc <Custom_Switch_Read>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d1fa      	bne.n	80067cc <First_Drive_Data_Cntl+0x14c>
	}

	Custom_OLED_Clear();
 80067d6:	f7fe fbdc 	bl	8004f92 <Custom_OLED_Clear>
}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20002074 	.word	0x20002074
 80067e8:	20002d78 	.word	0x20002d78
 80067ec:	0800abb8 	.word	0x0800abb8
 80067f0:	0800abc4 	.word	0x0800abc4
 80067f4:	0800abd4 	.word	0x0800abd4
 80067f8:	0800abe4 	.word	0x0800abe4
 80067fc:	0800abf4 	.word	0x0800abf4

08006800 <First_Drive_Data_Update_Cntl>:



static void First_Drive_Data_Update_Cntl(uint8_t exitEcho) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	71fb      	strb	r3, [r7, #7]

	uint8_t sw;
	uint8_t isUpdate = CUSTOM_FALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]

	Custom_OLED_Printf("/5update: NO");
 800680e:	4847      	ldr	r0, [pc, #284]	; (800692c <First_Drive_Data_Update_Cntl+0x12c>)
 8006810:	f7fe fca4 	bl	800515c <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006814:	e010      	b.n	8006838 <First_Drive_Data_Update_Cntl+0x38>

		// data 업데이트 함
		if (sw == CUSTOM_SW_1) {
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d105      	bne.n	8006828 <First_Drive_Data_Update_Cntl+0x28>
			Custom_OLED_Printf("/5update: YES");
 800681c:	4844      	ldr	r0, [pc, #272]	; (8006930 <First_Drive_Data_Update_Cntl+0x130>)
 800681e:	f7fe fc9d 	bl	800515c <Custom_OLED_Printf>
			isUpdate = CUSTOM_TRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
 8006826:	e007      	b.n	8006838 <First_Drive_Data_Update_Cntl+0x38>
		}

		// data 업데이트 안함
		else if (sw == CUSTOM_SW_2) {
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d104      	bne.n	8006838 <First_Drive_Data_Update_Cntl+0x38>
			Custom_OLED_Printf("/5update: NO ");
 800682e:	4841      	ldr	r0, [pc, #260]	; (8006934 <First_Drive_Data_Update_Cntl+0x134>)
 8006830:	f7fe fc94 	bl	800515c <Custom_OLED_Printf>
			isUpdate = CUSTOM_FALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006838:	f7fe ffc0 	bl	80057bc <Custom_Switch_Read>
 800683c:	4603      	mov	r3, r0
 800683e:	72fb      	strb	r3, [r7, #11]
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	2b04      	cmp	r3, #4
 8006844:	d1e7      	bne.n	8006816 <First_Drive_Data_Update_Cntl+0x16>
		}
	}
	Custom_OLED_Clear();
 8006846:	f7fe fba4 	bl	8004f92 <Custom_OLED_Clear>

	if (driveData[0].markState == MARK_NONE || isUpdate == CUSTOM_TRUE) {
 800684a:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <First_Drive_Data_Update_Cntl+0x138>)
 800684c:	791b      	ldrb	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <First_Drive_Data_Update_Cntl+0x58>
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d164      	bne.n	8006922 <First_Drive_Data_Update_Cntl+0x122>

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e04c      	b.n	80068f8 <First_Drive_Data_Update_Cntl+0xf8>
			driveData[i].tickCnt_L = driveDataBuffer[i].tickCnt_L;
 800685e:	4937      	ldr	r1, [pc, #220]	; (800693c <First_Drive_Data_Update_Cntl+0x13c>)
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	440b      	add	r3, r1
 800686c:	8818      	ldrh	r0, [r3, #0]
 800686e:	4932      	ldr	r1, [pc, #200]	; (8006938 <First_Drive_Data_Update_Cntl+0x138>)
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4613      	mov	r3, r2
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	4413      	add	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	440b      	add	r3, r1
 800687c:	4602      	mov	r2, r0
 800687e:	801a      	strh	r2, [r3, #0]
			driveData[i].tickCnt_R = driveDataBuffer[i].tickCnt_R;
 8006880:	492e      	ldr	r1, [pc, #184]	; (800693c <First_Drive_Data_Update_Cntl+0x13c>)
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4613      	mov	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4413      	add	r3, r2
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	440b      	add	r3, r1
 800688e:	3302      	adds	r3, #2
 8006890:	8818      	ldrh	r0, [r3, #0]
 8006892:	4929      	ldr	r1, [pc, #164]	; (8006938 <First_Drive_Data_Update_Cntl+0x138>)
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4613      	mov	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	440b      	add	r3, r1
 80068a0:	3302      	adds	r3, #2
 80068a2:	4602      	mov	r2, r0
 80068a4:	801a      	strh	r2, [r3, #0]
			driveData[i].markState = driveDataBuffer[i].markState;
 80068a6:	4925      	ldr	r1, [pc, #148]	; (800693c <First_Drive_Data_Update_Cntl+0x13c>)
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4613      	mov	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	4413      	add	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	440b      	add	r3, r1
 80068b4:	3304      	adds	r3, #4
 80068b6:	7818      	ldrb	r0, [r3, #0]
 80068b8:	491f      	ldr	r1, [pc, #124]	; (8006938 <First_Drive_Data_Update_Cntl+0x138>)
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4613      	mov	r3, r2
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	4413      	add	r3, r2
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	440b      	add	r3, r1
 80068c6:	3304      	adds	r3, #4
 80068c8:	4602      	mov	r2, r0
 80068ca:	701a      	strb	r2, [r3, #0]
			driveData[i].crossCnt = driveDataBuffer[i].crossCnt;
 80068cc:	491b      	ldr	r1, [pc, #108]	; (800693c <First_Drive_Data_Update_Cntl+0x13c>)
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	440b      	add	r3, r1
 80068da:	3305      	adds	r3, #5
 80068dc:	7818      	ldrb	r0, [r3, #0]
 80068de:	4916      	ldr	r1, [pc, #88]	; (8006938 <First_Drive_Data_Update_Cntl+0x138>)
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4613      	mov	r3, r2
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	440b      	add	r3, r1
 80068ec:	3305      	adds	r3, #5
 80068ee:	4602      	mov	r2, r0
 80068f0:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3301      	adds	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fe:	d3ae      	bcc.n	800685e <First_Drive_Data_Update_Cntl+0x5e>
		}

		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e00a      	b.n	800691c <First_Drive_Data_Update_Cntl+0x11c>

			crossCntTable[i] = crossCntTableBuffer[i];
 8006906:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <First_Drive_Data_Update_Cntl+0x140>)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800690e:	4a0d      	ldr	r2, [pc, #52]	; (8006944 <First_Drive_Data_Update_Cntl+0x144>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b7f      	cmp	r3, #127	; 0x7f
 8006920:	d9f1      	bls.n	8006906 <First_Drive_Data_Update_Cntl+0x106>
		}
	}
}
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	0800ac00 	.word	0x0800ac00
 8006930:	0800ac10 	.word	0x0800ac10
 8006934:	0800ac20 	.word	0x0800ac20
 8006938:	20001474 	.word	0x20001474
 800693c:	20002074 	.word	0x20002074
 8006940:	20002d78 	.word	0x20002d78
 8006944:	20002c78 	.word	0x20002c78

08006948 <LL_USART_Enable>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80069b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80069be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80069ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80069de:	bf00      	nop
 80069e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d1f8      	bne.n	80069e0 <Custom_Delay_us+0x34>
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff ffcc 	bl	80069ac <Custom_Delay_us>
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <Custom_Delay_Init_SysTick+0x20>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <Custom_Delay_Init_SysTick+0x24>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <Custom_Delay_Init_SysTick+0x24>)
 8006a2c:	f043 0307 	orr.w	r3, r3, #7
 8006a30:	6013      	str	r3, [r2, #0]
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20000284 	.word	0x20000284
 8006a40:	e000e010 	.word	0xe000e010

08006a44 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8006a4c:	bf00      	nop
 8006a4e:	4808      	ldr	r0, [pc, #32]	; (8006a70 <__io_putchar+0x2c>)
 8006a50:	f7ff ff8a 	bl	8006968 <LL_USART_IsActiveFlag_TXE>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f9      	beq.n	8006a4e <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4803      	ldr	r0, [pc, #12]	; (8006a70 <__io_putchar+0x2c>)
 8006a62:	f7ff ff94 	bl	800698e <LL_USART_TransmitData8>
	return ch;
 8006a66:	687b      	ldr	r3, [r7, #4]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40004400 	.word	0x40004400

08006a74 <Init>:



void Init() {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b0b8      	sub	sp, #224	; 0xe0
 8006a78:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8006a7a:	4838      	ldr	r0, [pc, #224]	; (8006b5c <Init+0xe8>)
 8006a7c:	f7ff ff64 	bl	8006948 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8006a80:	f7ff ffcc 	bl	8006a1c <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8006a84:	f7fe faa4 	bl	8004fd0 <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8006a88:	f7fe f8d4 	bl	8004c34 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8006a8c:	f7fe faa0 	bl	8004fd0 <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8006a90:	4833      	ldr	r0, [pc, #204]	; (8006b60 <Init+0xec>)
 8006a92:	f7fe fb63 	bl	800515c <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8006a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a9a:	f7ff ffaf 	bl	80069fc <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8006a9e:	4a31      	ldr	r2, [pc, #196]	; (8006b64 <Init+0xf0>)
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	22dc      	movs	r2, #220	; 0xdc
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fe59 	bl	800875e <memcpy>
//			{ "Test Velocity  ", Motor_Test_Velocity },
			{ "Test Position  ", Drive_Test_Position },
//			{ "Current setting", Current_Setting },
	};

	uint8_t sw = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t count = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 8006ab8:	230b      	movs	r3, #11
 8006aba:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd

	Custom_OLED_Clear();
 8006abe:	f7fe fa68 	bl	8004f92 <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8006ac2:	f7fe fa66 	bl	8004f92 <Custom_OLED_Clear>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006ac6:	e033      	b.n	8006b30 <Init+0xbc>
			Custom_OLED_Printf("%s", menus[count].menuName);
 8006ac8:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8006acc:	4639      	mov	r1, r7
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4823      	ldr	r0, [pc, #140]	; (8006b68 <Init+0xf4>)
 8006adc:	f7fe fb3e 	bl	800515c <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8006ae0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10f      	bne.n	8006b08 <Init+0x94>
				if (count == 0)
 8006ae8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <Init+0x88>
					count = menuCnt - 1;
 8006af0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8006af4:	3b01      	subs	r3, #1
 8006af6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006afa:	e019      	b.n	8006b30 <Init+0xbc>
				else
					count--;
 8006afc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8006b00:	3b01      	subs	r3, #1
 8006b02:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006b06:	e013      	b.n	8006b30 <Init+0xbc>
			}
			else if (sw == CUSTOM_SW_2) {
 8006b08:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d10f      	bne.n	8006b30 <Init+0xbc>
				if (count == menuCnt - 1)
 8006b10:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8006b14:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d103      	bne.n	8006b26 <Init+0xb2>
					count = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006b24:	e004      	b.n	8006b30 <Init+0xbc>
				else
					count++;
 8006b26:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006b30:	f7fe fe44 	bl	80057bc <Custom_Switch_Read>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8006b3a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d1c2      	bne.n	8006ac8 <Init+0x54>
			}
		}
		menus[count].func();
 8006b42:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	33e0      	adds	r3, #224	; 0xe0
 8006b50:	443b      	add	r3, r7
 8006b52:	3bd0      	subs	r3, #208	; 0xd0
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4798      	blx	r3
		Custom_OLED_Clear();
 8006b58:	e7b3      	b.n	8006ac2 <Init+0x4e>
 8006b5a:	bf00      	nop
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	0800ac70 	.word	0x0800ac70
 8006b64:	0800ac88 	.word	0x0800ac88
 8006b68:	0800ac84 	.word	0x0800ac84

08006b6c <LL_TIM_EnableCounter>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f043 0201 	orr.w	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <LL_TIM_DisableCounter>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f023 0201 	bic.w	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <LL_TIM_CC_EnableChannel>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <LL_TIM_CC_DisableChannel>:
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1a      	ldr	r2, [r3, #32]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	401a      	ands	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_TIM_OC_SetCompareCH2>:
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <Custom_GPIO_Set>:
		uint32_t value) {
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	695a      	ldr	r2, [r3, #20]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <Custom_GPIO_Set+0x22>
 8006c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c2e:	e000      	b.n	8006c32 <Custom_GPIO_Set+0x24>
 8006c30:	2100      	movs	r1, #0
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	400b      	ands	r3, r1
 8006c36:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	615a      	str	r2, [r3, #20]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <Switch_Test>:
#include "header_init.h"




void Switch_Test() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
	Custom_OLED_Clear();
 8006c4e:	f7fe f9a0 	bl	8004f92 <Custom_OLED_Clear>

	Custom_OLED_Printf("/0 1: no");
 8006c52:	4824      	ldr	r0, [pc, #144]	; (8006ce4 <Switch_Test+0x9c>)
 8006c54:	f7fe fa82 	bl	800515c <Custom_OLED_Printf>
	Custom_OLED_Printf("/1 2: no");
 8006c58:	4823      	ldr	r0, [pc, #140]	; (8006ce8 <Switch_Test+0xa0>)
 8006c5a:	f7fe fa7f 	bl	800515c <Custom_OLED_Printf>
	Custom_OLED_Printf("/2 3: no");
 8006c5e:	4823      	ldr	r0, [pc, #140]	; (8006cec <Switch_Test+0xa4>)
 8006c60:	f7fe fa7c 	bl	800515c <Custom_OLED_Printf>
	Custom_OLED_Printf("/3 1, 2: no");
 8006c64:	4822      	ldr	r0, [pc, #136]	; (8006cf0 <Switch_Test+0xa8>)
 8006c66:	f7fe fa79 	bl	800515c <Custom_OLED_Printf>
	Custom_OLED_Printf("/4 1, 3: no");
 8006c6a:	4822      	ldr	r0, [pc, #136]	; (8006cf4 <Switch_Test+0xac>)
 8006c6c:	f7fe fa76 	bl	800515c <Custom_OLED_Printf>
	Custom_OLED_Printf("/5 2, 3: no");
 8006c70:	4821      	ldr	r0, [pc, #132]	; (8006cf8 <Switch_Test+0xb0>)
 8006c72:	f7fe fa73 	bl	800515c <Custom_OLED_Printf>

	uint8_t sw = Custom_Switch_Read();
 8006c76:	f7fe fda1 	bl	80057bc <Custom_Switch_Read>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
	while(sw != CUSTOM_SW_ALL){
 8006c7e:	e027      	b.n	8006cd0 <Switch_Test+0x88>
		sw = Custom_Switch_Read();
 8006c80:	f7fe fd9c 	bl	80057bc <Custom_Switch_Read>
 8006c84:	4603      	mov	r3, r0
 8006c86:	71fb      	strb	r3, [r7, #7]

		if (CUSTOM_SW_1 == sw){
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d102      	bne.n	8006c94 <Switch_Test+0x4c>
			Custom_OLED_Printf("/0 1: yes");
 8006c8e:	481b      	ldr	r0, [pc, #108]	; (8006cfc <Switch_Test+0xb4>)
 8006c90:	f7fe fa64 	bl	800515c <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_2 == sw){
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d102      	bne.n	8006ca0 <Switch_Test+0x58>
			Custom_OLED_Printf("/1 2: yes");
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <Switch_Test+0xb8>)
 8006c9c:	f7fe fa5e 	bl	800515c <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_3 == sw){
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d102      	bne.n	8006cac <Switch_Test+0x64>
			Custom_OLED_Printf("/2 3: yes");
 8006ca6:	4817      	ldr	r0, [pc, #92]	; (8006d04 <Switch_Test+0xbc>)
 8006ca8:	f7fe fa58 	bl	800515c <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_1_2 == sw){
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d102      	bne.n	8006cb8 <Switch_Test+0x70>
			Custom_OLED_Printf("/3 1, 2: yes");
 8006cb2:	4815      	ldr	r0, [pc, #84]	; (8006d08 <Switch_Test+0xc0>)
 8006cb4:	f7fe fa52 	bl	800515c <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_1_3 == sw){
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d102      	bne.n	8006cc4 <Switch_Test+0x7c>
			Custom_OLED_Printf("/4 1, 3: yes");
 8006cbe:	4813      	ldr	r0, [pc, #76]	; (8006d0c <Switch_Test+0xc4>)
 8006cc0:	f7fe fa4c 	bl	800515c <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_2_3 == sw){
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	2b06      	cmp	r3, #6
 8006cc8:	d102      	bne.n	8006cd0 <Switch_Test+0x88>
			Custom_OLED_Printf("/5 2, 3: yes");
 8006cca:	4811      	ldr	r0, [pc, #68]	; (8006d10 <Switch_Test+0xc8>)
 8006ccc:	f7fe fa46 	bl	800515c <Custom_OLED_Printf>
	while(sw != CUSTOM_SW_ALL){
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	d1d4      	bne.n	8006c80 <Switch_Test+0x38>
		}
	}
	Custom_OLED_Clear();
 8006cd6:	f7fe f95c 	bl	8004f92 <Custom_OLED_Clear>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	0800ad64 	.word	0x0800ad64
 8006ce8:	0800ad70 	.word	0x0800ad70
 8006cec:	0800ad7c 	.word	0x0800ad7c
 8006cf0:	0800ad88 	.word	0x0800ad88
 8006cf4:	0800ad94 	.word	0x0800ad94
 8006cf8:	0800ada0 	.word	0x0800ada0
 8006cfc:	0800adac 	.word	0x0800adac
 8006d00:	0800adb8 	.word	0x0800adb8
 8006d04:	0800adc4 	.word	0x0800adc4
 8006d08:	0800add0 	.word	0x0800add0
 8006d0c:	0800ade0 	.word	0x0800ade0
 8006d10:	0800adf0 	.word	0x0800adf0

08006d14 <Sensor_Test_Raw>:




void Sensor_Test_Raw() {
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af06      	add	r7, sp, #24
	Sensor_Start();
 8006d1a:	f000 fe41 	bl	80079a0 <Sensor_Start>
	Custom_OLED_Clear();
 8006d1e:	f7fe f938 	bl	8004f92 <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006d22:	e053      	b.n	8006dcc <Sensor_Test_Raw+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006d24:	4b30      	ldr	r3, [pc, #192]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d2a:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006d2c:	4b2e      	ldr	r3, [pc, #184]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d32:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006d34:	4b2c      	ldr	r3, [pc, #176]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d36:	789b      	ldrb	r3, [r3, #2]
 8006d38:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d3a:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006d3c:	4b2a      	ldr	r3, [pc, #168]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d3e:	78db      	ldrb	r3, [r3, #3]
 8006d40:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d42:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006d44:	4b28      	ldr	r3, [pc, #160]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d46:	791b      	ldrb	r3, [r3, #4]
 8006d48:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d4a:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006d4c:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d4e:	795b      	ldrb	r3, [r3, #5]
 8006d50:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d52:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d56:	799b      	ldrb	r3, [r3, #6]
 8006d58:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d5a:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006d5c:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d5e:	79db      	ldrb	r3, [r3, #7]
 8006d60:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	9403      	str	r4, [sp, #12]
 8006d66:	9002      	str	r0, [sp, #8]
 8006d68:	9101      	str	r1, [sp, #4]
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	4663      	mov	r3, ip
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4629      	mov	r1, r5
 8006d72:	481e      	ldr	r0, [pc, #120]	; (8006dec <Sensor_Test_Raw+0xd8>)
 8006d74:	f7fe f9f2 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006d78:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d7a:	7a1b      	ldrb	r3, [r3, #8]
 8006d7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d7e:	461d      	mov	r5, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006d80:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d82:	7a5b      	ldrb	r3, [r3, #9]
 8006d84:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d86:	461e      	mov	r6, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006d88:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d8a:	7a9b      	ldrb	r3, [r3, #10]
 8006d8c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d8e:	469c      	mov	ip, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006d90:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d92:	7adb      	ldrb	r3, [r3, #11]
 8006d94:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d96:	461a      	mov	r2, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006d9a:	7b1b      	ldrb	r3, [r3, #12]
 8006d9c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d9e:	4619      	mov	r1, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006da2:	7b5b      	ldrb	r3, [r3, #13]
 8006da4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006da6:	4618      	mov	r0, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006da8:	4b0f      	ldr	r3, [pc, #60]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006daa:	7b9b      	ldrb	r3, [r3, #14]
 8006dac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006dae:	461c      	mov	r4, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <Sensor_Test_Raw+0xd4>)
 8006db2:	7bdb      	ldrb	r3, [r3, #15]
 8006db4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	9403      	str	r4, [sp, #12]
 8006dba:	9002      	str	r0, [sp, #8]
 8006dbc:	9101      	str	r1, [sp, #4]
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	4663      	mov	r3, ip
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	480a      	ldr	r0, [pc, #40]	; (8006df0 <Sensor_Test_Raw+0xdc>)
 8006dc8:	f7fe f9c8 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006dcc:	f7fe fcf6 	bl	80057bc <Custom_Switch_Read>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d1a6      	bne.n	8006d24 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8006dd6:	f7fe f8dc 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Stop();
 8006dda:	f000 fdf9 	bl	80079d0 <Sensor_Stop>
}
 8006dde:	bf00      	nop
 8006de0:	3704      	adds	r7, #4
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20002e8c 	.word	0x20002e8c
 8006dec:	0800ae00 	.word	0x0800ae00
 8006df0:	0800ae2c 	.word	0x0800ae2c

08006df4 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8006df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af06      	add	r7, sp, #24
	Sensor_Start();
 8006dfa:	f000 fdd1 	bl	80079a0 <Sensor_Start>
	Custom_OLED_Clear();
 8006dfe:	f7fe f8c8 	bl	8004f92 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006e02:	e053      	b.n	8006eac <Sensor_Test_Normalized+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006e04:	4b30      	ldr	r3, [pc, #192]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e0a:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006e0c:	4b2e      	ldr	r3, [pc, #184]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e12:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006e14:	4b2c      	ldr	r3, [pc, #176]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e16:	789b      	ldrb	r3, [r3, #2]
 8006e18:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e1a:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006e1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e1e:	78db      	ldrb	r3, [r3, #3]
 8006e20:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e22:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006e24:	4b28      	ldr	r3, [pc, #160]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e26:	791b      	ldrb	r3, [r3, #4]
 8006e28:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e2a:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006e2c:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e2e:	795b      	ldrb	r3, [r3, #5]
 8006e30:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e32:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006e34:	4b24      	ldr	r3, [pc, #144]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e36:	799b      	ldrb	r3, [r3, #6]
 8006e38:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e3a:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006e3c:	4b22      	ldr	r3, [pc, #136]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e3e:	79db      	ldrb	r3, [r3, #7]
 8006e40:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	9403      	str	r4, [sp, #12]
 8006e46:	9002      	str	r0, [sp, #8]
 8006e48:	9101      	str	r1, [sp, #4]
 8006e4a:	9200      	str	r2, [sp, #0]
 8006e4c:	4663      	mov	r3, ip
 8006e4e:	4632      	mov	r2, r6
 8006e50:	4629      	mov	r1, r5
 8006e52:	481e      	ldr	r0, [pc, #120]	; (8006ecc <Sensor_Test_Normalized+0xd8>)
 8006e54:	f7fe f982 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006e58:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e5a:	7a1b      	ldrb	r3, [r3, #8]
 8006e5c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e5e:	461d      	mov	r5, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e62:	7a5b      	ldrb	r3, [r3, #9]
 8006e64:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e66:	461e      	mov	r6, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e6a:	7a9b      	ldrb	r3, [r3, #10]
 8006e6c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e6e:	469c      	mov	ip, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e72:	7adb      	ldrb	r3, [r3, #11]
 8006e74:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e76:	461a      	mov	r2, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006e78:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e7a:	7b1b      	ldrb	r3, [r3, #12]
 8006e7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e7e:	4619      	mov	r1, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006e80:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e82:	7b5b      	ldrb	r3, [r3, #13]
 8006e84:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e86:	4618      	mov	r0, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e8a:	7b9b      	ldrb	r3, [r3, #14]
 8006e8c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e8e:	461c      	mov	r4, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <Sensor_Test_Normalized+0xd4>)
 8006e92:	7bdb      	ldrb	r3, [r3, #15]
 8006e94:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e96:	9304      	str	r3, [sp, #16]
 8006e98:	9403      	str	r4, [sp, #12]
 8006e9a:	9002      	str	r0, [sp, #8]
 8006e9c:	9101      	str	r1, [sp, #4]
 8006e9e:	9200      	str	r2, [sp, #0]
 8006ea0:	4663      	mov	r3, ip
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	480a      	ldr	r0, [pc, #40]	; (8006ed0 <Sensor_Test_Normalized+0xdc>)
 8006ea8:	f7fe f958 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006eac:	f7fe fc86 	bl	80057bc <Custom_Switch_Read>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d1a6      	bne.n	8006e04 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8006eb6:	f7fe f86c 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Stop();
 8006eba:	f000 fd89 	bl	80079d0 <Sensor_Stop>
}
 8006ebe:	bf00      	nop
 8006ec0:	3704      	adds	r7, #4
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20002e9c 	.word	0x20002e9c
 8006ecc:	0800ae00 	.word	0x0800ae00
 8006ed0:	0800ae2c 	.word	0x0800ae2c

08006ed4 <Sensor_Test_State>:





void Sensor_Test_State() {
 8006ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 8006ede:	f000 fd5f 	bl	80079a0 <Sensor_Start>
	Custom_OLED_Clear();
 8006ee2:	f7fe f856 	bl	8004f92 <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006ee6:	e0a9      	b.n	800703c <Sensor_Test_State+0x168>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8006ee8:	4b5c      	ldr	r3, [pc, #368]	; (800705c <Sensor_Test_State+0x188>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	485b      	ldr	r0, [pc, #364]	; (8007060 <Sensor_Test_State+0x18c>)
 8006ef2:	f7fe f933 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ef6:	4b5b      	ldr	r3, [pc, #364]	; (8007064 <Sensor_Test_State+0x190>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	09db      	lsrs	r3, r3, #7
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f003 0501 	and.w	r5, r3, #1
 8006f04:	4b57      	ldr	r3, [pc, #348]	; (8007064 <Sensor_Test_State+0x190>)
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f003 0601 	and.w	r6, r3, #1
 8006f12:	4b54      	ldr	r3, [pc, #336]	; (8007064 <Sensor_Test_State+0x190>)
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f003 0c01 	and.w	ip, r3, #1
 8006f20:	4b50      	ldr	r3, [pc, #320]	; (8007064 <Sensor_Test_State+0x190>)
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	4a4d      	ldr	r2, [pc, #308]	; (8007064 <Sensor_Test_State+0x190>)
 8006f30:	8812      	ldrh	r2, [r2, #0]
 8006f32:	b292      	uxth	r2, r2
 8006f34:	08d2      	lsrs	r2, r2, #3
 8006f36:	b292      	uxth	r2, r2
 8006f38:	f002 0201 	and.w	r2, r2, #1
 8006f3c:	4949      	ldr	r1, [pc, #292]	; (8007064 <Sensor_Test_State+0x190>)
 8006f3e:	8809      	ldrh	r1, [r1, #0]
 8006f40:	b289      	uxth	r1, r1
 8006f42:	0889      	lsrs	r1, r1, #2
 8006f44:	b289      	uxth	r1, r1
 8006f46:	f001 0101 	and.w	r1, r1, #1
 8006f4a:	4846      	ldr	r0, [pc, #280]	; (8007064 <Sensor_Test_State+0x190>)
 8006f4c:	8800      	ldrh	r0, [r0, #0]
 8006f4e:	b280      	uxth	r0, r0
 8006f50:	0840      	lsrs	r0, r0, #1
 8006f52:	b280      	uxth	r0, r0
 8006f54:	f000 0001 	and.w	r0, r0, #1
			(state >> 7) & 1, (state >> 6) & 1, (state >> 5) & 1, (state >> 4) & 1, \
			(state >> 3) & 1, (state >> 2) & 1, (state >> 1) & 1, (state >> 0) & 1);
 8006f58:	4c42      	ldr	r4, [pc, #264]	; (8007064 <Sensor_Test_State+0x190>)
 8006f5a:	8824      	ldrh	r4, [r4, #0]
 8006f5c:	b2a4      	uxth	r4, r4
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f5e:	f004 0401 	and.w	r4, r4, #1
 8006f62:	9404      	str	r4, [sp, #16]
 8006f64:	9003      	str	r0, [sp, #12]
 8006f66:	9102      	str	r1, [sp, #8]
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4663      	mov	r3, ip
 8006f6e:	4632      	mov	r2, r6
 8006f70:	4629      	mov	r1, r5
 8006f72:	483d      	ldr	r0, [pc, #244]	; (8007068 <Sensor_Test_State+0x194>)
 8006f74:	f7fe f8f2 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f78:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <Sensor_Test_State+0x190>)
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	0bdb      	lsrs	r3, r3, #15
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f003 0501 	and.w	r5, r3, #1
 8006f86:	4b37      	ldr	r3, [pc, #220]	; (8007064 <Sensor_Test_State+0x190>)
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	0b9b      	lsrs	r3, r3, #14
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f003 0601 	and.w	r6, r3, #1
 8006f94:	4b33      	ldr	r3, [pc, #204]	; (8007064 <Sensor_Test_State+0x190>)
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	0b5b      	lsrs	r3, r3, #13
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f003 0c01 	and.w	ip, r3, #1
 8006fa2:	4b30      	ldr	r3, [pc, #192]	; (8007064 <Sensor_Test_State+0x190>)
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	0b1b      	lsrs	r3, r3, #12
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <Sensor_Test_State+0x190>)
 8006fb2:	8812      	ldrh	r2, [r2, #0]
 8006fb4:	b292      	uxth	r2, r2
 8006fb6:	0ad2      	lsrs	r2, r2, #11
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	f002 0201 	and.w	r2, r2, #1
 8006fbe:	4929      	ldr	r1, [pc, #164]	; (8007064 <Sensor_Test_State+0x190>)
 8006fc0:	8809      	ldrh	r1, [r1, #0]
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	0a89      	lsrs	r1, r1, #10
 8006fc6:	b289      	uxth	r1, r1
 8006fc8:	f001 0101 	and.w	r1, r1, #1
 8006fcc:	4825      	ldr	r0, [pc, #148]	; (8007064 <Sensor_Test_State+0x190>)
 8006fce:	8800      	ldrh	r0, [r0, #0]
 8006fd0:	b280      	uxth	r0, r0
 8006fd2:	0a40      	lsrs	r0, r0, #9
 8006fd4:	b280      	uxth	r0, r0
 8006fd6:	f000 0001 	and.w	r0, r0, #1
 8006fda:	4c22      	ldr	r4, [pc, #136]	; (8007064 <Sensor_Test_State+0x190>)
 8006fdc:	8824      	ldrh	r4, [r4, #0]
 8006fde:	b2a4      	uxth	r4, r4
 8006fe0:	0a24      	lsrs	r4, r4, #8
 8006fe2:	b2a4      	uxth	r4, r4
 8006fe4:	f004 0401 	and.w	r4, r4, #1
 8006fe8:	9404      	str	r4, [sp, #16]
 8006fea:	9003      	str	r0, [sp, #12]
 8006fec:	9102      	str	r1, [sp, #8]
 8006fee:	9201      	str	r2, [sp, #4]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	4663      	mov	r3, ip
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	481c      	ldr	r0, [pc, #112]	; (800706c <Sensor_Test_State+0x198>)
 8006ffa:	f7fe f8af 	bl	800515c <Custom_OLED_Printf>
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);


		if (sw == CUSTOM_SW_1) {
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10c      	bne.n	800701e <Sensor_Test_State+0x14a>
			if (threshold > THRESHOLD_MIN) {
 8007004:	4b15      	ldr	r3, [pc, #84]	; (800705c <Sensor_Test_State+0x188>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b14      	cmp	r3, #20
 800700c:	d916      	bls.n	800703c <Sensor_Test_State+0x168>
				threshold -= THRESHOLD_CHANGE_VAL;
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <Sensor_Test_State+0x188>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	3b05      	subs	r3, #5
 8007016:	b2da      	uxtb	r2, r3
 8007018:	4b10      	ldr	r3, [pc, #64]	; (800705c <Sensor_Test_State+0x188>)
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e00e      	b.n	800703c <Sensor_Test_State+0x168>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d10b      	bne.n	800703c <Sensor_Test_State+0x168>
			if (threshold < THRESHOLD_MAX) {
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <Sensor_Test_State+0x188>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2bf9      	cmp	r3, #249	; 0xf9
 800702c:	d806      	bhi.n	800703c <Sensor_Test_State+0x168>
				threshold += THRESHOLD_CHANGE_VAL;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <Sensor_Test_State+0x188>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3305      	adds	r3, #5
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b08      	ldr	r3, [pc, #32]	; (800705c <Sensor_Test_State+0x188>)
 800703a:	701a      	strb	r2, [r3, #0]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800703c:	f7fe fbbe 	bl	80057bc <Custom_Switch_Read>
 8007040:	4603      	mov	r3, r0
 8007042:	71fb      	strb	r3, [r7, #7]
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b04      	cmp	r3, #4
 8007048:	f47f af4e 	bne.w	8006ee8 <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 800704c:	f7fd ffa1 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Stop();
 8007050:	f000 fcbe 	bl	80079d0 <Sensor_Stop>
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	2000005c 	.word	0x2000005c
 8007060:	0800ae58 	.word	0x0800ae58
 8007064:	20002edc 	.word	0x20002edc
 8007068:	0800ae00 	.word	0x0800ae00
 800706c:	0800ae2c 	.word	0x0800ae2c

08007070 <Battery_Test_Voltage>:


void Battery_Test_Voltage() {
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
	Sensor_Start();
 8007074:	f000 fc94 	bl	80079a0 <Sensor_Start>
	Custom_OLED_Clear();
 8007078:	f7fd ff8b 	bl	8004f92 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800707c:	e009      	b.n	8007092 <Battery_Test_Voltage+0x22>

		Custom_OLED_Printf("/A%5f", sensingVoltage);
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <Battery_Test_Voltage+0x38>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7f9 fa68 	bl	8000558 <__aeabi_f2d>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4807      	ldr	r0, [pc, #28]	; (80070ac <Battery_Test_Voltage+0x3c>)
 800708e:	f7fe f865 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007092:	f7fe fb93 	bl	80057bc <Custom_Switch_Read>
 8007096:	4603      	mov	r3, r0
 8007098:	2b04      	cmp	r3, #4
 800709a:	d1f0      	bne.n	800707e <Battery_Test_Voltage+0xe>
	}

	Custom_OLED_Clear();
 800709c:	f7fd ff79 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Stop();
 80070a0:	f000 fc96 	bl	80079d0 <Sensor_Stop>
}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20002ee0 	.word	0x20002ee0
 80070ac:	0800ae6c 	.word	0x0800ae6c

080070b0 <MotorR_Test_Duty>:





void MotorR_Test_Duty() {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM11);
 80070b6:	4859      	ldr	r0, [pc, #356]	; (800721c <MotorR_Test_Duty+0x16c>)
 80070b8:	f7ff fd58 	bl	8006b6c <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 80070bc:	2101      	movs	r1, #1
 80070be:	4857      	ldr	r0, [pc, #348]	; (800721c <MotorR_Test_Duty+0x16c>)
 80070c0:	f7ff fd74 	bl	8006bac <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 80070c4:	2100      	movs	r1, #0
 80070c6:	4855      	ldr	r0, [pc, #340]	; (800721c <MotorR_Test_Duty+0x16c>)
 80070c8:	f7ff fd93 	bl	8006bf2 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM3);
 80070cc:	4854      	ldr	r0, [pc, #336]	; (8007220 <MotorR_Test_Duty+0x170>)
 80070ce:	f7ff fd4d 	bl	8006b6c <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM11->ARR + 1;
 80070d2:	4b52      	ldr	r3, [pc, #328]	; (800721c <MotorR_Test_Duty+0x16c>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3301      	adds	r3, #1
 80070da:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 80070e2:	f7fe fb6b 	bl	80057bc <Custom_Switch_Read>
 80070e6:	4603      	mov	r3, r0
 80070e8:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 80070ea:	797b      	ldrb	r3, [r7, #5]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	f000 8082 	beq.w	80071f6 <MotorR_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80070f2:	797b      	ldrb	r3, [r7, #5]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d108      	bne.n	800710a <MotorR_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 80070f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80070fc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007224 <MotorR_Test_Duty+0x174>
 8007100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007104:	edc7 7a03 	vstr	s15, [r7, #12]
 8007108:	e00a      	b.n	8007120 <MotorR_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 800710a:	797b      	ldrb	r3, [r7, #5]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d107      	bne.n	8007120 <MotorR_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8007110:	edd7 7a03 	vldr	s15, [r7, #12]
 8007114:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007224 <MotorR_Test_Duty+0x174>
 8007118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800711c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800712a:	edd7 7a03 	vldr	s15, [r7, #12]
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	d50d      	bpl.n	8007158 <MotorR_Test_Duty+0xa8>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007146:	edd7 7a03 	vldr	s15, [r7, #12]
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	eef1 7a67 	vneg.f32	s15, s15
 8007152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007156:	e00a      	b.n	800716e <MotorR_Test_Duty+0xbe>
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007162:	edd7 7a03 	vldr	s15, [r7, #12]
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800716e:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	dd02      	ble.n	8007180 <MotorR_Test_Duty+0xd0>
		 level = level_max;
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	e004      	b.n	800718a <MotorR_Test_Duty+0xda>
		} else if (level < 0) {
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	da01      	bge.n	800718a <MotorR_Test_Duty+0xda>
		 level = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM11->CCR1 = level;
 800718a:	4a24      	ldr	r2, [pc, #144]	; (800721c <MotorR_Test_Duty+0x16c>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOC, 1 << 4, duty_ratio < 0 ? 1 : 0); // PC4
 8007190:	edd7 7a03 	vldr	s15, [r7, #12]
 8007194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719c:	bf4c      	ite	mi
 800719e:	2301      	movmi	r3, #1
 80071a0:	2300      	movpl	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	2110      	movs	r1, #16
 80071a8:	481f      	ldr	r0, [pc, #124]	; (8007228 <MotorR_Test_Duty+0x178>)
 80071aa:	f7ff fd30 	bl	8006c0e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOC, 1 << 5, duty_ratio > 0 ? 1 : 0); // PC5
 80071ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	bfcc      	ite	gt
 80071bc:	2301      	movgt	r3, #1
 80071be:	2300      	movle	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	2120      	movs	r1, #32
 80071c6:	4818      	ldr	r0, [pc, #96]	; (8007228 <MotorR_Test_Duty+0x178>)
 80071c8:	f7ff fd21 	bl	8006c0e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7f9 f9c3 	bl	8000558 <__aeabi_f2d>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4815      	ldr	r0, [pc, #84]	; (800722c <MotorR_Test_Duty+0x17c>)
 80071d8:	f7fd ffc0 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM11->CCR1);
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <MotorR_Test_Duty+0x16c>)
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	4619      	mov	r1, r3
 80071e2:	4813      	ldr	r0, [pc, #76]	; (8007230 <MotorR_Test_Duty+0x180>)
 80071e4:	f7fd ffba 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM3->CNT);
 80071e8:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <MotorR_Test_Duty+0x170>)
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4619      	mov	r1, r3
 80071ee:	4811      	ldr	r0, [pc, #68]	; (8007234 <MotorR_Test_Duty+0x184>)
 80071f0:	f7fd ffb4 	bl	800515c <Custom_OLED_Printf>
	for (;;) {
 80071f4:	e775      	b.n	80070e2 <MotorR_Test_Duty+0x32>
		 break;
 80071f6:	bf00      	nop
	}

	TIM11->CCR1 = 0;
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <MotorR_Test_Duty+0x16c>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM11);
 80071fe:	4807      	ldr	r0, [pc, #28]	; (800721c <MotorR_Test_Duty+0x16c>)
 8007200:	f7ff fcc4 	bl	8006b8c <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8007204:	2101      	movs	r1, #1
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <MotorR_Test_Duty+0x16c>)
 8007208:	f7ff fce1 	bl	8006bce <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM3);
 800720c:	4804      	ldr	r0, [pc, #16]	; (8007220 <MotorR_Test_Duty+0x170>)
 800720e:	f7ff fcbd 	bl	8006b8c <LL_TIM_DisableCounter>
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40014800 	.word	0x40014800
 8007220:	40000400 	.word	0x40000400
 8007224:	3dcccccd 	.word	0x3dcccccd
 8007228:	40020800 	.word	0x40020800
 800722c:	0800ae74 	.word	0x0800ae74
 8007230:	0800ae84 	.word	0x0800ae84
 8007234:	0800ae94 	.word	0x0800ae94

08007238 <MotorL_Test_Duty>:


void MotorL_Test_Duty() {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM10);
 800723e:	485b      	ldr	r0, [pc, #364]	; (80073ac <MotorL_Test_Duty+0x174>)
 8007240:	f7ff fc94 	bl	8006b6c <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007244:	2101      	movs	r1, #1
 8007246:	4859      	ldr	r0, [pc, #356]	; (80073ac <MotorL_Test_Duty+0x174>)
 8007248:	f7ff fcb0 	bl	8006bac <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 800724c:	2100      	movs	r1, #0
 800724e:	4857      	ldr	r0, [pc, #348]	; (80073ac <MotorL_Test_Duty+0x174>)
 8007250:	f7ff fccf 	bl	8006bf2 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM4);
 8007254:	4856      	ldr	r0, [pc, #344]	; (80073b0 <MotorL_Test_Duty+0x178>)
 8007256:	f7ff fc89 	bl	8006b6c <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM10->ARR + 1;
 800725a:	4b54      	ldr	r3, [pc, #336]	; (80073ac <MotorL_Test_Duty+0x174>)
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	b29b      	uxth	r3, r3
 8007260:	3301      	adds	r3, #1
 8007262:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]

	TIM4->CNT = 30000;
 800726a:	4b51      	ldr	r3, [pc, #324]	; (80073b0 <MotorL_Test_Duty+0x178>)
 800726c:	f247 5230 	movw	r2, #30000	; 0x7530
 8007270:	625a      	str	r2, [r3, #36]	; 0x24

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007272:	f7fe faa3 	bl	80057bc <Custom_Switch_Read>
 8007276:	4603      	mov	r3, r0
 8007278:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 800727a:	797b      	ldrb	r3, [r7, #5]
 800727c:	2b04      	cmp	r3, #4
 800727e:	f000 8082 	beq.w	8007386 <MotorL_Test_Duty+0x14e>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007282:	797b      	ldrb	r3, [r7, #5]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d108      	bne.n	800729a <MotorL_Test_Duty+0x62>
		 duty_ratio -= 0.1f;
 8007288:	edd7 7a03 	vldr	s15, [r7, #12]
 800728c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80073b4 <MotorL_Test_Duty+0x17c>
 8007290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007294:	edc7 7a03 	vstr	s15, [r7, #12]
 8007298:	e00a      	b.n	80072b0 <MotorL_Test_Duty+0x78>
		} else if (sw == CUSTOM_SW_2) {
 800729a:	797b      	ldrb	r3, [r7, #5]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d107      	bne.n	80072b0 <MotorL_Test_Duty+0x78>
		 duty_ratio += 0.1f;
 80072a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80072a4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80073b4 <MotorL_Test_Duty+0x17c>
 80072a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072ac:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	d50d      	bpl.n	80072e8 <MotorL_Test_Duty+0xb0>
 80072cc:	88fb      	ldrh	r3, [r7, #6]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	eef1 7a67 	vneg.f32	s15, s15
 80072e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e6:	e00a      	b.n	80072fe <MotorL_Test_Duty+0xc6>
 80072e8:	88fb      	ldrh	r3, [r7, #6]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072fe:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	dd02      	ble.n	8007310 <MotorL_Test_Duty+0xd8>
		 level = level_max;
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	e004      	b.n	800731a <MotorL_Test_Duty+0xe2>
		} else if (level < 0) {
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	da01      	bge.n	800731a <MotorL_Test_Duty+0xe2>
		 level = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM10->CCR1 = level;
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <MotorL_Test_Duty+0x174>)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOB, 1 << 4, duty_ratio > 0 ? 1 : 0); // PB4
 8007320:	edd7 7a03 	vldr	s15, [r7, #12]
 8007324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732c:	bfcc      	ite	gt
 800732e:	2301      	movgt	r3, #1
 8007330:	2300      	movle	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	2110      	movs	r1, #16
 8007338:	481f      	ldr	r0, [pc, #124]	; (80073b8 <MotorL_Test_Duty+0x180>)
 800733a:	f7ff fc68 	bl	8006c0e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOB, 1 << 5, duty_ratio < 0 ? 1 : 0); // PB5
 800733e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734a:	bf4c      	ite	mi
 800734c:	2301      	movmi	r3, #1
 800734e:	2300      	movpl	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	2120      	movs	r1, #32
 8007356:	4818      	ldr	r0, [pc, #96]	; (80073b8 <MotorL_Test_Duty+0x180>)
 8007358:	f7ff fc59 	bl	8006c0e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7f9 f8fb 	bl	8000558 <__aeabi_f2d>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4815      	ldr	r0, [pc, #84]	; (80073bc <MotorL_Test_Duty+0x184>)
 8007368:	f7fd fef8 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM10->CCR1);
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <MotorL_Test_Duty+0x174>)
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	4619      	mov	r1, r3
 8007372:	4813      	ldr	r0, [pc, #76]	; (80073c0 <MotorL_Test_Duty+0x188>)
 8007374:	f7fd fef2 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM4->CNT);
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <MotorL_Test_Duty+0x178>)
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	4619      	mov	r1, r3
 800737e:	4811      	ldr	r0, [pc, #68]	; (80073c4 <MotorL_Test_Duty+0x18c>)
 8007380:	f7fd feec 	bl	800515c <Custom_OLED_Printf>
	for (;;) {
 8007384:	e775      	b.n	8007272 <MotorL_Test_Duty+0x3a>
		 break;
 8007386:	bf00      	nop
	}

	TIM10->CCR1 = 0;
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <MotorL_Test_Duty+0x174>)
 800738a:	2200      	movs	r2, #0
 800738c:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM10);
 800738e:	4807      	ldr	r0, [pc, #28]	; (80073ac <MotorL_Test_Duty+0x174>)
 8007390:	f7ff fbfc 	bl	8006b8c <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007394:	2101      	movs	r1, #1
 8007396:	4805      	ldr	r0, [pc, #20]	; (80073ac <MotorL_Test_Duty+0x174>)
 8007398:	f7ff fc19 	bl	8006bce <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM4);
 800739c:	4804      	ldr	r0, [pc, #16]	; (80073b0 <MotorL_Test_Duty+0x178>)
 800739e:	f7ff fbf5 	bl	8006b8c <LL_TIM_DisableCounter>
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40000800 	.word	0x40000800
 80073b4:	3dcccccd 	.word	0x3dcccccd
 80073b8:	40020400 	.word	0x40020400
 80073bc:	0800ae74 	.word	0x0800ae74
 80073c0:	0800ae84 	.word	0x0800ae84
 80073c4:	0800ae94 	.word	0x0800ae94

080073c8 <Motor_Test_Speed>:



void Motor_Test_Speed() {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR_L = TIM10->ARR + 1;
 80073ce:	4b49      	ldr	r3, [pc, #292]	; (80074f4 <Motor_Test_Speed+0x12c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	3301      	adds	r3, #1
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b48      	ldr	r3, [pc, #288]	; (80074f8 <Motor_Test_Speed+0x130>)
 80073d8:	601a      	str	r2, [r3, #0]
	levelMaxCCR_R = TIM11->ARR + 1;
 80073da:	4b48      	ldr	r3, [pc, #288]	; (80074fc <Motor_Test_Speed+0x134>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	3301      	adds	r3, #1
 80073e0:	461a      	mov	r2, r3
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <Motor_Test_Speed+0x138>)
 80073e4:	601a      	str	r2, [r3, #0]
	prevErrorL = 0;
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <Motor_Test_Speed+0x13c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 80073ec:	4b46      	ldr	r3, [pc, #280]	; (8007508 <Motor_Test_Speed+0x140>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
	targetEncoderValueL = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 80073f2:	4b46      	ldr	r3, [pc, #280]	; (800750c <Motor_Test_Speed+0x144>)
 80073f4:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 80073f8:	601a      	str	r2, [r3, #0]
	targetEncoderValueR = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 80073fa:	4b45      	ldr	r3, [pc, #276]	; (8007510 <Motor_Test_Speed+0x148>)
 80073fc:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8007400:	601a      	str	r2, [r3, #0]
	TIM3->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8007402:	4b44      	ldr	r3, [pc, #272]	; (8007514 <Motor_Test_Speed+0x14c>)
 8007404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007408:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800740a:	4b43      	ldr	r3, [pc, #268]	; (8007518 <Motor_Test_Speed+0x150>)
 800740c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007410:	625a      	str	r2, [r3, #36]	; 0x24

	// 가속도 변수 초기화
	targetAccele = 1;
 8007412:	4b42      	ldr	r3, [pc, #264]	; (800751c <Motor_Test_Speed+0x154>)
 8007414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007418:	601a      	str	r2, [r3, #0]
	curAccele = 0;
 800741a:	4b41      	ldr	r3, [pc, #260]	; (8007520 <Motor_Test_Speed+0x158>)
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = 0;
 8007422:	4b40      	ldr	r3, [pc, #256]	; (8007524 <Motor_Test_Speed+0x15c>)
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
	decele = 1;
 800742a:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <Motor_Test_Speed+0x160>)
 800742c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007430:	601a      	str	r2, [r3, #0]
	curSpeed = 0;
 8007432:	4b3e      	ldr	r3, [pc, #248]	; (800752c <Motor_Test_Speed+0x164>)
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	601a      	str	r2, [r3, #0]

	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 800743a:	4b3d      	ldr	r3, [pc, #244]	; (8007530 <Motor_Test_Speed+0x168>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 8007440:	4b3c      	ldr	r3, [pc, #240]	; (8007534 <Motor_Test_Speed+0x16c>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	curInlineVal = 0;
 8007446:	4b3c      	ldr	r3, [pc, #240]	; (8007538 <Motor_Test_Speed+0x170>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
	curveDeceleCoef = 20000;
 800744c:	4b3b      	ldr	r3, [pc, #236]	; (800753c <Motor_Test_Speed+0x174>)
 800744e:	4a3c      	ldr	r2, [pc, #240]	; (8007540 <Motor_Test_Speed+0x178>)
 8007450:	601a      	str	r2, [r3, #0]

	Motor_Start();
 8007452:	f000 f9a3 	bl	800779c <Motor_Start>
	Speed_Control_Start();
 8007456:	f000 f9f3 	bl	8007840 <Speed_Control_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 800745a:	f7fe f9af 	bl	80057bc <Custom_Switch_Read>
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_3) {
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d03b      	beq.n	80074e0 <Motor_Test_Speed+0x118>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10a      	bne.n	8007484 <Motor_Test_Speed+0xbc>
			targetSpeed -= 0.1f;
 800746e:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <Motor_Test_Speed+0x15c>)
 8007470:	edd3 7a00 	vldr	s15, [r3]
 8007474:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007544 <Motor_Test_Speed+0x17c>
 8007478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800747c:	4b29      	ldr	r3, [pc, #164]	; (8007524 <Motor_Test_Speed+0x15c>)
 800747e:	edc3 7a00 	vstr	s15, [r3]
 8007482:	e00c      	b.n	800749e <Motor_Test_Speed+0xd6>
		} else if (sw == CUSTOM_SW_2) {
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d109      	bne.n	800749e <Motor_Test_Speed+0xd6>
			targetSpeed += 0.1f;
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <Motor_Test_Speed+0x15c>)
 800748c:	edd3 7a00 	vldr	s15, [r3]
 8007490:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007544 <Motor_Test_Speed+0x17c>
 8007494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007498:	4b22      	ldr	r3, [pc, #136]	; (8007524 <Motor_Test_Speed+0x15c>)
 800749a:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0speed  : %3.2f", curSpeed);
 800749e:	4b23      	ldr	r3, [pc, #140]	; (800752c <Motor_Test_Speed+0x164>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 f858 	bl	8000558 <__aeabi_f2d>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4826      	ldr	r0, [pc, #152]	; (8007548 <Motor_Test_Speed+0x180>)
 80074ae:	f7fd fe55 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR    : %5d", TIM10->CCR1);
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <Motor_Test_Speed+0x12c>)
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	4619      	mov	r1, r3
 80074b8:	4824      	ldr	r0, [pc, #144]	; (800754c <Motor_Test_Speed+0x184>)
 80074ba:	f7fd fe4f 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/2curECOD: %5d", TIM4->CNT);
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <Motor_Test_Speed+0x150>)
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	4619      	mov	r1, r3
 80074c4:	4822      	ldr	r0, [pc, #136]	; (8007550 <Motor_Test_Speed+0x188>)
 80074c6:	f7fd fe49 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/3tarECOD: %5f", targetEncoderValueL);
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <Motor_Test_Speed+0x144>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 f842 	bl	8000558 <__aeabi_f2d>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	481e      	ldr	r0, [pc, #120]	; (8007554 <Motor_Test_Speed+0x18c>)
 80074da:	f7fd fe3f 	bl	800515c <Custom_OLED_Printf>
	for (;;) {
 80074de:	e7bc      	b.n	800745a <Motor_Test_Speed+0x92>
		 break;
 80074e0:	bf00      	nop

	}

	Speed_Control_Stop();
 80074e2:	f000 f9b9 	bl	8007858 <Speed_Control_Stop>
	Motor_Stop();
 80074e6:	f000 f981 	bl	80077ec <Motor_Stop>


}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	40014400 	.word	0x40014400
 80074f8:	2000142c 	.word	0x2000142c
 80074fc:	40014800 	.word	0x40014800
 8007500:	20001430 	.word	0x20001430
 8007504:	20001434 	.word	0x20001434
 8007508:	20001438 	.word	0x20001438
 800750c:	2000143c 	.word	0x2000143c
 8007510:	20001440 	.word	0x20001440
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	20000024 	.word	0x20000024
 8007520:	20000028 	.word	0x20000028
 8007524:	20000030 	.word	0x20000030
 8007528:	2000002c 	.word	0x2000002c
 800752c:	20000034 	.word	0x20000034
 8007530:	20001444 	.word	0x20001444
 8007534:	20001448 	.word	0x20001448
 8007538:	2000146c 	.word	0x2000146c
 800753c:	2000003c 	.word	0x2000003c
 8007540:	469c4000 	.word	0x469c4000
 8007544:	3dcccccd 	.word	0x3dcccccd
 8007548:	0800aea4 	.word	0x0800aea4
 800754c:	0800aeb8 	.word	0x0800aeb8
 8007550:	0800aec8 	.word	0x0800aec8
 8007554:	0800aed8 	.word	0x0800aed8

08007558 <Drive_Test_Position>:





void Drive_Test_Position() {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8007562:	f7fd fd16 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Start();
 8007566:	f000 fa1b 	bl	80079a0 <Sensor_Start>
	Speed_Control_Start();
 800756a:	f000 f969 	bl	8007840 <Speed_Control_Start>

	// 좌우 모터 포지션에 관한 변수
	positionVal = 0;
 800756e:	4b27      	ldr	r3, [pc, #156]	; (800760c <Drive_Test_Position+0xb4>)
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
	positionCoef = POSITION_COEF_INIT;
 8007574:	4b26      	ldr	r3, [pc, #152]	; (8007610 <Drive_Test_Position+0xb8>)
 8007576:	4a27      	ldr	r2, [pc, #156]	; (8007614 <Drive_Test_Position+0xbc>)
 8007578:	601a      	str	r2, [r3, #0]

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800757a:	e035      	b.n	80075e8 <Drive_Test_Position+0x90>

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 800757c:	4b23      	ldr	r3, [pc, #140]	; (800760c <Drive_Test_Position+0xb4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4619      	mov	r1, r3
 8007582:	4825      	ldr	r0, [pc, #148]	; (8007618 <Drive_Test_Position+0xc0>)
 8007584:	f7fd fdea 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL:  %f", (1 + positionVal * positionCoef));
 8007588:	4b20      	ldr	r3, [pc, #128]	; (800760c <Drive_Test_Position+0xb4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <Drive_Test_Position+0xb8>)
 8007596:	edd3 7a00 	vldr	s15, [r3]
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a6:	ee17 0a90 	vmov	r0, s15
 80075aa:	f7f8 ffd5 	bl	8000558 <__aeabi_f2d>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	481a      	ldr	r0, [pc, #104]	; (800761c <Drive_Test_Position+0xc4>)
 80075b4:	f7fd fdd2 	bl	800515c <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR:  %f", (1 - positionVal * positionCoef));
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <Drive_Test_Position+0xb4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075c4:	4b12      	ldr	r3, [pc, #72]	; (8007610 <Drive_Test_Position+0xb8>)
 80075c6:	edd3 7a00 	vldr	s15, [r3]
 80075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075d6:	ee17 0a90 	vmov	r0, s15
 80075da:	f7f8 ffbd 	bl	8000558 <__aeabi_f2d>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	480f      	ldr	r0, [pc, #60]	; (8007620 <Drive_Test_Position+0xc8>)
 80075e4:	f7fd fdba 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80075e8:	f7fe f8e8 	bl	80057bc <Custom_Switch_Read>
 80075ec:	4603      	mov	r3, r0
 80075ee:	71fb      	strb	r3, [r7, #7]
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d1c2      	bne.n	800757c <Drive_Test_Position+0x24>
	}
	Speed_Control_Stop();
 80075f6:	f000 f92f 	bl	8007858 <Speed_Control_Stop>
	Sensor_Stop();
 80075fa:	f000 f9e9 	bl	80079d0 <Sensor_Stop>
	Custom_OLED_Clear();
 80075fe:	f7fd fcc8 	bl	8004f92 <Custom_OLED_Clear>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20001444 	.word	0x20001444
 8007610:	2000001c 	.word	0x2000001c
 8007614:	387ba882 	.word	0x387ba882
 8007618:	0800aee8 	.word	0x0800aee8
 800761c:	0800aef8 	.word	0x0800aef8
 8007620:	0800af08 	.word	0x0800af08

08007624 <LL_TIM_EnableCounter>:
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f043 0201 	orr.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <LL_TIM_DisableCounter>:
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f023 0201 	bic.w	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <LL_TIM_CC_EnableChannel>:
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_TIM_CC_DisableChannel>:
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	43db      	mvns	r3, r3
 8007698:	401a      	ands	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <LL_TIM_OC_SetCompareCH2>:
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <LL_TIM_EnableIT_UPDATE>:
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60da      	str	r2, [r3, #12]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <LL_TIM_DisableIT_UPDATE>:
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800770e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3b01      	subs	r3, #1
 8007716:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8007718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8007728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8007738:	bf00      	nop
 800773a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b01      	cmp	r3, #1
 8007746:	d1f8      	bne.n	800773a <Custom_Delay_us+0x34>
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ffcc 	bl	8007706 <Custom_Delay_us>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <Motor_Power_Off>:

#include "header_init.h"



void Motor_Power_Off() {
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0

	TIM10->CCR1 = 0;
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <Motor_Power_Off+0x1c>)
 800777e:	2200      	movs	r2, #0
 8007780:	635a      	str	r2, [r3, #52]	; 0x34
	TIM11->CCR1 = 0;
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <Motor_Power_Off+0x20>)
 8007784:	2200      	movs	r2, #0
 8007786:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007788:	bf00      	nop
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800

0800779c <Motor_Start>:





void Motor_Start() {
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0

	// motorL pwm start
	LL_TIM_EnableCounter(TIM10);
 80077a0:	480e      	ldr	r0, [pc, #56]	; (80077dc <Motor_Start+0x40>)
 80077a2:	f7ff ff3f 	bl	8007624 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 80077a6:	2101      	movs	r1, #1
 80077a8:	480c      	ldr	r0, [pc, #48]	; (80077dc <Motor_Start+0x40>)
 80077aa:	f7ff ff5b 	bl	8007664 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 80077ae:	2100      	movs	r1, #0
 80077b0:	480a      	ldr	r0, [pc, #40]	; (80077dc <Motor_Start+0x40>)
 80077b2:	f7ff ff7a 	bl	80076aa <LL_TIM_OC_SetCompareCH2>

	// motorL encoder start
	LL_TIM_EnableCounter(TIM4);
 80077b6:	480a      	ldr	r0, [pc, #40]	; (80077e0 <Motor_Start+0x44>)
 80077b8:	f7ff ff34 	bl	8007624 <LL_TIM_EnableCounter>



	// motorR pwm start
	LL_TIM_EnableCounter(TIM11);
 80077bc:	4809      	ldr	r0, [pc, #36]	; (80077e4 <Motor_Start+0x48>)
 80077be:	f7ff ff31 	bl	8007624 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 80077c2:	2101      	movs	r1, #1
 80077c4:	4807      	ldr	r0, [pc, #28]	; (80077e4 <Motor_Start+0x48>)
 80077c6:	f7ff ff4d 	bl	8007664 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 80077ca:	2100      	movs	r1, #0
 80077cc:	4805      	ldr	r0, [pc, #20]	; (80077e4 <Motor_Start+0x48>)
 80077ce:	f7ff ff6c 	bl	80076aa <LL_TIM_OC_SetCompareCH2>

	// motorR encoder start
	LL_TIM_EnableCounter(TIM3);
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <Motor_Start+0x4c>)
 80077d4:	f7ff ff26 	bl	8007624 <LL_TIM_EnableCounter>
}
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40014800 	.word	0x40014800
 80077e8:	40000400 	.word	0x40000400

080077ec <Motor_Stop>:





void Motor_Stop() {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0

	TIM10->CCR1 = 0;
 80077f0:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <Motor_Stop+0x44>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM11->CCR1 = 0;
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <Motor_Stop+0x48>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	635a      	str	r2, [r3, #52]	; 0x34


	Custom_Delay_ms(1);
 80077fc:	2001      	movs	r0, #1
 80077fe:	f7ff ffaa 	bl	8007756 <Custom_Delay_ms>

	// motorL pwm end
	LL_TIM_DisableCounter(TIM10);
 8007802:	480b      	ldr	r0, [pc, #44]	; (8007830 <Motor_Stop+0x44>)
 8007804:	f7ff ff1e 	bl	8007644 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007808:	2101      	movs	r1, #1
 800780a:	4809      	ldr	r0, [pc, #36]	; (8007830 <Motor_Stop+0x44>)
 800780c:	f7ff ff3b 	bl	8007686 <LL_TIM_CC_DisableChannel>

	// motorL encoder end
	LL_TIM_DisableCounter(TIM4);
 8007810:	4809      	ldr	r0, [pc, #36]	; (8007838 <Motor_Stop+0x4c>)
 8007812:	f7ff ff17 	bl	8007644 <LL_TIM_DisableCounter>


	// motorR pwm end
	LL_TIM_DisableCounter(TIM11);
 8007816:	4807      	ldr	r0, [pc, #28]	; (8007834 <Motor_Stop+0x48>)
 8007818:	f7ff ff14 	bl	8007644 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 800781c:	2101      	movs	r1, #1
 800781e:	4805      	ldr	r0, [pc, #20]	; (8007834 <Motor_Stop+0x48>)
 8007820:	f7ff ff31 	bl	8007686 <LL_TIM_CC_DisableChannel>

	// motorR encoder end
	LL_TIM_DisableCounter(TIM3);
 8007824:	4805      	ldr	r0, [pc, #20]	; (800783c <Motor_Stop+0x50>)
 8007826:	f7ff ff0d 	bl	8007644 <LL_TIM_DisableCounter>
}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800
 8007838:	40000800 	.word	0x40000800
 800783c:	40000400 	.word	0x40000400

08007840 <Speed_Control_Start>:




void Speed_Control_Start(){
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8007844:	4803      	ldr	r0, [pc, #12]	; (8007854 <Speed_Control_Start+0x14>)
 8007846:	f7ff feed 	bl	8007624 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 800784a:	4802      	ldr	r0, [pc, #8]	; (8007854 <Speed_Control_Start+0x14>)
 800784c:	f7ff ff3b 	bl	80076c6 <LL_TIM_EnableIT_UPDATE>
}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40014000 	.word	0x40014000

08007858 <Speed_Control_Stop>:




void Speed_Control_Stop(){
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 800785c:	4803      	ldr	r0, [pc, #12]	; (800786c <Speed_Control_Stop+0x14>)
 800785e:	f7ff ff42 	bl	80076e6 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8007862:	4802      	ldr	r0, [pc, #8]	; (800786c <Speed_Control_Stop+0x14>)
 8007864:	f7ff feee 	bl	8007644 <LL_TIM_DisableCounter>
}
 8007868:	bf00      	nop
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40014000 	.word	0x40014000

08007870 <LL_ADC_Enable>:
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <LL_ADC_Disable>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f023 0201 	bic.w	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	609a      	str	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LL_TIM_EnableCounter>:
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <LL_TIM_DisableCounter>:
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f023 0201 	bic.w	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <LL_TIM_EnableIT_UPDATE>:
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f043 0201 	orr.w	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <LL_TIM_DisableIT_UPDATE>:
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f023 0201 	bic.w	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60da      	str	r2, [r3, #12]
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8007938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8007942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8007952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800795c:	f043 0301 	orr.w	r3, r3, #1
 8007960:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8007962:	bf00      	nop
 8007964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d1f8      	bne.n	8007964 <Custom_Delay_us+0x34>
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff ffcc 	bl	8007930 <Custom_Delay_us>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <Sensor_Start>:





void Sensor_Start() {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0

	LL_ADC_Enable(ADC1);
 80079a4:	4808      	ldr	r0, [pc, #32]	; (80079c8 <Sensor_Start+0x28>)
 80079a6:	f7ff ff63 	bl	8007870 <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 80079aa:	200a      	movs	r0, #10
 80079ac:	f7ff ffe8 	bl	8007980 <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 80079b0:	4806      	ldr	r0, [pc, #24]	; (80079cc <Sensor_Start+0x2c>)
 80079b2:	f7ff ff7d 	bl	80078b0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <Sensor_Start+0x2c>)
 80079b8:	f7ff ff9a 	bl	80078f0 <LL_TIM_EnableIT_UPDATE>
	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 80079bc:	200a      	movs	r0, #10
 80079be:	f7ff ffdf 	bl	8007980 <Custom_Delay_ms>
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40012000 	.word	0x40012000
 80079cc:	40000c00 	.word	0x40000c00

080079d0 <Sensor_Stop>:




void Sensor_Stop() {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <Sensor_Stop+0x1c>)
 80079d6:	f7ff ff5b 	bl	8007890 <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 80079da:	4805      	ldr	r0, [pc, #20]	; (80079f0 <Sensor_Stop+0x20>)
 80079dc:	f7ff ff78 	bl	80078d0 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 80079e0:	4803      	ldr	r0, [pc, #12]	; (80079f0 <Sensor_Stop+0x20>)
 80079e2:	f7ff ff95 	bl	8007910 <LL_TIM_DisableIT_UPDATE>
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40012000 	.word	0x40012000
 80079f0:	40000c00 	.word	0x40000c00

080079f4 <Sensor_Calibration>:





void Sensor_Calibration() {
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 80079fe:	2300      	movs	r3, #0
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	e00a      	b.n	8007a1a <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	4a8d      	ldr	r2, [pc, #564]	; (8007c3c <Sensor_Calibration+0x248>)
 8007a08:	2100      	movs	r1, #0
 8007a0a:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	4a8c      	ldr	r2, [pc, #560]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a10:	2100      	movs	r1, #0
 8007a12:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	3301      	adds	r3, #1
 8007a18:	71fb      	strb	r3, [r7, #7]
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	2b0f      	cmp	r3, #15
 8007a1e:	d9f1      	bls.n	8007a04 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 8007a20:	f7ff ffbe 	bl	80079a0 <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 8007a24:	f7fd fab5 	bl	8004f92 <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007a28:	e06e      	b.n	8007b08 <Sensor_Calibration+0x114>
		Custom_OLED_Printf("/0Black Max");
 8007a2a:	4886      	ldr	r0, [pc, #536]	; (8007c44 <Sensor_Calibration+0x250>)
 8007a2c:	f7fd fb96 	bl	800515c <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007a30:	2300      	movs	r3, #0
 8007a32:	71bb      	strb	r3, [r7, #6]
 8007a34:	e011      	b.n	8007a5a <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 8007a36:	79bb      	ldrb	r3, [r7, #6]
 8007a38:	4a81      	ldr	r2, [pc, #516]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a3a:	5cd3      	ldrb	r3, [r2, r3]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	79ba      	ldrb	r2, [r7, #6]
 8007a40:	4981      	ldr	r1, [pc, #516]	; (8007c48 <Sensor_Calibration+0x254>)
 8007a42:	5c8a      	ldrb	r2, [r1, r2]
 8007a44:	70fa      	strb	r2, [r7, #3]
 8007a46:	78fa      	ldrb	r2, [r7, #3]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d903      	bls.n	8007a54 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 8007a4c:	79bb      	ldrb	r3, [r7, #6]
 8007a4e:	497c      	ldr	r1, [pc, #496]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007a54:	79bb      	ldrb	r3, [r7, #6]
 8007a56:	3301      	adds	r3, #1
 8007a58:	71bb      	strb	r3, [r7, #6]
 8007a5a:	79bb      	ldrb	r3, [r7, #6]
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d9ea      	bls.n	8007a36 <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007a60:	4b77      	ldr	r3, [pc, #476]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a66:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007a68:	4b75      	ldr	r3, [pc, #468]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a6e:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007a70:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a72:	789b      	ldrb	r3, [r3, #2]
 8007a74:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a76:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007a78:	4b71      	ldr	r3, [pc, #452]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a7e:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007a80:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a82:	791b      	ldrb	r3, [r3, #4]
 8007a84:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a86:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007a88:	4b6d      	ldr	r3, [pc, #436]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a8a:	795b      	ldrb	r3, [r3, #5]
 8007a8c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a8e:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007a90:	4b6b      	ldr	r3, [pc, #428]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a92:	799b      	ldrb	r3, [r3, #6]
 8007a94:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a96:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007a98:	4b69      	ldr	r3, [pc, #420]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007a9a:	79db      	ldrb	r3, [r3, #7]
 8007a9c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	9403      	str	r4, [sp, #12]
 8007aa2:	9002      	str	r0, [sp, #8]
 8007aa4:	9101      	str	r1, [sp, #4]
 8007aa6:	9200      	str	r2, [sp, #0]
 8007aa8:	4663      	mov	r3, ip
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4629      	mov	r1, r5
 8007aae:	4867      	ldr	r0, [pc, #412]	; (8007c4c <Sensor_Calibration+0x258>)
 8007ab0:	f7fd fb54 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8007ab4:	4b62      	ldr	r3, [pc, #392]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ab6:	7a1b      	ldrb	r3, [r3, #8]
 8007ab8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007aba:	461d      	mov	r5, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8007abc:	4b60      	ldr	r3, [pc, #384]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007abe:	7a5b      	ldrb	r3, [r3, #9]
 8007ac0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007ac2:	461e      	mov	r6, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8007ac4:	4b5e      	ldr	r3, [pc, #376]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ac6:	7a9b      	ldrb	r3, [r3, #10]
 8007ac8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007aca:	469c      	mov	ip, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8007acc:	4b5c      	ldr	r3, [pc, #368]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ace:	7adb      	ldrb	r3, [r3, #11]
 8007ad0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007ad2:	461a      	mov	r2, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8007ad4:	4b5a      	ldr	r3, [pc, #360]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ad6:	7b1b      	ldrb	r3, [r3, #12]
 8007ad8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007ada:	4619      	mov	r1, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8007adc:	4b58      	ldr	r3, [pc, #352]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ade:	7b5b      	ldrb	r3, [r3, #13]
 8007ae0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007ae2:	4618      	mov	r0, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8007ae4:	4b56      	ldr	r3, [pc, #344]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007ae6:	7b9b      	ldrb	r3, [r3, #14]
 8007ae8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007aea:	461c      	mov	r4, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8007aec:	4b54      	ldr	r3, [pc, #336]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007aee:	7bdb      	ldrb	r3, [r3, #15]
 8007af0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	9403      	str	r4, [sp, #12]
 8007af6:	9002      	str	r0, [sp, #8]
 8007af8:	9101      	str	r1, [sp, #4]
 8007afa:	9200      	str	r2, [sp, #0]
 8007afc:	4663      	mov	r3, ip
 8007afe:	4632      	mov	r2, r6
 8007b00:	4629      	mov	r1, r5
 8007b02:	4853      	ldr	r0, [pc, #332]	; (8007c50 <Sensor_Calibration+0x25c>)
 8007b04:	f7fd fb2a 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007b08:	f7fd fe58 	bl	80057bc <Custom_Switch_Read>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d18b      	bne.n	8007a2a <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 8007b12:	f7fd fa3e 	bl	8004f92 <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007b16:	e06e      	b.n	8007bf6 <Sensor_Calibration+0x202>
		Custom_OLED_Printf("/0White Max");
 8007b18:	484e      	ldr	r0, [pc, #312]	; (8007c54 <Sensor_Calibration+0x260>)
 8007b1a:	f7fd fb1f 	bl	800515c <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007b1e:	2300      	movs	r3, #0
 8007b20:	717b      	strb	r3, [r7, #5]
 8007b22:	e011      	b.n	8007b48 <Sensor_Calibration+0x154>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8007b24:	797b      	ldrb	r3, [r7, #5]
 8007b26:	4a45      	ldr	r2, [pc, #276]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b28:	5cd3      	ldrb	r3, [r2, r3]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	797a      	ldrb	r2, [r7, #5]
 8007b2e:	4946      	ldr	r1, [pc, #280]	; (8007c48 <Sensor_Calibration+0x254>)
 8007b30:	5c8a      	ldrb	r2, [r1, r2]
 8007b32:	70fa      	strb	r2, [r7, #3]
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d903      	bls.n	8007b42 <Sensor_Calibration+0x14e>
				whiteMaxs[i] = tmp;
 8007b3a:	797b      	ldrb	r3, [r7, #5]
 8007b3c:	493f      	ldr	r1, [pc, #252]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007b42:	797b      	ldrb	r3, [r7, #5]
 8007b44:	3301      	adds	r3, #1
 8007b46:	717b      	strb	r3, [r7, #5]
 8007b48:	797b      	ldrb	r3, [r7, #5]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d9ea      	bls.n	8007b24 <Sensor_Calibration+0x130>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007b4e:	4b3b      	ldr	r3, [pc, #236]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b54:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007b56:	4b39      	ldr	r3, [pc, #228]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b5c:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007b5e:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b64:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007b66:	4b35      	ldr	r3, [pc, #212]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b68:	78db      	ldrb	r3, [r3, #3]
 8007b6a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b6c:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007b6e:	4b33      	ldr	r3, [pc, #204]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b70:	791b      	ldrb	r3, [r3, #4]
 8007b72:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b74:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007b76:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b78:	795b      	ldrb	r3, [r3, #5]
 8007b7a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b7c:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007b7e:	4b2f      	ldr	r3, [pc, #188]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b80:	799b      	ldrb	r3, [r3, #6]
 8007b82:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b84:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007b86:	4b2d      	ldr	r3, [pc, #180]	; (8007c3c <Sensor_Calibration+0x248>)
 8007b88:	79db      	ldrb	r3, [r3, #7]
 8007b8a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	9403      	str	r4, [sp, #12]
 8007b90:	9002      	str	r0, [sp, #8]
 8007b92:	9101      	str	r1, [sp, #4]
 8007b94:	9200      	str	r2, [sp, #0]
 8007b96:	4663      	mov	r3, ip
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	482b      	ldr	r0, [pc, #172]	; (8007c4c <Sensor_Calibration+0x258>)
 8007b9e:	f7fd fadd 	bl	800515c <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8007ba2:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <Sensor_Calibration+0x248>)
 8007ba4:	7a1b      	ldrb	r3, [r3, #8]
 8007ba6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007ba8:	461d      	mov	r5, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8007baa:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bac:	7a5b      	ldrb	r3, [r3, #9]
 8007bae:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bb0:	461e      	mov	r6, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8007bb2:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bb4:	7a9b      	ldrb	r3, [r3, #10]
 8007bb6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bb8:	469c      	mov	ip, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8007bba:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bbc:	7adb      	ldrb	r3, [r3, #11]
 8007bbe:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bc0:	461a      	mov	r2, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8007bc2:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bc4:	7b1b      	ldrb	r3, [r3, #12]
 8007bc6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bc8:	4619      	mov	r1, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8007bca:	4b1c      	ldr	r3, [pc, #112]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bcc:	7b5b      	ldrb	r3, [r3, #13]
 8007bce:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bd0:	4618      	mov	r0, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8007bd2:	4b1a      	ldr	r3, [pc, #104]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bd4:	7b9b      	ldrb	r3, [r3, #14]
 8007bd6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007bd8:	461c      	mov	r4, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8007bda:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <Sensor_Calibration+0x248>)
 8007bdc:	7bdb      	ldrb	r3, [r3, #15]
 8007bde:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007be0:	9304      	str	r3, [sp, #16]
 8007be2:	9403      	str	r4, [sp, #12]
 8007be4:	9002      	str	r0, [sp, #8]
 8007be6:	9101      	str	r1, [sp, #4]
 8007be8:	9200      	str	r2, [sp, #0]
 8007bea:	4663      	mov	r3, ip
 8007bec:	4632      	mov	r2, r6
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4817      	ldr	r0, [pc, #92]	; (8007c50 <Sensor_Calibration+0x25c>)
 8007bf2:	f7fd fab3 	bl	800515c <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007bf6:	f7fd fde1 	bl	80057bc <Custom_Switch_Read>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d18b      	bne.n	8007b18 <Sensor_Calibration+0x124>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	713b      	strb	r3, [r7, #4]
 8007c04:	e00f      	b.n	8007c26 <Sensor_Calibration+0x232>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 8007c06:	793b      	ldrb	r3, [r7, #4]
 8007c08:	4a0c      	ldr	r2, [pc, #48]	; (8007c3c <Sensor_Calibration+0x248>)
 8007c0a:	5cd3      	ldrb	r3, [r2, r3]
 8007c0c:	b2d9      	uxtb	r1, r3
 8007c0e:	793b      	ldrb	r3, [r7, #4]
 8007c10:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <Sensor_Calibration+0x24c>)
 8007c12:	5cd3      	ldrb	r3, [r2, r3]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	793b      	ldrb	r3, [r7, #4]
 8007c18:	1a8a      	subs	r2, r1, r2
 8007c1a:	b2d1      	uxtb	r1, r2
 8007c1c:	4a0e      	ldr	r2, [pc, #56]	; (8007c58 <Sensor_Calibration+0x264>)
 8007c1e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007c20:	793b      	ldrb	r3, [r7, #4]
 8007c22:	3301      	adds	r3, #1
 8007c24:	713b      	strb	r3, [r7, #4]
 8007c26:	793b      	ldrb	r3, [r7, #4]
 8007c28:	2b0f      	cmp	r3, #15
 8007c2a:	d9ec      	bls.n	8007c06 <Sensor_Calibration+0x212>
	}

	Custom_OLED_Clear();
 8007c2c:	f7fd f9b1 	bl	8004f92 <Custom_OLED_Clear>
	Sensor_Stop();
 8007c30:	f7ff fece 	bl	80079d0 <Sensor_Stop>
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3c:	20002ebc 	.word	0x20002ebc
 8007c40:	20002ecc 	.word	0x20002ecc
 8007c44:	0800b01c 	.word	0x0800b01c
 8007c48:	20002e8c 	.word	0x20002e8c
 8007c4c:	0800b028 	.word	0x0800b028
 8007c50:	0800b054 	.word	0x0800b054
 8007c54:	0800b080 	.word	0x0800b080
 8007c58:	20002eac 	.word	0x20002eac

08007c5c <__cvt>:
 8007c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c60:	ec55 4b10 	vmov	r4, r5, d0
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	460e      	mov	r6, r1
 8007c68:	4619      	mov	r1, r3
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	bfbb      	ittet	lt
 8007c6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c72:	461d      	movlt	r5, r3
 8007c74:	2300      	movge	r3, #0
 8007c76:	232d      	movlt	r3, #45	; 0x2d
 8007c78:	700b      	strb	r3, [r1, #0]
 8007c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c80:	4691      	mov	r9, r2
 8007c82:	f023 0820 	bic.w	r8, r3, #32
 8007c86:	bfbc      	itt	lt
 8007c88:	4622      	movlt	r2, r4
 8007c8a:	4614      	movlt	r4, r2
 8007c8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c90:	d005      	beq.n	8007c9e <__cvt+0x42>
 8007c92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c96:	d100      	bne.n	8007c9a <__cvt+0x3e>
 8007c98:	3601      	adds	r6, #1
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	e000      	b.n	8007ca0 <__cvt+0x44>
 8007c9e:	2103      	movs	r1, #3
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	ab02      	add	r3, sp, #8
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	ec45 4b10 	vmov	d0, r4, r5
 8007cac:	4653      	mov	r3, sl
 8007cae:	4632      	mov	r2, r6
 8007cb0:	f000 fdee 	bl	8008890 <_dtoa_r>
 8007cb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cb8:	4607      	mov	r7, r0
 8007cba:	d102      	bne.n	8007cc2 <__cvt+0x66>
 8007cbc:	f019 0f01 	tst.w	r9, #1
 8007cc0:	d022      	beq.n	8007d08 <__cvt+0xac>
 8007cc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cc6:	eb07 0906 	add.w	r9, r7, r6
 8007cca:	d110      	bne.n	8007cee <__cvt+0x92>
 8007ccc:	783b      	ldrb	r3, [r7, #0]
 8007cce:	2b30      	cmp	r3, #48	; 0x30
 8007cd0:	d10a      	bne.n	8007ce8 <__cvt+0x8c>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cde:	b918      	cbnz	r0, 8007ce8 <__cvt+0x8c>
 8007ce0:	f1c6 0601 	rsb	r6, r6, #1
 8007ce4:	f8ca 6000 	str.w	r6, [sl]
 8007ce8:	f8da 3000 	ldr.w	r3, [sl]
 8007cec:	4499      	add	r9, r3
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 feef 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cfa:	b108      	cbz	r0, 8007d00 <__cvt+0xa4>
 8007cfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d00:	2230      	movs	r2, #48	; 0x30
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	454b      	cmp	r3, r9
 8007d06:	d307      	bcc.n	8007d18 <__cvt+0xbc>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d0c:	1bdb      	subs	r3, r3, r7
 8007d0e:	4638      	mov	r0, r7
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	b004      	add	sp, #16
 8007d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	9103      	str	r1, [sp, #12]
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e7f0      	b.n	8007d02 <__cvt+0xa6>

08007d20 <__exponent>:
 8007d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d22:	4603      	mov	r3, r0
 8007d24:	2900      	cmp	r1, #0
 8007d26:	bfb8      	it	lt
 8007d28:	4249      	neglt	r1, r1
 8007d2a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d2e:	bfb4      	ite	lt
 8007d30:	222d      	movlt	r2, #45	; 0x2d
 8007d32:	222b      	movge	r2, #43	; 0x2b
 8007d34:	2909      	cmp	r1, #9
 8007d36:	7042      	strb	r2, [r0, #1]
 8007d38:	dd2a      	ble.n	8007d90 <__exponent+0x70>
 8007d3a:	f10d 0207 	add.w	r2, sp, #7
 8007d3e:	4617      	mov	r7, r2
 8007d40:	260a      	movs	r6, #10
 8007d42:	4694      	mov	ip, r2
 8007d44:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d48:	fb06 1415 	mls	r4, r6, r5, r1
 8007d4c:	3430      	adds	r4, #48	; 0x30
 8007d4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d52:	460c      	mov	r4, r1
 8007d54:	2c63      	cmp	r4, #99	; 0x63
 8007d56:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	dcf1      	bgt.n	8007d42 <__exponent+0x22>
 8007d5e:	3130      	adds	r1, #48	; 0x30
 8007d60:	f1ac 0402 	sub.w	r4, ip, #2
 8007d64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d68:	1c41      	adds	r1, r0, #1
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	42ba      	cmp	r2, r7
 8007d6e:	d30a      	bcc.n	8007d86 <__exponent+0x66>
 8007d70:	f10d 0209 	add.w	r2, sp, #9
 8007d74:	eba2 020c 	sub.w	r2, r2, ip
 8007d78:	42bc      	cmp	r4, r7
 8007d7a:	bf88      	it	hi
 8007d7c:	2200      	movhi	r2, #0
 8007d7e:	4413      	add	r3, r2
 8007d80:	1a18      	subs	r0, r3, r0
 8007d82:	b003      	add	sp, #12
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d8e:	e7ed      	b.n	8007d6c <__exponent+0x4c>
 8007d90:	2330      	movs	r3, #48	; 0x30
 8007d92:	3130      	adds	r1, #48	; 0x30
 8007d94:	7083      	strb	r3, [r0, #2]
 8007d96:	70c1      	strb	r1, [r0, #3]
 8007d98:	1d03      	adds	r3, r0, #4
 8007d9a:	e7f1      	b.n	8007d80 <__exponent+0x60>

08007d9c <_printf_float>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	ed2d 8b02 	vpush	{d8}
 8007da4:	b08d      	sub	sp, #52	; 0x34
 8007da6:	460c      	mov	r4, r1
 8007da8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007dac:	4616      	mov	r6, r2
 8007dae:	461f      	mov	r7, r3
 8007db0:	4605      	mov	r5, r0
 8007db2:	f000 fca3 	bl	80086fc <_localeconv_r>
 8007db6:	f8d0 a000 	ldr.w	sl, [r0]
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f7f8 fa60 	bl	8000280 <strlen>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	9305      	str	r3, [sp, #20]
 8007dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	f103 0208 	add.w	r2, r3, #8
 8007dda:	f8c8 2000 	str.w	r2, [r8]
 8007dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dec:	ee08 0a10 	vmov	s16, r0
 8007df0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df8:	4b9e      	ldr	r3, [pc, #632]	; (8008074 <_printf_float+0x2d8>)
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dfe:	f7f8 fe9d 	bl	8000b3c <__aeabi_dcmpun>
 8007e02:	bb88      	cbnz	r0, 8007e68 <_printf_float+0xcc>
 8007e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e08:	4b9a      	ldr	r3, [pc, #616]	; (8008074 <_printf_float+0x2d8>)
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e0e:	f7f8 fe77 	bl	8000b00 <__aeabi_dcmple>
 8007e12:	bb48      	cbnz	r0, 8007e68 <_printf_float+0xcc>
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	f7f8 fe66 	bl	8000aec <__aeabi_dcmplt>
 8007e20:	b110      	cbz	r0, 8007e28 <_printf_float+0x8c>
 8007e22:	232d      	movs	r3, #45	; 0x2d
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e28:	4a93      	ldr	r2, [pc, #588]	; (8008078 <_printf_float+0x2dc>)
 8007e2a:	4b94      	ldr	r3, [pc, #592]	; (800807c <_printf_float+0x2e0>)
 8007e2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e30:	bf94      	ite	ls
 8007e32:	4690      	movls	r8, r2
 8007e34:	4698      	movhi	r8, r3
 8007e36:	2303      	movs	r3, #3
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	9b05      	ldr	r3, [sp, #20]
 8007e3c:	f023 0304 	bic.w	r3, r3, #4
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	f04f 0900 	mov.w	r9, #0
 8007e46:	9700      	str	r7, [sp, #0]
 8007e48:	4633      	mov	r3, r6
 8007e4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f000 f9da 	bl	8008208 <_printf_common>
 8007e54:	3001      	adds	r0, #1
 8007e56:	f040 8090 	bne.w	8007f7a <_printf_float+0x1de>
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e5e:	b00d      	add	sp, #52	; 0x34
 8007e60:	ecbd 8b02 	vpop	{d8}
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fe64 	bl	8000b3c <__aeabi_dcmpun>
 8007e74:	b140      	cbz	r0, 8007e88 <_printf_float+0xec>
 8007e76:	464b      	mov	r3, r9
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfbc      	itt	lt
 8007e7c:	232d      	movlt	r3, #45	; 0x2d
 8007e7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e82:	4a7f      	ldr	r2, [pc, #508]	; (8008080 <_printf_float+0x2e4>)
 8007e84:	4b7f      	ldr	r3, [pc, #508]	; (8008084 <_printf_float+0x2e8>)
 8007e86:	e7d1      	b.n	8007e2c <_printf_float+0x90>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e8e:	9206      	str	r2, [sp, #24]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	d13f      	bne.n	8007f14 <_printf_float+0x178>
 8007e94:	2306      	movs	r3, #6
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	9b05      	ldr	r3, [sp, #20]
 8007e9a:	6861      	ldr	r1, [r4, #4]
 8007e9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9303      	str	r3, [sp, #12]
 8007ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007eaa:	ab09      	add	r3, sp, #36	; 0x24
 8007eac:	ec49 8b10 	vmov	d0, r8, r9
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	6022      	str	r2, [r4, #0]
 8007eb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f7ff fecf 	bl	8007c5c <__cvt>
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ec2:	2b47      	cmp	r3, #71	; 0x47
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	d108      	bne.n	8007eda <_printf_float+0x13e>
 8007ec8:	1cc8      	adds	r0, r1, #3
 8007eca:	db02      	blt.n	8007ed2 <_printf_float+0x136>
 8007ecc:	6863      	ldr	r3, [r4, #4]
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	dd41      	ble.n	8007f56 <_printf_float+0x1ba>
 8007ed2:	f1ab 0302 	sub.w	r3, fp, #2
 8007ed6:	fa5f fb83 	uxtb.w	fp, r3
 8007eda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ede:	d820      	bhi.n	8007f22 <_printf_float+0x186>
 8007ee0:	3901      	subs	r1, #1
 8007ee2:	465a      	mov	r2, fp
 8007ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eea:	f7ff ff19 	bl	8007d20 <__exponent>
 8007eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef0:	1813      	adds	r3, r2, r0
 8007ef2:	2a01      	cmp	r2, #1
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	dc02      	bgt.n	8007f00 <_printf_float+0x164>
 8007efa:	6822      	ldr	r2, [r4, #0]
 8007efc:	07d2      	lsls	r2, r2, #31
 8007efe:	d501      	bpl.n	8007f04 <_printf_float+0x168>
 8007f00:	3301      	adds	r3, #1
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d09c      	beq.n	8007e46 <_printf_float+0xaa>
 8007f0c:	232d      	movs	r3, #45	; 0x2d
 8007f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f12:	e798      	b.n	8007e46 <_printf_float+0xaa>
 8007f14:	9a06      	ldr	r2, [sp, #24]
 8007f16:	2a47      	cmp	r2, #71	; 0x47
 8007f18:	d1be      	bne.n	8007e98 <_printf_float+0xfc>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1bc      	bne.n	8007e98 <_printf_float+0xfc>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e7b9      	b.n	8007e96 <_printf_float+0xfa>
 8007f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f26:	d118      	bne.n	8007f5a <_printf_float+0x1be>
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	6863      	ldr	r3, [r4, #4]
 8007f2c:	dd0b      	ble.n	8007f46 <_printf_float+0x1aa>
 8007f2e:	6121      	str	r1, [r4, #16]
 8007f30:	b913      	cbnz	r3, 8007f38 <_printf_float+0x19c>
 8007f32:	6822      	ldr	r2, [r4, #0]
 8007f34:	07d0      	lsls	r0, r2, #31
 8007f36:	d502      	bpl.n	8007f3e <_printf_float+0x1a2>
 8007f38:	3301      	adds	r3, #1
 8007f3a:	440b      	add	r3, r1
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f40:	f04f 0900 	mov.w	r9, #0
 8007f44:	e7de      	b.n	8007f04 <_printf_float+0x168>
 8007f46:	b913      	cbnz	r3, 8007f4e <_printf_float+0x1b2>
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	07d2      	lsls	r2, r2, #31
 8007f4c:	d501      	bpl.n	8007f52 <_printf_float+0x1b6>
 8007f4e:	3302      	adds	r3, #2
 8007f50:	e7f4      	b.n	8007f3c <_printf_float+0x1a0>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7f2      	b.n	8007f3c <_printf_float+0x1a0>
 8007f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5c:	4299      	cmp	r1, r3
 8007f5e:	db05      	blt.n	8007f6c <_printf_float+0x1d0>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	6121      	str	r1, [r4, #16]
 8007f64:	07d8      	lsls	r0, r3, #31
 8007f66:	d5ea      	bpl.n	8007f3e <_printf_float+0x1a2>
 8007f68:	1c4b      	adds	r3, r1, #1
 8007f6a:	e7e7      	b.n	8007f3c <_printf_float+0x1a0>
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	bfd4      	ite	le
 8007f70:	f1c1 0202 	rsble	r2, r1, #2
 8007f74:	2201      	movgt	r2, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	e7e0      	b.n	8007f3c <_printf_float+0x1a0>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	055a      	lsls	r2, r3, #21
 8007f7e:	d407      	bmi.n	8007f90 <_printf_float+0x1f4>
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	4642      	mov	r2, r8
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d12c      	bne.n	8007fe8 <_printf_float+0x24c>
 8007f8e:	e764      	b.n	8007e5a <_printf_float+0xbe>
 8007f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f94:	f240 80e0 	bls.w	8008158 <_printf_float+0x3bc>
 8007f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f7f8 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d034      	beq.n	8008012 <_printf_float+0x276>
 8007fa8:	4a37      	ldr	r2, [pc, #220]	; (8008088 <_printf_float+0x2ec>)
 8007faa:	2301      	movs	r3, #1
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af51 	beq.w	8007e5a <_printf_float+0xbe>
 8007fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	db02      	blt.n	8007fc6 <_printf_float+0x22a>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07d8      	lsls	r0, r3, #31
 8007fc4:	d510      	bpl.n	8007fe8 <_printf_float+0x24c>
 8007fc6:	ee18 3a10 	vmov	r3, s16
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	f43f af41 	beq.w	8007e5a <_printf_float+0xbe>
 8007fd8:	f04f 0800 	mov.w	r8, #0
 8007fdc:	f104 091a 	add.w	r9, r4, #26
 8007fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	dc09      	bgt.n	8007ffc <_printf_float+0x260>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	079b      	lsls	r3, r3, #30
 8007fec:	f100 8107 	bmi.w	80081fe <_printf_float+0x462>
 8007ff0:	68e0      	ldr	r0, [r4, #12]
 8007ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff4:	4298      	cmp	r0, r3
 8007ff6:	bfb8      	it	lt
 8007ff8:	4618      	movlt	r0, r3
 8007ffa:	e730      	b.n	8007e5e <_printf_float+0xc2>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	464a      	mov	r2, r9
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af27 	beq.w	8007e5a <_printf_float+0xbe>
 800800c:	f108 0801 	add.w	r8, r8, #1
 8008010:	e7e6      	b.n	8007fe0 <_printf_float+0x244>
 8008012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	dc39      	bgt.n	800808c <_printf_float+0x2f0>
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <_printf_float+0x2ec>)
 800801a:	2301      	movs	r3, #1
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f af19 	beq.w	8007e5a <_printf_float+0xbe>
 8008028:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800802c:	4313      	orrs	r3, r2
 800802e:	d102      	bne.n	8008036 <_printf_float+0x29a>
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d5d8      	bpl.n	8007fe8 <_printf_float+0x24c>
 8008036:	ee18 3a10 	vmov	r3, s16
 800803a:	4652      	mov	r2, sl
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f af09 	beq.w	8007e5a <_printf_float+0xbe>
 8008048:	f04f 0900 	mov.w	r9, #0
 800804c:	f104 0a1a 	add.w	sl, r4, #26
 8008050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008052:	425b      	negs	r3, r3
 8008054:	454b      	cmp	r3, r9
 8008056:	dc01      	bgt.n	800805c <_printf_float+0x2c0>
 8008058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805a:	e792      	b.n	8007f82 <_printf_float+0x1e6>
 800805c:	2301      	movs	r3, #1
 800805e:	4652      	mov	r2, sl
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f aef7 	beq.w	8007e5a <_printf_float+0xbe>
 800806c:	f109 0901 	add.w	r9, r9, #1
 8008070:	e7ee      	b.n	8008050 <_printf_float+0x2b4>
 8008072:	bf00      	nop
 8008074:	7fefffff 	.word	0x7fefffff
 8008078:	0800b344 	.word	0x0800b344
 800807c:	0800b348 	.word	0x0800b348
 8008080:	0800b34c 	.word	0x0800b34c
 8008084:	0800b350 	.word	0x0800b350
 8008088:	0800b354 	.word	0x0800b354
 800808c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800808e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008090:	429a      	cmp	r2, r3
 8008092:	bfa8      	it	ge
 8008094:	461a      	movge	r2, r3
 8008096:	2a00      	cmp	r2, #0
 8008098:	4691      	mov	r9, r2
 800809a:	dc37      	bgt.n	800810c <_printf_float+0x370>
 800809c:	f04f 0b00 	mov.w	fp, #0
 80080a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a4:	f104 021a 	add.w	r2, r4, #26
 80080a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080aa:	9305      	str	r3, [sp, #20]
 80080ac:	eba3 0309 	sub.w	r3, r3, r9
 80080b0:	455b      	cmp	r3, fp
 80080b2:	dc33      	bgt.n	800811c <_printf_float+0x380>
 80080b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b8:	429a      	cmp	r2, r3
 80080ba:	db3b      	blt.n	8008134 <_printf_float+0x398>
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	07da      	lsls	r2, r3, #31
 80080c0:	d438      	bmi.n	8008134 <_printf_float+0x398>
 80080c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080c6:	eba2 0903 	sub.w	r9, r2, r3
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	1ad2      	subs	r2, r2, r3
 80080ce:	4591      	cmp	r9, r2
 80080d0:	bfa8      	it	ge
 80080d2:	4691      	movge	r9, r2
 80080d4:	f1b9 0f00 	cmp.w	r9, #0
 80080d8:	dc35      	bgt.n	8008146 <_printf_float+0x3aa>
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080e2:	f104 0a1a 	add.w	sl, r4, #26
 80080e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	eba3 0309 	sub.w	r3, r3, r9
 80080f0:	4543      	cmp	r3, r8
 80080f2:	f77f af79 	ble.w	8007fe8 <_printf_float+0x24c>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	f43f aeaa 	beq.w	8007e5a <_printf_float+0xbe>
 8008106:	f108 0801 	add.w	r8, r8, #1
 800810a:	e7ec      	b.n	80080e6 <_printf_float+0x34a>
 800810c:	4613      	mov	r3, r2
 800810e:	4631      	mov	r1, r6
 8008110:	4642      	mov	r2, r8
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	d1c0      	bne.n	800809c <_printf_float+0x300>
 800811a:	e69e      	b.n	8007e5a <_printf_float+0xbe>
 800811c:	2301      	movs	r3, #1
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	9205      	str	r2, [sp, #20]
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f ae97 	beq.w	8007e5a <_printf_float+0xbe>
 800812c:	9a05      	ldr	r2, [sp, #20]
 800812e:	f10b 0b01 	add.w	fp, fp, #1
 8008132:	e7b9      	b.n	80080a8 <_printf_float+0x30c>
 8008134:	ee18 3a10 	vmov	r3, s16
 8008138:	4652      	mov	r2, sl
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d1be      	bne.n	80080c2 <_printf_float+0x326>
 8008144:	e689      	b.n	8007e5a <_printf_float+0xbe>
 8008146:	9a05      	ldr	r2, [sp, #20]
 8008148:	464b      	mov	r3, r9
 800814a:	4442      	add	r2, r8
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	d1c1      	bne.n	80080da <_printf_float+0x33e>
 8008156:	e680      	b.n	8007e5a <_printf_float+0xbe>
 8008158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815a:	2a01      	cmp	r2, #1
 800815c:	dc01      	bgt.n	8008162 <_printf_float+0x3c6>
 800815e:	07db      	lsls	r3, r3, #31
 8008160:	d53a      	bpl.n	80081d8 <_printf_float+0x43c>
 8008162:	2301      	movs	r3, #1
 8008164:	4642      	mov	r2, r8
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae74 	beq.w	8007e5a <_printf_float+0xbe>
 8008172:	ee18 3a10 	vmov	r3, s16
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f ae6b 	beq.w	8007e5a <_printf_float+0xbe>
 8008184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008188:	2200      	movs	r2, #0
 800818a:	2300      	movs	r3, #0
 800818c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008190:	f7f8 fca2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008194:	b9d8      	cbnz	r0, 80081ce <_printf_float+0x432>
 8008196:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800819a:	f108 0201 	add.w	r2, r8, #1
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	d10e      	bne.n	80081c6 <_printf_float+0x42a>
 80081a8:	e657      	b.n	8007e5a <_printf_float+0xbe>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4652      	mov	r2, sl
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	f43f ae50 	beq.w	8007e5a <_printf_float+0xbe>
 80081ba:	f108 0801 	add.w	r8, r8, #1
 80081be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c0:	3b01      	subs	r3, #1
 80081c2:	4543      	cmp	r3, r8
 80081c4:	dcf1      	bgt.n	80081aa <_printf_float+0x40e>
 80081c6:	464b      	mov	r3, r9
 80081c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081cc:	e6da      	b.n	8007f84 <_printf_float+0x1e8>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f104 0a1a 	add.w	sl, r4, #26
 80081d6:	e7f2      	b.n	80081be <_printf_float+0x422>
 80081d8:	2301      	movs	r3, #1
 80081da:	4642      	mov	r2, r8
 80081dc:	e7df      	b.n	800819e <_printf_float+0x402>
 80081de:	2301      	movs	r3, #1
 80081e0:	464a      	mov	r2, r9
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b8      	blx	r7
 80081e8:	3001      	adds	r0, #1
 80081ea:	f43f ae36 	beq.w	8007e5a <_printf_float+0xbe>
 80081ee:	f108 0801 	add.w	r8, r8, #1
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f6:	1a5b      	subs	r3, r3, r1
 80081f8:	4543      	cmp	r3, r8
 80081fa:	dcf0      	bgt.n	80081de <_printf_float+0x442>
 80081fc:	e6f8      	b.n	8007ff0 <_printf_float+0x254>
 80081fe:	f04f 0800 	mov.w	r8, #0
 8008202:	f104 0919 	add.w	r9, r4, #25
 8008206:	e7f4      	b.n	80081f2 <_printf_float+0x456>

08008208 <_printf_common>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	4616      	mov	r6, r2
 800820e:	4699      	mov	r9, r3
 8008210:	688a      	ldr	r2, [r1, #8]
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008218:	4293      	cmp	r3, r2
 800821a:	bfb8      	it	lt
 800821c:	4613      	movlt	r3, r2
 800821e:	6033      	str	r3, [r6, #0]
 8008220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008224:	4607      	mov	r7, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b10a      	cbz	r2, 800822e <_printf_common+0x26>
 800822a:	3301      	adds	r3, #1
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	0699      	lsls	r1, r3, #26
 8008232:	bf42      	ittt	mi
 8008234:	6833      	ldrmi	r3, [r6, #0]
 8008236:	3302      	addmi	r3, #2
 8008238:	6033      	strmi	r3, [r6, #0]
 800823a:	6825      	ldr	r5, [r4, #0]
 800823c:	f015 0506 	ands.w	r5, r5, #6
 8008240:	d106      	bne.n	8008250 <_printf_common+0x48>
 8008242:	f104 0a19 	add.w	sl, r4, #25
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	42ab      	cmp	r3, r5
 800824e:	dc26      	bgt.n	800829e <_printf_common+0x96>
 8008250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008254:	1e13      	subs	r3, r2, #0
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	0692      	lsls	r2, r2, #26
 800825e:	d42b      	bmi.n	80082b8 <_printf_common+0xb0>
 8008260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008264:	4649      	mov	r1, r9
 8008266:	4638      	mov	r0, r7
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d01e      	beq.n	80082ac <_printf_common+0xa4>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	f003 0306 	and.w	r3, r3, #6
 8008276:	2b04      	cmp	r3, #4
 8008278:	bf02      	ittt	eq
 800827a:	68e5      	ldreq	r5, [r4, #12]
 800827c:	6833      	ldreq	r3, [r6, #0]
 800827e:	1aed      	subeq	r5, r5, r3
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	bf0c      	ite	eq
 8008284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008288:	2500      	movne	r5, #0
 800828a:	4293      	cmp	r3, r2
 800828c:	bfc4      	itt	gt
 800828e:	1a9b      	subgt	r3, r3, r2
 8008290:	18ed      	addgt	r5, r5, r3
 8008292:	2600      	movs	r6, #0
 8008294:	341a      	adds	r4, #26
 8008296:	42b5      	cmp	r5, r6
 8008298:	d11a      	bne.n	80082d0 <_printf_common+0xc8>
 800829a:	2000      	movs	r0, #0
 800829c:	e008      	b.n	80082b0 <_printf_common+0xa8>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4649      	mov	r1, r9
 80082a4:	4638      	mov	r0, r7
 80082a6:	47c0      	blx	r8
 80082a8:	3001      	adds	r0, #1
 80082aa:	d103      	bne.n	80082b4 <_printf_common+0xac>
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	3501      	adds	r5, #1
 80082b6:	e7c6      	b.n	8008246 <_printf_common+0x3e>
 80082b8:	18e1      	adds	r1, r4, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	2030      	movs	r0, #48	; 0x30
 80082be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c2:	4422      	add	r2, r4
 80082c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082cc:	3302      	adds	r3, #2
 80082ce:	e7c7      	b.n	8008260 <_printf_common+0x58>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4622      	mov	r2, r4
 80082d4:	4649      	mov	r1, r9
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d0e6      	beq.n	80082ac <_printf_common+0xa4>
 80082de:	3601      	adds	r6, #1
 80082e0:	e7d9      	b.n	8008296 <_printf_common+0x8e>
	...

080082e4 <_printf_i>:
 80082e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	7e0f      	ldrb	r7, [r1, #24]
 80082ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ec:	2f78      	cmp	r7, #120	; 0x78
 80082ee:	4691      	mov	r9, r2
 80082f0:	4680      	mov	r8, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	469a      	mov	sl, r3
 80082f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082fa:	d807      	bhi.n	800830c <_printf_i+0x28>
 80082fc:	2f62      	cmp	r7, #98	; 0x62
 80082fe:	d80a      	bhi.n	8008316 <_printf_i+0x32>
 8008300:	2f00      	cmp	r7, #0
 8008302:	f000 80d4 	beq.w	80084ae <_printf_i+0x1ca>
 8008306:	2f58      	cmp	r7, #88	; 0x58
 8008308:	f000 80c0 	beq.w	800848c <_printf_i+0x1a8>
 800830c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008314:	e03a      	b.n	800838c <_printf_i+0xa8>
 8008316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800831a:	2b15      	cmp	r3, #21
 800831c:	d8f6      	bhi.n	800830c <_printf_i+0x28>
 800831e:	a101      	add	r1, pc, #4	; (adr r1, 8008324 <_printf_i+0x40>)
 8008320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008324:	0800837d 	.word	0x0800837d
 8008328:	08008391 	.word	0x08008391
 800832c:	0800830d 	.word	0x0800830d
 8008330:	0800830d 	.word	0x0800830d
 8008334:	0800830d 	.word	0x0800830d
 8008338:	0800830d 	.word	0x0800830d
 800833c:	08008391 	.word	0x08008391
 8008340:	0800830d 	.word	0x0800830d
 8008344:	0800830d 	.word	0x0800830d
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	08008495 	.word	0x08008495
 8008354:	080083bd 	.word	0x080083bd
 8008358:	0800844f 	.word	0x0800844f
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	080084b7 	.word	0x080084b7
 8008368:	0800830d 	.word	0x0800830d
 800836c:	080083bd 	.word	0x080083bd
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008457 	.word	0x08008457
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	602a      	str	r2, [r5, #0]
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800838c:	2301      	movs	r3, #1
 800838e:	e09f      	b.n	80084d0 <_printf_i+0x1ec>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	0607      	lsls	r7, r0, #24
 8008396:	f103 0104 	add.w	r1, r3, #4
 800839a:	6029      	str	r1, [r5, #0]
 800839c:	d501      	bpl.n	80083a2 <_printf_i+0xbe>
 800839e:	681e      	ldr	r6, [r3, #0]
 80083a0:	e003      	b.n	80083aa <_printf_i+0xc6>
 80083a2:	0646      	lsls	r6, r0, #25
 80083a4:	d5fb      	bpl.n	800839e <_printf_i+0xba>
 80083a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	da03      	bge.n	80083b6 <_printf_i+0xd2>
 80083ae:	232d      	movs	r3, #45	; 0x2d
 80083b0:	4276      	negs	r6, r6
 80083b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b6:	485a      	ldr	r0, [pc, #360]	; (8008520 <_printf_i+0x23c>)
 80083b8:	230a      	movs	r3, #10
 80083ba:	e012      	b.n	80083e2 <_printf_i+0xfe>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	6820      	ldr	r0, [r4, #0]
 80083c0:	1d19      	adds	r1, r3, #4
 80083c2:	6029      	str	r1, [r5, #0]
 80083c4:	0605      	lsls	r5, r0, #24
 80083c6:	d501      	bpl.n	80083cc <_printf_i+0xe8>
 80083c8:	681e      	ldr	r6, [r3, #0]
 80083ca:	e002      	b.n	80083d2 <_printf_i+0xee>
 80083cc:	0641      	lsls	r1, r0, #25
 80083ce:	d5fb      	bpl.n	80083c8 <_printf_i+0xe4>
 80083d0:	881e      	ldrh	r6, [r3, #0]
 80083d2:	4853      	ldr	r0, [pc, #332]	; (8008520 <_printf_i+0x23c>)
 80083d4:	2f6f      	cmp	r7, #111	; 0x6f
 80083d6:	bf0c      	ite	eq
 80083d8:	2308      	moveq	r3, #8
 80083da:	230a      	movne	r3, #10
 80083dc:	2100      	movs	r1, #0
 80083de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e2:	6865      	ldr	r5, [r4, #4]
 80083e4:	60a5      	str	r5, [r4, #8]
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	bfa2      	ittt	ge
 80083ea:	6821      	ldrge	r1, [r4, #0]
 80083ec:	f021 0104 	bicge.w	r1, r1, #4
 80083f0:	6021      	strge	r1, [r4, #0]
 80083f2:	b90e      	cbnz	r6, 80083f8 <_printf_i+0x114>
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	d04b      	beq.n	8008490 <_printf_i+0x1ac>
 80083f8:	4615      	mov	r5, r2
 80083fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80083fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008402:	5dc7      	ldrb	r7, [r0, r7]
 8008404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008408:	4637      	mov	r7, r6
 800840a:	42bb      	cmp	r3, r7
 800840c:	460e      	mov	r6, r1
 800840e:	d9f4      	bls.n	80083fa <_printf_i+0x116>
 8008410:	2b08      	cmp	r3, #8
 8008412:	d10b      	bne.n	800842c <_printf_i+0x148>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	07de      	lsls	r6, r3, #31
 8008418:	d508      	bpl.n	800842c <_printf_i+0x148>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4299      	cmp	r1, r3
 8008420:	bfde      	ittt	le
 8008422:	2330      	movle	r3, #48	; 0x30
 8008424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008428:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800842c:	1b52      	subs	r2, r2, r5
 800842e:	6122      	str	r2, [r4, #16]
 8008430:	f8cd a000 	str.w	sl, [sp]
 8008434:	464b      	mov	r3, r9
 8008436:	aa03      	add	r2, sp, #12
 8008438:	4621      	mov	r1, r4
 800843a:	4640      	mov	r0, r8
 800843c:	f7ff fee4 	bl	8008208 <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	d14a      	bne.n	80084da <_printf_i+0x1f6>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008448:	b004      	add	sp, #16
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	f043 0320 	orr.w	r3, r3, #32
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	4833      	ldr	r0, [pc, #204]	; (8008524 <_printf_i+0x240>)
 8008458:	2778      	movs	r7, #120	; 0x78
 800845a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	061f      	lsls	r7, r3, #24
 8008464:	f851 6b04 	ldr.w	r6, [r1], #4
 8008468:	d402      	bmi.n	8008470 <_printf_i+0x18c>
 800846a:	065f      	lsls	r7, r3, #25
 800846c:	bf48      	it	mi
 800846e:	b2b6      	uxthmi	r6, r6
 8008470:	07df      	lsls	r7, r3, #31
 8008472:	bf48      	it	mi
 8008474:	f043 0320 	orrmi.w	r3, r3, #32
 8008478:	6029      	str	r1, [r5, #0]
 800847a:	bf48      	it	mi
 800847c:	6023      	strmi	r3, [r4, #0]
 800847e:	b91e      	cbnz	r6, 8008488 <_printf_i+0x1a4>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	f023 0320 	bic.w	r3, r3, #32
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	2310      	movs	r3, #16
 800848a:	e7a7      	b.n	80083dc <_printf_i+0xf8>
 800848c:	4824      	ldr	r0, [pc, #144]	; (8008520 <_printf_i+0x23c>)
 800848e:	e7e4      	b.n	800845a <_printf_i+0x176>
 8008490:	4615      	mov	r5, r2
 8008492:	e7bd      	b.n	8008410 <_printf_i+0x12c>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	6826      	ldr	r6, [r4, #0]
 8008498:	6961      	ldr	r1, [r4, #20]
 800849a:	1d18      	adds	r0, r3, #4
 800849c:	6028      	str	r0, [r5, #0]
 800849e:	0635      	lsls	r5, r6, #24
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	d501      	bpl.n	80084a8 <_printf_i+0x1c4>
 80084a4:	6019      	str	r1, [r3, #0]
 80084a6:	e002      	b.n	80084ae <_printf_i+0x1ca>
 80084a8:	0670      	lsls	r0, r6, #25
 80084aa:	d5fb      	bpl.n	80084a4 <_printf_i+0x1c0>
 80084ac:	8019      	strh	r1, [r3, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	4615      	mov	r5, r2
 80084b4:	e7bc      	b.n	8008430 <_printf_i+0x14c>
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	1d1a      	adds	r2, r3, #4
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	6862      	ldr	r2, [r4, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7f7 fe8c 	bl	80001e0 <memchr>
 80084c8:	b108      	cbz	r0, 80084ce <_printf_i+0x1ea>
 80084ca:	1b40      	subs	r0, r0, r5
 80084cc:	6060      	str	r0, [r4, #4]
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	2300      	movs	r3, #0
 80084d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d8:	e7aa      	b.n	8008430 <_printf_i+0x14c>
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	462a      	mov	r2, r5
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	47d0      	blx	sl
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0ad      	beq.n	8008444 <_printf_i+0x160>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	079b      	lsls	r3, r3, #30
 80084ec:	d413      	bmi.n	8008516 <_printf_i+0x232>
 80084ee:	68e0      	ldr	r0, [r4, #12]
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	4298      	cmp	r0, r3
 80084f4:	bfb8      	it	lt
 80084f6:	4618      	movlt	r0, r3
 80084f8:	e7a6      	b.n	8008448 <_printf_i+0x164>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4632      	mov	r2, r6
 80084fe:	4649      	mov	r1, r9
 8008500:	4640      	mov	r0, r8
 8008502:	47d0      	blx	sl
 8008504:	3001      	adds	r0, #1
 8008506:	d09d      	beq.n	8008444 <_printf_i+0x160>
 8008508:	3501      	adds	r5, #1
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	9903      	ldr	r1, [sp, #12]
 800850e:	1a5b      	subs	r3, r3, r1
 8008510:	42ab      	cmp	r3, r5
 8008512:	dcf2      	bgt.n	80084fa <_printf_i+0x216>
 8008514:	e7eb      	b.n	80084ee <_printf_i+0x20a>
 8008516:	2500      	movs	r5, #0
 8008518:	f104 0619 	add.w	r6, r4, #25
 800851c:	e7f5      	b.n	800850a <_printf_i+0x226>
 800851e:	bf00      	nop
 8008520:	0800b356 	.word	0x0800b356
 8008524:	0800b367 	.word	0x0800b367

08008528 <std>:
 8008528:	2300      	movs	r3, #0
 800852a:	b510      	push	{r4, lr}
 800852c:	4604      	mov	r4, r0
 800852e:	e9c0 3300 	strd	r3, r3, [r0]
 8008532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008536:	6083      	str	r3, [r0, #8]
 8008538:	8181      	strh	r1, [r0, #12]
 800853a:	6643      	str	r3, [r0, #100]	; 0x64
 800853c:	81c2      	strh	r2, [r0, #14]
 800853e:	6183      	str	r3, [r0, #24]
 8008540:	4619      	mov	r1, r3
 8008542:	2208      	movs	r2, #8
 8008544:	305c      	adds	r0, #92	; 0x5c
 8008546:	f000 f8d1 	bl	80086ec <memset>
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <std+0x58>)
 800854c:	6263      	str	r3, [r4, #36]	; 0x24
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <std+0x5c>)
 8008550:	62a3      	str	r3, [r4, #40]	; 0x28
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x60>)
 8008554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <std+0x64>)
 8008558:	6323      	str	r3, [r4, #48]	; 0x30
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <std+0x68>)
 800855c:	6224      	str	r4, [r4, #32]
 800855e:	429c      	cmp	r4, r3
 8008560:	d006      	beq.n	8008570 <std+0x48>
 8008562:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008566:	4294      	cmp	r4, r2
 8008568:	d002      	beq.n	8008570 <std+0x48>
 800856a:	33d0      	adds	r3, #208	; 0xd0
 800856c:	429c      	cmp	r4, r3
 800856e:	d105      	bne.n	800857c <std+0x54>
 8008570:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	f000 b8ee 	b.w	8008758 <__retarget_lock_init_recursive>
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	0800a0e1 	.word	0x0800a0e1
 8008584:	0800a103 	.word	0x0800a103
 8008588:	0800a13b 	.word	0x0800a13b
 800858c:	0800a15f 	.word	0x0800a15f
 8008590:	20002ee4 	.word	0x20002ee4

08008594 <stdio_exit_handler>:
 8008594:	4a02      	ldr	r2, [pc, #8]	; (80085a0 <stdio_exit_handler+0xc>)
 8008596:	4903      	ldr	r1, [pc, #12]	; (80085a4 <stdio_exit_handler+0x10>)
 8008598:	4803      	ldr	r0, [pc, #12]	; (80085a8 <stdio_exit_handler+0x14>)
 800859a:	f000 b869 	b.w	8008670 <_fwalk_sglue>
 800859e:	bf00      	nop
 80085a0:	200000a0 	.word	0x200000a0
 80085a4:	08009981 	.word	0x08009981
 80085a8:	200000ac 	.word	0x200000ac

080085ac <cleanup_stdio>:
 80085ac:	6841      	ldr	r1, [r0, #4]
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <cleanup_stdio+0x34>)
 80085b0:	4299      	cmp	r1, r3
 80085b2:	b510      	push	{r4, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	d001      	beq.n	80085bc <cleanup_stdio+0x10>
 80085b8:	f001 f9e2 	bl	8009980 <_fflush_r>
 80085bc:	68a1      	ldr	r1, [r4, #8]
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <cleanup_stdio+0x38>)
 80085c0:	4299      	cmp	r1, r3
 80085c2:	d002      	beq.n	80085ca <cleanup_stdio+0x1e>
 80085c4:	4620      	mov	r0, r4
 80085c6:	f001 f9db 	bl	8009980 <_fflush_r>
 80085ca:	68e1      	ldr	r1, [r4, #12]
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <cleanup_stdio+0x3c>)
 80085ce:	4299      	cmp	r1, r3
 80085d0:	d004      	beq.n	80085dc <cleanup_stdio+0x30>
 80085d2:	4620      	mov	r0, r4
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	f001 b9d2 	b.w	8009980 <_fflush_r>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	bf00      	nop
 80085e0:	20002ee4 	.word	0x20002ee4
 80085e4:	20002f4c 	.word	0x20002f4c
 80085e8:	20002fb4 	.word	0x20002fb4

080085ec <global_stdio_init.part.0>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <global_stdio_init.part.0+0x30>)
 80085f0:	4c0b      	ldr	r4, [pc, #44]	; (8008620 <global_stdio_init.part.0+0x34>)
 80085f2:	4a0c      	ldr	r2, [pc, #48]	; (8008624 <global_stdio_init.part.0+0x38>)
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	4620      	mov	r0, r4
 80085f8:	2200      	movs	r2, #0
 80085fa:	2104      	movs	r1, #4
 80085fc:	f7ff ff94 	bl	8008528 <std>
 8008600:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008604:	2201      	movs	r2, #1
 8008606:	2109      	movs	r1, #9
 8008608:	f7ff ff8e 	bl	8008528 <std>
 800860c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008610:	2202      	movs	r2, #2
 8008612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008616:	2112      	movs	r1, #18
 8008618:	f7ff bf86 	b.w	8008528 <std>
 800861c:	2000301c 	.word	0x2000301c
 8008620:	20002ee4 	.word	0x20002ee4
 8008624:	08008595 	.word	0x08008595

08008628 <__sfp_lock_acquire>:
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <__sfp_lock_acquire+0x8>)
 800862a:	f000 b896 	b.w	800875a <__retarget_lock_acquire_recursive>
 800862e:	bf00      	nop
 8008630:	20003021 	.word	0x20003021

08008634 <__sfp_lock_release>:
 8008634:	4801      	ldr	r0, [pc, #4]	; (800863c <__sfp_lock_release+0x8>)
 8008636:	f000 b891 	b.w	800875c <__retarget_lock_release_recursive>
 800863a:	bf00      	nop
 800863c:	20003021 	.word	0x20003021

08008640 <__sinit>:
 8008640:	b510      	push	{r4, lr}
 8008642:	4604      	mov	r4, r0
 8008644:	f7ff fff0 	bl	8008628 <__sfp_lock_acquire>
 8008648:	6a23      	ldr	r3, [r4, #32]
 800864a:	b11b      	cbz	r3, 8008654 <__sinit+0x14>
 800864c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008650:	f7ff bff0 	b.w	8008634 <__sfp_lock_release>
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <__sinit+0x28>)
 8008656:	6223      	str	r3, [r4, #32]
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <__sinit+0x2c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1f5      	bne.n	800864c <__sinit+0xc>
 8008660:	f7ff ffc4 	bl	80085ec <global_stdio_init.part.0>
 8008664:	e7f2      	b.n	800864c <__sinit+0xc>
 8008666:	bf00      	nop
 8008668:	080085ad 	.word	0x080085ad
 800866c:	2000301c 	.word	0x2000301c

08008670 <_fwalk_sglue>:
 8008670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008674:	4607      	mov	r7, r0
 8008676:	4688      	mov	r8, r1
 8008678:	4614      	mov	r4, r2
 800867a:	2600      	movs	r6, #0
 800867c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008680:	f1b9 0901 	subs.w	r9, r9, #1
 8008684:	d505      	bpl.n	8008692 <_fwalk_sglue+0x22>
 8008686:	6824      	ldr	r4, [r4, #0]
 8008688:	2c00      	cmp	r4, #0
 800868a:	d1f7      	bne.n	800867c <_fwalk_sglue+0xc>
 800868c:	4630      	mov	r0, r6
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d907      	bls.n	80086a8 <_fwalk_sglue+0x38>
 8008698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800869c:	3301      	adds	r3, #1
 800869e:	d003      	beq.n	80086a8 <_fwalk_sglue+0x38>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4638      	mov	r0, r7
 80086a4:	47c0      	blx	r8
 80086a6:	4306      	orrs	r6, r0
 80086a8:	3568      	adds	r5, #104	; 0x68
 80086aa:	e7e9      	b.n	8008680 <_fwalk_sglue+0x10>

080086ac <_vsiprintf_r>:
 80086ac:	b500      	push	{lr}
 80086ae:	b09b      	sub	sp, #108	; 0x6c
 80086b0:	9100      	str	r1, [sp, #0]
 80086b2:	9104      	str	r1, [sp, #16]
 80086b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	9102      	str	r1, [sp, #8]
 80086bc:	4905      	ldr	r1, [pc, #20]	; (80086d4 <_vsiprintf_r+0x28>)
 80086be:	9103      	str	r1, [sp, #12]
 80086c0:	4669      	mov	r1, sp
 80086c2:	f000 ff31 	bl	8009528 <_svfiprintf_r>
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	b01b      	add	sp, #108	; 0x6c
 80086ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80086d2:	bf00      	nop
 80086d4:	ffff0208 	.word	0xffff0208

080086d8 <vsiprintf>:
 80086d8:	4613      	mov	r3, r2
 80086da:	460a      	mov	r2, r1
 80086dc:	4601      	mov	r1, r0
 80086de:	4802      	ldr	r0, [pc, #8]	; (80086e8 <vsiprintf+0x10>)
 80086e0:	6800      	ldr	r0, [r0, #0]
 80086e2:	f7ff bfe3 	b.w	80086ac <_vsiprintf_r>
 80086e6:	bf00      	nop
 80086e8:	200000f8 	.word	0x200000f8

080086ec <memset>:
 80086ec:	4402      	add	r2, r0
 80086ee:	4603      	mov	r3, r0
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d100      	bne.n	80086f6 <memset+0xa>
 80086f4:	4770      	bx	lr
 80086f6:	f803 1b01 	strb.w	r1, [r3], #1
 80086fa:	e7f9      	b.n	80086f0 <memset+0x4>

080086fc <_localeconv_r>:
 80086fc:	4800      	ldr	r0, [pc, #0]	; (8008700 <_localeconv_r+0x4>)
 80086fe:	4770      	bx	lr
 8008700:	200001ec 	.word	0x200001ec

08008704 <__errno>:
 8008704:	4b01      	ldr	r3, [pc, #4]	; (800870c <__errno+0x8>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	200000f8 	.word	0x200000f8

08008710 <__libc_init_array>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4d0d      	ldr	r5, [pc, #52]	; (8008748 <__libc_init_array+0x38>)
 8008714:	4c0d      	ldr	r4, [pc, #52]	; (800874c <__libc_init_array+0x3c>)
 8008716:	1b64      	subs	r4, r4, r5
 8008718:	10a4      	asrs	r4, r4, #2
 800871a:	2600      	movs	r6, #0
 800871c:	42a6      	cmp	r6, r4
 800871e:	d109      	bne.n	8008734 <__libc_init_array+0x24>
 8008720:	4d0b      	ldr	r5, [pc, #44]	; (8008750 <__libc_init_array+0x40>)
 8008722:	4c0c      	ldr	r4, [pc, #48]	; (8008754 <__libc_init_array+0x44>)
 8008724:	f002 f920 	bl	800a968 <_init>
 8008728:	1b64      	subs	r4, r4, r5
 800872a:	10a4      	asrs	r4, r4, #2
 800872c:	2600      	movs	r6, #0
 800872e:	42a6      	cmp	r6, r4
 8008730:	d105      	bne.n	800873e <__libc_init_array+0x2e>
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	f855 3b04 	ldr.w	r3, [r5], #4
 8008738:	4798      	blx	r3
 800873a:	3601      	adds	r6, #1
 800873c:	e7ee      	b.n	800871c <__libc_init_array+0xc>
 800873e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008742:	4798      	blx	r3
 8008744:	3601      	adds	r6, #1
 8008746:	e7f2      	b.n	800872e <__libc_init_array+0x1e>
 8008748:	0800b6bc 	.word	0x0800b6bc
 800874c:	0800b6bc 	.word	0x0800b6bc
 8008750:	0800b6bc 	.word	0x0800b6bc
 8008754:	0800b6c0 	.word	0x0800b6c0

08008758 <__retarget_lock_init_recursive>:
 8008758:	4770      	bx	lr

0800875a <__retarget_lock_acquire_recursive>:
 800875a:	4770      	bx	lr

0800875c <__retarget_lock_release_recursive>:
 800875c:	4770      	bx	lr

0800875e <memcpy>:
 800875e:	440a      	add	r2, r1
 8008760:	4291      	cmp	r1, r2
 8008762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008766:	d100      	bne.n	800876a <memcpy+0xc>
 8008768:	4770      	bx	lr
 800876a:	b510      	push	{r4, lr}
 800876c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008774:	4291      	cmp	r1, r2
 8008776:	d1f9      	bne.n	800876c <memcpy+0xe>
 8008778:	bd10      	pop	{r4, pc}

0800877a <quorem>:
 800877a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877e:	6903      	ldr	r3, [r0, #16]
 8008780:	690c      	ldr	r4, [r1, #16]
 8008782:	42a3      	cmp	r3, r4
 8008784:	4607      	mov	r7, r0
 8008786:	db7e      	blt.n	8008886 <quorem+0x10c>
 8008788:	3c01      	subs	r4, #1
 800878a:	f101 0814 	add.w	r8, r1, #20
 800878e:	f100 0514 	add.w	r5, r0, #20
 8008792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800879c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087a0:	3301      	adds	r3, #1
 80087a2:	429a      	cmp	r2, r3
 80087a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80087b0:	d331      	bcc.n	8008816 <quorem+0x9c>
 80087b2:	f04f 0e00 	mov.w	lr, #0
 80087b6:	4640      	mov	r0, r8
 80087b8:	46ac      	mov	ip, r5
 80087ba:	46f2      	mov	sl, lr
 80087bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80087c0:	b293      	uxth	r3, r2
 80087c2:	fb06 e303 	mla	r3, r6, r3, lr
 80087c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087ca:	0c1a      	lsrs	r2, r3, #16
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ebaa 0303 	sub.w	r3, sl, r3
 80087d2:	f8dc a000 	ldr.w	sl, [ip]
 80087d6:	fa13 f38a 	uxtah	r3, r3, sl
 80087da:	fb06 220e 	mla	r2, r6, lr, r2
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087e6:	b292      	uxth	r2, r2
 80087e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80087f4:	4581      	cmp	r9, r0
 80087f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fa:	f84c 3b04 	str.w	r3, [ip], #4
 80087fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008802:	d2db      	bcs.n	80087bc <quorem+0x42>
 8008804:	f855 300b 	ldr.w	r3, [r5, fp]
 8008808:	b92b      	cbnz	r3, 8008816 <quorem+0x9c>
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	3b04      	subs	r3, #4
 800880e:	429d      	cmp	r5, r3
 8008810:	461a      	mov	r2, r3
 8008812:	d32c      	bcc.n	800886e <quorem+0xf4>
 8008814:	613c      	str	r4, [r7, #16]
 8008816:	4638      	mov	r0, r7
 8008818:	f001 fb62 	bl	8009ee0 <__mcmp>
 800881c:	2800      	cmp	r0, #0
 800881e:	db22      	blt.n	8008866 <quorem+0xec>
 8008820:	3601      	adds	r6, #1
 8008822:	4629      	mov	r1, r5
 8008824:	2000      	movs	r0, #0
 8008826:	f858 2b04 	ldr.w	r2, [r8], #4
 800882a:	f8d1 c000 	ldr.w	ip, [r1]
 800882e:	b293      	uxth	r3, r2
 8008830:	1ac3      	subs	r3, r0, r3
 8008832:	0c12      	lsrs	r2, r2, #16
 8008834:	fa13 f38c 	uxtah	r3, r3, ip
 8008838:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800883c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008840:	b29b      	uxth	r3, r3
 8008842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008846:	45c1      	cmp	r9, r8
 8008848:	f841 3b04 	str.w	r3, [r1], #4
 800884c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008850:	d2e9      	bcs.n	8008826 <quorem+0xac>
 8008852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800885a:	b922      	cbnz	r2, 8008866 <quorem+0xec>
 800885c:	3b04      	subs	r3, #4
 800885e:	429d      	cmp	r5, r3
 8008860:	461a      	mov	r2, r3
 8008862:	d30a      	bcc.n	800887a <quorem+0x100>
 8008864:	613c      	str	r4, [r7, #16]
 8008866:	4630      	mov	r0, r6
 8008868:	b003      	add	sp, #12
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	3b04      	subs	r3, #4
 8008872:	2a00      	cmp	r2, #0
 8008874:	d1ce      	bne.n	8008814 <quorem+0x9a>
 8008876:	3c01      	subs	r4, #1
 8008878:	e7c9      	b.n	800880e <quorem+0x94>
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	3b04      	subs	r3, #4
 800887e:	2a00      	cmp	r2, #0
 8008880:	d1f0      	bne.n	8008864 <quorem+0xea>
 8008882:	3c01      	subs	r4, #1
 8008884:	e7eb      	b.n	800885e <quorem+0xe4>
 8008886:	2000      	movs	r0, #0
 8008888:	e7ee      	b.n	8008868 <quorem+0xee>
 800888a:	0000      	movs	r0, r0
 800888c:	0000      	movs	r0, r0
	...

08008890 <_dtoa_r>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ed2d 8b04 	vpush	{d8-d9}
 8008898:	69c5      	ldr	r5, [r0, #28]
 800889a:	b093      	sub	sp, #76	; 0x4c
 800889c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088a0:	ec57 6b10 	vmov	r6, r7, d0
 80088a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088a8:	9107      	str	r1, [sp, #28]
 80088aa:	4604      	mov	r4, r0
 80088ac:	920a      	str	r2, [sp, #40]	; 0x28
 80088ae:	930d      	str	r3, [sp, #52]	; 0x34
 80088b0:	b975      	cbnz	r5, 80088d0 <_dtoa_r+0x40>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f000 ff36 	bl	8009724 <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	61e0      	str	r0, [r4, #28]
 80088bc:	b920      	cbnz	r0, 80088c8 <_dtoa_r+0x38>
 80088be:	4bae      	ldr	r3, [pc, #696]	; (8008b78 <_dtoa_r+0x2e8>)
 80088c0:	21ef      	movs	r1, #239	; 0xef
 80088c2:	48ae      	ldr	r0, [pc, #696]	; (8008b7c <_dtoa_r+0x2ec>)
 80088c4:	f001 fcee 	bl	800a2a4 <__assert_func>
 80088c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088cc:	6005      	str	r5, [r0, #0]
 80088ce:	60c5      	str	r5, [r0, #12]
 80088d0:	69e3      	ldr	r3, [r4, #28]
 80088d2:	6819      	ldr	r1, [r3, #0]
 80088d4:	b151      	cbz	r1, 80088ec <_dtoa_r+0x5c>
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	604a      	str	r2, [r1, #4]
 80088da:	2301      	movs	r3, #1
 80088dc:	4093      	lsls	r3, r2
 80088de:	608b      	str	r3, [r1, #8]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f001 f8c1 	bl	8009a68 <_Bfree>
 80088e6:	69e3      	ldr	r3, [r4, #28]
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	1e3b      	subs	r3, r7, #0
 80088ee:	bfbb      	ittet	lt
 80088f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088f4:	9303      	strlt	r3, [sp, #12]
 80088f6:	2300      	movge	r3, #0
 80088f8:	2201      	movlt	r2, #1
 80088fa:	bfac      	ite	ge
 80088fc:	f8c8 3000 	strge.w	r3, [r8]
 8008900:	f8c8 2000 	strlt.w	r2, [r8]
 8008904:	4b9e      	ldr	r3, [pc, #632]	; (8008b80 <_dtoa_r+0x2f0>)
 8008906:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800890a:	ea33 0308 	bics.w	r3, r3, r8
 800890e:	d11b      	bne.n	8008948 <_dtoa_r+0xb8>
 8008910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008912:	f242 730f 	movw	r3, #9999	; 0x270f
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800891c:	4333      	orrs	r3, r6
 800891e:	f000 8593 	beq.w	8009448 <_dtoa_r+0xbb8>
 8008922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008924:	b963      	cbnz	r3, 8008940 <_dtoa_r+0xb0>
 8008926:	4b97      	ldr	r3, [pc, #604]	; (8008b84 <_dtoa_r+0x2f4>)
 8008928:	e027      	b.n	800897a <_dtoa_r+0xea>
 800892a:	4b97      	ldr	r3, [pc, #604]	; (8008b88 <_dtoa_r+0x2f8>)
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	9800      	ldr	r0, [sp, #0]
 8008936:	b013      	add	sp, #76	; 0x4c
 8008938:	ecbd 8b04 	vpop	{d8-d9}
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	4b90      	ldr	r3, [pc, #576]	; (8008b84 <_dtoa_r+0x2f4>)
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	3303      	adds	r3, #3
 8008946:	e7f3      	b.n	8008930 <_dtoa_r+0xa0>
 8008948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800894c:	2200      	movs	r2, #0
 800894e:	ec51 0b17 	vmov	r0, r1, d7
 8008952:	eeb0 8a47 	vmov.f32	s16, s14
 8008956:	eef0 8a67 	vmov.f32	s17, s15
 800895a:	2300      	movs	r3, #0
 800895c:	f7f8 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008960:	4681      	mov	r9, r0
 8008962:	b160      	cbz	r0, 800897e <_dtoa_r+0xee>
 8008964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008966:	2301      	movs	r3, #1
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8568 	beq.w	8009442 <_dtoa_r+0xbb2>
 8008972:	4b86      	ldr	r3, [pc, #536]	; (8008b8c <_dtoa_r+0x2fc>)
 8008974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	e7da      	b.n	8008934 <_dtoa_r+0xa4>
 800897e:	aa10      	add	r2, sp, #64	; 0x40
 8008980:	a911      	add	r1, sp, #68	; 0x44
 8008982:	4620      	mov	r0, r4
 8008984:	eeb0 0a48 	vmov.f32	s0, s16
 8008988:	eef0 0a68 	vmov.f32	s1, s17
 800898c:	f001 fb4e 	bl	800a02c <__d2b>
 8008990:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008994:	4682      	mov	sl, r0
 8008996:	2d00      	cmp	r5, #0
 8008998:	d07f      	beq.n	8008a9a <_dtoa_r+0x20a>
 800899a:	ee18 3a90 	vmov	r3, s17
 800899e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089a6:	ec51 0b18 	vmov	r0, r1, d8
 80089aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80089b6:	4619      	mov	r1, r3
 80089b8:	2200      	movs	r2, #0
 80089ba:	4b75      	ldr	r3, [pc, #468]	; (8008b90 <_dtoa_r+0x300>)
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	a367      	add	r3, pc, #412	; (adr r3, 8008b60 <_dtoa_r+0x2d0>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f7 fe1f 	bl	8000608 <__aeabi_dmul>
 80089ca:	a367      	add	r3, pc, #412	; (adr r3, 8008b68 <_dtoa_r+0x2d8>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f7f7 fc64 	bl	800029c <__adddf3>
 80089d4:	4606      	mov	r6, r0
 80089d6:	4628      	mov	r0, r5
 80089d8:	460f      	mov	r7, r1
 80089da:	f7f7 fdab 	bl	8000534 <__aeabi_i2d>
 80089de:	a364      	add	r3, pc, #400	; (adr r3, 8008b70 <_dtoa_r+0x2e0>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f7f7 fe10 	bl	8000608 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fc54 	bl	800029c <__adddf3>
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	f7f8 f8b6 	bl	8000b68 <__aeabi_d2iz>
 80089fc:	2200      	movs	r2, #0
 80089fe:	4683      	mov	fp, r0
 8008a00:	2300      	movs	r3, #0
 8008a02:	4630      	mov	r0, r6
 8008a04:	4639      	mov	r1, r7
 8008a06:	f7f8 f871 	bl	8000aec <__aeabi_dcmplt>
 8008a0a:	b148      	cbz	r0, 8008a20 <_dtoa_r+0x190>
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f7f7 fd91 	bl	8000534 <__aeabi_i2d>
 8008a12:	4632      	mov	r2, r6
 8008a14:	463b      	mov	r3, r7
 8008a16:	f7f8 f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a1a:	b908      	cbnz	r0, 8008a20 <_dtoa_r+0x190>
 8008a1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a20:	f1bb 0f16 	cmp.w	fp, #22
 8008a24:	d857      	bhi.n	8008ad6 <_dtoa_r+0x246>
 8008a26:	4b5b      	ldr	r3, [pc, #364]	; (8008b94 <_dtoa_r+0x304>)
 8008a28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	ec51 0b18 	vmov	r0, r1, d8
 8008a34:	f7f8 f85a 	bl	8000aec <__aeabi_dcmplt>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d04e      	beq.n	8008ada <_dtoa_r+0x24a>
 8008a3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a40:	2300      	movs	r3, #0
 8008a42:	930c      	str	r3, [sp, #48]	; 0x30
 8008a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a46:	1b5b      	subs	r3, r3, r5
 8008a48:	1e5a      	subs	r2, r3, #1
 8008a4a:	bf45      	ittet	mi
 8008a4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a50:	9305      	strmi	r3, [sp, #20]
 8008a52:	2300      	movpl	r3, #0
 8008a54:	2300      	movmi	r3, #0
 8008a56:	9206      	str	r2, [sp, #24]
 8008a58:	bf54      	ite	pl
 8008a5a:	9305      	strpl	r3, [sp, #20]
 8008a5c:	9306      	strmi	r3, [sp, #24]
 8008a5e:	f1bb 0f00 	cmp.w	fp, #0
 8008a62:	db3c      	blt.n	8008ade <_dtoa_r+0x24e>
 8008a64:	9b06      	ldr	r3, [sp, #24]
 8008a66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a6a:	445b      	add	r3, fp
 8008a6c:	9306      	str	r3, [sp, #24]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	9b07      	ldr	r3, [sp, #28]
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d868      	bhi.n	8008b4a <_dtoa_r+0x2ba>
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	bfc4      	itt	gt
 8008a7c:	3b04      	subgt	r3, #4
 8008a7e:	9307      	strgt	r3, [sp, #28]
 8008a80:	9b07      	ldr	r3, [sp, #28]
 8008a82:	f1a3 0302 	sub.w	r3, r3, #2
 8008a86:	bfcc      	ite	gt
 8008a88:	2500      	movgt	r5, #0
 8008a8a:	2501      	movle	r5, #1
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	f200 8085 	bhi.w	8008b9c <_dtoa_r+0x30c>
 8008a92:	e8df f003 	tbb	[pc, r3]
 8008a96:	3b2e      	.short	0x3b2e
 8008a98:	5839      	.short	0x5839
 8008a9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a9e:	441d      	add	r5, r3
 8008aa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008aa4:	2b20      	cmp	r3, #32
 8008aa6:	bfc1      	itttt	gt
 8008aa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aac:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ab0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ab4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ab8:	bfd6      	itet	le
 8008aba:	f1c3 0320 	rsble	r3, r3, #32
 8008abe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ac2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ac6:	f7f7 fd25 	bl	8000514 <__aeabi_ui2d>
 8008aca:	2201      	movs	r2, #1
 8008acc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ad0:	3d01      	subs	r5, #1
 8008ad2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ad4:	e76f      	b.n	80089b6 <_dtoa_r+0x126>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e7b3      	b.n	8008a42 <_dtoa_r+0x1b2>
 8008ada:	900c      	str	r0, [sp, #48]	; 0x30
 8008adc:	e7b2      	b.n	8008a44 <_dtoa_r+0x1b4>
 8008ade:	9b05      	ldr	r3, [sp, #20]
 8008ae0:	eba3 030b 	sub.w	r3, r3, fp
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	f1cb 0300 	rsb	r3, fp, #0
 8008aea:	9308      	str	r3, [sp, #32]
 8008aec:	2300      	movs	r3, #0
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	e7bf      	b.n	8008a72 <_dtoa_r+0x1e2>
 8008af2:	2300      	movs	r3, #0
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc52      	bgt.n	8008ba2 <_dtoa_r+0x312>
 8008afc:	2301      	movs	r3, #1
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	461a      	mov	r2, r3
 8008b04:	920a      	str	r2, [sp, #40]	; 0x28
 8008b06:	e00b      	b.n	8008b20 <_dtoa_r+0x290>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e7f3      	b.n	8008af4 <_dtoa_r+0x264>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b12:	445b      	add	r3, fp
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	3301      	adds	r3, #1
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	bfb8      	it	lt
 8008b1e:	2301      	movlt	r3, #1
 8008b20:	69e0      	ldr	r0, [r4, #28]
 8008b22:	2100      	movs	r1, #0
 8008b24:	2204      	movs	r2, #4
 8008b26:	f102 0614 	add.w	r6, r2, #20
 8008b2a:	429e      	cmp	r6, r3
 8008b2c:	d93d      	bls.n	8008baa <_dtoa_r+0x31a>
 8008b2e:	6041      	str	r1, [r0, #4]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 ff59 	bl	80099e8 <_Balloc>
 8008b36:	9000      	str	r0, [sp, #0]
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d139      	bne.n	8008bb0 <_dtoa_r+0x320>
 8008b3c:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <_dtoa_r+0x308>)
 8008b3e:	4602      	mov	r2, r0
 8008b40:	f240 11af 	movw	r1, #431	; 0x1af
 8008b44:	e6bd      	b.n	80088c2 <_dtoa_r+0x32>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7e1      	b.n	8008b0e <_dtoa_r+0x27e>
 8008b4a:	2501      	movs	r5, #1
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	9509      	str	r5, [sp, #36]	; 0x24
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2312      	movs	r3, #18
 8008b5e:	e7d1      	b.n	8008b04 <_dtoa_r+0x274>
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800b385 	.word	0x0800b385
 8008b7c:	0800b39c 	.word	0x0800b39c
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800b381 	.word	0x0800b381
 8008b88:	0800b378 	.word	0x0800b378
 8008b8c:	0800b355 	.word	0x0800b355
 8008b90:	3ff80000 	.word	0x3ff80000
 8008b94:	0800b498 	.word	0x0800b498
 8008b98:	0800b3f4 	.word	0x0800b3f4
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba0:	e7d7      	b.n	8008b52 <_dtoa_r+0x2c2>
 8008ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	e7ba      	b.n	8008b20 <_dtoa_r+0x290>
 8008baa:	3101      	adds	r1, #1
 8008bac:	0052      	lsls	r2, r2, #1
 8008bae:	e7ba      	b.n	8008b26 <_dtoa_r+0x296>
 8008bb0:	69e3      	ldr	r3, [r4, #28]
 8008bb2:	9a00      	ldr	r2, [sp, #0]
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	2b0e      	cmp	r3, #14
 8008bba:	f200 80a8 	bhi.w	8008d0e <_dtoa_r+0x47e>
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	f000 80a5 	beq.w	8008d0e <_dtoa_r+0x47e>
 8008bc4:	f1bb 0f00 	cmp.w	fp, #0
 8008bc8:	dd38      	ble.n	8008c3c <_dtoa_r+0x3ac>
 8008bca:	4bc0      	ldr	r3, [pc, #768]	; (8008ecc <_dtoa_r+0x63c>)
 8008bcc:	f00b 020f 	and.w	r2, fp, #15
 8008bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008bd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008bdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008be0:	d019      	beq.n	8008c16 <_dtoa_r+0x386>
 8008be2:	4bbb      	ldr	r3, [pc, #748]	; (8008ed0 <_dtoa_r+0x640>)
 8008be4:	ec51 0b18 	vmov	r0, r1, d8
 8008be8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bec:	f7f7 fe36 	bl	800085c <__aeabi_ddiv>
 8008bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf4:	f008 080f 	and.w	r8, r8, #15
 8008bf8:	2503      	movs	r5, #3
 8008bfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ed0 <_dtoa_r+0x640>
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	d10a      	bne.n	8008c1a <_dtoa_r+0x38a>
 8008c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c08:	4632      	mov	r2, r6
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	f7f7 fe26 	bl	800085c <__aeabi_ddiv>
 8008c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c14:	e02b      	b.n	8008c6e <_dtoa_r+0x3de>
 8008c16:	2502      	movs	r5, #2
 8008c18:	e7ef      	b.n	8008bfa <_dtoa_r+0x36a>
 8008c1a:	f018 0f01 	tst.w	r8, #1
 8008c1e:	d008      	beq.n	8008c32 <_dtoa_r+0x3a2>
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c28:	f7f7 fcee 	bl	8000608 <__aeabi_dmul>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c36:	f109 0908 	add.w	r9, r9, #8
 8008c3a:	e7e0      	b.n	8008bfe <_dtoa_r+0x36e>
 8008c3c:	f000 809f 	beq.w	8008d7e <_dtoa_r+0x4ee>
 8008c40:	f1cb 0600 	rsb	r6, fp, #0
 8008c44:	4ba1      	ldr	r3, [pc, #644]	; (8008ecc <_dtoa_r+0x63c>)
 8008c46:	4fa2      	ldr	r7, [pc, #648]	; (8008ed0 <_dtoa_r+0x640>)
 8008c48:	f006 020f 	and.w	r2, r6, #15
 8008c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	ec51 0b18 	vmov	r0, r1, d8
 8008c58:	f7f7 fcd6 	bl	8000608 <__aeabi_dmul>
 8008c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c60:	1136      	asrs	r6, r6, #4
 8008c62:	2300      	movs	r3, #0
 8008c64:	2502      	movs	r5, #2
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d17e      	bne.n	8008d68 <_dtoa_r+0x4d8>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1d0      	bne.n	8008c10 <_dtoa_r+0x380>
 8008c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8084 	beq.w	8008d82 <_dtoa_r+0x4f2>
 8008c7a:	4b96      	ldr	r3, [pc, #600]	; (8008ed4 <_dtoa_r+0x644>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	4640      	mov	r0, r8
 8008c80:	4649      	mov	r1, r9
 8008c82:	f7f7 ff33 	bl	8000aec <__aeabi_dcmplt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d07b      	beq.n	8008d82 <_dtoa_r+0x4f2>
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d078      	beq.n	8008d82 <_dtoa_r+0x4f2>
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	dd39      	ble.n	8008d0a <_dtoa_r+0x47a>
 8008c96:	4b90      	ldr	r3, [pc, #576]	; (8008ed8 <_dtoa_r+0x648>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	f7f7 fcb3 	bl	8000608 <__aeabi_dmul>
 8008ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca6:	9e01      	ldr	r6, [sp, #4]
 8008ca8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008cac:	3501      	adds	r5, #1
 8008cae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f7f7 fc3e 	bl	8000534 <__aeabi_i2d>
 8008cb8:	4642      	mov	r2, r8
 8008cba:	464b      	mov	r3, r9
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	4b86      	ldr	r3, [pc, #536]	; (8008edc <_dtoa_r+0x64c>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 faea 	bl	800029c <__adddf3>
 8008cc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd0:	9303      	str	r3, [sp, #12]
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	d158      	bne.n	8008d88 <_dtoa_r+0x4f8>
 8008cd6:	4b82      	ldr	r3, [pc, #520]	; (8008ee0 <_dtoa_r+0x650>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4649      	mov	r1, r9
 8008cde:	f7f7 fadb 	bl	8000298 <__aeabi_dsub>
 8008ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4689      	mov	r9, r1
 8008cea:	f7f7 ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f040 8296 	bne.w	8009220 <_dtoa_r+0x990>
 8008cf4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cfe:	4649      	mov	r1, r9
 8008d00:	f7f7 fef4 	bl	8000aec <__aeabi_dcmplt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f040 8289 	bne.w	800921c <_dtoa_r+0x98c>
 8008d0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f2c0 814e 	blt.w	8008fb2 <_dtoa_r+0x722>
 8008d16:	f1bb 0f0e 	cmp.w	fp, #14
 8008d1a:	f300 814a 	bgt.w	8008fb2 <_dtoa_r+0x722>
 8008d1e:	4b6b      	ldr	r3, [pc, #428]	; (8008ecc <_dtoa_r+0x63c>)
 8008d20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f280 80dc 	bge.w	8008ee8 <_dtoa_r+0x658>
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f300 80d8 	bgt.w	8008ee8 <_dtoa_r+0x658>
 8008d38:	f040 826f 	bne.w	800921a <_dtoa_r+0x98a>
 8008d3c:	4b68      	ldr	r3, [pc, #416]	; (8008ee0 <_dtoa_r+0x650>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fc60 	bl	8000608 <__aeabi_dmul>
 8008d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d4c:	f7f7 fee2 	bl	8000b14 <__aeabi_dcmpge>
 8008d50:	9e04      	ldr	r6, [sp, #16]
 8008d52:	4637      	mov	r7, r6
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f040 8245 	bne.w	80091e4 <_dtoa_r+0x954>
 8008d5a:	9d00      	ldr	r5, [sp, #0]
 8008d5c:	2331      	movs	r3, #49	; 0x31
 8008d5e:	f805 3b01 	strb.w	r3, [r5], #1
 8008d62:	f10b 0b01 	add.w	fp, fp, #1
 8008d66:	e241      	b.n	80091ec <_dtoa_r+0x95c>
 8008d68:	07f2      	lsls	r2, r6, #31
 8008d6a:	d505      	bpl.n	8008d78 <_dtoa_r+0x4e8>
 8008d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d70:	f7f7 fc4a 	bl	8000608 <__aeabi_dmul>
 8008d74:	3501      	adds	r5, #1
 8008d76:	2301      	movs	r3, #1
 8008d78:	1076      	asrs	r6, r6, #1
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	e773      	b.n	8008c66 <_dtoa_r+0x3d6>
 8008d7e:	2502      	movs	r5, #2
 8008d80:	e775      	b.n	8008c6e <_dtoa_r+0x3de>
 8008d82:	9e04      	ldr	r6, [sp, #16]
 8008d84:	465f      	mov	r7, fp
 8008d86:	e792      	b.n	8008cae <_dtoa_r+0x41e>
 8008d88:	9900      	ldr	r1, [sp, #0]
 8008d8a:	4b50      	ldr	r3, [pc, #320]	; (8008ecc <_dtoa_r+0x63c>)
 8008d8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d90:	4431      	add	r1, r6
 8008d92:	9102      	str	r1, [sp, #8]
 8008d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d96:	eeb0 9a47 	vmov.f32	s18, s14
 8008d9a:	eef0 9a67 	vmov.f32	s19, s15
 8008d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008da6:	2900      	cmp	r1, #0
 8008da8:	d044      	beq.n	8008e34 <_dtoa_r+0x5a4>
 8008daa:	494e      	ldr	r1, [pc, #312]	; (8008ee4 <_dtoa_r+0x654>)
 8008dac:	2000      	movs	r0, #0
 8008dae:	f7f7 fd55 	bl	800085c <__aeabi_ddiv>
 8008db2:	ec53 2b19 	vmov	r2, r3, d9
 8008db6:	f7f7 fa6f 	bl	8000298 <__aeabi_dsub>
 8008dba:	9d00      	ldr	r5, [sp, #0]
 8008dbc:	ec41 0b19 	vmov	d9, r0, r1
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	f7f7 fed0 	bl	8000b68 <__aeabi_d2iz>
 8008dc8:	4606      	mov	r6, r0
 8008dca:	f7f7 fbb3 	bl	8000534 <__aeabi_i2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fa5f 	bl	8000298 <__aeabi_dsub>
 8008dda:	3630      	adds	r6, #48	; 0x30
 8008ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8008de0:	ec53 2b19 	vmov	r2, r3, d9
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	f7f7 fe80 	bl	8000aec <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d164      	bne.n	8008eba <_dtoa_r+0x62a>
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	4937      	ldr	r1, [pc, #220]	; (8008ed4 <_dtoa_r+0x644>)
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7f7 fa4e 	bl	8000298 <__aeabi_dsub>
 8008dfc:	ec53 2b19 	vmov	r2, r3, d9
 8008e00:	f7f7 fe74 	bl	8000aec <__aeabi_dcmplt>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f040 80b6 	bne.w	8008f76 <_dtoa_r+0x6e6>
 8008e0a:	9b02      	ldr	r3, [sp, #8]
 8008e0c:	429d      	cmp	r5, r3
 8008e0e:	f43f af7c 	beq.w	8008d0a <_dtoa_r+0x47a>
 8008e12:	4b31      	ldr	r3, [pc, #196]	; (8008ed8 <_dtoa_r+0x648>)
 8008e14:	ec51 0b19 	vmov	r0, r1, d9
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f7f7 fbf5 	bl	8000608 <__aeabi_dmul>
 8008e1e:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <_dtoa_r+0x648>)
 8008e20:	ec41 0b19 	vmov	d9, r0, r1
 8008e24:	2200      	movs	r2, #0
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f7f7 fbed 	bl	8000608 <__aeabi_dmul>
 8008e2e:	4680      	mov	r8, r0
 8008e30:	4689      	mov	r9, r1
 8008e32:	e7c5      	b.n	8008dc0 <_dtoa_r+0x530>
 8008e34:	ec51 0b17 	vmov	r0, r1, d7
 8008e38:	f7f7 fbe6 	bl	8000608 <__aeabi_dmul>
 8008e3c:	9b02      	ldr	r3, [sp, #8]
 8008e3e:	9d00      	ldr	r5, [sp, #0]
 8008e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e42:	ec41 0b19 	vmov	d9, r0, r1
 8008e46:	4649      	mov	r1, r9
 8008e48:	4640      	mov	r0, r8
 8008e4a:	f7f7 fe8d 	bl	8000b68 <__aeabi_d2iz>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	f7f7 fb70 	bl	8000534 <__aeabi_i2d>
 8008e54:	3630      	adds	r6, #48	; 0x30
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa1b 	bl	8000298 <__aeabi_dsub>
 8008e62:	f805 6b01 	strb.w	r6, [r5], #1
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	429d      	cmp	r5, r3
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	4689      	mov	r9, r1
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	d124      	bne.n	8008ebe <_dtoa_r+0x62e>
 8008e74:	4b1b      	ldr	r3, [pc, #108]	; (8008ee4 <_dtoa_r+0x654>)
 8008e76:	ec51 0b19 	vmov	r0, r1, d9
 8008e7a:	f7f7 fa0f 	bl	800029c <__adddf3>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	f7f7 fe4f 	bl	8000b28 <__aeabi_dcmpgt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d173      	bne.n	8008f76 <_dtoa_r+0x6e6>
 8008e8e:	ec53 2b19 	vmov	r2, r3, d9
 8008e92:	4914      	ldr	r1, [pc, #80]	; (8008ee4 <_dtoa_r+0x654>)
 8008e94:	2000      	movs	r0, #0
 8008e96:	f7f7 f9ff 	bl	8000298 <__aeabi_dsub>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	f7f7 fe23 	bl	8000aec <__aeabi_dcmplt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f43f af2f 	beq.w	8008d0a <_dtoa_r+0x47a>
 8008eac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008eae:	1e6b      	subs	r3, r5, #1
 8008eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	d0f8      	beq.n	8008eac <_dtoa_r+0x61c>
 8008eba:	46bb      	mov	fp, r7
 8008ebc:	e04a      	b.n	8008f54 <_dtoa_r+0x6c4>
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <_dtoa_r+0x648>)
 8008ec0:	f7f7 fba2 	bl	8000608 <__aeabi_dmul>
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	4689      	mov	r9, r1
 8008ec8:	e7bd      	b.n	8008e46 <_dtoa_r+0x5b6>
 8008eca:	bf00      	nop
 8008ecc:	0800b498 	.word	0x0800b498
 8008ed0:	0800b470 	.word	0x0800b470
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	40240000 	.word	0x40240000
 8008edc:	401c0000 	.word	0x401c0000
 8008ee0:	40140000 	.word	0x40140000
 8008ee4:	3fe00000 	.word	0x3fe00000
 8008ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008eec:	9d00      	ldr	r5, [sp, #0]
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	f7f7 fcb1 	bl	800085c <__aeabi_ddiv>
 8008efa:	f7f7 fe35 	bl	8000b68 <__aeabi_d2iz>
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	f7f7 fb18 	bl	8000534 <__aeabi_i2d>
 8008f04:	4642      	mov	r2, r8
 8008f06:	464b      	mov	r3, r9
 8008f08:	f7f7 fb7e 	bl	8000608 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4630      	mov	r0, r6
 8008f12:	4639      	mov	r1, r7
 8008f14:	f7f7 f9c0 	bl	8000298 <__aeabi_dsub>
 8008f18:	9e01      	ldr	r6, [sp, #4]
 8008f1a:	9f04      	ldr	r7, [sp, #16]
 8008f1c:	3630      	adds	r6, #48	; 0x30
 8008f1e:	f805 6b01 	strb.w	r6, [r5], #1
 8008f22:	9e00      	ldr	r6, [sp, #0]
 8008f24:	1bae      	subs	r6, r5, r6
 8008f26:	42b7      	cmp	r7, r6
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	d134      	bne.n	8008f98 <_dtoa_r+0x708>
 8008f2e:	f7f7 f9b5 	bl	800029c <__adddf3>
 8008f32:	4642      	mov	r2, r8
 8008f34:	464b      	mov	r3, r9
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	f7f7 fdf5 	bl	8000b28 <__aeabi_dcmpgt>
 8008f3e:	b9c8      	cbnz	r0, 8008f74 <_dtoa_r+0x6e4>
 8008f40:	4642      	mov	r2, r8
 8008f42:	464b      	mov	r3, r9
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f4c:	b110      	cbz	r0, 8008f54 <_dtoa_r+0x6c4>
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	07db      	lsls	r3, r3, #31
 8008f52:	d40f      	bmi.n	8008f74 <_dtoa_r+0x6e4>
 8008f54:	4651      	mov	r1, sl
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fd86 	bl	8009a68 <_Bfree>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f60:	702b      	strb	r3, [r5, #0]
 8008f62:	f10b 0301 	add.w	r3, fp, #1
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f43f ace2 	beq.w	8008934 <_dtoa_r+0xa4>
 8008f70:	601d      	str	r5, [r3, #0]
 8008f72:	e4df      	b.n	8008934 <_dtoa_r+0xa4>
 8008f74:	465f      	mov	r7, fp
 8008f76:	462b      	mov	r3, r5
 8008f78:	461d      	mov	r5, r3
 8008f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f7e:	2a39      	cmp	r2, #57	; 0x39
 8008f80:	d106      	bne.n	8008f90 <_dtoa_r+0x700>
 8008f82:	9a00      	ldr	r2, [sp, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d1f7      	bne.n	8008f78 <_dtoa_r+0x6e8>
 8008f88:	9900      	ldr	r1, [sp, #0]
 8008f8a:	2230      	movs	r2, #48	; 0x30
 8008f8c:	3701      	adds	r7, #1
 8008f8e:	700a      	strb	r2, [r1, #0]
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	3201      	adds	r2, #1
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	e790      	b.n	8008eba <_dtoa_r+0x62a>
 8008f98:	4ba3      	ldr	r3, [pc, #652]	; (8009228 <_dtoa_r+0x998>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	460f      	mov	r7, r1
 8008fa8:	f7f7 fd96 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d09e      	beq.n	8008eee <_dtoa_r+0x65e>
 8008fb0:	e7d0      	b.n	8008f54 <_dtoa_r+0x6c4>
 8008fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	f000 80ca 	beq.w	800914e <_dtoa_r+0x8be>
 8008fba:	9a07      	ldr	r2, [sp, #28]
 8008fbc:	2a01      	cmp	r2, #1
 8008fbe:	f300 80ad 	bgt.w	800911c <_dtoa_r+0x88c>
 8008fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	f000 80a5 	beq.w	8009114 <_dtoa_r+0x884>
 8008fca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fce:	9e08      	ldr	r6, [sp, #32]
 8008fd0:	9d05      	ldr	r5, [sp, #20]
 8008fd2:	9a05      	ldr	r2, [sp, #20]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	9205      	str	r2, [sp, #20]
 8008fd8:	9a06      	ldr	r2, [sp, #24]
 8008fda:	2101      	movs	r1, #1
 8008fdc:	441a      	add	r2, r3
 8008fde:	4620      	mov	r0, r4
 8008fe0:	9206      	str	r2, [sp, #24]
 8008fe2:	f000 fdf7 	bl	8009bd4 <__i2b>
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	b165      	cbz	r5, 8009004 <_dtoa_r+0x774>
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dd09      	ble.n	8009004 <_dtoa_r+0x774>
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	9a05      	ldr	r2, [sp, #20]
 8008ff4:	bfa8      	it	ge
 8008ff6:	462b      	movge	r3, r5
 8008ff8:	1ad2      	subs	r2, r2, r3
 8008ffa:	9205      	str	r2, [sp, #20]
 8008ffc:	9a06      	ldr	r2, [sp, #24]
 8008ffe:	1aed      	subs	r5, r5, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	9306      	str	r3, [sp, #24]
 8009004:	9b08      	ldr	r3, [sp, #32]
 8009006:	b1f3      	cbz	r3, 8009046 <_dtoa_r+0x7b6>
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 80a3 	beq.w	8009156 <_dtoa_r+0x8c6>
 8009010:	2e00      	cmp	r6, #0
 8009012:	dd10      	ble.n	8009036 <_dtoa_r+0x7a6>
 8009014:	4639      	mov	r1, r7
 8009016:	4632      	mov	r2, r6
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fe9b 	bl	8009d54 <__pow5mult>
 800901e:	4652      	mov	r2, sl
 8009020:	4601      	mov	r1, r0
 8009022:	4607      	mov	r7, r0
 8009024:	4620      	mov	r0, r4
 8009026:	f000 fdeb 	bl	8009c00 <__multiply>
 800902a:	4651      	mov	r1, sl
 800902c:	4680      	mov	r8, r0
 800902e:	4620      	mov	r0, r4
 8009030:	f000 fd1a 	bl	8009a68 <_Bfree>
 8009034:	46c2      	mov	sl, r8
 8009036:	9b08      	ldr	r3, [sp, #32]
 8009038:	1b9a      	subs	r2, r3, r6
 800903a:	d004      	beq.n	8009046 <_dtoa_r+0x7b6>
 800903c:	4651      	mov	r1, sl
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fe88 	bl	8009d54 <__pow5mult>
 8009044:	4682      	mov	sl, r0
 8009046:	2101      	movs	r1, #1
 8009048:	4620      	mov	r0, r4
 800904a:	f000 fdc3 	bl	8009bd4 <__i2b>
 800904e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	4606      	mov	r6, r0
 8009054:	f340 8081 	ble.w	800915a <_dtoa_r+0x8ca>
 8009058:	461a      	mov	r2, r3
 800905a:	4601      	mov	r1, r0
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fe79 	bl	8009d54 <__pow5mult>
 8009062:	9b07      	ldr	r3, [sp, #28]
 8009064:	2b01      	cmp	r3, #1
 8009066:	4606      	mov	r6, r0
 8009068:	dd7a      	ble.n	8009160 <_dtoa_r+0x8d0>
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	6933      	ldr	r3, [r6, #16]
 8009070:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	f000 fd5f 	bl	8009b38 <__hi0bits>
 800907a:	f1c0 0020 	rsb	r0, r0, #32
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	4418      	add	r0, r3
 8009082:	f010 001f 	ands.w	r0, r0, #31
 8009086:	f000 8094 	beq.w	80091b2 <_dtoa_r+0x922>
 800908a:	f1c0 0320 	rsb	r3, r0, #32
 800908e:	2b04      	cmp	r3, #4
 8009090:	f340 8085 	ble.w	800919e <_dtoa_r+0x90e>
 8009094:	9b05      	ldr	r3, [sp, #20]
 8009096:	f1c0 001c 	rsb	r0, r0, #28
 800909a:	4403      	add	r3, r0
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	9b06      	ldr	r3, [sp, #24]
 80090a0:	4403      	add	r3, r0
 80090a2:	4405      	add	r5, r0
 80090a4:	9306      	str	r3, [sp, #24]
 80090a6:	9b05      	ldr	r3, [sp, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dd05      	ble.n	80090b8 <_dtoa_r+0x828>
 80090ac:	4651      	mov	r1, sl
 80090ae:	461a      	mov	r2, r3
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fea9 	bl	8009e08 <__lshift>
 80090b6:	4682      	mov	sl, r0
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dd05      	ble.n	80090ca <_dtoa_r+0x83a>
 80090be:	4631      	mov	r1, r6
 80090c0:	461a      	mov	r2, r3
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fea0 	bl	8009e08 <__lshift>
 80090c8:	4606      	mov	r6, r0
 80090ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d072      	beq.n	80091b6 <_dtoa_r+0x926>
 80090d0:	4631      	mov	r1, r6
 80090d2:	4650      	mov	r0, sl
 80090d4:	f000 ff04 	bl	8009ee0 <__mcmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	da6c      	bge.n	80091b6 <_dtoa_r+0x926>
 80090dc:	2300      	movs	r3, #0
 80090de:	4651      	mov	r1, sl
 80090e0:	220a      	movs	r2, #10
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fce2 	bl	8009aac <__multadd>
 80090e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090ee:	4682      	mov	sl, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 81b0 	beq.w	8009456 <_dtoa_r+0xbc6>
 80090f6:	2300      	movs	r3, #0
 80090f8:	4639      	mov	r1, r7
 80090fa:	220a      	movs	r2, #10
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fcd5 	bl	8009aac <__multadd>
 8009102:	9b01      	ldr	r3, [sp, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	4607      	mov	r7, r0
 8009108:	f300 8096 	bgt.w	8009238 <_dtoa_r+0x9a8>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	2b02      	cmp	r3, #2
 8009110:	dc59      	bgt.n	80091c6 <_dtoa_r+0x936>
 8009112:	e091      	b.n	8009238 <_dtoa_r+0x9a8>
 8009114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800911a:	e758      	b.n	8008fce <_dtoa_r+0x73e>
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	1e5e      	subs	r6, r3, #1
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	42b3      	cmp	r3, r6
 8009124:	bfbf      	itttt	lt
 8009126:	9b08      	ldrlt	r3, [sp, #32]
 8009128:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800912a:	9608      	strlt	r6, [sp, #32]
 800912c:	1af3      	sublt	r3, r6, r3
 800912e:	bfb4      	ite	lt
 8009130:	18d2      	addlt	r2, r2, r3
 8009132:	1b9e      	subge	r6, r3, r6
 8009134:	9b04      	ldr	r3, [sp, #16]
 8009136:	bfbc      	itt	lt
 8009138:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800913a:	2600      	movlt	r6, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	bfb7      	itett	lt
 8009140:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009144:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009148:	1a9d      	sublt	r5, r3, r2
 800914a:	2300      	movlt	r3, #0
 800914c:	e741      	b.n	8008fd2 <_dtoa_r+0x742>
 800914e:	9e08      	ldr	r6, [sp, #32]
 8009150:	9d05      	ldr	r5, [sp, #20]
 8009152:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009154:	e748      	b.n	8008fe8 <_dtoa_r+0x758>
 8009156:	9a08      	ldr	r2, [sp, #32]
 8009158:	e770      	b.n	800903c <_dtoa_r+0x7ac>
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	2b01      	cmp	r3, #1
 800915e:	dc19      	bgt.n	8009194 <_dtoa_r+0x904>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	b9bb      	cbnz	r3, 8009194 <_dtoa_r+0x904>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800916a:	b99b      	cbnz	r3, 8009194 <_dtoa_r+0x904>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009172:	0d1b      	lsrs	r3, r3, #20
 8009174:	051b      	lsls	r3, r3, #20
 8009176:	b183      	cbz	r3, 800919a <_dtoa_r+0x90a>
 8009178:	9b05      	ldr	r3, [sp, #20]
 800917a:	3301      	adds	r3, #1
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	9b06      	ldr	r3, [sp, #24]
 8009180:	3301      	adds	r3, #1
 8009182:	9306      	str	r3, [sp, #24]
 8009184:	f04f 0801 	mov.w	r8, #1
 8009188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918a:	2b00      	cmp	r3, #0
 800918c:	f47f af6f 	bne.w	800906e <_dtoa_r+0x7de>
 8009190:	2001      	movs	r0, #1
 8009192:	e774      	b.n	800907e <_dtoa_r+0x7ee>
 8009194:	f04f 0800 	mov.w	r8, #0
 8009198:	e7f6      	b.n	8009188 <_dtoa_r+0x8f8>
 800919a:	4698      	mov	r8, r3
 800919c:	e7f4      	b.n	8009188 <_dtoa_r+0x8f8>
 800919e:	d082      	beq.n	80090a6 <_dtoa_r+0x816>
 80091a0:	9a05      	ldr	r2, [sp, #20]
 80091a2:	331c      	adds	r3, #28
 80091a4:	441a      	add	r2, r3
 80091a6:	9205      	str	r2, [sp, #20]
 80091a8:	9a06      	ldr	r2, [sp, #24]
 80091aa:	441a      	add	r2, r3
 80091ac:	441d      	add	r5, r3
 80091ae:	9206      	str	r2, [sp, #24]
 80091b0:	e779      	b.n	80090a6 <_dtoa_r+0x816>
 80091b2:	4603      	mov	r3, r0
 80091b4:	e7f4      	b.n	80091a0 <_dtoa_r+0x910>
 80091b6:	9b04      	ldr	r3, [sp, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dc37      	bgt.n	800922c <_dtoa_r+0x99c>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	dd34      	ble.n	800922c <_dtoa_r+0x99c>
 80091c2:	9b04      	ldr	r3, [sp, #16]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	b963      	cbnz	r3, 80091e4 <_dtoa_r+0x954>
 80091ca:	4631      	mov	r1, r6
 80091cc:	2205      	movs	r2, #5
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fc6c 	bl	8009aac <__multadd>
 80091d4:	4601      	mov	r1, r0
 80091d6:	4606      	mov	r6, r0
 80091d8:	4650      	mov	r0, sl
 80091da:	f000 fe81 	bl	8009ee0 <__mcmp>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f73f adbb 	bgt.w	8008d5a <_dtoa_r+0x4ca>
 80091e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e6:	9d00      	ldr	r5, [sp, #0]
 80091e8:	ea6f 0b03 	mvn.w	fp, r3
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	4631      	mov	r1, r6
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 fc38 	bl	8009a68 <_Bfree>
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	f43f aeab 	beq.w	8008f54 <_dtoa_r+0x6c4>
 80091fe:	f1b8 0f00 	cmp.w	r8, #0
 8009202:	d005      	beq.n	8009210 <_dtoa_r+0x980>
 8009204:	45b8      	cmp	r8, r7
 8009206:	d003      	beq.n	8009210 <_dtoa_r+0x980>
 8009208:	4641      	mov	r1, r8
 800920a:	4620      	mov	r0, r4
 800920c:	f000 fc2c 	bl	8009a68 <_Bfree>
 8009210:	4639      	mov	r1, r7
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fc28 	bl	8009a68 <_Bfree>
 8009218:	e69c      	b.n	8008f54 <_dtoa_r+0x6c4>
 800921a:	2600      	movs	r6, #0
 800921c:	4637      	mov	r7, r6
 800921e:	e7e1      	b.n	80091e4 <_dtoa_r+0x954>
 8009220:	46bb      	mov	fp, r7
 8009222:	4637      	mov	r7, r6
 8009224:	e599      	b.n	8008d5a <_dtoa_r+0x4ca>
 8009226:	bf00      	nop
 8009228:	40240000 	.word	0x40240000
 800922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 80c8 	beq.w	80093c4 <_dtoa_r+0xb34>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	2d00      	cmp	r5, #0
 800923a:	dd05      	ble.n	8009248 <_dtoa_r+0x9b8>
 800923c:	4639      	mov	r1, r7
 800923e:	462a      	mov	r2, r5
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fde1 	bl	8009e08 <__lshift>
 8009246:	4607      	mov	r7, r0
 8009248:	f1b8 0f00 	cmp.w	r8, #0
 800924c:	d05b      	beq.n	8009306 <_dtoa_r+0xa76>
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fbc9 	bl	80099e8 <_Balloc>
 8009256:	4605      	mov	r5, r0
 8009258:	b928      	cbnz	r0, 8009266 <_dtoa_r+0x9d6>
 800925a:	4b83      	ldr	r3, [pc, #524]	; (8009468 <_dtoa_r+0xbd8>)
 800925c:	4602      	mov	r2, r0
 800925e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009262:	f7ff bb2e 	b.w	80088c2 <_dtoa_r+0x32>
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	3202      	adds	r2, #2
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	f107 010c 	add.w	r1, r7, #12
 8009270:	300c      	adds	r0, #12
 8009272:	f7ff fa74 	bl	800875e <memcpy>
 8009276:	2201      	movs	r2, #1
 8009278:	4629      	mov	r1, r5
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fdc4 	bl	8009e08 <__lshift>
 8009280:	9b00      	ldr	r3, [sp, #0]
 8009282:	3301      	adds	r3, #1
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800928a:	4413      	add	r3, r2
 800928c:	9308      	str	r3, [sp, #32]
 800928e:	9b02      	ldr	r3, [sp, #8]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	46b8      	mov	r8, r7
 8009296:	9306      	str	r3, [sp, #24]
 8009298:	4607      	mov	r7, r0
 800929a:	9b04      	ldr	r3, [sp, #16]
 800929c:	4631      	mov	r1, r6
 800929e:	3b01      	subs	r3, #1
 80092a0:	4650      	mov	r0, sl
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f7ff fa69 	bl	800877a <quorem>
 80092a8:	4641      	mov	r1, r8
 80092aa:	9002      	str	r0, [sp, #8]
 80092ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092b0:	4650      	mov	r0, sl
 80092b2:	f000 fe15 	bl	8009ee0 <__mcmp>
 80092b6:	463a      	mov	r2, r7
 80092b8:	9005      	str	r0, [sp, #20]
 80092ba:	4631      	mov	r1, r6
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fe2b 	bl	8009f18 <__mdiff>
 80092c2:	68c2      	ldr	r2, [r0, #12]
 80092c4:	4605      	mov	r5, r0
 80092c6:	bb02      	cbnz	r2, 800930a <_dtoa_r+0xa7a>
 80092c8:	4601      	mov	r1, r0
 80092ca:	4650      	mov	r0, sl
 80092cc:	f000 fe08 	bl	8009ee0 <__mcmp>
 80092d0:	4602      	mov	r2, r0
 80092d2:	4629      	mov	r1, r5
 80092d4:	4620      	mov	r0, r4
 80092d6:	9209      	str	r2, [sp, #36]	; 0x24
 80092d8:	f000 fbc6 	bl	8009a68 <_Bfree>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e0:	9d04      	ldr	r5, [sp, #16]
 80092e2:	ea43 0102 	orr.w	r1, r3, r2
 80092e6:	9b06      	ldr	r3, [sp, #24]
 80092e8:	4319      	orrs	r1, r3
 80092ea:	d110      	bne.n	800930e <_dtoa_r+0xa7e>
 80092ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092f0:	d029      	beq.n	8009346 <_dtoa_r+0xab6>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd02      	ble.n	80092fe <_dtoa_r+0xa6e>
 80092f8:	9b02      	ldr	r3, [sp, #8]
 80092fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	f883 9000 	strb.w	r9, [r3]
 8009304:	e774      	b.n	80091f0 <_dtoa_r+0x960>
 8009306:	4638      	mov	r0, r7
 8009308:	e7ba      	b.n	8009280 <_dtoa_r+0x9f0>
 800930a:	2201      	movs	r2, #1
 800930c:	e7e1      	b.n	80092d2 <_dtoa_r+0xa42>
 800930e:	9b05      	ldr	r3, [sp, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db04      	blt.n	800931e <_dtoa_r+0xa8e>
 8009314:	9907      	ldr	r1, [sp, #28]
 8009316:	430b      	orrs	r3, r1
 8009318:	9906      	ldr	r1, [sp, #24]
 800931a:	430b      	orrs	r3, r1
 800931c:	d120      	bne.n	8009360 <_dtoa_r+0xad0>
 800931e:	2a00      	cmp	r2, #0
 8009320:	dded      	ble.n	80092fe <_dtoa_r+0xa6e>
 8009322:	4651      	mov	r1, sl
 8009324:	2201      	movs	r2, #1
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fd6e 	bl	8009e08 <__lshift>
 800932c:	4631      	mov	r1, r6
 800932e:	4682      	mov	sl, r0
 8009330:	f000 fdd6 	bl	8009ee0 <__mcmp>
 8009334:	2800      	cmp	r0, #0
 8009336:	dc03      	bgt.n	8009340 <_dtoa_r+0xab0>
 8009338:	d1e1      	bne.n	80092fe <_dtoa_r+0xa6e>
 800933a:	f019 0f01 	tst.w	r9, #1
 800933e:	d0de      	beq.n	80092fe <_dtoa_r+0xa6e>
 8009340:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009344:	d1d8      	bne.n	80092f8 <_dtoa_r+0xa68>
 8009346:	9a01      	ldr	r2, [sp, #4]
 8009348:	2339      	movs	r3, #57	; 0x39
 800934a:	7013      	strb	r3, [r2, #0]
 800934c:	462b      	mov	r3, r5
 800934e:	461d      	mov	r5, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009356:	2a39      	cmp	r2, #57	; 0x39
 8009358:	d06c      	beq.n	8009434 <_dtoa_r+0xba4>
 800935a:	3201      	adds	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e747      	b.n	80091f0 <_dtoa_r+0x960>
 8009360:	2a00      	cmp	r2, #0
 8009362:	dd07      	ble.n	8009374 <_dtoa_r+0xae4>
 8009364:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009368:	d0ed      	beq.n	8009346 <_dtoa_r+0xab6>
 800936a:	9a01      	ldr	r2, [sp, #4]
 800936c:	f109 0301 	add.w	r3, r9, #1
 8009370:	7013      	strb	r3, [r2, #0]
 8009372:	e73d      	b.n	80091f0 <_dtoa_r+0x960>
 8009374:	9b04      	ldr	r3, [sp, #16]
 8009376:	9a08      	ldr	r2, [sp, #32]
 8009378:	f803 9c01 	strb.w	r9, [r3, #-1]
 800937c:	4293      	cmp	r3, r2
 800937e:	d043      	beq.n	8009408 <_dtoa_r+0xb78>
 8009380:	4651      	mov	r1, sl
 8009382:	2300      	movs	r3, #0
 8009384:	220a      	movs	r2, #10
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fb90 	bl	8009aac <__multadd>
 800938c:	45b8      	cmp	r8, r7
 800938e:	4682      	mov	sl, r0
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	f04f 020a 	mov.w	r2, #10
 8009398:	4641      	mov	r1, r8
 800939a:	4620      	mov	r0, r4
 800939c:	d107      	bne.n	80093ae <_dtoa_r+0xb1e>
 800939e:	f000 fb85 	bl	8009aac <__multadd>
 80093a2:	4680      	mov	r8, r0
 80093a4:	4607      	mov	r7, r0
 80093a6:	9b04      	ldr	r3, [sp, #16]
 80093a8:	3301      	adds	r3, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	e775      	b.n	800929a <_dtoa_r+0xa0a>
 80093ae:	f000 fb7d 	bl	8009aac <__multadd>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4680      	mov	r8, r0
 80093b6:	2300      	movs	r3, #0
 80093b8:	220a      	movs	r2, #10
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fb76 	bl	8009aac <__multadd>
 80093c0:	4607      	mov	r7, r0
 80093c2:	e7f0      	b.n	80093a6 <_dtoa_r+0xb16>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	9d00      	ldr	r5, [sp, #0]
 80093ca:	4631      	mov	r1, r6
 80093cc:	4650      	mov	r0, sl
 80093ce:	f7ff f9d4 	bl	800877a <quorem>
 80093d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093d6:	9b00      	ldr	r3, [sp, #0]
 80093d8:	f805 9b01 	strb.w	r9, [r5], #1
 80093dc:	1aea      	subs	r2, r5, r3
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	dd07      	ble.n	80093f4 <_dtoa_r+0xb64>
 80093e4:	4651      	mov	r1, sl
 80093e6:	2300      	movs	r3, #0
 80093e8:	220a      	movs	r2, #10
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fb5e 	bl	8009aac <__multadd>
 80093f0:	4682      	mov	sl, r0
 80093f2:	e7ea      	b.n	80093ca <_dtoa_r+0xb3a>
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfc8      	it	gt
 80093fa:	461d      	movgt	r5, r3
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	bfd8      	it	le
 8009400:	2501      	movle	r5, #1
 8009402:	441d      	add	r5, r3
 8009404:	f04f 0800 	mov.w	r8, #0
 8009408:	4651      	mov	r1, sl
 800940a:	2201      	movs	r2, #1
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fcfb 	bl	8009e08 <__lshift>
 8009412:	4631      	mov	r1, r6
 8009414:	4682      	mov	sl, r0
 8009416:	f000 fd63 	bl	8009ee0 <__mcmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	dc96      	bgt.n	800934c <_dtoa_r+0xabc>
 800941e:	d102      	bne.n	8009426 <_dtoa_r+0xb96>
 8009420:	f019 0f01 	tst.w	r9, #1
 8009424:	d192      	bne.n	800934c <_dtoa_r+0xabc>
 8009426:	462b      	mov	r3, r5
 8009428:	461d      	mov	r5, r3
 800942a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942e:	2a30      	cmp	r2, #48	; 0x30
 8009430:	d0fa      	beq.n	8009428 <_dtoa_r+0xb98>
 8009432:	e6dd      	b.n	80091f0 <_dtoa_r+0x960>
 8009434:	9a00      	ldr	r2, [sp, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d189      	bne.n	800934e <_dtoa_r+0xabe>
 800943a:	f10b 0b01 	add.w	fp, fp, #1
 800943e:	2331      	movs	r3, #49	; 0x31
 8009440:	e796      	b.n	8009370 <_dtoa_r+0xae0>
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <_dtoa_r+0xbdc>)
 8009444:	f7ff ba99 	b.w	800897a <_dtoa_r+0xea>
 8009448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f aa6d 	bne.w	800892a <_dtoa_r+0x9a>
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <_dtoa_r+0xbe0>)
 8009452:	f7ff ba92 	b.w	800897a <_dtoa_r+0xea>
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	dcb5      	bgt.n	80093c8 <_dtoa_r+0xb38>
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	2b02      	cmp	r3, #2
 8009460:	f73f aeb1 	bgt.w	80091c6 <_dtoa_r+0x936>
 8009464:	e7b0      	b.n	80093c8 <_dtoa_r+0xb38>
 8009466:	bf00      	nop
 8009468:	0800b3f4 	.word	0x0800b3f4
 800946c:	0800b354 	.word	0x0800b354
 8009470:	0800b378 	.word	0x0800b378

08009474 <__ssputs_r>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	688e      	ldr	r6, [r1, #8]
 800947a:	461f      	mov	r7, r3
 800947c:	42be      	cmp	r6, r7
 800947e:	680b      	ldr	r3, [r1, #0]
 8009480:	4682      	mov	sl, r0
 8009482:	460c      	mov	r4, r1
 8009484:	4690      	mov	r8, r2
 8009486:	d82c      	bhi.n	80094e2 <__ssputs_r+0x6e>
 8009488:	898a      	ldrh	r2, [r1, #12]
 800948a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800948e:	d026      	beq.n	80094de <__ssputs_r+0x6a>
 8009490:	6965      	ldr	r5, [r4, #20]
 8009492:	6909      	ldr	r1, [r1, #16]
 8009494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009498:	eba3 0901 	sub.w	r9, r3, r1
 800949c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094a0:	1c7b      	adds	r3, r7, #1
 80094a2:	444b      	add	r3, r9
 80094a4:	106d      	asrs	r5, r5, #1
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bf38      	it	cc
 80094aa:	461d      	movcc	r5, r3
 80094ac:	0553      	lsls	r3, r2, #21
 80094ae:	d527      	bpl.n	8009500 <__ssputs_r+0x8c>
 80094b0:	4629      	mov	r1, r5
 80094b2:	f000 f95f 	bl	8009774 <_malloc_r>
 80094b6:	4606      	mov	r6, r0
 80094b8:	b360      	cbz	r0, 8009514 <__ssputs_r+0xa0>
 80094ba:	6921      	ldr	r1, [r4, #16]
 80094bc:	464a      	mov	r2, r9
 80094be:	f7ff f94e 	bl	800875e <memcpy>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	6126      	str	r6, [r4, #16]
 80094d0:	6165      	str	r5, [r4, #20]
 80094d2:	444e      	add	r6, r9
 80094d4:	eba5 0509 	sub.w	r5, r5, r9
 80094d8:	6026      	str	r6, [r4, #0]
 80094da:	60a5      	str	r5, [r4, #8]
 80094dc:	463e      	mov	r6, r7
 80094de:	42be      	cmp	r6, r7
 80094e0:	d900      	bls.n	80094e4 <__ssputs_r+0x70>
 80094e2:	463e      	mov	r6, r7
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	4632      	mov	r2, r6
 80094e8:	4641      	mov	r1, r8
 80094ea:	f000 fe6b 	bl	800a1c4 <memmove>
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	1b9b      	subs	r3, r3, r6
 80094f2:	60a3      	str	r3, [r4, #8]
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	4433      	add	r3, r6
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	2000      	movs	r0, #0
 80094fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009500:	462a      	mov	r2, r5
 8009502:	f000 fe30 	bl	800a166 <_realloc_r>
 8009506:	4606      	mov	r6, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	d1e0      	bne.n	80094ce <__ssputs_r+0x5a>
 800950c:	6921      	ldr	r1, [r4, #16]
 800950e:	4650      	mov	r0, sl
 8009510:	f000 fefc 	bl	800a30c <_free_r>
 8009514:	230c      	movs	r3, #12
 8009516:	f8ca 3000 	str.w	r3, [sl]
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009526:	e7e9      	b.n	80094fc <__ssputs_r+0x88>

08009528 <_svfiprintf_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4698      	mov	r8, r3
 800952e:	898b      	ldrh	r3, [r1, #12]
 8009530:	061b      	lsls	r3, r3, #24
 8009532:	b09d      	sub	sp, #116	; 0x74
 8009534:	4607      	mov	r7, r0
 8009536:	460d      	mov	r5, r1
 8009538:	4614      	mov	r4, r2
 800953a:	d50e      	bpl.n	800955a <_svfiprintf_r+0x32>
 800953c:	690b      	ldr	r3, [r1, #16]
 800953e:	b963      	cbnz	r3, 800955a <_svfiprintf_r+0x32>
 8009540:	2140      	movs	r1, #64	; 0x40
 8009542:	f000 f917 	bl	8009774 <_malloc_r>
 8009546:	6028      	str	r0, [r5, #0]
 8009548:	6128      	str	r0, [r5, #16]
 800954a:	b920      	cbnz	r0, 8009556 <_svfiprintf_r+0x2e>
 800954c:	230c      	movs	r3, #12
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009554:	e0d0      	b.n	80096f8 <_svfiprintf_r+0x1d0>
 8009556:	2340      	movs	r3, #64	; 0x40
 8009558:	616b      	str	r3, [r5, #20]
 800955a:	2300      	movs	r3, #0
 800955c:	9309      	str	r3, [sp, #36]	; 0x24
 800955e:	2320      	movs	r3, #32
 8009560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009564:	f8cd 800c 	str.w	r8, [sp, #12]
 8009568:	2330      	movs	r3, #48	; 0x30
 800956a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009710 <_svfiprintf_r+0x1e8>
 800956e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009572:	f04f 0901 	mov.w	r9, #1
 8009576:	4623      	mov	r3, r4
 8009578:	469a      	mov	sl, r3
 800957a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957e:	b10a      	cbz	r2, 8009584 <_svfiprintf_r+0x5c>
 8009580:	2a25      	cmp	r2, #37	; 0x25
 8009582:	d1f9      	bne.n	8009578 <_svfiprintf_r+0x50>
 8009584:	ebba 0b04 	subs.w	fp, sl, r4
 8009588:	d00b      	beq.n	80095a2 <_svfiprintf_r+0x7a>
 800958a:	465b      	mov	r3, fp
 800958c:	4622      	mov	r2, r4
 800958e:	4629      	mov	r1, r5
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ff6f 	bl	8009474 <__ssputs_r>
 8009596:	3001      	adds	r0, #1
 8009598:	f000 80a9 	beq.w	80096ee <_svfiprintf_r+0x1c6>
 800959c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800959e:	445a      	add	r2, fp
 80095a0:	9209      	str	r2, [sp, #36]	; 0x24
 80095a2:	f89a 3000 	ldrb.w	r3, [sl]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80a1 	beq.w	80096ee <_svfiprintf_r+0x1c6>
 80095ac:	2300      	movs	r3, #0
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095b6:	f10a 0a01 	add.w	sl, sl, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	9307      	str	r3, [sp, #28]
 80095be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095c2:	931a      	str	r3, [sp, #104]	; 0x68
 80095c4:	4654      	mov	r4, sl
 80095c6:	2205      	movs	r2, #5
 80095c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095cc:	4850      	ldr	r0, [pc, #320]	; (8009710 <_svfiprintf_r+0x1e8>)
 80095ce:	f7f6 fe07 	bl	80001e0 <memchr>
 80095d2:	9a04      	ldr	r2, [sp, #16]
 80095d4:	b9d8      	cbnz	r0, 800960e <_svfiprintf_r+0xe6>
 80095d6:	06d0      	lsls	r0, r2, #27
 80095d8:	bf44      	itt	mi
 80095da:	2320      	movmi	r3, #32
 80095dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095e0:	0711      	lsls	r1, r2, #28
 80095e2:	bf44      	itt	mi
 80095e4:	232b      	movmi	r3, #43	; 0x2b
 80095e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ea:	f89a 3000 	ldrb.w	r3, [sl]
 80095ee:	2b2a      	cmp	r3, #42	; 0x2a
 80095f0:	d015      	beq.n	800961e <_svfiprintf_r+0xf6>
 80095f2:	9a07      	ldr	r2, [sp, #28]
 80095f4:	4654      	mov	r4, sl
 80095f6:	2000      	movs	r0, #0
 80095f8:	f04f 0c0a 	mov.w	ip, #10
 80095fc:	4621      	mov	r1, r4
 80095fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009602:	3b30      	subs	r3, #48	; 0x30
 8009604:	2b09      	cmp	r3, #9
 8009606:	d94d      	bls.n	80096a4 <_svfiprintf_r+0x17c>
 8009608:	b1b0      	cbz	r0, 8009638 <_svfiprintf_r+0x110>
 800960a:	9207      	str	r2, [sp, #28]
 800960c:	e014      	b.n	8009638 <_svfiprintf_r+0x110>
 800960e:	eba0 0308 	sub.w	r3, r0, r8
 8009612:	fa09 f303 	lsl.w	r3, r9, r3
 8009616:	4313      	orrs	r3, r2
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	46a2      	mov	sl, r4
 800961c:	e7d2      	b.n	80095c4 <_svfiprintf_r+0x9c>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	1d19      	adds	r1, r3, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	9103      	str	r1, [sp, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfbb      	ittet	lt
 800962a:	425b      	neglt	r3, r3
 800962c:	f042 0202 	orrlt.w	r2, r2, #2
 8009630:	9307      	strge	r3, [sp, #28]
 8009632:	9307      	strlt	r3, [sp, #28]
 8009634:	bfb8      	it	lt
 8009636:	9204      	strlt	r2, [sp, #16]
 8009638:	7823      	ldrb	r3, [r4, #0]
 800963a:	2b2e      	cmp	r3, #46	; 0x2e
 800963c:	d10c      	bne.n	8009658 <_svfiprintf_r+0x130>
 800963e:	7863      	ldrb	r3, [r4, #1]
 8009640:	2b2a      	cmp	r3, #42	; 0x2a
 8009642:	d134      	bne.n	80096ae <_svfiprintf_r+0x186>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	9203      	str	r2, [sp, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfb8      	it	lt
 8009650:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009654:	3402      	adds	r4, #2
 8009656:	9305      	str	r3, [sp, #20]
 8009658:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009720 <_svfiprintf_r+0x1f8>
 800965c:	7821      	ldrb	r1, [r4, #0]
 800965e:	2203      	movs	r2, #3
 8009660:	4650      	mov	r0, sl
 8009662:	f7f6 fdbd 	bl	80001e0 <memchr>
 8009666:	b138      	cbz	r0, 8009678 <_svfiprintf_r+0x150>
 8009668:	9b04      	ldr	r3, [sp, #16]
 800966a:	eba0 000a 	sub.w	r0, r0, sl
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	4082      	lsls	r2, r0
 8009672:	4313      	orrs	r3, r2
 8009674:	3401      	adds	r4, #1
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	4825      	ldr	r0, [pc, #148]	; (8009714 <_svfiprintf_r+0x1ec>)
 800967e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009682:	2206      	movs	r2, #6
 8009684:	f7f6 fdac 	bl	80001e0 <memchr>
 8009688:	2800      	cmp	r0, #0
 800968a:	d038      	beq.n	80096fe <_svfiprintf_r+0x1d6>
 800968c:	4b22      	ldr	r3, [pc, #136]	; (8009718 <_svfiprintf_r+0x1f0>)
 800968e:	bb1b      	cbnz	r3, 80096d8 <_svfiprintf_r+0x1b0>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	3307      	adds	r3, #7
 8009694:	f023 0307 	bic.w	r3, r3, #7
 8009698:	3308      	adds	r3, #8
 800969a:	9303      	str	r3, [sp, #12]
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	4433      	add	r3, r6
 80096a0:	9309      	str	r3, [sp, #36]	; 0x24
 80096a2:	e768      	b.n	8009576 <_svfiprintf_r+0x4e>
 80096a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a8:	460c      	mov	r4, r1
 80096aa:	2001      	movs	r0, #1
 80096ac:	e7a6      	b.n	80095fc <_svfiprintf_r+0xd4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	3401      	adds	r4, #1
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	4619      	mov	r1, r3
 80096b6:	f04f 0c0a 	mov.w	ip, #10
 80096ba:	4620      	mov	r0, r4
 80096bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c0:	3a30      	subs	r2, #48	; 0x30
 80096c2:	2a09      	cmp	r2, #9
 80096c4:	d903      	bls.n	80096ce <_svfiprintf_r+0x1a6>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0c6      	beq.n	8009658 <_svfiprintf_r+0x130>
 80096ca:	9105      	str	r1, [sp, #20]
 80096cc:	e7c4      	b.n	8009658 <_svfiprintf_r+0x130>
 80096ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d2:	4604      	mov	r4, r0
 80096d4:	2301      	movs	r3, #1
 80096d6:	e7f0      	b.n	80096ba <_svfiprintf_r+0x192>
 80096d8:	ab03      	add	r3, sp, #12
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	462a      	mov	r2, r5
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <_svfiprintf_r+0x1f4>)
 80096e0:	a904      	add	r1, sp, #16
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7fe fb5a 	bl	8007d9c <_printf_float>
 80096e8:	1c42      	adds	r2, r0, #1
 80096ea:	4606      	mov	r6, r0
 80096ec:	d1d6      	bne.n	800969c <_svfiprintf_r+0x174>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	065b      	lsls	r3, r3, #25
 80096f2:	f53f af2d 	bmi.w	8009550 <_svfiprintf_r+0x28>
 80096f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096f8:	b01d      	add	sp, #116	; 0x74
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	462a      	mov	r2, r5
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <_svfiprintf_r+0x1f4>)
 8009706:	a904      	add	r1, sp, #16
 8009708:	4638      	mov	r0, r7
 800970a:	f7fe fdeb 	bl	80082e4 <_printf_i>
 800970e:	e7eb      	b.n	80096e8 <_svfiprintf_r+0x1c0>
 8009710:	0800b405 	.word	0x0800b405
 8009714:	0800b40f 	.word	0x0800b40f
 8009718:	08007d9d 	.word	0x08007d9d
 800971c:	08009475 	.word	0x08009475
 8009720:	0800b40b 	.word	0x0800b40b

08009724 <malloc>:
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <malloc+0xc>)
 8009726:	4601      	mov	r1, r0
 8009728:	6818      	ldr	r0, [r3, #0]
 800972a:	f000 b823 	b.w	8009774 <_malloc_r>
 800972e:	bf00      	nop
 8009730:	200000f8 	.word	0x200000f8

08009734 <sbrk_aligned>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4e0e      	ldr	r6, [pc, #56]	; (8009770 <sbrk_aligned+0x3c>)
 8009738:	460c      	mov	r4, r1
 800973a:	6831      	ldr	r1, [r6, #0]
 800973c:	4605      	mov	r5, r0
 800973e:	b911      	cbnz	r1, 8009746 <sbrk_aligned+0x12>
 8009740:	f000 fd8e 	bl	800a260 <_sbrk_r>
 8009744:	6030      	str	r0, [r6, #0]
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f000 fd89 	bl	800a260 <_sbrk_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d00a      	beq.n	8009768 <sbrk_aligned+0x34>
 8009752:	1cc4      	adds	r4, r0, #3
 8009754:	f024 0403 	bic.w	r4, r4, #3
 8009758:	42a0      	cmp	r0, r4
 800975a:	d007      	beq.n	800976c <sbrk_aligned+0x38>
 800975c:	1a21      	subs	r1, r4, r0
 800975e:	4628      	mov	r0, r5
 8009760:	f000 fd7e 	bl	800a260 <_sbrk_r>
 8009764:	3001      	adds	r0, #1
 8009766:	d101      	bne.n	800976c <sbrk_aligned+0x38>
 8009768:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800976c:	4620      	mov	r0, r4
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	20003028 	.word	0x20003028

08009774 <_malloc_r>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	1ccd      	adds	r5, r1, #3
 800977a:	f025 0503 	bic.w	r5, r5, #3
 800977e:	3508      	adds	r5, #8
 8009780:	2d0c      	cmp	r5, #12
 8009782:	bf38      	it	cc
 8009784:	250c      	movcc	r5, #12
 8009786:	2d00      	cmp	r5, #0
 8009788:	4607      	mov	r7, r0
 800978a:	db01      	blt.n	8009790 <_malloc_r+0x1c>
 800978c:	42a9      	cmp	r1, r5
 800978e:	d905      	bls.n	800979c <_malloc_r+0x28>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	2600      	movs	r6, #0
 8009796:	4630      	mov	r0, r6
 8009798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800979c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009870 <_malloc_r+0xfc>
 80097a0:	f000 f916 	bl	80099d0 <__malloc_lock>
 80097a4:	f8d8 3000 	ldr.w	r3, [r8]
 80097a8:	461c      	mov	r4, r3
 80097aa:	bb5c      	cbnz	r4, 8009804 <_malloc_r+0x90>
 80097ac:	4629      	mov	r1, r5
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7ff ffc0 	bl	8009734 <sbrk_aligned>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	4604      	mov	r4, r0
 80097b8:	d155      	bne.n	8009866 <_malloc_r+0xf2>
 80097ba:	f8d8 4000 	ldr.w	r4, [r8]
 80097be:	4626      	mov	r6, r4
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	d145      	bne.n	8009850 <_malloc_r+0xdc>
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	d048      	beq.n	800985a <_malloc_r+0xe6>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	4631      	mov	r1, r6
 80097cc:	4638      	mov	r0, r7
 80097ce:	eb04 0903 	add.w	r9, r4, r3
 80097d2:	f000 fd45 	bl	800a260 <_sbrk_r>
 80097d6:	4581      	cmp	r9, r0
 80097d8:	d13f      	bne.n	800985a <_malloc_r+0xe6>
 80097da:	6821      	ldr	r1, [r4, #0]
 80097dc:	1a6d      	subs	r5, r5, r1
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff ffa7 	bl	8009734 <sbrk_aligned>
 80097e6:	3001      	adds	r0, #1
 80097e8:	d037      	beq.n	800985a <_malloc_r+0xe6>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	442b      	add	r3, r5
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	f8d8 3000 	ldr.w	r3, [r8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d038      	beq.n	800986a <_malloc_r+0xf6>
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	42a2      	cmp	r2, r4
 80097fc:	d12b      	bne.n	8009856 <_malloc_r+0xe2>
 80097fe:	2200      	movs	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	e00f      	b.n	8009824 <_malloc_r+0xb0>
 8009804:	6822      	ldr	r2, [r4, #0]
 8009806:	1b52      	subs	r2, r2, r5
 8009808:	d41f      	bmi.n	800984a <_malloc_r+0xd6>
 800980a:	2a0b      	cmp	r2, #11
 800980c:	d917      	bls.n	800983e <_malloc_r+0xca>
 800980e:	1961      	adds	r1, r4, r5
 8009810:	42a3      	cmp	r3, r4
 8009812:	6025      	str	r5, [r4, #0]
 8009814:	bf18      	it	ne
 8009816:	6059      	strne	r1, [r3, #4]
 8009818:	6863      	ldr	r3, [r4, #4]
 800981a:	bf08      	it	eq
 800981c:	f8c8 1000 	streq.w	r1, [r8]
 8009820:	5162      	str	r2, [r4, r5]
 8009822:	604b      	str	r3, [r1, #4]
 8009824:	4638      	mov	r0, r7
 8009826:	f104 060b 	add.w	r6, r4, #11
 800982a:	f000 f8d7 	bl	80099dc <__malloc_unlock>
 800982e:	f026 0607 	bic.w	r6, r6, #7
 8009832:	1d23      	adds	r3, r4, #4
 8009834:	1af2      	subs	r2, r6, r3
 8009836:	d0ae      	beq.n	8009796 <_malloc_r+0x22>
 8009838:	1b9b      	subs	r3, r3, r6
 800983a:	50a3      	str	r3, [r4, r2]
 800983c:	e7ab      	b.n	8009796 <_malloc_r+0x22>
 800983e:	42a3      	cmp	r3, r4
 8009840:	6862      	ldr	r2, [r4, #4]
 8009842:	d1dd      	bne.n	8009800 <_malloc_r+0x8c>
 8009844:	f8c8 2000 	str.w	r2, [r8]
 8009848:	e7ec      	b.n	8009824 <_malloc_r+0xb0>
 800984a:	4623      	mov	r3, r4
 800984c:	6864      	ldr	r4, [r4, #4]
 800984e:	e7ac      	b.n	80097aa <_malloc_r+0x36>
 8009850:	4634      	mov	r4, r6
 8009852:	6876      	ldr	r6, [r6, #4]
 8009854:	e7b4      	b.n	80097c0 <_malloc_r+0x4c>
 8009856:	4613      	mov	r3, r2
 8009858:	e7cc      	b.n	80097f4 <_malloc_r+0x80>
 800985a:	230c      	movs	r3, #12
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	4638      	mov	r0, r7
 8009860:	f000 f8bc 	bl	80099dc <__malloc_unlock>
 8009864:	e797      	b.n	8009796 <_malloc_r+0x22>
 8009866:	6025      	str	r5, [r4, #0]
 8009868:	e7dc      	b.n	8009824 <_malloc_r+0xb0>
 800986a:	605b      	str	r3, [r3, #4]
 800986c:	deff      	udf	#255	; 0xff
 800986e:	bf00      	nop
 8009870:	20003024 	.word	0x20003024

08009874 <__sflush_r>:
 8009874:	898a      	ldrh	r2, [r1, #12]
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	4605      	mov	r5, r0
 800987c:	0710      	lsls	r0, r2, #28
 800987e:	460c      	mov	r4, r1
 8009880:	d458      	bmi.n	8009934 <__sflush_r+0xc0>
 8009882:	684b      	ldr	r3, [r1, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dc05      	bgt.n	8009894 <__sflush_r+0x20>
 8009888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	dc02      	bgt.n	8009894 <__sflush_r+0x20>
 800988e:	2000      	movs	r0, #0
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009896:	2e00      	cmp	r6, #0
 8009898:	d0f9      	beq.n	800988e <__sflush_r+0x1a>
 800989a:	2300      	movs	r3, #0
 800989c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a0:	682f      	ldr	r7, [r5, #0]
 80098a2:	6a21      	ldr	r1, [r4, #32]
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	d032      	beq.n	800990e <__sflush_r+0x9a>
 80098a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	075a      	lsls	r2, r3, #29
 80098ae:	d505      	bpl.n	80098bc <__sflush_r+0x48>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	1ac0      	subs	r0, r0, r3
 80098b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b6:	b10b      	cbz	r3, 80098bc <__sflush_r+0x48>
 80098b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ba:	1ac0      	subs	r0, r0, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	4602      	mov	r2, r0
 80098c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098c2:	6a21      	ldr	r1, [r4, #32]
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	d106      	bne.n	80098dc <__sflush_r+0x68>
 80098ce:	6829      	ldr	r1, [r5, #0]
 80098d0:	291d      	cmp	r1, #29
 80098d2:	d82b      	bhi.n	800992c <__sflush_r+0xb8>
 80098d4:	4a29      	ldr	r2, [pc, #164]	; (800997c <__sflush_r+0x108>)
 80098d6:	410a      	asrs	r2, r1
 80098d8:	07d6      	lsls	r6, r2, #31
 80098da:	d427      	bmi.n	800992c <__sflush_r+0xb8>
 80098dc:	2200      	movs	r2, #0
 80098de:	6062      	str	r2, [r4, #4]
 80098e0:	04d9      	lsls	r1, r3, #19
 80098e2:	6922      	ldr	r2, [r4, #16]
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	d504      	bpl.n	80098f2 <__sflush_r+0x7e>
 80098e8:	1c42      	adds	r2, r0, #1
 80098ea:	d101      	bne.n	80098f0 <__sflush_r+0x7c>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b903      	cbnz	r3, 80098f2 <__sflush_r+0x7e>
 80098f0:	6560      	str	r0, [r4, #84]	; 0x54
 80098f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f4:	602f      	str	r7, [r5, #0]
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d0c9      	beq.n	800988e <__sflush_r+0x1a>
 80098fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098fe:	4299      	cmp	r1, r3
 8009900:	d002      	beq.n	8009908 <__sflush_r+0x94>
 8009902:	4628      	mov	r0, r5
 8009904:	f000 fd02 	bl	800a30c <_free_r>
 8009908:	2000      	movs	r0, #0
 800990a:	6360      	str	r0, [r4, #52]	; 0x34
 800990c:	e7c0      	b.n	8009890 <__sflush_r+0x1c>
 800990e:	2301      	movs	r3, #1
 8009910:	4628      	mov	r0, r5
 8009912:	47b0      	blx	r6
 8009914:	1c41      	adds	r1, r0, #1
 8009916:	d1c8      	bne.n	80098aa <__sflush_r+0x36>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c5      	beq.n	80098aa <__sflush_r+0x36>
 800991e:	2b1d      	cmp	r3, #29
 8009920:	d001      	beq.n	8009926 <__sflush_r+0xb2>
 8009922:	2b16      	cmp	r3, #22
 8009924:	d101      	bne.n	800992a <__sflush_r+0xb6>
 8009926:	602f      	str	r7, [r5, #0]
 8009928:	e7b1      	b.n	800988e <__sflush_r+0x1a>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	e7ad      	b.n	8009890 <__sflush_r+0x1c>
 8009934:	690f      	ldr	r7, [r1, #16]
 8009936:	2f00      	cmp	r7, #0
 8009938:	d0a9      	beq.n	800988e <__sflush_r+0x1a>
 800993a:	0793      	lsls	r3, r2, #30
 800993c:	680e      	ldr	r6, [r1, #0]
 800993e:	bf08      	it	eq
 8009940:	694b      	ldreq	r3, [r1, #20]
 8009942:	600f      	str	r7, [r1, #0]
 8009944:	bf18      	it	ne
 8009946:	2300      	movne	r3, #0
 8009948:	eba6 0807 	sub.w	r8, r6, r7
 800994c:	608b      	str	r3, [r1, #8]
 800994e:	f1b8 0f00 	cmp.w	r8, #0
 8009952:	dd9c      	ble.n	800988e <__sflush_r+0x1a>
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009958:	4643      	mov	r3, r8
 800995a:	463a      	mov	r2, r7
 800995c:	4628      	mov	r0, r5
 800995e:	47b0      	blx	r6
 8009960:	2800      	cmp	r0, #0
 8009962:	dc06      	bgt.n	8009972 <__sflush_r+0xfe>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009970:	e78e      	b.n	8009890 <__sflush_r+0x1c>
 8009972:	4407      	add	r7, r0
 8009974:	eba8 0800 	sub.w	r8, r8, r0
 8009978:	e7e9      	b.n	800994e <__sflush_r+0xda>
 800997a:	bf00      	nop
 800997c:	dfbffffe 	.word	0xdfbffffe

08009980 <_fflush_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b913      	cbnz	r3, 8009990 <_fflush_r+0x10>
 800998a:	2500      	movs	r5, #0
 800998c:	4628      	mov	r0, r5
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	b118      	cbz	r0, 800999a <_fflush_r+0x1a>
 8009992:	6a03      	ldr	r3, [r0, #32]
 8009994:	b90b      	cbnz	r3, 800999a <_fflush_r+0x1a>
 8009996:	f7fe fe53 	bl	8008640 <__sinit>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f3      	beq.n	800998a <_fflush_r+0xa>
 80099a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a4:	07d0      	lsls	r0, r2, #31
 80099a6:	d404      	bmi.n	80099b2 <_fflush_r+0x32>
 80099a8:	0599      	lsls	r1, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_fflush_r+0x32>
 80099ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ae:	f7fe fed4 	bl	800875a <__retarget_lock_acquire_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff ff5d 	bl	8009874 <__sflush_r>
 80099ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099bc:	07da      	lsls	r2, r3, #31
 80099be:	4605      	mov	r5, r0
 80099c0:	d4e4      	bmi.n	800998c <_fflush_r+0xc>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	059b      	lsls	r3, r3, #22
 80099c6:	d4e1      	bmi.n	800998c <_fflush_r+0xc>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f7fe fec7 	bl	800875c <__retarget_lock_release_recursive>
 80099ce:	e7dd      	b.n	800998c <_fflush_r+0xc>

080099d0 <__malloc_lock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__malloc_lock+0x8>)
 80099d2:	f7fe bec2 	b.w	800875a <__retarget_lock_acquire_recursive>
 80099d6:	bf00      	nop
 80099d8:	20003020 	.word	0x20003020

080099dc <__malloc_unlock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_unlock+0x8>)
 80099de:	f7fe bebd 	b.w	800875c <__retarget_lock_release_recursive>
 80099e2:	bf00      	nop
 80099e4:	20003020 	.word	0x20003020

080099e8 <_Balloc>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	69c6      	ldr	r6, [r0, #28]
 80099ec:	4604      	mov	r4, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	b976      	cbnz	r6, 8009a10 <_Balloc+0x28>
 80099f2:	2010      	movs	r0, #16
 80099f4:	f7ff fe96 	bl	8009724 <malloc>
 80099f8:	4602      	mov	r2, r0
 80099fa:	61e0      	str	r0, [r4, #28]
 80099fc:	b920      	cbnz	r0, 8009a08 <_Balloc+0x20>
 80099fe:	4b18      	ldr	r3, [pc, #96]	; (8009a60 <_Balloc+0x78>)
 8009a00:	4818      	ldr	r0, [pc, #96]	; (8009a64 <_Balloc+0x7c>)
 8009a02:	216b      	movs	r1, #107	; 0x6b
 8009a04:	f000 fc4e 	bl	800a2a4 <__assert_func>
 8009a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a0c:	6006      	str	r6, [r0, #0]
 8009a0e:	60c6      	str	r6, [r0, #12]
 8009a10:	69e6      	ldr	r6, [r4, #28]
 8009a12:	68f3      	ldr	r3, [r6, #12]
 8009a14:	b183      	cbz	r3, 8009a38 <_Balloc+0x50>
 8009a16:	69e3      	ldr	r3, [r4, #28]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a1e:	b9b8      	cbnz	r0, 8009a50 <_Balloc+0x68>
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f605 	lsl.w	r6, r1, r5
 8009a26:	1d72      	adds	r2, r6, #5
 8009a28:	0092      	lsls	r2, r2, #2
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fc58 	bl	800a2e0 <_calloc_r>
 8009a30:	b160      	cbz	r0, 8009a4c <_Balloc+0x64>
 8009a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a36:	e00e      	b.n	8009a56 <_Balloc+0x6e>
 8009a38:	2221      	movs	r2, #33	; 0x21
 8009a3a:	2104      	movs	r1, #4
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fc4f 	bl	800a2e0 <_calloc_r>
 8009a42:	69e3      	ldr	r3, [r4, #28]
 8009a44:	60f0      	str	r0, [r6, #12]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e4      	bne.n	8009a16 <_Balloc+0x2e>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	6802      	ldr	r2, [r0, #0]
 8009a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a56:	2300      	movs	r3, #0
 8009a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a5c:	e7f7      	b.n	8009a4e <_Balloc+0x66>
 8009a5e:	bf00      	nop
 8009a60:	0800b385 	.word	0x0800b385
 8009a64:	0800b416 	.word	0x0800b416

08009a68 <_Bfree>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	69c6      	ldr	r6, [r0, #28]
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	b976      	cbnz	r6, 8009a90 <_Bfree+0x28>
 8009a72:	2010      	movs	r0, #16
 8009a74:	f7ff fe56 	bl	8009724 <malloc>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	61e8      	str	r0, [r5, #28]
 8009a7c:	b920      	cbnz	r0, 8009a88 <_Bfree+0x20>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <_Bfree+0x3c>)
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <_Bfree+0x40>)
 8009a82:	218f      	movs	r1, #143	; 0x8f
 8009a84:	f000 fc0e 	bl	800a2a4 <__assert_func>
 8009a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a8c:	6006      	str	r6, [r0, #0]
 8009a8e:	60c6      	str	r6, [r0, #12]
 8009a90:	b13c      	cbz	r4, 8009aa2 <_Bfree+0x3a>
 8009a92:	69eb      	ldr	r3, [r5, #28]
 8009a94:	6862      	ldr	r2, [r4, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a9c:	6021      	str	r1, [r4, #0]
 8009a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	0800b385 	.word	0x0800b385
 8009aa8:	0800b416 	.word	0x0800b416

08009aac <__multadd>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	690d      	ldr	r5, [r1, #16]
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	461e      	mov	r6, r3
 8009ab8:	f101 0c14 	add.w	ip, r1, #20
 8009abc:	2000      	movs	r0, #0
 8009abe:	f8dc 3000 	ldr.w	r3, [ip]
 8009ac2:	b299      	uxth	r1, r3
 8009ac4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac8:	0c1e      	lsrs	r6, r3, #16
 8009aca:	0c0b      	lsrs	r3, r1, #16
 8009acc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ad0:	b289      	uxth	r1, r1
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad8:	4285      	cmp	r5, r0
 8009ada:	f84c 1b04 	str.w	r1, [ip], #4
 8009ade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ae2:	dcec      	bgt.n	8009abe <__multadd+0x12>
 8009ae4:	b30e      	cbz	r6, 8009b2a <__multadd+0x7e>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	dc19      	bgt.n	8009b20 <__multadd+0x74>
 8009aec:	6861      	ldr	r1, [r4, #4]
 8009aee:	4638      	mov	r0, r7
 8009af0:	3101      	adds	r1, #1
 8009af2:	f7ff ff79 	bl	80099e8 <_Balloc>
 8009af6:	4680      	mov	r8, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <__multadd+0x5a>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <__multadd+0x84>)
 8009afe:	480d      	ldr	r0, [pc, #52]	; (8009b34 <__multadd+0x88>)
 8009b00:	21ba      	movs	r1, #186	; 0xba
 8009b02:	f000 fbcf 	bl	800a2a4 <__assert_func>
 8009b06:	6922      	ldr	r2, [r4, #16]
 8009b08:	3202      	adds	r2, #2
 8009b0a:	f104 010c 	add.w	r1, r4, #12
 8009b0e:	0092      	lsls	r2, r2, #2
 8009b10:	300c      	adds	r0, #12
 8009b12:	f7fe fe24 	bl	800875e <memcpy>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ffa5 	bl	8009a68 <_Bfree>
 8009b1e:	4644      	mov	r4, r8
 8009b20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b24:	3501      	adds	r5, #1
 8009b26:	615e      	str	r6, [r3, #20]
 8009b28:	6125      	str	r5, [r4, #16]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b30:	0800b3f4 	.word	0x0800b3f4
 8009b34:	0800b416 	.word	0x0800b416

08009b38 <__hi0bits>:
 8009b38:	0c03      	lsrs	r3, r0, #16
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	b9d3      	cbnz	r3, 8009b74 <__hi0bits+0x3c>
 8009b3e:	0400      	lsls	r0, r0, #16
 8009b40:	2310      	movs	r3, #16
 8009b42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b46:	bf04      	itt	eq
 8009b48:	0200      	lsleq	r0, r0, #8
 8009b4a:	3308      	addeq	r3, #8
 8009b4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b50:	bf04      	itt	eq
 8009b52:	0100      	lsleq	r0, r0, #4
 8009b54:	3304      	addeq	r3, #4
 8009b56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b5a:	bf04      	itt	eq
 8009b5c:	0080      	lsleq	r0, r0, #2
 8009b5e:	3302      	addeq	r3, #2
 8009b60:	2800      	cmp	r0, #0
 8009b62:	db05      	blt.n	8009b70 <__hi0bits+0x38>
 8009b64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b68:	f103 0301 	add.w	r3, r3, #1
 8009b6c:	bf08      	it	eq
 8009b6e:	2320      	moveq	r3, #32
 8009b70:	4618      	mov	r0, r3
 8009b72:	4770      	bx	lr
 8009b74:	2300      	movs	r3, #0
 8009b76:	e7e4      	b.n	8009b42 <__hi0bits+0xa>

08009b78 <__lo0bits>:
 8009b78:	6803      	ldr	r3, [r0, #0]
 8009b7a:	f013 0207 	ands.w	r2, r3, #7
 8009b7e:	d00c      	beq.n	8009b9a <__lo0bits+0x22>
 8009b80:	07d9      	lsls	r1, r3, #31
 8009b82:	d422      	bmi.n	8009bca <__lo0bits+0x52>
 8009b84:	079a      	lsls	r2, r3, #30
 8009b86:	bf49      	itett	mi
 8009b88:	085b      	lsrmi	r3, r3, #1
 8009b8a:	089b      	lsrpl	r3, r3, #2
 8009b8c:	6003      	strmi	r3, [r0, #0]
 8009b8e:	2201      	movmi	r2, #1
 8009b90:	bf5c      	itt	pl
 8009b92:	6003      	strpl	r3, [r0, #0]
 8009b94:	2202      	movpl	r2, #2
 8009b96:	4610      	mov	r0, r2
 8009b98:	4770      	bx	lr
 8009b9a:	b299      	uxth	r1, r3
 8009b9c:	b909      	cbnz	r1, 8009ba2 <__lo0bits+0x2a>
 8009b9e:	0c1b      	lsrs	r3, r3, #16
 8009ba0:	2210      	movs	r2, #16
 8009ba2:	b2d9      	uxtb	r1, r3
 8009ba4:	b909      	cbnz	r1, 8009baa <__lo0bits+0x32>
 8009ba6:	3208      	adds	r2, #8
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	0719      	lsls	r1, r3, #28
 8009bac:	bf04      	itt	eq
 8009bae:	091b      	lsreq	r3, r3, #4
 8009bb0:	3204      	addeq	r2, #4
 8009bb2:	0799      	lsls	r1, r3, #30
 8009bb4:	bf04      	itt	eq
 8009bb6:	089b      	lsreq	r3, r3, #2
 8009bb8:	3202      	addeq	r2, #2
 8009bba:	07d9      	lsls	r1, r3, #31
 8009bbc:	d403      	bmi.n	8009bc6 <__lo0bits+0x4e>
 8009bbe:	085b      	lsrs	r3, r3, #1
 8009bc0:	f102 0201 	add.w	r2, r2, #1
 8009bc4:	d003      	beq.n	8009bce <__lo0bits+0x56>
 8009bc6:	6003      	str	r3, [r0, #0]
 8009bc8:	e7e5      	b.n	8009b96 <__lo0bits+0x1e>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	e7e3      	b.n	8009b96 <__lo0bits+0x1e>
 8009bce:	2220      	movs	r2, #32
 8009bd0:	e7e1      	b.n	8009b96 <__lo0bits+0x1e>
	...

08009bd4 <__i2b>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	2101      	movs	r1, #1
 8009bda:	f7ff ff05 	bl	80099e8 <_Balloc>
 8009bde:	4602      	mov	r2, r0
 8009be0:	b928      	cbnz	r0, 8009bee <__i2b+0x1a>
 8009be2:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <__i2b+0x24>)
 8009be4:	4805      	ldr	r0, [pc, #20]	; (8009bfc <__i2b+0x28>)
 8009be6:	f240 1145 	movw	r1, #325	; 0x145
 8009bea:	f000 fb5b 	bl	800a2a4 <__assert_func>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	6144      	str	r4, [r0, #20]
 8009bf2:	6103      	str	r3, [r0, #16]
 8009bf4:	bd10      	pop	{r4, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800b3f4 	.word	0x0800b3f4
 8009bfc:	0800b416 	.word	0x0800b416

08009c00 <__multiply>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4691      	mov	r9, r2
 8009c06:	690a      	ldr	r2, [r1, #16]
 8009c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	bfb8      	it	lt
 8009c10:	460b      	movlt	r3, r1
 8009c12:	460c      	mov	r4, r1
 8009c14:	bfbc      	itt	lt
 8009c16:	464c      	movlt	r4, r9
 8009c18:	4699      	movlt	r9, r3
 8009c1a:	6927      	ldr	r7, [r4, #16]
 8009c1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c20:	68a3      	ldr	r3, [r4, #8]
 8009c22:	6861      	ldr	r1, [r4, #4]
 8009c24:	eb07 060a 	add.w	r6, r7, sl
 8009c28:	42b3      	cmp	r3, r6
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	bfb8      	it	lt
 8009c2e:	3101      	addlt	r1, #1
 8009c30:	f7ff feda 	bl	80099e8 <_Balloc>
 8009c34:	b930      	cbnz	r0, 8009c44 <__multiply+0x44>
 8009c36:	4602      	mov	r2, r0
 8009c38:	4b44      	ldr	r3, [pc, #272]	; (8009d4c <__multiply+0x14c>)
 8009c3a:	4845      	ldr	r0, [pc, #276]	; (8009d50 <__multiply+0x150>)
 8009c3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c40:	f000 fb30 	bl	800a2a4 <__assert_func>
 8009c44:	f100 0514 	add.w	r5, r0, #20
 8009c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4543      	cmp	r3, r8
 8009c52:	d321      	bcc.n	8009c98 <__multiply+0x98>
 8009c54:	f104 0314 	add.w	r3, r4, #20
 8009c58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c5c:	f109 0314 	add.w	r3, r9, #20
 8009c60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c64:	9202      	str	r2, [sp, #8]
 8009c66:	1b3a      	subs	r2, r7, r4
 8009c68:	3a15      	subs	r2, #21
 8009c6a:	f022 0203 	bic.w	r2, r2, #3
 8009c6e:	3204      	adds	r2, #4
 8009c70:	f104 0115 	add.w	r1, r4, #21
 8009c74:	428f      	cmp	r7, r1
 8009c76:	bf38      	it	cc
 8009c78:	2204      	movcc	r2, #4
 8009c7a:	9201      	str	r2, [sp, #4]
 8009c7c:	9a02      	ldr	r2, [sp, #8]
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d80c      	bhi.n	8009c9e <__multiply+0x9e>
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	dd03      	ble.n	8009c90 <__multiply+0x90>
 8009c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d05b      	beq.n	8009d48 <__multiply+0x148>
 8009c90:	6106      	str	r6, [r0, #16]
 8009c92:	b005      	add	sp, #20
 8009c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c98:	f843 2b04 	str.w	r2, [r3], #4
 8009c9c:	e7d8      	b.n	8009c50 <__multiply+0x50>
 8009c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ca2:	f1ba 0f00 	cmp.w	sl, #0
 8009ca6:	d024      	beq.n	8009cf2 <__multiply+0xf2>
 8009ca8:	f104 0e14 	add.w	lr, r4, #20
 8009cac:	46a9      	mov	r9, r5
 8009cae:	f04f 0c00 	mov.w	ip, #0
 8009cb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8009cba:	fa1f fb82 	uxth.w	fp, r2
 8009cbe:	b289      	uxth	r1, r1
 8009cc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8009ccc:	4461      	add	r1, ip
 8009cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cda:	b289      	uxth	r1, r1
 8009cdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ce0:	4577      	cmp	r7, lr
 8009ce2:	f849 1b04 	str.w	r1, [r9], #4
 8009ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cea:	d8e2      	bhi.n	8009cb2 <__multiply+0xb2>
 8009cec:	9a01      	ldr	r2, [sp, #4]
 8009cee:	f845 c002 	str.w	ip, [r5, r2]
 8009cf2:	9a03      	ldr	r2, [sp, #12]
 8009cf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	f1b9 0f00 	cmp.w	r9, #0
 8009cfe:	d021      	beq.n	8009d44 <__multiply+0x144>
 8009d00:	6829      	ldr	r1, [r5, #0]
 8009d02:	f104 0c14 	add.w	ip, r4, #20
 8009d06:	46ae      	mov	lr, r5
 8009d08:	f04f 0a00 	mov.w	sl, #0
 8009d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d14:	fb09 220b 	mla	r2, r9, fp, r2
 8009d18:	4452      	add	r2, sl
 8009d1a:	b289      	uxth	r1, r1
 8009d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d20:	f84e 1b04 	str.w	r1, [lr], #4
 8009d24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d2c:	f8be 1000 	ldrh.w	r1, [lr]
 8009d30:	fb09 110a 	mla	r1, r9, sl, r1
 8009d34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d38:	4567      	cmp	r7, ip
 8009d3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d3e:	d8e5      	bhi.n	8009d0c <__multiply+0x10c>
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	50a9      	str	r1, [r5, r2]
 8009d44:	3504      	adds	r5, #4
 8009d46:	e799      	b.n	8009c7c <__multiply+0x7c>
 8009d48:	3e01      	subs	r6, #1
 8009d4a:	e79b      	b.n	8009c84 <__multiply+0x84>
 8009d4c:	0800b3f4 	.word	0x0800b3f4
 8009d50:	0800b416 	.word	0x0800b416

08009d54 <__pow5mult>:
 8009d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	4615      	mov	r5, r2
 8009d5a:	f012 0203 	ands.w	r2, r2, #3
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	d007      	beq.n	8009d74 <__pow5mult+0x20>
 8009d64:	4c25      	ldr	r4, [pc, #148]	; (8009dfc <__pow5mult+0xa8>)
 8009d66:	3a01      	subs	r2, #1
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d6e:	f7ff fe9d 	bl	8009aac <__multadd>
 8009d72:	4607      	mov	r7, r0
 8009d74:	10ad      	asrs	r5, r5, #2
 8009d76:	d03d      	beq.n	8009df4 <__pow5mult+0xa0>
 8009d78:	69f4      	ldr	r4, [r6, #28]
 8009d7a:	b97c      	cbnz	r4, 8009d9c <__pow5mult+0x48>
 8009d7c:	2010      	movs	r0, #16
 8009d7e:	f7ff fcd1 	bl	8009724 <malloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	61f0      	str	r0, [r6, #28]
 8009d86:	b928      	cbnz	r0, 8009d94 <__pow5mult+0x40>
 8009d88:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <__pow5mult+0xac>)
 8009d8a:	481e      	ldr	r0, [pc, #120]	; (8009e04 <__pow5mult+0xb0>)
 8009d8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d90:	f000 fa88 	bl	800a2a4 <__assert_func>
 8009d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d98:	6004      	str	r4, [r0, #0]
 8009d9a:	60c4      	str	r4, [r0, #12]
 8009d9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009da4:	b94c      	cbnz	r4, 8009dba <__pow5mult+0x66>
 8009da6:	f240 2171 	movw	r1, #625	; 0x271
 8009daa:	4630      	mov	r0, r6
 8009dac:	f7ff ff12 	bl	8009bd4 <__i2b>
 8009db0:	2300      	movs	r3, #0
 8009db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009db6:	4604      	mov	r4, r0
 8009db8:	6003      	str	r3, [r0, #0]
 8009dba:	f04f 0900 	mov.w	r9, #0
 8009dbe:	07eb      	lsls	r3, r5, #31
 8009dc0:	d50a      	bpl.n	8009dd8 <__pow5mult+0x84>
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff ff1a 	bl	8009c00 <__multiply>
 8009dcc:	4639      	mov	r1, r7
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff fe49 	bl	8009a68 <_Bfree>
 8009dd6:	4647      	mov	r7, r8
 8009dd8:	106d      	asrs	r5, r5, #1
 8009dda:	d00b      	beq.n	8009df4 <__pow5mult+0xa0>
 8009ddc:	6820      	ldr	r0, [r4, #0]
 8009dde:	b938      	cbnz	r0, 8009df0 <__pow5mult+0x9c>
 8009de0:	4622      	mov	r2, r4
 8009de2:	4621      	mov	r1, r4
 8009de4:	4630      	mov	r0, r6
 8009de6:	f7ff ff0b 	bl	8009c00 <__multiply>
 8009dea:	6020      	str	r0, [r4, #0]
 8009dec:	f8c0 9000 	str.w	r9, [r0]
 8009df0:	4604      	mov	r4, r0
 8009df2:	e7e4      	b.n	8009dbe <__pow5mult+0x6a>
 8009df4:	4638      	mov	r0, r7
 8009df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dfa:	bf00      	nop
 8009dfc:	0800b560 	.word	0x0800b560
 8009e00:	0800b385 	.word	0x0800b385
 8009e04:	0800b416 	.word	0x0800b416

08009e08 <__lshift>:
 8009e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	6849      	ldr	r1, [r1, #4]
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e20:	f108 0601 	add.w	r6, r8, #1
 8009e24:	42b3      	cmp	r3, r6
 8009e26:	db0b      	blt.n	8009e40 <__lshift+0x38>
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff fddd 	bl	80099e8 <_Balloc>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b948      	cbnz	r0, 8009e46 <__lshift+0x3e>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4b28      	ldr	r3, [pc, #160]	; (8009ed8 <__lshift+0xd0>)
 8009e36:	4829      	ldr	r0, [pc, #164]	; (8009edc <__lshift+0xd4>)
 8009e38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e3c:	f000 fa32 	bl	800a2a4 <__assert_func>
 8009e40:	3101      	adds	r1, #1
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	e7ee      	b.n	8009e24 <__lshift+0x1c>
 8009e46:	2300      	movs	r3, #0
 8009e48:	f100 0114 	add.w	r1, r0, #20
 8009e4c:	f100 0210 	add.w	r2, r0, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	4553      	cmp	r3, sl
 8009e54:	db33      	blt.n	8009ebe <__lshift+0xb6>
 8009e56:	6920      	ldr	r0, [r4, #16]
 8009e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e5c:	f104 0314 	add.w	r3, r4, #20
 8009e60:	f019 091f 	ands.w	r9, r9, #31
 8009e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e6c:	d02b      	beq.n	8009ec6 <__lshift+0xbe>
 8009e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e72:	468a      	mov	sl, r1
 8009e74:	2200      	movs	r2, #0
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	fa00 f009 	lsl.w	r0, r0, r9
 8009e7c:	4310      	orrs	r0, r2
 8009e7e:	f84a 0b04 	str.w	r0, [sl], #4
 8009e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e86:	459c      	cmp	ip, r3
 8009e88:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e8c:	d8f3      	bhi.n	8009e76 <__lshift+0x6e>
 8009e8e:	ebac 0304 	sub.w	r3, ip, r4
 8009e92:	3b15      	subs	r3, #21
 8009e94:	f023 0303 	bic.w	r3, r3, #3
 8009e98:	3304      	adds	r3, #4
 8009e9a:	f104 0015 	add.w	r0, r4, #21
 8009e9e:	4584      	cmp	ip, r0
 8009ea0:	bf38      	it	cc
 8009ea2:	2304      	movcc	r3, #4
 8009ea4:	50ca      	str	r2, [r1, r3]
 8009ea6:	b10a      	cbz	r2, 8009eac <__lshift+0xa4>
 8009ea8:	f108 0602 	add.w	r6, r8, #2
 8009eac:	3e01      	subs	r6, #1
 8009eae:	4638      	mov	r0, r7
 8009eb0:	612e      	str	r6, [r5, #16]
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f7ff fdd8 	bl	8009a68 <_Bfree>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	e7c5      	b.n	8009e52 <__lshift+0x4a>
 8009ec6:	3904      	subs	r1, #4
 8009ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ed0:	459c      	cmp	ip, r3
 8009ed2:	d8f9      	bhi.n	8009ec8 <__lshift+0xc0>
 8009ed4:	e7ea      	b.n	8009eac <__lshift+0xa4>
 8009ed6:	bf00      	nop
 8009ed8:	0800b3f4 	.word	0x0800b3f4
 8009edc:	0800b416 	.word	0x0800b416

08009ee0 <__mcmp>:
 8009ee0:	b530      	push	{r4, r5, lr}
 8009ee2:	6902      	ldr	r2, [r0, #16]
 8009ee4:	690c      	ldr	r4, [r1, #16]
 8009ee6:	1b12      	subs	r2, r2, r4
 8009ee8:	d10e      	bne.n	8009f08 <__mcmp+0x28>
 8009eea:	f100 0314 	add.w	r3, r0, #20
 8009eee:	3114      	adds	r1, #20
 8009ef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009efc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f00:	42a5      	cmp	r5, r4
 8009f02:	d003      	beq.n	8009f0c <__mcmp+0x2c>
 8009f04:	d305      	bcc.n	8009f12 <__mcmp+0x32>
 8009f06:	2201      	movs	r2, #1
 8009f08:	4610      	mov	r0, r2
 8009f0a:	bd30      	pop	{r4, r5, pc}
 8009f0c:	4283      	cmp	r3, r0
 8009f0e:	d3f3      	bcc.n	8009ef8 <__mcmp+0x18>
 8009f10:	e7fa      	b.n	8009f08 <__mcmp+0x28>
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f16:	e7f7      	b.n	8009f08 <__mcmp+0x28>

08009f18 <__mdiff>:
 8009f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	4606      	mov	r6, r0
 8009f20:	4611      	mov	r1, r2
 8009f22:	4620      	mov	r0, r4
 8009f24:	4690      	mov	r8, r2
 8009f26:	f7ff ffdb 	bl	8009ee0 <__mcmp>
 8009f2a:	1e05      	subs	r5, r0, #0
 8009f2c:	d110      	bne.n	8009f50 <__mdiff+0x38>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7ff fd59 	bl	80099e8 <_Balloc>
 8009f36:	b930      	cbnz	r0, 8009f46 <__mdiff+0x2e>
 8009f38:	4b3a      	ldr	r3, [pc, #232]	; (800a024 <__mdiff+0x10c>)
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	f240 2137 	movw	r1, #567	; 0x237
 8009f40:	4839      	ldr	r0, [pc, #228]	; (800a028 <__mdiff+0x110>)
 8009f42:	f000 f9af 	bl	800a2a4 <__assert_func>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	bfa4      	itt	ge
 8009f52:	4643      	movge	r3, r8
 8009f54:	46a0      	movge	r8, r4
 8009f56:	4630      	mov	r0, r6
 8009f58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f5c:	bfa6      	itte	ge
 8009f5e:	461c      	movge	r4, r3
 8009f60:	2500      	movge	r5, #0
 8009f62:	2501      	movlt	r5, #1
 8009f64:	f7ff fd40 	bl	80099e8 <_Balloc>
 8009f68:	b920      	cbnz	r0, 8009f74 <__mdiff+0x5c>
 8009f6a:	4b2e      	ldr	r3, [pc, #184]	; (800a024 <__mdiff+0x10c>)
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f240 2145 	movw	r1, #581	; 0x245
 8009f72:	e7e5      	b.n	8009f40 <__mdiff+0x28>
 8009f74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f78:	6926      	ldr	r6, [r4, #16]
 8009f7a:	60c5      	str	r5, [r0, #12]
 8009f7c:	f104 0914 	add.w	r9, r4, #20
 8009f80:	f108 0514 	add.w	r5, r8, #20
 8009f84:	f100 0e14 	add.w	lr, r0, #20
 8009f88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f90:	f108 0210 	add.w	r2, r8, #16
 8009f94:	46f2      	mov	sl, lr
 8009f96:	2100      	movs	r1, #0
 8009f98:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fa0:	fa11 f88b 	uxtah	r8, r1, fp
 8009fa4:	b299      	uxth	r1, r3
 8009fa6:	0c1b      	lsrs	r3, r3, #16
 8009fa8:	eba8 0801 	sub.w	r8, r8, r1
 8009fac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fb4:	fa1f f888 	uxth.w	r8, r8
 8009fb8:	1419      	asrs	r1, r3, #16
 8009fba:	454e      	cmp	r6, r9
 8009fbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fc0:	f84a 3b04 	str.w	r3, [sl], #4
 8009fc4:	d8e8      	bhi.n	8009f98 <__mdiff+0x80>
 8009fc6:	1b33      	subs	r3, r6, r4
 8009fc8:	3b15      	subs	r3, #21
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	3304      	adds	r3, #4
 8009fd0:	3415      	adds	r4, #21
 8009fd2:	42a6      	cmp	r6, r4
 8009fd4:	bf38      	it	cc
 8009fd6:	2304      	movcc	r3, #4
 8009fd8:	441d      	add	r5, r3
 8009fda:	4473      	add	r3, lr
 8009fdc:	469e      	mov	lr, r3
 8009fde:	462e      	mov	r6, r5
 8009fe0:	4566      	cmp	r6, ip
 8009fe2:	d30e      	bcc.n	800a002 <__mdiff+0xea>
 8009fe4:	f10c 0203 	add.w	r2, ip, #3
 8009fe8:	1b52      	subs	r2, r2, r5
 8009fea:	f022 0203 	bic.w	r2, r2, #3
 8009fee:	3d03      	subs	r5, #3
 8009ff0:	45ac      	cmp	ip, r5
 8009ff2:	bf38      	it	cc
 8009ff4:	2200      	movcc	r2, #0
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ffc:	b17a      	cbz	r2, 800a01e <__mdiff+0x106>
 8009ffe:	6107      	str	r7, [r0, #16]
 800a000:	e7a4      	b.n	8009f4c <__mdiff+0x34>
 800a002:	f856 8b04 	ldr.w	r8, [r6], #4
 800a006:	fa11 f288 	uxtah	r2, r1, r8
 800a00a:	1414      	asrs	r4, r2, #16
 800a00c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a010:	b292      	uxth	r2, r2
 800a012:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a016:	f84e 2b04 	str.w	r2, [lr], #4
 800a01a:	1421      	asrs	r1, r4, #16
 800a01c:	e7e0      	b.n	8009fe0 <__mdiff+0xc8>
 800a01e:	3f01      	subs	r7, #1
 800a020:	e7ea      	b.n	8009ff8 <__mdiff+0xe0>
 800a022:	bf00      	nop
 800a024:	0800b3f4 	.word	0x0800b3f4
 800a028:	0800b416 	.word	0x0800b416

0800a02c <__d2b>:
 800a02c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a030:	460f      	mov	r7, r1
 800a032:	2101      	movs	r1, #1
 800a034:	ec59 8b10 	vmov	r8, r9, d0
 800a038:	4616      	mov	r6, r2
 800a03a:	f7ff fcd5 	bl	80099e8 <_Balloc>
 800a03e:	4604      	mov	r4, r0
 800a040:	b930      	cbnz	r0, 800a050 <__d2b+0x24>
 800a042:	4602      	mov	r2, r0
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <__d2b+0xac>)
 800a046:	4825      	ldr	r0, [pc, #148]	; (800a0dc <__d2b+0xb0>)
 800a048:	f240 310f 	movw	r1, #783	; 0x30f
 800a04c:	f000 f92a 	bl	800a2a4 <__assert_func>
 800a050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a058:	bb2d      	cbnz	r5, 800a0a6 <__d2b+0x7a>
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	f1b8 0300 	subs.w	r3, r8, #0
 800a060:	d026      	beq.n	800a0b0 <__d2b+0x84>
 800a062:	4668      	mov	r0, sp
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	f7ff fd87 	bl	8009b78 <__lo0bits>
 800a06a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a06e:	b1e8      	cbz	r0, 800a0ac <__d2b+0x80>
 800a070:	f1c0 0320 	rsb	r3, r0, #32
 800a074:	fa02 f303 	lsl.w	r3, r2, r3
 800a078:	430b      	orrs	r3, r1
 800a07a:	40c2      	lsrs	r2, r0
 800a07c:	6163      	str	r3, [r4, #20]
 800a07e:	9201      	str	r2, [sp, #4]
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	61a3      	str	r3, [r4, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bf14      	ite	ne
 800a088:	2202      	movne	r2, #2
 800a08a:	2201      	moveq	r2, #1
 800a08c:	6122      	str	r2, [r4, #16]
 800a08e:	b1bd      	cbz	r5, 800a0c0 <__d2b+0x94>
 800a090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a094:	4405      	add	r5, r0
 800a096:	603d      	str	r5, [r7, #0]
 800a098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a09c:	6030      	str	r0, [r6, #0]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	b003      	add	sp, #12
 800a0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0aa:	e7d6      	b.n	800a05a <__d2b+0x2e>
 800a0ac:	6161      	str	r1, [r4, #20]
 800a0ae:	e7e7      	b.n	800a080 <__d2b+0x54>
 800a0b0:	a801      	add	r0, sp, #4
 800a0b2:	f7ff fd61 	bl	8009b78 <__lo0bits>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	3020      	adds	r0, #32
 800a0bc:	2201      	movs	r2, #1
 800a0be:	e7e5      	b.n	800a08c <__d2b+0x60>
 800a0c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c8:	6038      	str	r0, [r7, #0]
 800a0ca:	6918      	ldr	r0, [r3, #16]
 800a0cc:	f7ff fd34 	bl	8009b38 <__hi0bits>
 800a0d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0d4:	e7e2      	b.n	800a09c <__d2b+0x70>
 800a0d6:	bf00      	nop
 800a0d8:	0800b3f4 	.word	0x0800b3f4
 800a0dc:	0800b416 	.word	0x0800b416

0800a0e0 <__sread>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	f000 f8a8 	bl	800a23c <_read_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	bfab      	itete	ge
 800a0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0f4:	181b      	addge	r3, r3, r0
 800a0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0fa:	bfac      	ite	ge
 800a0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0fe:	81a3      	strhlt	r3, [r4, #12]
 800a100:	bd10      	pop	{r4, pc}

0800a102 <__swrite>:
 800a102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a106:	461f      	mov	r7, r3
 800a108:	898b      	ldrh	r3, [r1, #12]
 800a10a:	05db      	lsls	r3, r3, #23
 800a10c:	4605      	mov	r5, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	4616      	mov	r6, r2
 800a112:	d505      	bpl.n	800a120 <__swrite+0x1e>
 800a114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a118:	2302      	movs	r3, #2
 800a11a:	2200      	movs	r2, #0
 800a11c:	f000 f87c 	bl	800a218 <_lseek_r>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	4628      	mov	r0, r5
 800a132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a136:	f000 b8a3 	b.w	800a280 <_write_r>

0800a13a <__sseek>:
 800a13a:	b510      	push	{r4, lr}
 800a13c:	460c      	mov	r4, r1
 800a13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a142:	f000 f869 	bl	800a218 <_lseek_r>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	bf15      	itete	ne
 800a14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a156:	81a3      	strheq	r3, [r4, #12]
 800a158:	bf18      	it	ne
 800a15a:	81a3      	strhne	r3, [r4, #12]
 800a15c:	bd10      	pop	{r4, pc}

0800a15e <__sclose>:
 800a15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a162:	f000 b849 	b.w	800a1f8 <_close_r>

0800a166 <_realloc_r>:
 800a166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16a:	4680      	mov	r8, r0
 800a16c:	4614      	mov	r4, r2
 800a16e:	460e      	mov	r6, r1
 800a170:	b921      	cbnz	r1, 800a17c <_realloc_r+0x16>
 800a172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a176:	4611      	mov	r1, r2
 800a178:	f7ff bafc 	b.w	8009774 <_malloc_r>
 800a17c:	b92a      	cbnz	r2, 800a18a <_realloc_r+0x24>
 800a17e:	f000 f8c5 	bl	800a30c <_free_r>
 800a182:	4625      	mov	r5, r4
 800a184:	4628      	mov	r0, r5
 800a186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18a:	f000 f91d 	bl	800a3c8 <_malloc_usable_size_r>
 800a18e:	4284      	cmp	r4, r0
 800a190:	4607      	mov	r7, r0
 800a192:	d802      	bhi.n	800a19a <_realloc_r+0x34>
 800a194:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a198:	d812      	bhi.n	800a1c0 <_realloc_r+0x5a>
 800a19a:	4621      	mov	r1, r4
 800a19c:	4640      	mov	r0, r8
 800a19e:	f7ff fae9 	bl	8009774 <_malloc_r>
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d0ed      	beq.n	800a184 <_realloc_r+0x1e>
 800a1a8:	42bc      	cmp	r4, r7
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	bf28      	it	cs
 800a1b0:	463a      	movcs	r2, r7
 800a1b2:	f7fe fad4 	bl	800875e <memcpy>
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	f000 f8a7 	bl	800a30c <_free_r>
 800a1be:	e7e1      	b.n	800a184 <_realloc_r+0x1e>
 800a1c0:	4635      	mov	r5, r6
 800a1c2:	e7df      	b.n	800a184 <_realloc_r+0x1e>

0800a1c4 <memmove>:
 800a1c4:	4288      	cmp	r0, r1
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	eb01 0402 	add.w	r4, r1, r2
 800a1cc:	d902      	bls.n	800a1d4 <memmove+0x10>
 800a1ce:	4284      	cmp	r4, r0
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	d807      	bhi.n	800a1e4 <memmove+0x20>
 800a1d4:	1e43      	subs	r3, r0, #1
 800a1d6:	42a1      	cmp	r1, r4
 800a1d8:	d008      	beq.n	800a1ec <memmove+0x28>
 800a1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1e2:	e7f8      	b.n	800a1d6 <memmove+0x12>
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	d100      	bne.n	800a1ee <memmove+0x2a>
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1f6:	e7f7      	b.n	800a1e8 <memmove+0x24>

0800a1f8 <_close_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d06      	ldr	r5, [pc, #24]	; (800a214 <_close_r+0x1c>)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4604      	mov	r4, r0
 800a200:	4608      	mov	r0, r1
 800a202:	602b      	str	r3, [r5, #0]
 800a204:	f7f9 f84b 	bl	800329e <_close>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_close_r+0x1a>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_close_r+0x1a>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	2000302c 	.word	0x2000302c

0800a218 <_lseek_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d07      	ldr	r5, [pc, #28]	; (800a238 <_lseek_r+0x20>)
 800a21c:	4604      	mov	r4, r0
 800a21e:	4608      	mov	r0, r1
 800a220:	4611      	mov	r1, r2
 800a222:	2200      	movs	r2, #0
 800a224:	602a      	str	r2, [r5, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	f7f9 f860 	bl	80032ec <_lseek>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_lseek_r+0x1e>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_lseek_r+0x1e>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	2000302c 	.word	0x2000302c

0800a23c <_read_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	; (800a25c <_read_r+0x20>)
 800a240:	4604      	mov	r4, r0
 800a242:	4608      	mov	r0, r1
 800a244:	4611      	mov	r1, r2
 800a246:	2200      	movs	r2, #0
 800a248:	602a      	str	r2, [r5, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f7f8 ffee 	bl	800322c <_read>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_read_r+0x1e>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_read_r+0x1e>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	2000302c 	.word	0x2000302c

0800a260 <_sbrk_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d06      	ldr	r5, [pc, #24]	; (800a27c <_sbrk_r+0x1c>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	f7f9 f84c 	bl	8003308 <_sbrk>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_sbrk_r+0x1a>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_sbrk_r+0x1a>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	2000302c 	.word	0x2000302c

0800a280 <_write_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_write_r+0x20>)
 800a284:	4604      	mov	r4, r0
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	2200      	movs	r2, #0
 800a28c:	602a      	str	r2, [r5, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	f7f8 ffe9 	bl	8003266 <_write>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_write_r+0x1e>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_write_r+0x1e>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	2000302c 	.word	0x2000302c

0800a2a4 <__assert_func>:
 800a2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2a6:	4614      	mov	r4, r2
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__assert_func+0x2c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	68d8      	ldr	r0, [r3, #12]
 800a2b2:	b14c      	cbz	r4, 800a2c8 <__assert_func+0x24>
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <__assert_func+0x30>)
 800a2b6:	9100      	str	r1, [sp, #0]
 800a2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2bc:	4906      	ldr	r1, [pc, #24]	; (800a2d8 <__assert_func+0x34>)
 800a2be:	462b      	mov	r3, r5
 800a2c0:	f000 f88a 	bl	800a3d8 <fiprintf>
 800a2c4:	f000 f8a7 	bl	800a416 <abort>
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <__assert_func+0x38>)
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	e7f3      	b.n	800a2b6 <__assert_func+0x12>
 800a2ce:	bf00      	nop
 800a2d0:	200000f8 	.word	0x200000f8
 800a2d4:	0800b677 	.word	0x0800b677
 800a2d8:	0800b684 	.word	0x0800b684
 800a2dc:	0800b6b2 	.word	0x0800b6b2

0800a2e0 <_calloc_r>:
 800a2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2e2:	fba1 2402 	umull	r2, r4, r1, r2
 800a2e6:	b94c      	cbnz	r4, 800a2fc <_calloc_r+0x1c>
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	f7ff fa42 	bl	8009774 <_malloc_r>
 800a2f0:	9a01      	ldr	r2, [sp, #4]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b930      	cbnz	r0, 800a304 <_calloc_r+0x24>
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	b003      	add	sp, #12
 800a2fa:	bd30      	pop	{r4, r5, pc}
 800a2fc:	220c      	movs	r2, #12
 800a2fe:	6002      	str	r2, [r0, #0]
 800a300:	2500      	movs	r5, #0
 800a302:	e7f8      	b.n	800a2f6 <_calloc_r+0x16>
 800a304:	4621      	mov	r1, r4
 800a306:	f7fe f9f1 	bl	80086ec <memset>
 800a30a:	e7f4      	b.n	800a2f6 <_calloc_r+0x16>

0800a30c <_free_r>:
 800a30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30e:	2900      	cmp	r1, #0
 800a310:	d044      	beq.n	800a39c <_free_r+0x90>
 800a312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a316:	9001      	str	r0, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f1a1 0404 	sub.w	r4, r1, #4
 800a31e:	bfb8      	it	lt
 800a320:	18e4      	addlt	r4, r4, r3
 800a322:	f7ff fb55 	bl	80099d0 <__malloc_lock>
 800a326:	4a1e      	ldr	r2, [pc, #120]	; (800a3a0 <_free_r+0x94>)
 800a328:	9801      	ldr	r0, [sp, #4]
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	b933      	cbnz	r3, 800a33c <_free_r+0x30>
 800a32e:	6063      	str	r3, [r4, #4]
 800a330:	6014      	str	r4, [r2, #0]
 800a332:	b003      	add	sp, #12
 800a334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a338:	f7ff bb50 	b.w	80099dc <__malloc_unlock>
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	d908      	bls.n	800a352 <_free_r+0x46>
 800a340:	6825      	ldr	r5, [r4, #0]
 800a342:	1961      	adds	r1, r4, r5
 800a344:	428b      	cmp	r3, r1
 800a346:	bf01      	itttt	eq
 800a348:	6819      	ldreq	r1, [r3, #0]
 800a34a:	685b      	ldreq	r3, [r3, #4]
 800a34c:	1949      	addeq	r1, r1, r5
 800a34e:	6021      	streq	r1, [r4, #0]
 800a350:	e7ed      	b.n	800a32e <_free_r+0x22>
 800a352:	461a      	mov	r2, r3
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	b10b      	cbz	r3, 800a35c <_free_r+0x50>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d9fa      	bls.n	800a352 <_free_r+0x46>
 800a35c:	6811      	ldr	r1, [r2, #0]
 800a35e:	1855      	adds	r5, r2, r1
 800a360:	42a5      	cmp	r5, r4
 800a362:	d10b      	bne.n	800a37c <_free_r+0x70>
 800a364:	6824      	ldr	r4, [r4, #0]
 800a366:	4421      	add	r1, r4
 800a368:	1854      	adds	r4, r2, r1
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	d1e0      	bne.n	800a332 <_free_r+0x26>
 800a370:	681c      	ldr	r4, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	6053      	str	r3, [r2, #4]
 800a376:	440c      	add	r4, r1
 800a378:	6014      	str	r4, [r2, #0]
 800a37a:	e7da      	b.n	800a332 <_free_r+0x26>
 800a37c:	d902      	bls.n	800a384 <_free_r+0x78>
 800a37e:	230c      	movs	r3, #12
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	e7d6      	b.n	800a332 <_free_r+0x26>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	1961      	adds	r1, r4, r5
 800a388:	428b      	cmp	r3, r1
 800a38a:	bf04      	itt	eq
 800a38c:	6819      	ldreq	r1, [r3, #0]
 800a38e:	685b      	ldreq	r3, [r3, #4]
 800a390:	6063      	str	r3, [r4, #4]
 800a392:	bf04      	itt	eq
 800a394:	1949      	addeq	r1, r1, r5
 800a396:	6021      	streq	r1, [r4, #0]
 800a398:	6054      	str	r4, [r2, #4]
 800a39a:	e7ca      	b.n	800a332 <_free_r+0x26>
 800a39c:	b003      	add	sp, #12
 800a39e:	bd30      	pop	{r4, r5, pc}
 800a3a0:	20003024 	.word	0x20003024

0800a3a4 <__ascii_mbtowc>:
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	b901      	cbnz	r1, 800a3aa <__ascii_mbtowc+0x6>
 800a3a8:	a901      	add	r1, sp, #4
 800a3aa:	b142      	cbz	r2, 800a3be <__ascii_mbtowc+0x1a>
 800a3ac:	b14b      	cbz	r3, 800a3c2 <__ascii_mbtowc+0x1e>
 800a3ae:	7813      	ldrb	r3, [r2, #0]
 800a3b0:	600b      	str	r3, [r1, #0]
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	1e10      	subs	r0, r2, #0
 800a3b6:	bf18      	it	ne
 800a3b8:	2001      	movne	r0, #1
 800a3ba:	b002      	add	sp, #8
 800a3bc:	4770      	bx	lr
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7fb      	b.n	800a3ba <__ascii_mbtowc+0x16>
 800a3c2:	f06f 0001 	mvn.w	r0, #1
 800a3c6:	e7f8      	b.n	800a3ba <__ascii_mbtowc+0x16>

0800a3c8 <_malloc_usable_size_r>:
 800a3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3cc:	1f18      	subs	r0, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfbc      	itt	lt
 800a3d2:	580b      	ldrlt	r3, [r1, r0]
 800a3d4:	18c0      	addlt	r0, r0, r3
 800a3d6:	4770      	bx	lr

0800a3d8 <fiprintf>:
 800a3d8:	b40e      	push	{r1, r2, r3}
 800a3da:	b503      	push	{r0, r1, lr}
 800a3dc:	4601      	mov	r1, r0
 800a3de:	ab03      	add	r3, sp, #12
 800a3e0:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <fiprintf+0x20>)
 800a3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	f000 f845 	bl	800a478 <_vfiprintf_r>
 800a3ee:	b002      	add	sp, #8
 800a3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f4:	b003      	add	sp, #12
 800a3f6:	4770      	bx	lr
 800a3f8:	200000f8 	.word	0x200000f8

0800a3fc <__ascii_wctomb>:
 800a3fc:	b149      	cbz	r1, 800a412 <__ascii_wctomb+0x16>
 800a3fe:	2aff      	cmp	r2, #255	; 0xff
 800a400:	bf85      	ittet	hi
 800a402:	238a      	movhi	r3, #138	; 0x8a
 800a404:	6003      	strhi	r3, [r0, #0]
 800a406:	700a      	strbls	r2, [r1, #0]
 800a408:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a40c:	bf98      	it	ls
 800a40e:	2001      	movls	r0, #1
 800a410:	4770      	bx	lr
 800a412:	4608      	mov	r0, r1
 800a414:	4770      	bx	lr

0800a416 <abort>:
 800a416:	b508      	push	{r3, lr}
 800a418:	2006      	movs	r0, #6
 800a41a:	f000 fa89 	bl	800a930 <raise>
 800a41e:	2001      	movs	r0, #1
 800a420:	f7f8 fefa 	bl	8003218 <_exit>

0800a424 <__sfputc_r>:
 800a424:	6893      	ldr	r3, [r2, #8]
 800a426:	3b01      	subs	r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	b410      	push	{r4}
 800a42c:	6093      	str	r3, [r2, #8]
 800a42e:	da08      	bge.n	800a442 <__sfputc_r+0x1e>
 800a430:	6994      	ldr	r4, [r2, #24]
 800a432:	42a3      	cmp	r3, r4
 800a434:	db01      	blt.n	800a43a <__sfputc_r+0x16>
 800a436:	290a      	cmp	r1, #10
 800a438:	d103      	bne.n	800a442 <__sfputc_r+0x1e>
 800a43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a43e:	f000 b935 	b.w	800a6ac <__swbuf_r>
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	1c58      	adds	r0, r3, #1
 800a446:	6010      	str	r0, [r2, #0]
 800a448:	7019      	strb	r1, [r3, #0]
 800a44a:	4608      	mov	r0, r1
 800a44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <__sfputs_r>:
 800a452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	4614      	mov	r4, r2
 800a45a:	18d5      	adds	r5, r2, r3
 800a45c:	42ac      	cmp	r4, r5
 800a45e:	d101      	bne.n	800a464 <__sfputs_r+0x12>
 800a460:	2000      	movs	r0, #0
 800a462:	e007      	b.n	800a474 <__sfputs_r+0x22>
 800a464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a468:	463a      	mov	r2, r7
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7ff ffda 	bl	800a424 <__sfputc_r>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d1f3      	bne.n	800a45c <__sfputs_r+0xa>
 800a474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a478 <_vfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	460d      	mov	r5, r1
 800a47e:	b09d      	sub	sp, #116	; 0x74
 800a480:	4614      	mov	r4, r2
 800a482:	4698      	mov	r8, r3
 800a484:	4606      	mov	r6, r0
 800a486:	b118      	cbz	r0, 800a490 <_vfiprintf_r+0x18>
 800a488:	6a03      	ldr	r3, [r0, #32]
 800a48a:	b90b      	cbnz	r3, 800a490 <_vfiprintf_r+0x18>
 800a48c:	f7fe f8d8 	bl	8008640 <__sinit>
 800a490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49e:	f7fe f95c 	bl	800875a <__retarget_lock_acquire_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	071b      	lsls	r3, r3, #28
 800a4a6:	d501      	bpl.n	800a4ac <_vfiprintf_r+0x34>
 800a4a8:	692b      	ldr	r3, [r5, #16]
 800a4aa:	b99b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x5c>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 f93a 	bl	800a728 <__swsetup_r>
 800a4b4:	b170      	cbz	r0, 800a4d4 <_vfiprintf_r+0x5c>
 800a4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b8:	07dc      	lsls	r4, r3, #31
 800a4ba:	d504      	bpl.n	800a4c6 <_vfiprintf_r+0x4e>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c0:	b01d      	add	sp, #116	; 0x74
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	0598      	lsls	r0, r3, #22
 800a4ca:	d4f7      	bmi.n	800a4bc <_vfiprintf_r+0x44>
 800a4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ce:	f7fe f945 	bl	800875c <__retarget_lock_release_recursive>
 800a4d2:	e7f3      	b.n	800a4bc <_vfiprintf_r+0x44>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e2:	2330      	movs	r3, #48	; 0x30
 800a4e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a698 <_vfiprintf_r+0x220>
 800a4e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ec:	f04f 0901 	mov.w	r9, #1
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	469a      	mov	sl, r3
 800a4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f8:	b10a      	cbz	r2, 800a4fe <_vfiprintf_r+0x86>
 800a4fa:	2a25      	cmp	r2, #37	; 0x25
 800a4fc:	d1f9      	bne.n	800a4f2 <_vfiprintf_r+0x7a>
 800a4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a502:	d00b      	beq.n	800a51c <_vfiprintf_r+0xa4>
 800a504:	465b      	mov	r3, fp
 800a506:	4622      	mov	r2, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ffa1 	bl	800a452 <__sfputs_r>
 800a510:	3001      	adds	r0, #1
 800a512:	f000 80a9 	beq.w	800a668 <_vfiprintf_r+0x1f0>
 800a516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a518:	445a      	add	r2, fp
 800a51a:	9209      	str	r2, [sp, #36]	; 0x24
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 80a1 	beq.w	800a668 <_vfiprintf_r+0x1f0>
 800a526:	2300      	movs	r3, #0
 800a528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a530:	f10a 0a01 	add.w	sl, sl, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a53c:	931a      	str	r3, [sp, #104]	; 0x68
 800a53e:	4654      	mov	r4, sl
 800a540:	2205      	movs	r2, #5
 800a542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a546:	4854      	ldr	r0, [pc, #336]	; (800a698 <_vfiprintf_r+0x220>)
 800a548:	f7f5 fe4a 	bl	80001e0 <memchr>
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	b9d8      	cbnz	r0, 800a588 <_vfiprintf_r+0x110>
 800a550:	06d1      	lsls	r1, r2, #27
 800a552:	bf44      	itt	mi
 800a554:	2320      	movmi	r3, #32
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	0713      	lsls	r3, r2, #28
 800a55c:	bf44      	itt	mi
 800a55e:	232b      	movmi	r3, #43	; 0x2b
 800a560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a564:	f89a 3000 	ldrb.w	r3, [sl]
 800a568:	2b2a      	cmp	r3, #42	; 0x2a
 800a56a:	d015      	beq.n	800a598 <_vfiprintf_r+0x120>
 800a56c:	9a07      	ldr	r2, [sp, #28]
 800a56e:	4654      	mov	r4, sl
 800a570:	2000      	movs	r0, #0
 800a572:	f04f 0c0a 	mov.w	ip, #10
 800a576:	4621      	mov	r1, r4
 800a578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57c:	3b30      	subs	r3, #48	; 0x30
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d94d      	bls.n	800a61e <_vfiprintf_r+0x1a6>
 800a582:	b1b0      	cbz	r0, 800a5b2 <_vfiprintf_r+0x13a>
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	e014      	b.n	800a5b2 <_vfiprintf_r+0x13a>
 800a588:	eba0 0308 	sub.w	r3, r0, r8
 800a58c:	fa09 f303 	lsl.w	r3, r9, r3
 800a590:	4313      	orrs	r3, r2
 800a592:	9304      	str	r3, [sp, #16]
 800a594:	46a2      	mov	sl, r4
 800a596:	e7d2      	b.n	800a53e <_vfiprintf_r+0xc6>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	1d19      	adds	r1, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	9103      	str	r1, [sp, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfbb      	ittet	lt
 800a5a4:	425b      	neglt	r3, r3
 800a5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5aa:	9307      	strge	r3, [sp, #28]
 800a5ac:	9307      	strlt	r3, [sp, #28]
 800a5ae:	bfb8      	it	lt
 800a5b0:	9204      	strlt	r2, [sp, #16]
 800a5b2:	7823      	ldrb	r3, [r4, #0]
 800a5b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b6:	d10c      	bne.n	800a5d2 <_vfiprintf_r+0x15a>
 800a5b8:	7863      	ldrb	r3, [r4, #1]
 800a5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a5bc:	d134      	bne.n	800a628 <_vfiprintf_r+0x1b0>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	1d1a      	adds	r2, r3, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	9203      	str	r2, [sp, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bfb8      	it	lt
 800a5ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5ce:	3402      	adds	r4, #2
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6a8 <_vfiprintf_r+0x230>
 800a5d6:	7821      	ldrb	r1, [r4, #0]
 800a5d8:	2203      	movs	r2, #3
 800a5da:	4650      	mov	r0, sl
 800a5dc:	f7f5 fe00 	bl	80001e0 <memchr>
 800a5e0:	b138      	cbz	r0, 800a5f2 <_vfiprintf_r+0x17a>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	eba0 000a 	sub.w	r0, r0, sl
 800a5e8:	2240      	movs	r2, #64	; 0x40
 800a5ea:	4082      	lsls	r2, r0
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f6:	4829      	ldr	r0, [pc, #164]	; (800a69c <_vfiprintf_r+0x224>)
 800a5f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5fc:	2206      	movs	r2, #6
 800a5fe:	f7f5 fdef 	bl	80001e0 <memchr>
 800a602:	2800      	cmp	r0, #0
 800a604:	d03f      	beq.n	800a686 <_vfiprintf_r+0x20e>
 800a606:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <_vfiprintf_r+0x228>)
 800a608:	bb1b      	cbnz	r3, 800a652 <_vfiprintf_r+0x1da>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	3307      	adds	r3, #7
 800a60e:	f023 0307 	bic.w	r3, r3, #7
 800a612:	3308      	adds	r3, #8
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a618:	443b      	add	r3, r7
 800a61a:	9309      	str	r3, [sp, #36]	; 0x24
 800a61c:	e768      	b.n	800a4f0 <_vfiprintf_r+0x78>
 800a61e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a622:	460c      	mov	r4, r1
 800a624:	2001      	movs	r0, #1
 800a626:	e7a6      	b.n	800a576 <_vfiprintf_r+0xfe>
 800a628:	2300      	movs	r3, #0
 800a62a:	3401      	adds	r4, #1
 800a62c:	9305      	str	r3, [sp, #20]
 800a62e:	4619      	mov	r1, r3
 800a630:	f04f 0c0a 	mov.w	ip, #10
 800a634:	4620      	mov	r0, r4
 800a636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63a:	3a30      	subs	r2, #48	; 0x30
 800a63c:	2a09      	cmp	r2, #9
 800a63e:	d903      	bls.n	800a648 <_vfiprintf_r+0x1d0>
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0c6      	beq.n	800a5d2 <_vfiprintf_r+0x15a>
 800a644:	9105      	str	r1, [sp, #20]
 800a646:	e7c4      	b.n	800a5d2 <_vfiprintf_r+0x15a>
 800a648:	fb0c 2101 	mla	r1, ip, r1, r2
 800a64c:	4604      	mov	r4, r0
 800a64e:	2301      	movs	r3, #1
 800a650:	e7f0      	b.n	800a634 <_vfiprintf_r+0x1bc>
 800a652:	ab03      	add	r3, sp, #12
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	462a      	mov	r2, r5
 800a658:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <_vfiprintf_r+0x22c>)
 800a65a:	a904      	add	r1, sp, #16
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7fd fb9d 	bl	8007d9c <_printf_float>
 800a662:	4607      	mov	r7, r0
 800a664:	1c78      	adds	r0, r7, #1
 800a666:	d1d6      	bne.n	800a616 <_vfiprintf_r+0x19e>
 800a668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a66a:	07d9      	lsls	r1, r3, #31
 800a66c:	d405      	bmi.n	800a67a <_vfiprintf_r+0x202>
 800a66e:	89ab      	ldrh	r3, [r5, #12]
 800a670:	059a      	lsls	r2, r3, #22
 800a672:	d402      	bmi.n	800a67a <_vfiprintf_r+0x202>
 800a674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a676:	f7fe f871 	bl	800875c <__retarget_lock_release_recursive>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	065b      	lsls	r3, r3, #25
 800a67e:	f53f af1d 	bmi.w	800a4bc <_vfiprintf_r+0x44>
 800a682:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a684:	e71c      	b.n	800a4c0 <_vfiprintf_r+0x48>
 800a686:	ab03      	add	r3, sp, #12
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	462a      	mov	r2, r5
 800a68c:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <_vfiprintf_r+0x22c>)
 800a68e:	a904      	add	r1, sp, #16
 800a690:	4630      	mov	r0, r6
 800a692:	f7fd fe27 	bl	80082e4 <_printf_i>
 800a696:	e7e4      	b.n	800a662 <_vfiprintf_r+0x1ea>
 800a698:	0800b405 	.word	0x0800b405
 800a69c:	0800b40f 	.word	0x0800b40f
 800a6a0:	08007d9d 	.word	0x08007d9d
 800a6a4:	0800a453 	.word	0x0800a453
 800a6a8:	0800b40b 	.word	0x0800b40b

0800a6ac <__swbuf_r>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	460e      	mov	r6, r1
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	b118      	cbz	r0, 800a6be <__swbuf_r+0x12>
 800a6b6:	6a03      	ldr	r3, [r0, #32]
 800a6b8:	b90b      	cbnz	r3, 800a6be <__swbuf_r+0x12>
 800a6ba:	f7fd ffc1 	bl	8008640 <__sinit>
 800a6be:	69a3      	ldr	r3, [r4, #24]
 800a6c0:	60a3      	str	r3, [r4, #8]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	071a      	lsls	r2, r3, #28
 800a6c6:	d525      	bpl.n	800a714 <__swbuf_r+0x68>
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b31b      	cbz	r3, 800a714 <__swbuf_r+0x68>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	6922      	ldr	r2, [r4, #16]
 800a6d0:	1a98      	subs	r0, r3, r2
 800a6d2:	6963      	ldr	r3, [r4, #20]
 800a6d4:	b2f6      	uxtb	r6, r6
 800a6d6:	4283      	cmp	r3, r0
 800a6d8:	4637      	mov	r7, r6
 800a6da:	dc04      	bgt.n	800a6e6 <__swbuf_r+0x3a>
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f7ff f94e 	bl	8009980 <_fflush_r>
 800a6e4:	b9e0      	cbnz	r0, 800a720 <__swbuf_r+0x74>
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	701e      	strb	r6, [r3, #0]
 800a6f4:	6962      	ldr	r2, [r4, #20]
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d004      	beq.n	800a706 <__swbuf_r+0x5a>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d506      	bpl.n	800a710 <__swbuf_r+0x64>
 800a702:	2e0a      	cmp	r6, #10
 800a704:	d104      	bne.n	800a710 <__swbuf_r+0x64>
 800a706:	4621      	mov	r1, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f7ff f939 	bl	8009980 <_fflush_r>
 800a70e:	b938      	cbnz	r0, 800a720 <__swbuf_r+0x74>
 800a710:	4638      	mov	r0, r7
 800a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a714:	4621      	mov	r1, r4
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f806 	bl	800a728 <__swsetup_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0d5      	beq.n	800a6cc <__swbuf_r+0x20>
 800a720:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a724:	e7f4      	b.n	800a710 <__swbuf_r+0x64>
	...

0800a728 <__swsetup_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <__swsetup_r+0xac>)
 800a72c:	4605      	mov	r5, r0
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	460c      	mov	r4, r1
 800a732:	b118      	cbz	r0, 800a73c <__swsetup_r+0x14>
 800a734:	6a03      	ldr	r3, [r0, #32]
 800a736:	b90b      	cbnz	r3, 800a73c <__swsetup_r+0x14>
 800a738:	f7fd ff82 	bl	8008640 <__sinit>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a742:	0718      	lsls	r0, r3, #28
 800a744:	d422      	bmi.n	800a78c <__swsetup_r+0x64>
 800a746:	06d9      	lsls	r1, r3, #27
 800a748:	d407      	bmi.n	800a75a <__swsetup_r+0x32>
 800a74a:	2309      	movs	r3, #9
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a758:	e034      	b.n	800a7c4 <__swsetup_r+0x9c>
 800a75a:	0758      	lsls	r0, r3, #29
 800a75c:	d512      	bpl.n	800a784 <__swsetup_r+0x5c>
 800a75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a760:	b141      	cbz	r1, 800a774 <__swsetup_r+0x4c>
 800a762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a766:	4299      	cmp	r1, r3
 800a768:	d002      	beq.n	800a770 <__swsetup_r+0x48>
 800a76a:	4628      	mov	r0, r5
 800a76c:	f7ff fdce 	bl	800a30c <_free_r>
 800a770:	2300      	movs	r3, #0
 800a772:	6363      	str	r3, [r4, #52]	; 0x34
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77a:	81a3      	strh	r3, [r4, #12]
 800a77c:	2300      	movs	r3, #0
 800a77e:	6063      	str	r3, [r4, #4]
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f043 0308 	orr.w	r3, r3, #8
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	b94b      	cbnz	r3, 800a7a4 <__swsetup_r+0x7c>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79a:	d003      	beq.n	800a7a4 <__swsetup_r+0x7c>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f840 	bl	800a824 <__smakebuf_r>
 800a7a4:	89a0      	ldrh	r0, [r4, #12]
 800a7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7aa:	f010 0301 	ands.w	r3, r0, #1
 800a7ae:	d00a      	beq.n	800a7c6 <__swsetup_r+0x9e>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60a3      	str	r3, [r4, #8]
 800a7b4:	6963      	ldr	r3, [r4, #20]
 800a7b6:	425b      	negs	r3, r3
 800a7b8:	61a3      	str	r3, [r4, #24]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	b943      	cbnz	r3, 800a7d0 <__swsetup_r+0xa8>
 800a7be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c2:	d1c4      	bne.n	800a74e <__swsetup_r+0x26>
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	0781      	lsls	r1, r0, #30
 800a7c8:	bf58      	it	pl
 800a7ca:	6963      	ldrpl	r3, [r4, #20]
 800a7cc:	60a3      	str	r3, [r4, #8]
 800a7ce:	e7f4      	b.n	800a7ba <__swsetup_r+0x92>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7f7      	b.n	800a7c4 <__swsetup_r+0x9c>
 800a7d4:	200000f8 	.word	0x200000f8

0800a7d8 <__swhatbuf_r>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	460c      	mov	r4, r1
 800a7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	b096      	sub	sp, #88	; 0x58
 800a7e4:	4615      	mov	r5, r2
 800a7e6:	461e      	mov	r6, r3
 800a7e8:	da0d      	bge.n	800a806 <__swhatbuf_r+0x2e>
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7f0:	f04f 0100 	mov.w	r1, #0
 800a7f4:	bf0c      	ite	eq
 800a7f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7fa:	2340      	movne	r3, #64	; 0x40
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	6031      	str	r1, [r6, #0]
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	b016      	add	sp, #88	; 0x58
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	466a      	mov	r2, sp
 800a808:	f000 f848 	bl	800a89c <_fstat_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	dbec      	blt.n	800a7ea <__swhatbuf_r+0x12>
 800a810:	9901      	ldr	r1, [sp, #4]
 800a812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a816:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a81a:	4259      	negs	r1, r3
 800a81c:	4159      	adcs	r1, r3
 800a81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a822:	e7eb      	b.n	800a7fc <__swhatbuf_r+0x24>

0800a824 <__smakebuf_r>:
 800a824:	898b      	ldrh	r3, [r1, #12]
 800a826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a828:	079d      	lsls	r5, r3, #30
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	d507      	bpl.n	800a840 <__smakebuf_r+0x1c>
 800a830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	6123      	str	r3, [r4, #16]
 800a838:	2301      	movs	r3, #1
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	b002      	add	sp, #8
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	ab01      	add	r3, sp, #4
 800a842:	466a      	mov	r2, sp
 800a844:	f7ff ffc8 	bl	800a7d8 <__swhatbuf_r>
 800a848:	9900      	ldr	r1, [sp, #0]
 800a84a:	4605      	mov	r5, r0
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7fe ff91 	bl	8009774 <_malloc_r>
 800a852:	b948      	cbnz	r0, 800a868 <__smakebuf_r+0x44>
 800a854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a858:	059a      	lsls	r2, r3, #22
 800a85a:	d4ef      	bmi.n	800a83c <__smakebuf_r+0x18>
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	f043 0302 	orr.w	r3, r3, #2
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	e7e3      	b.n	800a830 <__smakebuf_r+0xc>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	6163      	str	r3, [r4, #20]
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	6120      	str	r0, [r4, #16]
 800a87a:	b15b      	cbz	r3, 800a894 <__smakebuf_r+0x70>
 800a87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a880:	4630      	mov	r0, r6
 800a882:	f000 f81d 	bl	800a8c0 <_isatty_r>
 800a886:	b128      	cbz	r0, 800a894 <__smakebuf_r+0x70>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	431d      	orrs	r5, r3
 800a898:	81a5      	strh	r5, [r4, #12]
 800a89a:	e7cf      	b.n	800a83c <__smakebuf_r+0x18>

0800a89c <_fstat_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d07      	ldr	r5, [pc, #28]	; (800a8bc <_fstat_r+0x20>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	f7f8 fd04 	bl	80032b6 <_fstat>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	d102      	bne.n	800a8b8 <_fstat_r+0x1c>
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	b103      	cbz	r3, 800a8b8 <_fstat_r+0x1c>
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000302c 	.word	0x2000302c

0800a8c0 <_isatty_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4d06      	ldr	r5, [pc, #24]	; (800a8dc <_isatty_r+0x1c>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	f7f8 fd03 	bl	80032d6 <_isatty>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_isatty_r+0x1a>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_isatty_r+0x1a>
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	2000302c 	.word	0x2000302c

0800a8e0 <_raise_r>:
 800a8e0:	291f      	cmp	r1, #31
 800a8e2:	b538      	push	{r3, r4, r5, lr}
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	460d      	mov	r5, r1
 800a8e8:	d904      	bls.n	800a8f4 <_raise_r+0x14>
 800a8ea:	2316      	movs	r3, #22
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8f6:	b112      	cbz	r2, 800a8fe <_raise_r+0x1e>
 800a8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8fc:	b94b      	cbnz	r3, 800a912 <_raise_r+0x32>
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 f830 	bl	800a964 <_getpid_r>
 800a904:	462a      	mov	r2, r5
 800a906:	4601      	mov	r1, r0
 800a908:	4620      	mov	r0, r4
 800a90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a90e:	f000 b817 	b.w	800a940 <_kill_r>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d00a      	beq.n	800a92c <_raise_r+0x4c>
 800a916:	1c59      	adds	r1, r3, #1
 800a918:	d103      	bne.n	800a922 <_raise_r+0x42>
 800a91a:	2316      	movs	r3, #22
 800a91c:	6003      	str	r3, [r0, #0]
 800a91e:	2001      	movs	r0, #1
 800a920:	e7e7      	b.n	800a8f2 <_raise_r+0x12>
 800a922:	2400      	movs	r4, #0
 800a924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a928:	4628      	mov	r0, r5
 800a92a:	4798      	blx	r3
 800a92c:	2000      	movs	r0, #0
 800a92e:	e7e0      	b.n	800a8f2 <_raise_r+0x12>

0800a930 <raise>:
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <raise+0xc>)
 800a932:	4601      	mov	r1, r0
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f7ff bfd3 	b.w	800a8e0 <_raise_r>
 800a93a:	bf00      	nop
 800a93c:	200000f8 	.word	0x200000f8

0800a940 <_kill_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_kill_r+0x20>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f8 fc53 	bl	80031f8 <_kill>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_kill_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_kill_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	2000302c 	.word	0x2000302c

0800a964 <_getpid_r>:
 800a964:	f7f8 bc40 	b.w	80031e8 <_getpid>

0800a968 <_init>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	bf00      	nop
 800a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96e:	bc08      	pop	{r3}
 800a970:	469e      	mov	lr, r3
 800a972:	4770      	bx	lr

0800a974 <_fini>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr
