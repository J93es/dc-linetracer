
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08009d90  08009d90  00019d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a934  0800a934  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a93c  0800a93c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001390  20000238  0800ab7c  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  0800ab7c  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c215  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dce  00000000  00000000  0002c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  0002f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b71  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015cf7  00000000  00000000  00030d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e38c  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007634f  00000000  00000000  00054dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e9c  00000000  00000000  000cb0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d78 	.word	0x08009d78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08009d78 	.word	0x08009d78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	332c      	adds	r3, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001026:	f44f 7240 	mov.w	r2, #768	; 0x300
 800102a:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	40d3      	lsrs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	211f      	movs	r1, #31
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 011f 	and.w	r1, r3, #31
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08d      	sub	sp, #52	; 0x34
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	330c      	adds	r3, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	617a      	str	r2, [r7, #20]
  return result;
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	40d3      	lsrs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010e0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010e4:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	61f9      	str	r1, [r7, #28]
  return result;
 80010ee:	69f9      	ldr	r1, [r7, #28]
 80010f0:	fab1 f181 	clz	r1, r1
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	40cb      	lsrs	r3, r1
 80010f8:	2107      	movs	r1, #7
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001108:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001110:	fa91 f1a1 	rbit	r1, r1
 8001114:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001118:	fab1 f181 	clz	r1, r1
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	40cb      	lsrs	r3, r1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800112c:	bf00      	nop
 800112e:	3734      	adds	r7, #52	; 0x34
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_RCC_HSI_IsReady+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 0203 	bic.w	r2, r3, #3
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023800 	.word	0x40023800

08001258 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LL_RCC_GetSysClkSource+0x18>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800

0800129c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ac:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800

08001318 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <LL_RCC_PLL_IsReady+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001374:	4013      	ands	r3, r2
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	430a      	orrs	r2, r1
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	4904      	ldr	r1, [pc, #16]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800
 80013a8:	ffbf8000 	.word	0xffbf8000

080013ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800

0800140c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3302      	adds	r3, #2
 800144e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	43db      	mvns	r3, r3
 8001458:	ea02 0103 	and.w	r1, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	60bb      	str	r3, [r7, #8]
  return result;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	fa03 f202 	lsl.w	r2, r3, r2
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	430a      	orrs	r2, r1
 8001482:	3302      	adds	r3, #2
 8001484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40013800 	.word	0x40013800

08001498 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0207 	bic.w	r2, r3, #7
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_FLASH_GetLatency+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80014ec:	4904      	ldr	r1, [pc, #16]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40007000 	.word	0x40007000

08001504 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0210 	bic.w	r2, r3, #16
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0208 	bic.w	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d01c      	beq.n	80015e2 <LL_TIM_OC_DisableFast+0x4a>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d017      	beq.n	80015de <LL_TIM_OC_DisableFast+0x46>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d012      	beq.n	80015da <LL_TIM_OC_DisableFast+0x42>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b40      	cmp	r3, #64	; 0x40
 80015b8:	d00d      	beq.n	80015d6 <LL_TIM_OC_DisableFast+0x3e>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c0:	d007      	beq.n	80015d2 <LL_TIM_OC_DisableFast+0x3a>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c8:	d101      	bne.n	80015ce <LL_TIM_OC_DisableFast+0x36>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e00a      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e008      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3318      	adds	r3, #24
 80015ea:	4619      	mov	r1, r3
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <LL_TIM_OC_DisableFast+0x84>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	440b      	add	r3, r1
 80015f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4908      	ldr	r1, [pc, #32]	; (8001620 <LL_TIM_OC_DisableFast+0x88>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	4619      	mov	r1, r3
 8001602:	2304      	movs	r3, #4
 8001604:	408b      	lsls	r3, r1
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	601a      	str	r2, [r3, #0]

}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0800a308 	.word	0x0800a308
 8001620:	0800a310 	.word	0x0800a310

08001624 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d01c      	beq.n	800166e <LL_TIM_OC_EnablePreload+0x4a>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d017      	beq.n	800166a <LL_TIM_OC_EnablePreload+0x46>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d012      	beq.n	8001666 <LL_TIM_OC_EnablePreload+0x42>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d00d      	beq.n	8001662 <LL_TIM_OC_EnablePreload+0x3e>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d007      	beq.n	800165e <LL_TIM_OC_EnablePreload+0x3a>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d101      	bne.n	800165a <LL_TIM_OC_EnablePreload+0x36>
 8001656:	2305      	movs	r3, #5
 8001658:	e00a      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800165a:	2306      	movs	r3, #6
 800165c:	e008      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3318      	adds	r3, #24
 8001676:	4619      	mov	r1, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LL_TIM_OC_EnablePreload+0x80>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	440b      	add	r3, r1
 8001680:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <LL_TIM_OC_EnablePreload+0x84>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	4619      	mov	r1, r3
 800168e:	2308      	movs	r3, #8
 8001690:	408b      	lsls	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	0800a308 	.word	0x0800a308
 80016a8:	0800a310 	.word	0x0800a310

080016ac <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d01c      	beq.n	80016f8 <LL_TIM_IC_SetActiveInput+0x4c>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d017      	beq.n	80016f4 <LL_TIM_IC_SetActiveInput+0x48>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d012      	beq.n	80016f0 <LL_TIM_IC_SetActiveInput+0x44>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b40      	cmp	r3, #64	; 0x40
 80016ce:	d00d      	beq.n	80016ec <LL_TIM_IC_SetActiveInput+0x40>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d6:	d007      	beq.n	80016e8 <LL_TIM_IC_SetActiveInput+0x3c>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016de:	d101      	bne.n	80016e4 <LL_TIM_IC_SetActiveInput+0x38>
 80016e0:	2305      	movs	r3, #5
 80016e2:	e00a      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016e4:	2306      	movs	r3, #6
 80016e6:	e008      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e006      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e004      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3318      	adds	r3, #24
 8001700:	4619      	mov	r1, r3
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LL_TIM_IC_SetActiveInput+0x94>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	440b      	add	r3, r1
 800170a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <LL_TIM_IC_SetActiveInput+0x98>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	4619      	mov	r1, r3
 8001718:	2303      	movs	r3, #3
 800171a:	408b      	lsls	r3, r1
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	7df9      	ldrb	r1, [r7, #23]
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <LL_TIM_IC_SetActiveInput+0x98>)
 8001728:	5c41      	ldrb	r1, [r0, r1]
 800172a:	408b      	lsls	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	0800a308 	.word	0x0800a308
 8001744:	0800a318 	.word	0x0800a318

08001748 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d01c      	beq.n	8001794 <LL_TIM_IC_SetPrescaler+0x4c>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b04      	cmp	r3, #4
 800175e:	d017      	beq.n	8001790 <LL_TIM_IC_SetPrescaler+0x48>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d012      	beq.n	800178c <LL_TIM_IC_SetPrescaler+0x44>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d00d      	beq.n	8001788 <LL_TIM_IC_SetPrescaler+0x40>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001772:	d007      	beq.n	8001784 <LL_TIM_IC_SetPrescaler+0x3c>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d101      	bne.n	8001780 <LL_TIM_IC_SetPrescaler+0x38>
 800177c:	2305      	movs	r3, #5
 800177e:	e00a      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001780:	2306      	movs	r3, #6
 8001782:	e008      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001784:	2304      	movs	r3, #4
 8001786:	e006      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3318      	adds	r3, #24
 800179c:	4619      	mov	r1, r3
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LL_TIM_IC_SetPrescaler+0x94>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	440b      	add	r3, r1
 80017a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	490c      	ldr	r1, [pc, #48]	; (80017e0 <LL_TIM_IC_SetPrescaler+0x98>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	4619      	mov	r1, r3
 80017b4:	230c      	movs	r3, #12
 80017b6:	408b      	lsls	r3, r1
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	7df9      	ldrb	r1, [r7, #23]
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <LL_TIM_IC_SetPrescaler+0x98>)
 80017c4:	5c41      	ldrb	r1, [r0, r1]
 80017c6:	408b      	lsls	r3, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	0800a308 	.word	0x0800a308
 80017e0:	0800a318 	.word	0x0800a318

080017e4 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d01c      	beq.n	8001830 <LL_TIM_IC_SetFilter+0x4c>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d017      	beq.n	800182c <LL_TIM_IC_SetFilter+0x48>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d012      	beq.n	8001828 <LL_TIM_IC_SetFilter+0x44>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d00d      	beq.n	8001824 <LL_TIM_IC_SetFilter+0x40>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d007      	beq.n	8001820 <LL_TIM_IC_SetFilter+0x3c>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d101      	bne.n	800181c <LL_TIM_IC_SetFilter+0x38>
 8001818:	2305      	movs	r3, #5
 800181a:	e00a      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 800181c:	2306      	movs	r3, #6
 800181e:	e008      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3318      	adds	r3, #24
 8001838:	4619      	mov	r1, r3
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LL_TIM_IC_SetFilter+0x94>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	440b      	add	r3, r1
 8001842:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <LL_TIM_IC_SetFilter+0x98>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	4619      	mov	r1, r3
 8001850:	23f0      	movs	r3, #240	; 0xf0
 8001852:	408b      	lsls	r3, r1
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	7df9      	ldrb	r1, [r7, #23]
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <LL_TIM_IC_SetFilter+0x98>)
 8001860:	5c41      	ldrb	r1, [r0, r1]
 8001862:	408b      	lsls	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	0800a308 	.word	0x0800a308
 800187c:	0800a318 	.word	0x0800a318

08001880 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d01c      	beq.n	80018cc <LL_TIM_IC_SetPolarity+0x4c>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d017      	beq.n	80018c8 <LL_TIM_IC_SetPolarity+0x48>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d012      	beq.n	80018c4 <LL_TIM_IC_SetPolarity+0x44>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d00d      	beq.n	80018c0 <LL_TIM_IC_SetPolarity+0x40>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018aa:	d007      	beq.n	80018bc <LL_TIM_IC_SetPolarity+0x3c>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d101      	bne.n	80018b8 <LL_TIM_IC_SetPolarity+0x38>
 80018b4:	2305      	movs	r3, #5
 80018b6:	e00a      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018b8:	2306      	movs	r3, #6
 80018ba:	e008      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018bc:	2304      	movs	r3, #4
 80018be:	e006      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e004      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	490b      	ldr	r1, [pc, #44]	; (8001904 <LL_TIM_IC_SetPolarity+0x84>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	4619      	mov	r1, r3
 80018dc:	230a      	movs	r3, #10
 80018de:	408b      	lsls	r3, r1
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	4907      	ldr	r1, [pc, #28]	; (8001904 <LL_TIM_IC_SetPolarity+0x84>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	408b      	lsls	r3, r1
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0800a320 	.word	0x0800a320

08001908 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 0207 	bic.w	r2, r3, #7
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	605a      	str	r2, [r3, #4]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b089      	sub	sp, #36	; 0x24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	613b      	str	r3, [r7, #16]
  return result;
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2103      	movs	r1, #3
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	61bb      	str	r3, [r7, #24]
  return result;
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	3724      	adds	r7, #36	; 0x24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	613b      	str	r3, [r7, #16]
  return result;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2103      	movs	r1, #3
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	61bb      	str	r3, [r7, #24]
  return result;
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	60da      	str	r2, [r3, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001ac8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001acc:	f7ff fc9e 	bl	800140c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001ad0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ad4:	f7ff fc82 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad8:	2007      	movs	r0, #7
 8001ada:	f7ff f9eb 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ade:	f000 f81b 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae2:	f000 fc77 	bl	80023d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ae6:	f000 f865 	bl	8001bb4 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001aea:	f000 f8f1 	bl	8001cd0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001aee:	f000 f9b1 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001af2:	f000 f9e7 	bl	8001ec4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001af6:	f000 fa5f 	bl	8001fb8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001afa:	f000 fad7 	bl	80020ac <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001afe:	f000 fc19 	bl	8002334 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001b02:	f000 fb11 	bl	8002128 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001b06:	f000 f951 	bl	8001dac <MX_SPI2_Init>
  MX_TIM10_Init();
 8001b0a:	f000 fb47 	bl	800219c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b0e:	f000 fbab 	bl	8002268 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001b12:	f004 f84f 	bl	8005bb4 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001b16:	e7fe      	b.n	8001b16 <main+0x52>

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff fcbb 	bl	8001498 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b22:	bf00      	nop
 8001b24:	f7ff fccc 	bl	80014c0 <LL_FLASH_GetLatency>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d1fa      	bne.n	8001b24 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b2e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001b32:	f7ff fcd3 	bl	80014dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b36:	2010      	movs	r0, #16
 8001b38:	f7ff fb64 	bl	8001204 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001b3c:	f7ff fb40 	bl	80011c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001b40:	bf00      	nop
 8001b42:	f7ff fb4d 	bl	80011e0 <LL_RCC_HSI_IsReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d1fa      	bne.n	8001b42 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2264      	movs	r2, #100	; 0x64
 8001b50:	2108      	movs	r1, #8
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fc04 	bl	8001360 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b58:	f7ff fbde 	bl	8001318 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff fbeb 	bl	8001338 <LL_RCC_PLL_IsReady>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d1fa      	bne.n	8001b5e <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001b68:	bf00      	nop
 8001b6a:	f7ff fccb 	bl	8001504 <LL_PWR_IsActiveFlag_VOS>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0fa      	beq.n	8001b6a <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fb7d 	bl	8001274 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b7e:	f7ff fb8d 	bl	800129c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff fb9e 	bl	80012c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fb51 	bl	8001230 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b8e:	bf00      	nop
 8001b90:	f7ff fb62 	bl	8001258 <LL_RCC_GetSysClkSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d1fa      	bne.n	8001b90 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <SystemClock_Config+0x98>)
 8001b9c:	f003 f8b6 	bl	8004d0c <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <SystemClock_Config+0x98>)
 8001ba2:	f003 f8c1 	bl	8004d28 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fba0 	bl	80012ec <LL_RCC_SetTIMPrescaler>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	05f5e100 	.word	0x05f5e100

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001bba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001bea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bee:	f7ff fc0d 	bl	800140c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fbda 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fbd7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	482b      	ldr	r0, [pc, #172]	; (8001cbc <MX_ADC1_Init+0x108>)
 8001c10:	f001 ff72 	bl	8003af8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin;
 8001c14:	2301      	movs	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ADC_Battery_GPIO_Port, &GPIO_InitStruct);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4826      	ldr	r0, [pc, #152]	; (8001cc0 <MX_ADC1_Init+0x10c>)
 8001c26:	f001 ff67 	bl	8003af8 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c2a:	f7ff f967 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9b7 	bl	8000fa8 <NVIC_EncodePriority>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2012      	movs	r0, #18
 8001c40:	f7ff f988 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8001c44:	2012      	movs	r0, #18
 8001c46:	f7ff f967 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c5e:	f001 fcc1 	bl	80035e4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001c76:	f107 0320 	add.w	r3, r7, #32
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c7e:	f001 fcdd 	bl	800363c <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c88:	f7ff f9f7 	bl	800107a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c90:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_ADC1_Init+0x114>)
 8001c9a:	f001 fc85 	bl	80035a8 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <MX_ADC1_Init+0x118>)
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001ca6:	f7ff f9b2 	bl	800100e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_144CYCLES);
 8001caa:	2206      	movs	r2, #6
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <MX_ADC1_Init+0x118>)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001cb0:	f7ff f9f6 	bl	80010a0 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3740      	adds	r7, #64	; 0x40
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	03200006 	.word	0x03200006

08001cd0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	2220      	movs	r2, #32
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 ff0c 	bl	8007afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f7ff fb59 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fb56 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d06:	2302      	movs	r3, #2
 8001d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d16:	2304      	movs	r3, #4
 8001d18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <MX_I2C3_Init+0xcc>)
 8001d20:	f001 feea 	bl	8003af8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4817      	ldr	r0, [pc, #92]	; (8001da0 <MX_I2C3_Init+0xd0>)
 8001d44:	f001 fed8 	bl	8003af8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001d48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d4c:	f7ff fb46 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d52:	f7ff fa24 	bl	800119e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d58:	f7ff f9fe 	bl	8001158 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d5e:	f7ff f9eb 	bl	8001138 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_I2C3_Init+0xd8>)
 8001d68:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d86:	f002 f837 	bl	8003df8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d8e:	f7ff f9f3 	bl	8001178 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3738      	adds	r7, #56	; 0x38
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40005c00 	.word	0x40005c00
 8001da8:	000186a0 	.word	0x000186a0

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b090      	sub	sp, #64	; 0x40
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fe9e 	bl	8007afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dd4:	f7ff fb02 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff fae7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001dde:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001de2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001de4:	2302      	movs	r3, #2
 8001de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001df4:	2305      	movs	r3, #5
 8001df6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_SPI2_Init+0xa0>)
 8001dfe:	f001 fe7b 	bl	8003af8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e06:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e0a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e36:	f002 f976 	bl	8004126 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e3e:	f7ff fb75 	bl	800152c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3740      	adds	r7, #64	; 0x40
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fab7 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001e6e:	2363      	movs	r3, #99	; 0x63
 8001e70:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e88:	f002 fa12 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e90:	f7ff fb72 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e94:	2100      	movs	r1, #0
 8001e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e9a:	f7ff fd35 	bl	8001908 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea4:	f7ff fb55 	bl	8001552 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eae:	f7ff fd53 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb6:	f7ff fd62 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001eea:	2002      	movs	r0, #2
 8001eec:	f7ff fa76 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ef0:	2004      	movs	r0, #4
 8001ef2:	f7ff fa5b 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MotorR_Encoder1_Pin|MotorR_Encoder2_Pin;
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001efa:	2302      	movs	r3, #2
 8001efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <MX_TIM3_Init+0xec>)
 8001f14:	f001 fdf0 	bl	8003af8 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4826      	ldr	r0, [pc, #152]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f1c:	f7ff fd09 	bl	8001932 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f24:	2101      	movs	r1, #1
 8001f26:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f28:	f7ff fbc0 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f32:	f7ff fc09 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2101      	movs	r1, #1
 8001f3a:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f3c:	f7ff fc52 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2101      	movs	r1, #1
 8001f44:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f46:	f7ff fc9b 	bl	8001880 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f4e:	2110      	movs	r1, #16
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f52:	f7ff fbab 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f5c:	f7ff fbf4 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2110      	movs	r1, #16
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f66:	f7ff fc3d 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f70:	f7ff fc86 	bl	8001880 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f8e:	f002 f98f 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f94:	f7ff faf0 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f9c:	f7ff fcdc 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001fa2:	f7ff fcec 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40000400 	.word	0x40000400

08001fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001fde:	2004      	movs	r0, #4
 8001fe0:	f7ff f9fc 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7ff f9e1 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = MotorL_Encoder1_Pin|MotorL_Encoder2_Pin;
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4827      	ldr	r0, [pc, #156]	; (80020a4 <MX_TIM4_Init+0xec>)
 8002008:	f001 fd76 	bl	8003af8 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 800200c:	2101      	movs	r1, #1
 800200e:	4826      	ldr	r0, [pc, #152]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002010:	f7ff fc8f 	bl	8001932 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002018:	2101      	movs	r1, #1
 800201a:	4823      	ldr	r0, [pc, #140]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800201c:	f7ff fb46 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002020:	2200      	movs	r2, #0
 8002022:	2101      	movs	r1, #1
 8002024:	4820      	ldr	r0, [pc, #128]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002026:	f7ff fb8f 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	481e      	ldr	r0, [pc, #120]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002030:	f7ff fbd8 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002034:	2200      	movs	r2, #0
 8002036:	2101      	movs	r1, #1
 8002038:	481b      	ldr	r0, [pc, #108]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800203a:	f7ff fc21 	bl	8001880 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800203e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002042:	2110      	movs	r1, #16
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002046:	f7ff fb31 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800204a:	2200      	movs	r2, #0
 800204c:	2110      	movs	r1, #16
 800204e:	4816      	ldr	r0, [pc, #88]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002050:	f7ff fb7a 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800205a:	f7ff fbc3 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800205e:	2200      	movs	r2, #0
 8002060:	2110      	movs	r1, #16
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002064:	f7ff fc0c 	bl	8001880 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002082:	f002 f915 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002088:	f7ff fa76 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800208c:	2100      	movs	r1, #0
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002090:	f7ff fc62 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002096:	f7ff fc72 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40000800 	.word	0x40000800

080020ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80020c0:	2008      	movs	r0, #8
 80020c2:	f7ff f98b 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 80020c6:	f7fe ff19 	bl	8000efc <__NVIC_GetPriorityGrouping>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2202      	movs	r2, #2
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff69 	bl	8000fa8 <NVIC_EncodePriority>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	2032      	movs	r0, #50	; 0x32
 80020dc:	f7fe ff3a 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80020e0:	2032      	movs	r0, #50	; 0x32
 80020e2:	f7fe ff19 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 80020e6:	2363      	movs	r3, #99	; 0x63
 80020e8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 99;
 80020ee:	2363      	movs	r3, #99	; 0x63
 80020f0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	480a      	ldr	r0, [pc, #40]	; (8002124 <MX_TIM5_Init+0x78>)
 80020fc:	f002 f8d8 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <MX_TIM5_Init+0x78>)
 8002102:	f7ff fa39 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002106:	2100      	movs	r1, #0
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <MX_TIM5_Init+0x78>)
 800210a:	f7ff fbfd 	bl	8001908 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800210e:	2100      	movs	r1, #0
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_TIM5_Init+0x78>)
 8002112:	f7ff fc21 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <MX_TIM5_Init+0x78>)
 8002118:	f7ff fc31 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40000c00 	.word	0x40000c00

08002128 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 800213c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002140:	f7ff f964 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002144:	f7fe feda 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8002148:	4603      	mov	r3, r0
 800214a:	2201      	movs	r2, #1
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ff2a 	bl	8000fa8 <NVIC_EncodePriority>
 8002154:	4603      	mov	r3, r0
 8002156:	4619      	mov	r1, r3
 8002158:	2018      	movs	r0, #24
 800215a:	f7fe fefb 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800215e:	2018      	movs	r0, #24
 8002160:	f7fe feda 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8002164:	2363      	movs	r3, #99	; 0x63
 8002166:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 800216c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002170:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <MX_TIM9_Init+0x70>)
 800217c:	f002 f898 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_TIM9_Init+0x70>)
 8002182:	f7ff f9f9 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002186:	2100      	movs	r1, #0
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <MX_TIM9_Init+0x70>)
 800218a:	f7ff fbbd 	bl	8001908 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40014000 	.word	0x40014000

0800219c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	; 0x50
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2220      	movs	r2, #32
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fc9e 	bl	8007afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80021d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021d4:	f7ff f91a 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021dc:	2300      	movs	r3, #0
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80021e0:	f241 3387 	movw	r3, #4999	; 0x1387
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 80021ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ee:	4619      	mov	r1, r3
 80021f0:	481b      	ldr	r0, [pc, #108]	; (8002260 <MX_TIM10_Init+0xc4>)
 80021f2:	f002 f85d 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 80021f6:	481a      	ldr	r0, [pc, #104]	; (8002260 <MX_TIM10_Init+0xc4>)
 80021f8:	f7ff f9be 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM10, LL_TIM_CHANNEL_CH1);
 80021fc:	2101      	movs	r1, #1
 80021fe:	4818      	ldr	r0, [pc, #96]	; (8002260 <MX_TIM10_Init+0xc4>)
 8002200:	f7ff fa10 	bl	8001624 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002204:	2360      	movs	r3, #96	; 0x60
 8002206:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM10, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	480f      	ldr	r0, [pc, #60]	; (8002260 <MX_TIM10_Init+0xc4>)
 8002222:	f002 f8bf 	bl	80043a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM10, LL_TIM_CHANNEL_CH1);
 8002226:	2101      	movs	r1, #1
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_TIM10_Init+0xc4>)
 800222a:	f7ff f9b5 	bl	8001598 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800222e:	2002      	movs	r0, #2
 8002230:	f7ff f8bc 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM10 GPIO Configuration
  PB8   ------> TIM10_CH1
  */
  GPIO_InitStruct.Pin = MotorL_PWM_Pin;
 8002234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800223a:	2302      	movs	r3, #2
 800223c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002246:	2302      	movs	r3, #2
 8002248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800224a:	2303      	movs	r3, #3
 800224c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorL_PWM_GPIO_Port, &GPIO_InitStruct);
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4804      	ldr	r0, [pc, #16]	; (8002264 <MX_TIM10_Init+0xc8>)
 8002254:	f001 fc50 	bl	8003af8 <LL_GPIO_Init>

}
 8002258:	bf00      	nop
 800225a:	3750      	adds	r7, #80	; 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40014400 	.word	0x40014400
 8002264:	40020400 	.word	0x40020400

08002268 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b094      	sub	sp, #80	; 0x50
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800226e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	2220      	movs	r2, #32
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fc38 	bl	8007afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 800229c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80022a0:	f7ff f8b4 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022a8:	2300      	movs	r3, #0
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80022ac:	f241 3387 	movw	r3, #4999	; 0x1387
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 80022b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ba:	4619      	mov	r1, r3
 80022bc:	481b      	ldr	r0, [pc, #108]	; (800232c <MX_TIM11_Init+0xc4>)
 80022be:	f001 fff7 	bl	80042b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 80022c2:	481a      	ldr	r0, [pc, #104]	; (800232c <MX_TIM11_Init+0xc4>)
 80022c4:	f7ff f958 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 80022c8:	2101      	movs	r1, #1
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <MX_TIM11_Init+0xc4>)
 80022cc:	f7ff f9aa 	bl	8001624 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022d0:	2360      	movs	r3, #96	; 0x60
 80022d2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <MX_TIM11_Init+0xc4>)
 80022ee:	f002 f859 	bl	80043a4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80022f2:	2101      	movs	r1, #1
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <MX_TIM11_Init+0xc4>)
 80022f6:	f7ff f94f 	bl	8001598 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7ff f856 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM11 GPIO Configuration
  PB9   ------> TIM11_CH1
  */
  GPIO_InitStruct.Pin = MotorR_PWM_Pin;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002306:	2302      	movs	r3, #2
 8002308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002312:	2302      	movs	r3, #2
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002316:	2303      	movs	r3, #3
 8002318:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorR_PWM_GPIO_Port, &GPIO_InitStruct);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_TIM11_Init+0xc8>)
 8002320:	f001 fbea 	bl	8003af8 <LL_GPIO_Init>

}
 8002324:	bf00      	nop
 8002326:	3750      	adds	r7, #80	; 0x50
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40014800 	.word	0x40014800
 8002330:	40020400 	.word	0x40020400

08002334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	615a      	str	r2, [r3, #20]
 800234c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800235e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002362:	f7ff f83b 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff f820 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800236c:	230c      	movs	r3, #12
 800236e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002370:	2302      	movs	r3, #2
 8002372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002380:	2307      	movs	r3, #7
 8002382:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	4619      	mov	r1, r3
 8002388:	4810      	ldr	r0, [pc, #64]	; (80023cc <MX_USART2_UART_Init+0x98>)
 800238a:	f001 fbb5 	bl	8003af8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800238e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002392:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023a0:	230c      	movs	r3, #12
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <MX_USART2_UART_Init+0x9c>)
 80023b4:	f002 fc2c 	bl	8004c10 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_USART2_UART_Init+0x9c>)
 80023ba:	f7ff fb00 	bl	80019be <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80023be:	4804      	ldr	r0, [pc, #16]	; (80023d0 <MX_USART2_UART_Init+0x9c>)
 80023c0:	f7ff faed 	bl	800199e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40004400 	.word	0x40004400

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80023da:	f107 0318 	add.w	r3, r7, #24
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	463b      	mov	r3, r7
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80023f4:	2004      	movs	r0, #4
 80023f6:	f7fe ffd9 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80023fa:	2080      	movs	r0, #128	; 0x80
 80023fc:	f7fe ffd6 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002400:	2001      	movs	r0, #1
 8002402:	f7fe ffd3 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002406:	2002      	movs	r0, #2
 8002408:	f7fe ffd0 	bl	80013ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 800240c:	213f      	movs	r1, #63	; 0x3f
 800240e:	483a      	ldr	r0, [pc, #232]	; (80024f8 <MX_GPIO_Init+0x124>)
 8002410:	f7ff fb49 	bl	8001aa6 <LL_GPIO_ResetOutputPin>
                          |MotorR_1_Pin|MotorR_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8002414:	2130      	movs	r1, #48	; 0x30
 8002416:	4839      	ldr	r0, [pc, #228]	; (80024fc <MX_GPIO_Init+0x128>)
 8002418:	f7ff fb45 	bl	8001aa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin);
 800241c:	2134      	movs	r1, #52	; 0x34
 800241e:	4838      	ldr	r0, [pc, #224]	; (8002500 <MX_GPIO_Init+0x12c>)
 8002420:	f7ff fb41 	bl	8001aa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002424:	4937      	ldr	r1, [pc, #220]	; (8002504 <MX_GPIO_Init+0x130>)
 8002426:	2002      	movs	r0, #2
 8002428:	f7ff f808 	bl	800143c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002430:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002436:	2300      	movs	r3, #0
 8002438:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800243a:	2302      	movs	r3, #2
 800243c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	4618      	mov	r0, r3
 8002444:	f001 f9d4 	bl	80037f0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244e:	482a      	ldr	r0, [pc, #168]	; (80024f8 <MX_GPIO_Init+0x124>)
 8002450:	f7ff fafa 	bl	8001a48 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245a:	4827      	ldr	r0, [pc, #156]	; (80024f8 <MX_GPIO_Init+0x124>)
 800245c:	f7ff fac5 	bl	80019ea <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8002460:	233f      	movs	r3, #63	; 0x3f
 8002462:	603b      	str	r3, [r7, #0]
                          |MotorR_1_Pin|MotorR_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002464:	2301      	movs	r3, #1
 8002466:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002470:	2302      	movs	r3, #2
 8002472:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002474:	463b      	mov	r3, r7
 8002476:	4619      	mov	r1, r3
 8002478:	481f      	ldr	r0, [pc, #124]	; (80024f8 <MX_GPIO_Init+0x124>)
 800247a:	f001 fb3d 	bl	8003af8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800247e:	2310      	movs	r3, #16
 8002480:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002482:	2301      	movs	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800248e:	2302      	movs	r3, #2
 8002490:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4819      	ldr	r0, [pc, #100]	; (80024fc <MX_GPIO_Init+0x128>)
 8002498:	f001 fb2e 	bl	8003af8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800249c:	2320      	movs	r3, #32
 800249e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024a0:	2301      	movs	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024b0:	463b      	mov	r3, r7
 80024b2:	4619      	mov	r1, r3
 80024b4:	4811      	ldr	r0, [pc, #68]	; (80024fc <MX_GPIO_Init+0x128>)
 80024b6:	f001 fb1f 	bl	8003af8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin;
 80024ba:	2334      	movs	r3, #52	; 0x34
 80024bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024be:	2301      	movs	r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80024ca:	2302      	movs	r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	463b      	mov	r3, r7
 80024d0:	4619      	mov	r1, r3
 80024d2:	480b      	ldr	r0, [pc, #44]	; (8002500 <MX_GPIO_Init+0x12c>)
 80024d4:	f001 fb10 	bl	8003af8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin;
 80024d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e6:	463b      	mov	r3, r7
 80024e8:	4619      	mov	r1, r3
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <MX_GPIO_Init+0x124>)
 80024ec:	f001 fb04 	bl	8003af8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	00f00003 	.word	0x00f00003

08002508 <LL_ADC_REG_SetSequencerRanks>:
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	332c      	adds	r3, #44	; 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002520:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	617a      	str	r2, [r7, #20]
  return result;
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	40d3      	lsrs	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	211f      	movs	r1, #31
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	401a      	ands	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f003 011f 	and.w	r1, r3, #31
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	431a      	orrs	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bf00      	nop
 800256a:	3724      	adds	r7, #36	; 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	b29b      	uxth	r3, r3
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f06f 0202 	mvn.w	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f06f 0201 	mvn.w	r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	43db      	mvns	r3, r3
 8002620:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <Custom_GPIO_Set+0x22>
 8002628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800262c:	e000      	b.n	8002630 <Custom_GPIO_Set+0x24>
 800262e:	2100      	movs	r1, #0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	400b      	ands	r3, r1
 8002634:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <ADC_Read>:
void	Sensor_Stop();
void	Sensor_Calibration();



__STATIC_INLINE uint16_t	ADC_Read() {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800264e:	b672      	cpsid	i
}
 8002650:	bf00      	nop
	uint16_t adcValue;
	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 8002652:	480e      	ldr	r0, [pc, #56]	; (800268c <ADC_Read+0x44>)
 8002654:	f7ff ffbe 	bl	80025d4 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <ADC_Read+0x44>)
 800265a:	f7ff ff8b 	bl	8002574 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 800265e:	bf00      	nop
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <ADC_Read+0x44>)
 8002662:	f7ff ffa4 	bl	80025ae <LL_ADC_IsActiveFlag_EOCS>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f9      	beq.n	8002660 <ADC_Read+0x18>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <ADC_Read+0x44>)
 800266e:	f7ff ff91 	bl	8002594 <LL_ADC_REG_ReadConversionData12>
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
	LL_ADC_ClearFlag_EOCS(ADC1);
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <ADC_Read+0x44>)
 8002678:	f7ff ffac 	bl	80025d4 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 800267c:	b662      	cpsie	i
}
 800267e:	bf00      	nop
	__enable_irq();
	return adcValue;
 8002680:	88fb      	ldrh	r3, [r7, #6]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012000 	.word	0x40012000

08002690 <Sensor_ADC_Midian_Filter>:




__STATIC_INLINE uint8_t	Sensor_ADC_Midian_Filter() {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
	uint16_t sensorMidian[3];

	sensorMidian[0] = ADC_Read();
 8002696:	f7ff ffd7 	bl	8002648 <ADC_Read>
 800269a:	4603      	mov	r3, r0
 800269c:	803b      	strh	r3, [r7, #0]
	sensorMidian[1] = ADC_Read();
 800269e:	f7ff ffd3 	bl	8002648 <ADC_Read>
 80026a2:	4603      	mov	r3, r0
 80026a4:	807b      	strh	r3, [r7, #2]
	sensorMidian[2] = ADC_Read();
 80026a6:	f7ff ffcf 	bl	8002648 <ADC_Read>
 80026aa:	4603      	mov	r3, r0
 80026ac:	80bb      	strh	r3, [r7, #4]

	if (sensorMidian[0] > sensorMidian[1]) {
 80026ae:	883a      	ldrh	r2, [r7, #0]
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90e      	bls.n	80026d4 <Sensor_ADC_Midian_Filter+0x44>
		INT_SWAP(sensorMidian[0], sensorMidian[1]);
 80026b6:	883a      	ldrh	r2, [r7, #0]
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	4053      	eors	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	803b      	strh	r3, [r7, #0]
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	883b      	ldrh	r3, [r7, #0]
 80026c4:	4053      	eors	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	807b      	strh	r3, [r7, #2]
 80026ca:	883a      	ldrh	r2, [r7, #0]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4053      	eors	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	803b      	strh	r3, [r7, #0]
	}
	if (sensorMidian[1] > sensorMidian[2]) {
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d90e      	bls.n	80026fa <Sensor_ADC_Midian_Filter+0x6a>
		INT_SWAP(sensorMidian[1], sensorMidian[2]);
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	4053      	eors	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	807b      	strh	r3, [r7, #2]
 80026e6:	88ba      	ldrh	r2, [r7, #4]
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	4053      	eors	r3, r2
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	80bb      	strh	r3, [r7, #4]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	4053      	eors	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	807b      	strh	r3, [r7, #2]
	}

	return sensorMidian[1] >> 4;
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b2db      	uxtb	r3, r3
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <Make_Sensor_Raw_Vals>:





__STATIC_INLINE void	Make_Sensor_Raw_Vals(uint8_t idx) {
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8002716:	4a10      	ldr	r2, [pc, #64]	; (8002758 <Make_Sensor_Raw_Vals+0x4c>)
 8002718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <Make_Sensor_Raw_Vals+0x50>)
 800271e:	f7ff fef3 	bl	8002508 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx] = Sensor_ADC_Midian_Filter();
 8002722:	79fc      	ldrb	r4, [r7, #7]
 8002724:	f7ff ffb4 	bl	8002690 <Sensor_ADC_Midian_Filter>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <Make_Sensor_Raw_Vals+0x54>)
 800272e:	551a      	strb	r2, [r3, r4]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <Make_Sensor_Raw_Vals+0x58>)
 8002732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002736:	4809      	ldr	r0, [pc, #36]	; (800275c <Make_Sensor_Raw_Vals+0x50>)
 8002738:	f7ff fee6 	bl	8002508 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx + 8] = Sensor_ADC_Midian_Filter();
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f103 0408 	add.w	r4, r3, #8
 8002742:	f7ff ffa5 	bl	8002690 <Sensor_ADC_Midian_Filter>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <Make_Sensor_Raw_Vals+0x54>)
 800274c:	551a      	strb	r2, [r3, r4]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop
 8002758:	03500007 	.word	0x03500007
 800275c:	40012000 	.word	0x40012000
 8002760:	20001424 	.word	0x20001424
 8002764:	03200006 	.word	0x03200006

08002768 <Make_Sensor_Norm_Vals>:




// normalized value 계산
__STATIC_INLINE void	Make_Sensor_Norm_Vals(uint8_t idx) {
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
 * 		& ( (sensorRawVals[idx] < blackMaxs[idx]) - 0x01 )  ) \
 * 		| ( (sensorRawVals[idx] < whiteMaxs[idx]) - 0x01 );
*/


	if (sensorRawVals[idx] < blackMaxs[idx])
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <Make_Sensor_Norm_Vals+0x80>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	491b      	ldr	r1, [pc, #108]	; (80027ec <Make_Sensor_Norm_Vals+0x84>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	429a      	cmp	r2, r3
 8002784:	d204      	bcs.n	8002790 <Make_Sensor_Norm_Vals+0x28>
		sensorNormVals[idx] = 0;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <Make_Sensor_Norm_Vals+0x88>)
 800278a:	2100      	movs	r1, #0
 800278c:	54d1      	strb	r1, [r2, r3]
	else if (sensorRawVals[idx] > whiteMaxs[idx])
		sensorNormVals[idx] = 255;
	else
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);

}
 800278e:	e025      	b.n	80027dc <Make_Sensor_Norm_Vals+0x74>
	else if (sensorRawVals[idx] > whiteMaxs[idx])
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <Make_Sensor_Norm_Vals+0x80>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4916      	ldr	r1, [pc, #88]	; (80027f4 <Make_Sensor_Norm_Vals+0x8c>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d904      	bls.n	80027ae <Make_Sensor_Norm_Vals+0x46>
		sensorNormVals[idx] = 255;
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <Make_Sensor_Norm_Vals+0x88>)
 80027a8:	21ff      	movs	r1, #255	; 0xff
 80027aa:	54d1      	strb	r1, [r2, r3]
}
 80027ac:	e016      	b.n	80027dc <Make_Sensor_Norm_Vals+0x74>
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <Make_Sensor_Norm_Vals+0x80>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <Make_Sensor_Norm_Vals+0x84>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	1aca      	subs	r2, r1, r3
 80027c2:	4613      	mov	r3, r2
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	490b      	ldr	r1, [pc, #44]	; (80027f8 <Make_Sensor_Norm_Vals+0x90>)
 80027cc:	5c8a      	ldrb	r2, [r1, r2]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	b2d1      	uxtb	r1, r2
 80027d8:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <Make_Sensor_Norm_Vals+0x88>)
 80027da:	54d1      	strb	r1, [r2, r3]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20001424 	.word	0x20001424
 80027ec:	20001464 	.word	0x20001464
 80027f0:	20001434 	.word	0x20001434
 80027f4:	20001454 	.word	0x20001454
 80027f8:	20001444 	.word	0x20001444

080027fc <Make_Sensor_State>:



// sensor state 계산
__STATIC_INLINE void	Make_Sensor_State(uint8_t idx) {
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]

	state = ( state & ~(0x01 << idx) ) | ( (sensorNormVals[idx] > threshold ? 1 : 0) << idx );
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	2201      	movs	r2, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	b21b      	sxth	r3, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	b21a      	sxth	r2, r3
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <Make_Sensor_State+0x5c>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21b      	sxth	r3, r3
 800281c:	4013      	ands	r3, r2
 800281e:	b21a      	sxth	r2, r3
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	490e      	ldr	r1, [pc, #56]	; (800285c <Make_Sensor_State+0x60>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	b2d9      	uxtb	r1, r3
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <Make_Sensor_State+0x64>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4299      	cmp	r1, r3
 8002830:	bf8c      	ite	hi
 8002832:	2301      	movhi	r3, #1
 8002834:	2300      	movls	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4619      	mov	r1, r3
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21b      	sxth	r3, r3
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <Make_Sensor_State+0x5c>)
 800284a:	801a      	strh	r2, [r3, #0]
//		state |= 0x01 << (IR_SENSOR_LEN - 1 - idx);
//	}
//	else {
//		state &= ~(0x01 << (IR_SENSOR_LEN - 1 - idx));
//	}
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	20001474 	.word	0x20001474
 800285c:	20001434 	.word	0x20001434
 8002860:	2000002c 	.word	0x2000002c

08002864 <Make_Voltage_Raw_Val>:



__STATIC_INLINE float	Make_Voltage_Raw_Val() {
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <Make_Voltage_Raw_Val+0x38>)
 800286a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286e:	480c      	ldr	r0, [pc, #48]	; (80028a0 <Make_Voltage_Raw_Val+0x3c>)
 8002870:	f7ff fe4a 	bl	8002508 <LL_ADC_REG_SetSequencerRanks>
	return 3.3f * 21.f * (float)ADC_Read() / 4095.f;
 8002874:	f7ff fee8 	bl	8002648 <ADC_Read>
 8002878:	4603      	mov	r3, r0
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028a4 <Make_Voltage_Raw_Val+0x40>
 8002886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028a8 <Make_Voltage_Raw_Val+0x44>
 800288e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002892:	eef0 7a66 	vmov.f32	s15, s13
}
 8002896:	eeb0 0a67 	vmov.f32	s0, s15
 800289a:	bd80      	pop	{r7, pc}
 800289c:	03800008 	.word	0x03800008
 80028a0:	40012000 	.word	0x40012000
 80028a4:	428a9999 	.word	0x428a9999
 80028a8:	457ff000 	.word	0x457ff000

080028ac <Make_Battery_Voltage>:



__STATIC_INLINE void	Make_Battery_Voltage() {
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
	static uint8_t	sensingVoltageIdx = 0;
	static float	sensingVoltageMidian[3];


	switch(sensingVoltageIdx) {
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <Make_Battery_Voltage+0xd8>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	dc02      	bgt.n	80028c0 <Make_Battery_Voltage+0x14>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da03      	bge.n	80028c6 <Make_Battery_Voltage+0x1a>
			sensingVoltage = sensingVoltageMidian[1];
			sensingVoltageIdx = 0;

			break;
	}
}
 80028be:	e05c      	b.n	800297a <Make_Battery_Voltage+0xce>
	switch(sensingVoltageIdx) {
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d013      	beq.n	80028ec <Make_Battery_Voltage+0x40>
}
 80028c4:	e059      	b.n	800297a <Make_Battery_Voltage+0xce>
			sensingVoltageMidian[sensingVoltageIdx] = Make_Voltage_Raw_Val();
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <Make_Battery_Voltage+0xd8>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461c      	mov	r4, r3
 80028cc:	f7ff ffca 	bl	8002864 <Make_Voltage_Raw_Val>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <Make_Battery_Voltage+0xdc>)
 80028d6:	00a3      	lsls	r3, r4, #2
 80028d8:	4413      	add	r3, r2
 80028da:	edc3 7a00 	vstr	s15, [r3]
			sensingVoltageIdx++;
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <Make_Battery_Voltage+0xd8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <Make_Battery_Voltage+0xd8>)
 80028e8:	701a      	strb	r2, [r3, #0]
			break;
 80028ea:	e046      	b.n	800297a <Make_Battery_Voltage+0xce>
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <Make_Battery_Voltage+0xdc>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	4b25      	ldr	r3, [pc, #148]	; (8002988 <Make_Battery_Voltage+0xdc>)
 80028f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	dd09      	ble.n	8002916 <Make_Battery_Voltage+0x6a>
				FLOAT_SWAP(tmp, sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6053      	str	r3, [r2, #4]
			if (sensingVoltageMidian[1] > sensingVoltageMidian[2]) {
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002918:	ed93 7a01 	vldr	s14, [r3, #4]
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800291e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	dd09      	ble.n	8002940 <Make_Battery_Voltage+0x94>
				FLOAT_SWAP(tmp, sensingVoltageMidian[1], sensingVoltageMidian[2]);
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002938:	6053      	str	r3, [r2, #4]
 800293a:	4a13      	ldr	r2, [pc, #76]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6093      	str	r3, [r2, #8]
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002942:	ed93 7a00 	vldr	s14, [r3]
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002948:	edd3 7a01 	vldr	s15, [r3, #4]
 800294c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	dd09      	ble.n	800296a <Make_Battery_Voltage+0xbe>
				FLOAT_SWAP(tmp, sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4a08      	ldr	r2, [pc, #32]	; (8002988 <Make_Battery_Voltage+0xdc>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6053      	str	r3, [r2, #4]
			sensingVoltage = sensingVoltageMidian[1];
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <Make_Battery_Voltage+0xdc>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <Make_Battery_Voltage+0xe0>)
 8002970:	6013      	str	r3, [r2, #0]
			sensingVoltageIdx = 0;
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <Make_Battery_Voltage+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
			break;
 8002978:	bf00      	nop
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	20000259 	.word	0x20000259
 8002988:	2000025c 	.word	0x2000025c
 800298c:	20001478 	.word	0x20001478

08002990 <Position_Windowing>:



__STATIC_INLINE void	Position_Windowing() {
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0

	int		window = (positionVal + 30000) / 4000;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <Position_Windowing+0x50>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800299e:	3330      	adds	r3, #48	; 0x30
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <Position_Windowing+0x54>)
 80029a2:	fb82 1203 	smull	r1, r2, r2, r3
 80029a6:	1212      	asrs	r2, r2, #8
 80029a8:	17db      	asrs	r3, r3, #31
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	607b      	str	r3, [r7, #4]

	positionIdxMax = GET_MIN(window + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0d      	cmp	r3, #13
 80029b2:	bfa8      	it	ge
 80029b4:	230d      	movge	r3, #13
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3302      	adds	r3, #2
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <Position_Windowing+0x58>)
 80029be:	701a      	strb	r2, [r3, #0]
	positionIdxMin = GET_MAX(window - WINDOW_SIZE_HALF + 1, 0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	bfb8      	it	lt
 80029c6:	2301      	movlt	r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <Position_Windowing+0x5c>)
 80029d0:	701a      	strb	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20001418 	.word	0x20001418
 80029e4:	10624dd3 	.word	0x10624dd3
 80029e8:	20000014 	.word	0x20000014
 80029ec:	20000015 	.word	0x20000015

080029f0 <Sum_Position_Val>:





__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]


	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <Sum_Position_Val+0x60>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	79fa      	ldrb	r2, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d31e      	bcc.n	8002a44 <Sum_Position_Val+0x54>
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <Sum_Position_Val+0x64>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	79fa      	ldrb	r2, [r7, #7]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d818      	bhi.n	8002a44 <Sum_Position_Val+0x54>

		positionSum += positionTable[idx] * sensorNormVals[idx];
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <Sum_Position_Val+0x68>)
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	79fa      	ldrb	r2, [r7, #7]
 8002a1c:	490f      	ldr	r1, [pc, #60]	; (8002a5c <Sum_Position_Val+0x6c>)
 8002a1e:	5c8a      	ldrb	r2, [r1, r2]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	fb03 f202 	mul.w	r2, r3, r2
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <Sum_Position_Val+0x70>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <Sum_Position_Val+0x70>)
 8002a2e:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <Sum_Position_Val+0x6c>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <Sum_Position_Val+0x74>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <Sum_Position_Val+0x74>)
 8002a42:	6013      	str	r3, [r2, #0]
	}
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	20000015 	.word	0x20000015
 8002a54:	20000014 	.word	0x20000014
 8002a58:	20000030 	.word	0x20000030
 8002a5c:	20001434 	.word	0x20001434
 8002a60:	2000141c 	.word	0x2000141c
 8002a64:	20001420 	.word	0x20001420

08002a68 <Make_Position_Val>:



__STATIC_INLINE void	Make_Position_Val() {
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

		positionVal = positionSum / (sensorNormValsSum + 1);
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <Make_Position_Val+0x2c>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <Make_Position_Val+0x30>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <Make_Position_Val+0x34>)
 8002a7c:	6013      	str	r3, [r2, #0]

		positionSum = 0;
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <Make_Position_Val+0x2c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <Make_Position_Val+0x30>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	2000141c 	.word	0x2000141c
 8002a98:	20001420 	.word	0x20001420
 8002a9c:	20001418 	.word	0x20001418

08002aa0 <Sensor_TIM5_IRQ>:



__STATIC_INLINE void	Sensor_TIM5_IRQ() {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	static uint8_t	tim5Idx = 0;

	// 다음 IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | tim5Idx | 0x08;
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <Sensor_TIM5_IRQ+0x11c>)
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f023 0307 	bic.w	r3, r3, #7
 8002aac:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <Sensor_TIM5_IRQ+0x11c>)
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	6153      	str	r3, [r2, #20]

	Make_Sensor_Raw_Vals(tim5Idx);
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fe24 	bl	800270c <Make_Sensor_Raw_Vals>

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <Sensor_TIM5_IRQ+0x11c>)
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <Sensor_TIM5_IRQ+0x11c>)
 8002aca:	f023 0308 	bic.w	r3, r3, #8
 8002ace:	6153      	str	r3, [r2, #20]

	Make_Sensor_Norm_Vals(tim5Idx);
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fe47 	bl	8002768 <Make_Sensor_Norm_Vals>
	Make_Sensor_Norm_Vals(tim5Idx + 8);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe40 	bl	8002768 <Make_Sensor_Norm_Vals>

	Make_Sensor_State(tim5Idx);
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fe85 	bl	80027fc <Make_Sensor_State>
	Make_Sensor_State(tim5Idx + 8);
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fe7e 	bl	80027fc <Make_Sensor_State>



	switch(tim5Idx) {
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b07      	cmp	r3, #7
 8002b06:	d84d      	bhi.n	8002ba4 <Sensor_TIM5_IRQ+0x104>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <Sensor_TIM5_IRQ+0x70>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b31 	.word	0x08002b31
 8002b14:	08002b4f 	.word	0x08002b4f
 8002b18:	08002b4f 	.word	0x08002b4f
 8002b1c:	08002b69 	.word	0x08002b69
 8002b20:	08002b69 	.word	0x08002b69
 8002b24:	08002b69 	.word	0x08002b69
 8002b28:	08002b69 	.word	0x08002b69
 8002b2c:	08002b87 	.word	0x08002b87
		case 0:
			Position_Windowing();
 8002b30:	f7ff ff2e 	bl	8002990 <Position_Windowing>
			Sum_Position_Val(tim5Idx);
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff59 	bl	80029f0 <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	3308      	adds	r3, #8
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff52 	bl	80029f0 <Sum_Position_Val>

			break;
 8002b4c:	e02a      	b.n	8002ba4 <Sensor_TIM5_IRQ+0x104>


		case 1:
		case 2:
			Sum_Position_Val(tim5Idx);
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff4c 	bl	80029f0 <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff45 	bl	80029f0 <Sum_Position_Val>

			break;
 8002b66:	e01d      	b.n	8002ba4 <Sensor_TIM5_IRQ+0x104>

		case 3:
		case 4:
		case 5:
		case 6:
			Make_Battery_Voltage();
 8002b68:	f7ff fea0 	bl	80028ac <Make_Battery_Voltage>
			Sum_Position_Val(tim5Idx);
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff3d 	bl	80029f0 <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff36 	bl	80029f0 <Sum_Position_Val>

			break;
 8002b84:	e00e      	b.n	8002ba4 <Sensor_TIM5_IRQ+0x104>


		case 7:
			Sum_Position_Val(tim5Idx);
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff30 	bl	80029f0 <Sum_Position_Val>
			Sum_Position_Val(tim5Idx + 8);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3308      	adds	r3, #8
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff29 	bl	80029f0 <Sum_Position_Val>
			Make_Position_Val();
 8002b9e:	f7ff ff63 	bl	8002a68 <Make_Position_Val>

			break;
 8002ba2:	bf00      	nop


	}

	// 인덱스 증가
	tim5Idx = (tim5Idx + 1) & 0x07;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <Sensor_TIM5_IRQ+0x120>)
 8002bb4:	701a      	strb	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	20000258 	.word	0x20000258

08002bc4 <Make_Target_Encoder_Value_L>:





__STATIC_INLINE float	Make_Target_Encoder_Value_L(float speed) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	ed87 0a01 	vstr	s0, [r7, #4]
//	1cm 를 가려면 0.17943939667 바퀴 가야함
//	100cm 를 가려면 17.943939667 바퀴 가야함
//
//	1바퀴 가는 데에 필요한 엔코더 값 = 2024

	targetEncoderValueL += TICK_PER_M * speed * MOTOR_CONTROL_INTERVAL_S;
 8002bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c08 <Make_Target_Encoder_Value_L+0x44>
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002c0c <Make_Target_Encoder_Value_L+0x48>
 8002bde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <Make_Target_Encoder_Value_L+0x4c>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <Make_Target_Encoder_Value_L+0x4c>)
 8002bee:	edc3 7a00 	vstr	s15, [r3]

	return targetEncoderValueL;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <Make_Target_Encoder_Value_L+0x4c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	ee07 3a90 	vmov	s15, r3
}
 8002bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	478f8d33 	.word	0x478f8d33
 8002c0c:	3a03126f 	.word	0x3a03126f
 8002c10:	20001410 	.word	0x20001410

08002c14 <Get_Current_Encoder_Value_L>:


__STATIC_INLINE int32_t	Get_Current_Encoder_Value_L() {
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0

	return TIM4->CNT;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <Get_Current_Encoder_Value_L+0x14>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40000800 	.word	0x40000800

08002c2c <Make_Target_Encoder_Value_R>:


__STATIC_INLINE float	Make_Target_Encoder_Value_R(float speed) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	ed87 0a01 	vstr	s0, [r7, #4]
//	1cm 를 가려면 0.17943939667 바퀴 가야함
//	100cm 를 가려면 17.943939667 바퀴 가야함
//
//	1바퀴 가는 데에 필요한 엔코더 값 = 2024

	targetEncoderValueR += ENCODER_VALUE_PER_CIRCLE * 17.944f * speed / 2000;
 8002c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c3a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c70 <Make_Target_Encoder_Value_R+0x44>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c42:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002c74 <Make_Target_Encoder_Value_R+0x48>
 8002c46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <Make_Target_Encoder_Value_R+0x4c>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <Make_Target_Encoder_Value_R+0x4c>)
 8002c56:	edc3 7a00 	vstr	s15, [r3]

	return targetEncoderValueR;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <Make_Target_Encoder_Value_R+0x4c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	ee07 3a90 	vmov	s15, r3
}
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	470f8d50 	.word	0x470f8d50
 8002c74:	44fa0000 	.word	0x44fa0000
 8002c78:	20001414 	.word	0x20001414

08002c7c <Get_Current_Encoder_Value_R>:


__STATIC_INLINE int32_t	Get_Current_Encoder_Value_R() {
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

	return TIM3->CNT;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <Get_Current_Encoder_Value_R+0x14>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40000400 	.word	0x40000400

08002c94 <Make_P_Term>:





__STATIC_INLINE float	Make_P_Term(int32_t error) {
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

	float pTerm = error * pCoef;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <Make_P_Term+0x34>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb0:	edc7 7a03 	vstr	s15, [r7, #12]

	return pTerm;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	ee07 3a90 	vmov	s15, r3
}
 8002cba:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	20000004 	.word	0x20000004

08002ccc <Make_Error_Diff>:


__STATIC_INLINE int32_t	Make_Error_Diff(int32_t error, int32_t prevError, int32_t prevErrorDiff) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]

	const float alpha = 0.5;
 8002cd8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002cdc:	617b      	str	r3, [r7, #20]
	int32_t	errorDiff = alpha * (error - prevError) + (1.f - alpha) * prevErrorDiff;
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d16:	ee17 3a90 	vmov	r3, s15
 8002d1a:	613b      	str	r3, [r7, #16]

	return errorDiff;
 8002d1c:	693b      	ldr	r3, [r7, #16]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <Make_D_Term>:


__STATIC_INLINE float	Make_D_Term(int32_t errorDiff) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

	float dTerm = errorDiff * dCoef;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <Make_D_Term+0x34>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	edc7 7a03 	vstr	s15, [r7, #12]

	return dTerm;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	ee07 3a90 	vmov	s15, r3
}
 8002d52:	eeb0 0a67 	vmov.f32	s0, s15
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000008 	.word	0x20000008

08002d64 <Get_Duty_Ratio>:


__STATIC_INLINE float	Get_Duty_Ratio(float pTerm, float dTerm) {
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d6e:	edc7 0a00 	vstr	s1, [r7]

	float voltage = pTerm + dTerm;
 8002d72:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d76:	edd7 7a00 	vldr	s15, [r7]
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	edc7 7a03 	vstr	s15, [r7, #12]
	float dutyRatio = voltage / sensingVoltage;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <Get_Duty_Ratio+0x44>)
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d90:	edc7 7a02 	vstr	s15, [r7, #8]

	return dutyRatio;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	ee07 3a90 	vmov	s15, r3
}
 8002d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	20001478 	.word	0x20001478

08002dac <Get_Level_CCR>:


__STATIC_INLINE uint32_t	Get_Level_CCR(float dutyRatio) {
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	ed87 0a01 	vstr	s0, [r7, #4]

	int32_t	levelCCR = ABS(dutyRatio * levelMaxCCR);
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <Get_Level_CCR+0x8c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d50e      	bpl.n	8002df2 <Get_Level_CCR+0x46>
 8002dd4:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <Get_Level_CCR+0x8c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de8:	eef1 7a67 	vneg.f32	s15, s15
 8002dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df0:	e00b      	b.n	8002e0a <Get_Level_CCR+0x5e>
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <Get_Level_CCR+0x8c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e0a:	edc7 7a03 	vstr	s15, [r7, #12]

	if (levelCCR > levelMaxCCR) {
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <Get_Level_CCR+0x8c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dd03      	ble.n	8002e20 <Get_Level_CCR+0x74>
		levelCCR = levelMaxCCR;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <Get_Level_CCR+0x8c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e004      	b.n	8002e2a <Get_Level_CCR+0x7e>
	}
	else if (levelCCR < 0) {
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da01      	bge.n	8002e2a <Get_Level_CCR+0x7e>
		levelCCR = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
	}

	return levelCCR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	200013fc 	.word	0x200013fc

08002e3c <Motor_CCR_Control>:


__STATIC_INLINE void	Motor_CCR_Control(uint32_t levelCCR_L, uint32_t levelCCR_R) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]

	TIM10->CCR1 = levelCCR_L;
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <Motor_CCR_Control+0x24>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM11->CCR1 = levelCCR_R;
 8002e4c:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <Motor_CCR_Control+0x28>)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <Motor_Direction_Control>:



__STATIC_INLINE void	Motor_Direction_Control(float dutyRatioL, float dutyRatioR) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e72:	edc7 0a00 	vstr	s1, [r7]
	Custom_GPIO_Set(GPIOB, 1 << 4, dutyRatioL > 0 ? 1 : 0); // PB4
 8002e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	bfcc      	ite	gt
 8002e84:	2301      	movgt	r3, #1
 8002e86:	2300      	movle	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	481a      	ldr	r0, [pc, #104]	; (8002ef8 <Motor_Direction_Control+0x90>)
 8002e90:	f7ff fbbc 	bl	800260c <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOB, 1 << 5, dutyRatioL < 0 ? 1 : 0); // PB5
 8002e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	bf4c      	ite	mi
 8002ea2:	2301      	movmi	r3, #1
 8002ea4:	2300      	movpl	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2120      	movs	r1, #32
 8002eac:	4812      	ldr	r0, [pc, #72]	; (8002ef8 <Motor_Direction_Control+0x90>)
 8002eae:	f7ff fbad 	bl	800260c <Custom_GPIO_Set>

	Custom_GPIO_Set(GPIOC, 1 << 4, dutyRatioR < 0 ? 1 : 0); // PC4
 8002eb2:	edd7 7a00 	vldr	s15, [r7]
 8002eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	bf4c      	ite	mi
 8002ec0:	2301      	movmi	r3, #1
 8002ec2:	2300      	movpl	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2110      	movs	r1, #16
 8002eca:	480c      	ldr	r0, [pc, #48]	; (8002efc <Motor_Direction_Control+0x94>)
 8002ecc:	f7ff fb9e 	bl	800260c <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOC, 1 << 5, dutyRatioR > 0 ? 1 : 0); // PC5
 8002ed0:	edd7 7a00 	vldr	s15, [r7]
 8002ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002edc:	bfcc      	ite	gt
 8002ede:	2301      	movgt	r3, #1
 8002ee0:	2300      	movle	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	4804      	ldr	r0, [pc, #16]	; (8002efc <Motor_Direction_Control+0x94>)
 8002eea:	f7ff fb8f 	bl	800260c <Custom_GPIO_Set>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800

08002f00 <Adjust_Encoder_Values_L>:





__STATIC_INLINE	void	Adjust_Encoder_Values_L() {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0

	uint32_t	curEncoderValueL = Get_Current_Encoder_Value_L();
 8002f06:	f7ff fe85 	bl	8002c14 <Get_Current_Encoder_Value_L>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	60fb      	str	r3, [r7, #12]

	if (curEncoderValueL > ENCODER_VALUE_ADJUST_THRESHOLD_MAX) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002f14:	d917      	bls.n	8002f46 <Adjust_Encoder_Values_L+0x46>

		int32_t	adjustValue = curEncoderValueL - ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002f1c:	607b      	str	r3, [r7, #4]
		targetEncoderValueL -= adjustValue;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <Adjust_Encoder_Values_L+0x84>)
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <Adjust_Encoder_Values_L+0x84>)
 8002f34:	edc3 7a00 	vstr	s15, [r3]
		TIM4->CNT -= adjustValue;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <Adjust_Encoder_Values_L+0x88>)
 8002f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4912      	ldr	r1, [pc, #72]	; (8002f88 <Adjust_Encoder_Values_L+0x88>)
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	624b      	str	r3, [r1, #36]	; 0x24
	else if (curEncoderValueL < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueL;
		targetEncoderValueL -= adjustValue;
		TIM4->CNT -= adjustValue;
	}
}
 8002f44:	e01a      	b.n	8002f7c <Adjust_Encoder_Values_L+0x7c>
	else if (curEncoderValueL < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d216      	bcs.n	8002f7c <Adjust_Encoder_Values_L+0x7c>
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8002f54:	60bb      	str	r3, [r7, #8]
		targetEncoderValueL -= adjustValue;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <Adjust_Encoder_Values_L+0x84>)
 8002f58:	ed93 7a00 	vldr	s14, [r3]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <Adjust_Encoder_Values_L+0x84>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
		TIM4->CNT -= adjustValue;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <Adjust_Encoder_Values_L+0x88>)
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <Adjust_Encoder_Values_L+0x88>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20001410 	.word	0x20001410
 8002f88:	40000800 	.word	0x40000800

08002f8c <Adjust_Encoder_Values_R>:


__STATIC_INLINE	void	Adjust_Encoder_Values_R() {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0

	uint32_t	curEncoderValueR = Get_Current_Encoder_Value_R();
 8002f92:	f7ff fe73 	bl	8002c7c <Get_Current_Encoder_Value_R>
 8002f96:	4603      	mov	r3, r0
 8002f98:	60fb      	str	r3, [r7, #12]

	if (curEncoderValueR > ENCODER_VALUE_ADJUST_THRESHOLD_MAX) {
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002fa0:	d917      	bls.n	8002fd2 <Adjust_Encoder_Values_R+0x46>

		int32_t	adjustValue = curEncoderValueR - ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002fa8:	607b      	str	r3, [r7, #4]
		targetEncoderValueR -= adjustValue;
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <Adjust_Encoder_Values_R+0x84>)
 8002fac:	ed93 7a00 	vldr	s14, [r3]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <Adjust_Encoder_Values_R+0x84>)
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
		TIM3->CNT -= adjustValue;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <Adjust_Encoder_Values_R+0x88>)
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4912      	ldr	r1, [pc, #72]	; (8003014 <Adjust_Encoder_Values_R+0x88>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	624b      	str	r3, [r1, #36]	; 0x24
	else if (curEncoderValueR < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueR;
		targetEncoderValueR -= adjustValue;
		TIM3->CNT -= adjustValue;
	}
}
 8002fd0:	e01a      	b.n	8003008 <Adjust_Encoder_Values_R+0x7c>
	else if (curEncoderValueR < ENCODER_VALUE_ADJUST_THRESHOLD_MIN) {
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd8:	d216      	bcs.n	8003008 <Adjust_Encoder_Values_R+0x7c>
		int32_t	adjustValue = ENCODER_VALUE_ADJUST_THRESHOLD_MID - curEncoderValueR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8002fe0:	60bb      	str	r3, [r7, #8]
		targetEncoderValueR -= adjustValue;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <Adjust_Encoder_Values_R+0x84>)
 8002fe4:	ed93 7a00 	vldr	s14, [r3]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <Adjust_Encoder_Values_R+0x84>)
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
		TIM3->CNT -= adjustValue;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <Adjust_Encoder_Values_R+0x88>)
 8002ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4904      	ldr	r1, [pc, #16]	; (8003014 <Adjust_Encoder_Values_R+0x88>)
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20001414 	.word	0x20001414
 8003014:	40000400 	.word	0x40000400

08003018 <Motor_Speed_Control>:





__STATIC_INLINE void	Motor_Speed_Control(float speedL, float speedR) {
 8003018:	b580      	push	{r7, lr}
 800301a:	ed2d 8b02 	vpush	{d8}
 800301e:	b08e      	sub	sp, #56	; 0x38
 8003020:	af00      	add	r7, sp, #0
 8003022:	ed87 0a01 	vstr	s0, [r7, #4]
 8003026:	edc7 0a00 	vstr	s1, [r7]

	int32_t	errorL = Make_Target_Encoder_Value_L(speedL) - Get_Current_Encoder_Value_L();
 800302a:	ed97 0a01 	vldr	s0, [r7, #4]
 800302e:	f7ff fdc9 	bl	8002bc4 <Make_Target_Encoder_Value_L>
 8003032:	eeb0 8a40 	vmov.f32	s16, s0
 8003036:	f7ff fded 	bl	8002c14 <Get_Current_Encoder_Value_L>
 800303a:	ee07 0a90 	vmov	s15, r0
 800303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003042:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304a:	ee17 3a90 	vmov	r3, s15
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t errorR = Make_Target_Encoder_Value_R(speedR) - Get_Current_Encoder_Value_R();
 8003050:	ed97 0a00 	vldr	s0, [r7]
 8003054:	f7ff fdea 	bl	8002c2c <Make_Target_Encoder_Value_R>
 8003058:	eeb0 8a40 	vmov.f32	s16, s0
 800305c:	f7ff fe0e 	bl	8002c7c <Get_Current_Encoder_Value_R>
 8003060:	ee07 0a90 	vmov	s15, r0
 8003064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003068:	ee78 7a67 	vsub.f32	s15, s16, s15
 800306c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003070:	ee17 3a90 	vmov	r3, s15
 8003074:	633b      	str	r3, [r7, #48]	; 0x30

	float pTermL = Make_P_Term(errorL);
 8003076:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003078:	f7ff fe0c 	bl	8002c94 <Make_P_Term>
 800307c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float pTermR = Make_P_Term(errorR);
 8003080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003082:	f7ff fe07 	bl	8002c94 <Make_P_Term>
 8003086:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28


	int32_t errorDiffL = Make_Error_Diff(errorL, prevErrorL, prevErrorDiffL);
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <Motor_Speed_Control+0x120>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2b      	ldr	r2, [pc, #172]	; (800313c <Motor_Speed_Control+0x124>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003096:	f7ff fe19 	bl	8002ccc <Make_Error_Diff>
 800309a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t errorDiffR = Make_Error_Diff(errorR, prevErrorR, prevErrorDiffR);
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <Motor_Speed_Control+0x128>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <Motor_Speed_Control+0x12c>)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a8:	f7ff fe10 	bl	8002ccc <Make_Error_Diff>
 80030ac:	6238      	str	r0, [r7, #32]

	float dTermL = Make_D_Term(errorDiffL);
 80030ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030b0:	f7ff fe3c 	bl	8002d2c <Make_D_Term>
 80030b4:	ed87 0a07 	vstr	s0, [r7, #28]
	float dTermR = Make_D_Term(errorDiffR);
 80030b8:	6a38      	ldr	r0, [r7, #32]
 80030ba:	f7ff fe37 	bl	8002d2c <Make_D_Term>
 80030be:	ed87 0a06 	vstr	s0, [r7, #24]


	float	dutyRatioL = Get_Duty_Ratio(pTermL, dTermL);
 80030c2:	edd7 0a07 	vldr	s1, [r7, #28]
 80030c6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80030ca:	f7ff fe4b 	bl	8002d64 <Get_Duty_Ratio>
 80030ce:	ed87 0a05 	vstr	s0, [r7, #20]
	float	dutyRatioR = Get_Duty_Ratio(pTermR, dTermR);
 80030d2:	edd7 0a06 	vldr	s1, [r7, #24]
 80030d6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80030da:	f7ff fe43 	bl	8002d64 <Get_Duty_Ratio>
 80030de:	ed87 0a04 	vstr	s0, [r7, #16]

	uint32_t levelCCR_L = Get_Level_CCR(dutyRatioL);
 80030e2:	ed97 0a05 	vldr	s0, [r7, #20]
 80030e6:	f7ff fe61 	bl	8002dac <Get_Level_CCR>
 80030ea:	60f8      	str	r0, [r7, #12]
	uint32_t levelCCR_R = Get_Level_CCR(dutyRatioR);
 80030ec:	ed97 0a04 	vldr	s0, [r7, #16]
 80030f0:	f7ff fe5c 	bl	8002dac <Get_Level_CCR>
 80030f4:	60b8      	str	r0, [r7, #8]

	Motor_CCR_Control(levelCCR_L, levelCCR_R);
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff fe9f 	bl	8002e3c <Motor_CCR_Control>
	Motor_Direction_Control(dutyRatioL, dutyRatioR);
 80030fe:	edd7 0a04 	vldr	s1, [r7, #16]
 8003102:	ed97 0a05 	vldr	s0, [r7, #20]
 8003106:	f7ff feaf 	bl	8002e68 <Motor_Direction_Control>

	Adjust_Encoder_Values_L();
 800310a:	f7ff fef9 	bl	8002f00 <Adjust_Encoder_Values_L>
	Adjust_Encoder_Values_R();
 800310e:	f7ff ff3d 	bl	8002f8c <Adjust_Encoder_Values_R>

	prevErrorL = errorL;
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <Motor_Speed_Control+0x120>)
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	6013      	str	r3, [r2, #0]
	prevErrorR = errorR;
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <Motor_Speed_Control+0x128>)
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6013      	str	r3, [r2, #0]
	prevErrorDiffL = errorDiffL;
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <Motor_Speed_Control+0x124>)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	6013      	str	r3, [r2, #0]
	prevErrorDiffR = errorDiffR;
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <Motor_Speed_Control+0x12c>)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	6013      	str	r3, [r2, #0]
}
 800312a:	bf00      	nop
 800312c:	3738      	adds	r7, #56	; 0x38
 800312e:	46bd      	mov	sp, r7
 8003130:	ecbd 8b02 	vpop	{d8}
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20001400 	.word	0x20001400
 800313c:	20001408 	.word	0x20001408
 8003140:	20001404 	.word	0x20001404
 8003144:	2000140c 	.word	0x2000140c

08003148 <Drive_Speed_Accele_Control>:
#include "motor.h"



// 가속도 및 속도 제어
__STATIC_INLINE void	Drive_Speed_Accele_Control() {
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

	if (curSpeed == targetSpeed) {
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 800314e:	ed93 7a00 	vldr	s14, [r3]
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	eeb4 7a67 	vcmp.f32	s14, s15
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	d104      	bne.n	800316c <Drive_Speed_Accele_Control+0x24>

		// 속도를 targetSpeed 까지 올린 후, curAccele을 0으로 변환
		// 혹은 직선 가속 후 targetSpeed 까지 도달하지 못하고 감속한 후 감속이 종료되었으면 , curAccele을 0으로 변환
		curAccele = 0;
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
		if (curSpeed < targetSpeed) {

			curSpeed = targetSpeed;
		}
	}
}
 800316a:	e062      	b.n	8003232 <Drive_Speed_Accele_Control+0xea>
	else if (curSpeed < targetSpeed) {
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 800316e:	ed93 7a00 	vldr	s14, [r3]
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	d538      	bpl.n	80031f4 <Drive_Speed_Accele_Control+0xac>
		curAccele += 0.01f;
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003248 <Drive_Speed_Accele_Control+0x100>
 800318c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 8003192:	edc3 7a00 	vstr	s15, [r3]
		if (curAccele > targetAccele) {
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 8003198:	ed93 7a00 	vldr	s14, [r3]
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <Drive_Speed_Accele_Control+0x104>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	dd03      	ble.n	80031b4 <Drive_Speed_Accele_Control+0x6c>
			curAccele = targetAccele;
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <Drive_Speed_Accele_Control+0x104>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 80031b2:	6013      	str	r3, [r2, #0]
		curSpeed += curAccele / 2000;
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <Drive_Speed_Accele_Control+0xfc>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003250 <Drive_Speed_Accele_Control+0x108>
 80031be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 80031ce:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed > targetSpeed) {
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e6:	dc00      	bgt.n	80031ea <Drive_Speed_Accele_Control+0xa2>
}
 80031e8:	e023      	b.n	8003232 <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 80031f0:	6013      	str	r3, [r2, #0]
}
 80031f2:	e01e      	b.n	8003232 <Drive_Speed_Accele_Control+0xea>
		curSpeed -= decele / 2000;
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <Drive_Speed_Accele_Control+0x10c>)
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003250 <Drive_Speed_Accele_Control+0x108>
 80031fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 800320e:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed < targetSpeed) {
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 8003214:	ed93 7a00 	vldr	s14, [r3]
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	d400      	bmi.n	800322a <Drive_Speed_Accele_Control+0xe2>
}
 8003228:	e003      	b.n	8003232 <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <Drive_Speed_Accele_Control+0xf8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a03      	ldr	r2, [pc, #12]	; (800323c <Drive_Speed_Accele_Control+0xf4>)
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000028 	.word	0x20000028
 8003240:	20000024 	.word	0x20000024
 8003244:	2000001c 	.word	0x2000001c
 8003248:	3c23d70a 	.word	0x3c23d70a
 800324c:	20000018 	.word	0x20000018
 8003250:	44fa0000 	.word	0x44fa0000
 8003254:	20000020 	.word	0x20000020

08003258 <Drive_TIM9_IRQ>:
}



// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
//
//	Motor_Speed_Control(speedL, speedR);


	/* speed cntl test */
	Drive_Speed_Accele_Control();
 800325c:	f7ff ff74 	bl	8003148 <Drive_Speed_Accele_Control>
	Motor_Speed_Control(curSpeed, curSpeed);
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <Drive_TIM9_IRQ+0x24>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <Drive_TIM9_IRQ+0x24>)
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	eef0 0a47 	vmov.f32	s1, s14
 8003270:	eeb0 0a67 	vmov.f32	s0, s15
 8003274:	f7ff fed0 	bl	8003018 <Motor_Speed_Control>

	/* pd test */
//	Motor_Speed_Control(0, 0);
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000028 	.word	0x20000028

08003280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003284:	e7fe      	b.n	8003284 <NMI_Handler+0x4>

08003286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 800328a:	f003 fca9 	bl	8006be0 <Motor_Power_Off>
 800328e:	e7fc      	b.n	800328a <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 8003294:	f003 fca4 	bl	8006be0 <Motor_Power_Off>
 8003298:	e7fc      	b.n	8003294 <MemManage_Handler+0x4>

0800329a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 800329e:	f003 fc9f 	bl	8006be0 <Motor_Power_Off>
 80032a2:	e7fc      	b.n	800329e <BusFault_Handler+0x4>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 80032a8:	f003 fc9a 	bl	8006be0 <Motor_Power_Off>
 80032ac:	e7fc      	b.n	80032a8 <UsageFault_Handler+0x4>

080032ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <SysTick_Handler+0x18>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <SysTick_Handler+0x18>)
 80032e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000254 	.word	0x20000254

080032f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	Drive_TIM9_IRQ();
 8003308:	f7ff ffa6 	bl	8003258 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM9);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800330e:	f7ff f96f 	bl	80025f0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40014000 	.word	0x40014000

0800331c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	Sensor_TIM5_IRQ();
 8003320:	f7ff fbbe 	bl	8002aa0 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM5);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <TIM5_IRQHandler+0x14>)
 8003326:	f7ff f963 	bl	80025f0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40000c00 	.word	0x40000c00

08003334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	return 1;
 8003338:	2301      	movs	r3, #1
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_kill>:

int _kill(int pid, int sig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800334e:	f004 fbe1 	bl	8007b14 <__errno>
 8003352:	4603      	mov	r3, r0
 8003354:	2216      	movs	r2, #22
 8003356:	601a      	str	r2, [r3, #0]
	return -1;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_exit>:

void _exit (int status)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800336c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ffe7 	bl	8003344 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003376:	e7fe      	b.n	8003376 <_exit+0x12>

08003378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e00a      	b.n	80033a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4601      	mov	r1, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	60ba      	str	r2, [r7, #8]
 8003396:	b2ca      	uxtb	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbf0      	blt.n	800338a <_read+0x12>
	}

return len;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e009      	b.n	80033d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	60ba      	str	r2, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fbd9 	bl	8005b84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	dbf1      	blt.n	80033c4 <_write+0x12>
	}
	return len;
 80033e0:	687b      	ldr	r3, [r7, #4]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_close>:

int _close(int file)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	return -1;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003412:	605a      	str	r2, [r3, #4]
	return 0;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_isatty>:

int _isatty(int file)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
	return 1;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	return 0;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <_sbrk+0x5c>)
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <_sbrk+0x60>)
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <_sbrk+0x64>)
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <_sbrk+0x68>)
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <_sbrk+0x64>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	429a      	cmp	r2, r3
 8003482:	d207      	bcs.n	8003494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003484:	f004 fb46 	bl	8007b14 <__errno>
 8003488:	4603      	mov	r3, r0
 800348a:	220c      	movs	r2, #12
 800348c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003492:	e009      	b.n	80034a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <_sbrk+0x64>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <_sbrk+0x64>)
 80034a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20020000 	.word	0x20020000
 80034b4:	00000400 	.word	0x00000400
 80034b8:	20000268 	.word	0x20000268
 80034bc:	200015c8 	.word	0x200015c8

080034c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <SystemInit+0x20>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <SystemInit+0x20>)
 80034cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <Reset_Handler>:
 80034e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800351c <LoopFillZerobss+0x12>
 80034e8:	480d      	ldr	r0, [pc, #52]	; (8003520 <LoopFillZerobss+0x16>)
 80034ea:	490e      	ldr	r1, [pc, #56]	; (8003524 <LoopFillZerobss+0x1a>)
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <LoopFillZerobss+0x1e>)
 80034ee:	2300      	movs	r3, #0
 80034f0:	e002      	b.n	80034f8 <LoopCopyDataInit>

080034f2 <CopyDataInit>:
 80034f2:	58d4      	ldr	r4, [r2, r3]
 80034f4:	50c4      	str	r4, [r0, r3]
 80034f6:	3304      	adds	r3, #4

080034f8 <LoopCopyDataInit>:
 80034f8:	18c4      	adds	r4, r0, r3
 80034fa:	428c      	cmp	r4, r1
 80034fc:	d3f9      	bcc.n	80034f2 <CopyDataInit>
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <LoopFillZerobss+0x22>)
 8003500:	4c0b      	ldr	r4, [pc, #44]	; (8003530 <LoopFillZerobss+0x26>)
 8003502:	2300      	movs	r3, #0
 8003504:	e001      	b.n	800350a <LoopFillZerobss>

08003506 <FillZerobss>:
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	3204      	adds	r2, #4

0800350a <LoopFillZerobss>:
 800350a:	42a2      	cmp	r2, r4
 800350c:	d3fb      	bcc.n	8003506 <FillZerobss>
 800350e:	f7ff ffd7 	bl	80034c0 <SystemInit>
 8003512:	f004 fb05 	bl	8007b20 <__libc_init_array>
 8003516:	f7fe fad5 	bl	8001ac4 <main>
 800351a:	4770      	bx	lr
 800351c:	20020000 	.word	0x20020000
 8003520:	20000000 	.word	0x20000000
 8003524:	20000238 	.word	0x20000238
 8003528:	0800a944 	.word	0x0800a944
 800352c:	20000238 	.word	0x20000238
 8003530:	200015c8 	.word	0x200015c8

08003534 <DMA1_Stream0_IRQHandler>:
 8003534:	e7fe      	b.n	8003534 <DMA1_Stream0_IRQHandler>

08003536 <LL_ADC_SetCommonClock>:
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_REG_SetSequencerLength>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_ADC_IsEnabled>:
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80035b6:	480a      	ldr	r0, [pc, #40]	; (80035e0 <LL_ADC_CommonInit+0x38>)
 80035b8:	f7ff ffe3 	bl	8003582 <LL_ADC_IsEnabled>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ffb4 	bl	8003536 <LL_ADC_SetCommonClock>
 80035ce:	e001      	b.n	80035d4 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40012000 	.word	0x40012000

080035e4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffc5 	bl	8003582 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d117      	bne.n	800362e <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6892      	ldr	r2, [r2, #8]
 8003612:	430a      	orrs	r2, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e001      	b.n	8003632 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff99 	bl	8003582 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d12b      	bne.n	80036ae <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e005      	b.n	800367e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <LL_ADC_REG_Init+0x80>)
 8003684:	4013      	ands	r3, r2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6912      	ldr	r2, [r2, #16]
 8003698:	430a      	orrs	r2, r1
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff58 	bl	800355c <LL_ADC_REG_SetSequencerLength>
 80036ac:	e001      	b.n	80036b2 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	c0fffcfd 	.word	0xc0fffcfd

080036c0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <LL_EXTI_EnableIT_0_31+0x20>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40013c00 	.word	0x40013c00

080036e4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <LL_EXTI_DisableIT_0_31+0x24>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	4904      	ldr	r1, [pc, #16]	; (8003708 <LL_EXTI_DisableIT_0_31+0x24>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40013c00 	.word	0x40013c00

0800370c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <LL_EXTI_EnableEvent_0_31+0x20>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]

}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40013c00 	.word	0x40013c00

08003730 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <LL_EXTI_DisableEvent_0_31+0x24>)
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	43db      	mvns	r3, r3
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003742:	4013      	ands	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40013c00 	.word	0x40013c00

08003758 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	4904      	ldr	r1, [pc, #16]	; (8003778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40013c00 	.word	0x40013c00

0800377c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	43db      	mvns	r3, r3
 800378c:	4904      	ldr	r1, [pc, #16]	; (80037a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800378e:	4013      	ands	r3, r2
 8003790:	608b      	str	r3, [r1, #8]

}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40013c00 	.word	0x40013c00

080037a4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	4904      	ldr	r1, [pc, #16]	; (80037c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60cb      	str	r3, [r1, #12]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80037da:	4013      	ands	r3, r2
 80037dc:	60cb      	str	r3, [r1, #12]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	791b      	ldrb	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d065      	beq.n	80038d0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d06b      	beq.n	80038e4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	795b      	ldrb	r3, [r3, #5]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d01c      	beq.n	800384e <LL_EXTI_Init+0x5e>
 8003814:	2b02      	cmp	r3, #2
 8003816:	dc25      	bgt.n	8003864 <LL_EXTI_Init+0x74>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <LL_EXTI_Init+0x32>
 800381c:	2b01      	cmp	r3, #1
 800381e:	d00b      	beq.n	8003838 <LL_EXTI_Init+0x48>
 8003820:	e020      	b.n	8003864 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff82 	bl	8003730 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff45 	bl	80036c0 <LL_EXTI_EnableIT_0_31>
          break;
 8003836:	e018      	b.n	800386a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff51 	bl	80036e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff60 	bl	800370c <LL_EXTI_EnableEvent_0_31>
          break;
 800384c:	e00d      	b.n	800386a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff34 	bl	80036c0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff55 	bl	800370c <LL_EXTI_EnableEvent_0_31>
          break;
 8003862:	e002      	b.n	800386a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
          break;
 8003868:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	799b      	ldrb	r3, [r3, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d038      	beq.n	80038e4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	799b      	ldrb	r3, [r3, #6]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d01c      	beq.n	80038b4 <LL_EXTI_Init+0xc4>
 800387a:	2b03      	cmp	r3, #3
 800387c:	dc25      	bgt.n	80038ca <LL_EXTI_Init+0xda>
 800387e:	2b01      	cmp	r3, #1
 8003880:	d002      	beq.n	8003888 <LL_EXTI_Init+0x98>
 8003882:	2b02      	cmp	r3, #2
 8003884:	d00b      	beq.n	800389e <LL_EXTI_Init+0xae>
 8003886:	e020      	b.n	80038ca <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff9b 	bl	80037c8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff5e 	bl	8003758 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800389c:	e022      	b.n	80038e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff6a 	bl	800377c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff79 	bl	80037a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80038b2:	e017      	b.n	80038e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff4d 	bl	8003758 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff6e 	bl	80037a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80038c8:	e00c      	b.n	80038e4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
            break;
 80038ce:	e009      	b.n	80038e4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff05 	bl	80036e4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff26 	bl	8003730 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <LL_GPIO_SetPinMode>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	b089      	sub	sp, #36	; 0x24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	613b      	str	r3, [r7, #16]
  return result;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2103      	movs	r1, #3
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	61bb      	str	r3, [r7, #24]
  return result;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	3724      	adds	r7, #36	; 0x24
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_GPIO_SetPinOutputType>:
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	43db      	mvns	r3, r3
 8003960:	401a      	ands	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	605a      	str	r2, [r3, #4]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_GPIO_SetPinSpeed>:
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	613b      	str	r3, [r7, #16]
  return result;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2103      	movs	r1, #3
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	61bb      	str	r3, [r7, #24]
  return result;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	; 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_GPIO_SetPinPull>:
{
 80039da:	b480      	push	{r7}
 80039dc:	b089      	sub	sp, #36	; 0x24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	613b      	str	r3, [r7, #16]
  return result;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2103      	movs	r1, #3
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	61bb      	str	r3, [r7, #24]
  return result;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3724      	adds	r7, #36	; 0x24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_GPIO_SetAFPin_0_7>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	613b      	str	r3, [r7, #16]
  return result;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	210f      	movs	r1, #15
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	61bb      	str	r3, [r7, #24]
  return result;
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	431a      	orrs	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_GPIO_SetAFPin_8_15>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b089      	sub	sp, #36	; 0x24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	613b      	str	r3, [r7, #16]
  return result;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	210f      	movs	r1, #15
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	61bb      	str	r3, [r7, #24]
  return result;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003aec:	bf00      	nop
 8003aee:	3724      	adds	r7, #36	; 0x24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	613b      	str	r3, [r7, #16]
  return result;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003b22:	e050      	b.n	8003bc6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2101      	movs	r1, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d042      	beq.n	8003bc0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d003      	beq.n	8003b4a <LL_GPIO_Init+0x52>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d10d      	bne.n	8003b66 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff12 	bl	800397c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fef3 	bl	800394c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff33 	bl	80039da <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d11a      	bne.n	8003bb2 <LL_GPIO_Init+0xba>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	60bb      	str	r3, [r7, #8]
  return result;
 8003b88:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b07      	cmp	r3, #7
 8003b92:	d807      	bhi.n	8003ba4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff4b 	bl	8003a38 <LL_GPIO_SetAFPin_0_7>
 8003ba2:	e006      	b.n	8003bb2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff72 	bl	8003a96 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fe97 	bl	80038ee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1a7      	bne.n	8003b24 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <LL_I2C_Enable>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_I2C_Disable>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_I2C_ConfigFilters>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f023 021f 	bic.w	r2, r3, #31
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_I2C_SetOwnAddress1>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a42      	ldr	r2, [pc, #264]	; (8003da0 <LL_I2C_ConfigSpeed+0x124>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9b      	lsrs	r3, r3, #18
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	493a      	ldr	r1, [pc, #232]	; (8003da4 <LL_I2C_ConfigSpeed+0x128>)
 8003cba:	428b      	cmp	r3, r1
 8003cbc:	d802      	bhi.n	8003cc4 <LL_I2C_ConfigSpeed+0x48>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e009      	b.n	8003cd8 <LL_I2C_ConfigSpeed+0x5c>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4936      	ldr	r1, [pc, #216]	; (8003da8 <LL_I2C_ConfigSpeed+0x12c>)
 8003cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a30      	ldr	r2, [pc, #192]	; (8003da4 <LL_I2C_ConfigSpeed+0x128>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d939      	bls.n	8003d5a <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d117      	bne.n	8003d1c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d14:	e01d      	b.n	8003d52 <LL_I2C_ConfigSpeed+0xd6>
 8003d16:	f248 0301 	movw	r3, #32769	; 0x8001
 8003d1a:	e01a      	b.n	8003d52 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4c:	e001      	b.n	8003d52 <LL_I2C_ConfigSpeed+0xd6>
 8003d4e:	f248 0301 	movw	r3, #32769	; 0x8001
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e011      	b.n	8003d7e <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d68:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	e000      	b.n	8003d7c <LL_I2C_ConfigSpeed+0x100>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	61da      	str	r2, [r3, #28]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	431bde83 	.word	0x431bde83
 8003da4:	000186a0 	.word	0x000186a0
 8003da8:	10624dd3 	.word	0x10624dd3

08003dac <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 021a 	bic.w	r2, r3, #26
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fefb 	bl	8003bfe <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e08:	f107 0308 	add.w	r3, r7, #8
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f89d 	bl	8003f4c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fefe 	bl	8003c1e <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003e22:	6939      	ldr	r1, [r7, #16]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff25 	bl	8003c7c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6959      	ldr	r1, [r3, #20]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff04 	bl	8003c4a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffaf 	bl	8003dac <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fec5 	bl	8003bde <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffb9 	bl	8003dd2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <LL_RCC_GetSysClkSource>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <LL_RCC_GetSysClkSource+0x18>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <LL_RCC_GetAHBPrescaler>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <LL_RCC_GetAHBPrescaler+0x18>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <LL_RCC_GetAPB1Prescaler+0x18>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <LL_RCC_GetAPB2Prescaler>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <LL_RCC_PLL_GetN+0x18>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40023800 	.word	0x40023800

08003f14 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <LL_RCC_PLL_GetP+0x18>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <LL_RCC_PLL_GetDivider+0x18>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003f54:	f000 f820 	bl	8003f98 <RCC_GetSystemClockFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f840 	bl	8003fe8 <RCC_GetHCLKClockFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f84e 	bl	8004014 <RCC_GetPCLK1ClockFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f85a 	bl	800403c <RCC_GetPCLK2ClockFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003fa2:	f7ff ff63 	bl	8003e6c <LL_RCC_GetSysClkSource>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00c      	beq.n	8003fc6 <RCC_GetSystemClockFreq+0x2e>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d80f      	bhi.n	8003fd0 <RCC_GetSystemClockFreq+0x38>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <RCC_GetSystemClockFreq+0x22>
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d003      	beq.n	8003fc0 <RCC_GetSystemClockFreq+0x28>
 8003fb8:	e00a      	b.n	8003fd0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <RCC_GetSystemClockFreq+0x48>)
 8003fbc:	607b      	str	r3, [r7, #4]
      break;
 8003fbe:	e00a      	b.n	8003fd6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <RCC_GetSystemClockFreq+0x4c>)
 8003fc2:	607b      	str	r3, [r7, #4]
      break;
 8003fc4:	e007      	b.n	8003fd6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003fc6:	2008      	movs	r0, #8
 8003fc8:	f000 f84c 	bl	8004064 <RCC_PLL_GetFreqDomain_SYS>
 8003fcc:	6078      	str	r0, [r7, #4]
      break;
 8003fce:	e002      	b.n	8003fd6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <RCC_GetSystemClockFreq+0x48>)
 8003fd2:	607b      	str	r3, [r7, #4]
      break;
 8003fd4:	bf00      	nop
  }

  return frequency;
 8003fd6:	687b      	ldr	r3, [r7, #4]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ff0:	f7ff ff4a 	bl	8003e88 <LL_RCC_GetAHBPrescaler>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <RCC_GetHCLKClockFreq+0x28>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	40d3      	lsrs	r3, r2
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	0800a328 	.word	0x0800a328

08004014 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800401c:	f7ff ff42 	bl	8003ea4 <LL_RCC_GetAPB1Prescaler>
 8004020:	4603      	mov	r3, r0
 8004022:	0a9b      	lsrs	r3, r3, #10
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <RCC_GetPCLK1ClockFreq+0x24>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	40d3      	lsrs	r3, r2
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	0800a338 	.word	0x0800a338

0800403c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004044:	f7ff ff3c 	bl	8003ec0 <LL_RCC_GetAPB2Prescaler>
 8004048:	4603      	mov	r3, r0
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <RCC_GetPCLK2ClockFreq+0x24>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	40d3      	lsrs	r3, r2
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	0800a338 	.word	0x0800a338

08004064 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004078:	f7ff ff30 	bl	8003edc <LL_RCC_PLL_GetMainSource>
 800407c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408a:	d003      	beq.n	8004094 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800408c:	e005      	b.n	800409a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004090:	617b      	str	r3, [r7, #20]
      break;
 8004092:	e005      	b.n	80040a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004096:	617b      	str	r3, [r7, #20]
      break;
 8004098:	e002      	b.n	80040a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d113      	bne.n	80040ce <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80040a6:	f7ff ff43 	bl	8003f30 <LL_RCC_PLL_GetDivider>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fbb3 f4f2 	udiv	r4, r3, r2
 80040b2:	f7ff ff21 	bl	8003ef8 <LL_RCC_PLL_GetN>
 80040b6:	4603      	mov	r3, r0
 80040b8:	fb03 f404 	mul.w	r4, r3, r4
 80040bc:	f7ff ff2a 	bl	8003f14 <LL_RCC_PLL_GetP>
 80040c0:	4603      	mov	r3, r0
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	3301      	adds	r3, #1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80040cc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80040ce:	693b      	ldr	r3, [r7, #16]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	007a1200 	.word	0x007a1200

080040e0 <LL_SPI_IsEnabled>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d101      	bne.n	80040f8 <LL_SPI_IsEnabled+0x18>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <LL_SPI_IsEnabled+0x1a>
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffd3 	bl	80040e0 <LL_SPI_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d139      	bne.n	80041b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004148:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	6852      	ldr	r2, [r2, #4]
 8004154:	4311      	orrs	r1, r2
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	4311      	orrs	r1, r2
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	68d2      	ldr	r2, [r2, #12]
 8004160:	4311      	orrs	r1, r2
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	6912      	ldr	r2, [r2, #16]
 8004166:	4311      	orrs	r1, r2
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	6952      	ldr	r2, [r2, #20]
 800416c:	4311      	orrs	r1, r2
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6992      	ldr	r2, [r2, #24]
 8004172:	4311      	orrs	r1, r2
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	69d2      	ldr	r2, [r2, #28]
 8004178:	4311      	orrs	r1, r2
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	6a12      	ldr	r2, [r2, #32]
 800417e:	430a      	orrs	r2, r1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 0204 	bic.w	r2, r3, #4
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d105      	bne.n	80041b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ffab 	bl	8004106 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	61da      	str	r2, [r3, #28]
  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <LL_TIM_SetPrescaler>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_TIM_SetAutoReload>:
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_TIM_SetRepetitionCounter>:
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_TIM_OC_SetCompareCH1>:
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_TIM_OC_SetCompareCH2>:
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_TIM_OC_SetCompareCH3>:
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_TIM_OC_SetCompareCH4>:
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	615a      	str	r2, [r3, #20]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a31      	ldr	r2, [pc, #196]	; (8004388 <LL_TIM_Init+0xd8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <LL_TIM_Init+0x38>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d00b      	beq.n	80042e8 <LL_TIM_Init+0x38>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <LL_TIM_Init+0xdc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <LL_TIM_Init+0x38>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <LL_TIM_Init+0xe0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <LL_TIM_Init+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <LL_TIM_Init+0xe4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d106      	bne.n	80042f6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a23      	ldr	r2, [pc, #140]	; (8004388 <LL_TIM_Init+0xd8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01b      	beq.n	8004336 <LL_TIM_Init+0x86>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d017      	beq.n	8004336 <LL_TIM_Init+0x86>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a20      	ldr	r2, [pc, #128]	; (800438c <LL_TIM_Init+0xdc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <LL_TIM_Init+0x86>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <LL_TIM_Init+0xe0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00f      	beq.n	8004336 <LL_TIM_Init+0x86>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <LL_TIM_Init+0xe4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00b      	beq.n	8004336 <LL_TIM_Init+0x86>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <LL_TIM_Init+0xe8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <LL_TIM_Init+0x86>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <LL_TIM_Init+0xec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <LL_TIM_Init+0x86>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <LL_TIM_Init+0xf0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d106      	bne.n	8004344 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff48 	bl	80041e6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff34 	bl	80041ca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <LL_TIM_Init+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d105      	bne.n	8004376 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff46 	bl	8004202 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ff89 	bl	800428e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40014000 	.word	0x40014000
 800439c:	40014400 	.word	0x40014400
 80043a0:	40014800 	.word	0x40014800

080043a4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d027      	beq.n	800440c <LL_TIM_OC_Init+0x68>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c2:	d82a      	bhi.n	800441a <LL_TIM_OC_Init+0x76>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d018      	beq.n	80043fe <LL_TIM_OC_Init+0x5a>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d2:	d822      	bhi.n	800441a <LL_TIM_OC_Init+0x76>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d003      	beq.n	80043e2 <LL_TIM_OC_Init+0x3e>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d007      	beq.n	80043f0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80043e0:	e01b      	b.n	800441a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f81f 	bl	8004428 <OC1Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]
      break;
 80043ee:	e015      	b.n	800441c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f87e 	bl	80044f4 <OC2Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]
      break;
 80043fc:	e00e      	b.n	800441c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f8e1 	bl	80045c8 <OC3Config>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
      break;
 800440a:	e007      	b.n	800441c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f944 	bl	800469c <OC4Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]
      break;
 8004418:	e000      	b.n	800441c <LL_TIM_OC_Init+0x78>
      break;
 800441a:	bf00      	nop
  }

  return result;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0202 	bic.w	r2, r3, #2
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <OC1Config+0xc8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d11e      	bne.n	80044c8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0208 	bic.w	r2, r3, #8
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0204 	bic.w	r2, r3, #4
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fe9f 	bl	800421e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40010000 	.word	0x40010000

080044f4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0220 	bic.w	r2, r3, #32
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0210 	bic.w	r2, r3, #16
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <OC2Config+0xd0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d11f      	bne.n	800459c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	019b      	lsls	r3, r3, #6
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	019b      	lsls	r3, r3, #6
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fe43 	bl	800423a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40010000 	.word	0x40010000

080045c8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <OC3Config+0xd0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d11f      	bne.n	800466e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	029b      	lsls	r3, r3, #10
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	015b      	lsls	r3, r3, #5
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fde8 	bl	8004256 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000

0800469c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	031b      	lsls	r3, r3, #12
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	031b      	lsls	r3, r3, #12
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a0f      	ldr	r2, [pc, #60]	; (800473c <OC4Config+0xa0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d107      	bne.n	8004714 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	019b      	lsls	r3, r3, #6
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fda3 	bl	8004272 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40010000 	.word	0x40010000

08004740 <LL_USART_IsEnabled>:
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_USART_SetStopBitsLength>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_USART_SetHWFlowCtrl>:
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	615a      	str	r2, [r3, #20]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_USART_SetBaudRate>:
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b0c0      	sub	sp, #256	; 0x100
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80047c4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80047c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 810c 	bne.w	80049f0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80047d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	6639      	str	r1, [r7, #96]	; 0x60
 80047f2:	415b      	adcs	r3, r3
 80047f4:	667b      	str	r3, [r7, #100]	; 0x64
 80047f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0801 	adds.w	r8, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0901 	adc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004836:	2200      	movs	r2, #0
 8004838:	469a      	mov	sl, r3
 800483a:	4693      	mov	fp, r2
 800483c:	eb1a 030a 	adds.w	r3, sl, sl
 8004840:	65bb      	str	r3, [r7, #88]	; 0x58
 8004842:	eb4b 030b 	adc.w	r3, fp, fp
 8004846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800484c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004850:	f7fc f9b2 	bl	8000bb8 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4b64      	ldr	r3, [pc, #400]	; (80049ec <LL_USART_SetBaudRate+0x238>)
 800485a:	fba3 2302 	umull	r2, r3, r3, r2
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	b29b      	uxth	r3, r3
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	b29c      	uxth	r4, r3
 8004866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004870:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004874:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	6539      	str	r1, [r7, #80]	; 0x50
 8004880:	415b      	adcs	r3, r3
 8004882:	657b      	str	r3, [r7, #84]	; 0x54
 8004884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004888:	4641      	mov	r1, r8
 800488a:	1851      	adds	r1, r2, r1
 800488c:	64b9      	str	r1, [r7, #72]	; 0x48
 800488e:	4649      	mov	r1, r9
 8004890:	414b      	adcs	r3, r1
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80048a0:	4659      	mov	r1, fp
 80048a2:	00cb      	lsls	r3, r1, #3
 80048a4:	4651      	mov	r1, sl
 80048a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048aa:	4651      	mov	r1, sl
 80048ac:	00ca      	lsls	r2, r1, #3
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	4642      	mov	r2, r8
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048bc:	464b      	mov	r3, r9
 80048be:	460a      	mov	r2, r1
 80048c0:	eb42 0303 	adc.w	r3, r2, r3
 80048c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80048d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048da:	460b      	mov	r3, r1
 80048dc:	18db      	adds	r3, r3, r3
 80048de:	643b      	str	r3, [r7, #64]	; 0x40
 80048e0:	4613      	mov	r3, r2
 80048e2:	eb42 0303 	adc.w	r3, r2, r3
 80048e6:	647b      	str	r3, [r7, #68]	; 0x44
 80048e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ec:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80048f0:	f7fc f962 	bl	8000bb8 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4611      	mov	r1, r2
 80048fa:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <LL_USART_SetBaudRate+0x238>)
 80048fc:	fba3 2301 	umull	r2, r3, r3, r1
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	2264      	movs	r2, #100	; 0x64
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	1acb      	subs	r3, r1, r3
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <LL_USART_SetBaudRate+0x238>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	b29b      	uxth	r3, r3
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004922:	b29b      	uxth	r3, r3
 8004924:	4423      	add	r3, r4
 8004926:	b29c      	uxth	r4, r3
 8004928:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004932:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004936:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800493a:	4642      	mov	r2, r8
 800493c:	464b      	mov	r3, r9
 800493e:	1891      	adds	r1, r2, r2
 8004940:	63b9      	str	r1, [r7, #56]	; 0x38
 8004942:	415b      	adcs	r3, r3
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004946:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800494a:	4641      	mov	r1, r8
 800494c:	1851      	adds	r1, r2, r1
 800494e:	6339      	str	r1, [r7, #48]	; 0x30
 8004950:	4649      	mov	r1, r9
 8004952:	414b      	adcs	r3, r1
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004962:	4659      	mov	r1, fp
 8004964:	00cb      	lsls	r3, r1, #3
 8004966:	4651      	mov	r1, sl
 8004968:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496c:	4651      	mov	r1, sl
 800496e:	00ca      	lsls	r2, r1, #3
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	4603      	mov	r3, r0
 8004976:	4642      	mov	r2, r8
 8004978:	189b      	adds	r3, r3, r2
 800497a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800497e:	464b      	mov	r3, r9
 8004980:	460a      	mov	r2, r1
 8004982:	eb42 0303 	adc.w	r3, r2, r3
 8004986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800498a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004994:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004998:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800499c:	460b      	mov	r3, r1
 800499e:	18db      	adds	r3, r3, r3
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a2:	4613      	mov	r3, r2
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049ae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80049b2:	f7fc f901 	bl	8000bb8 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <LL_USART_SetBaudRate+0x238>)
 80049bc:	fba3 1302 	umull	r1, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	2164      	movs	r1, #100	; 0x64
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	3332      	adds	r3, #50	; 0x32
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <LL_USART_SetBaudRate+0x238>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4423      	add	r3, r4
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	609a      	str	r2, [r3, #8]
}
 80049ea:	e108      	b.n	8004bfe <LL_USART_SetBaudRate+0x44a>
 80049ec:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80049f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049fa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049fe:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	4641      	mov	r1, r8
 8004a14:	1854      	adds	r4, r2, r1
 8004a16:	4649      	mov	r1, r9
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a38:	464b      	mov	r3, r9
 8004a3a:	eb45 0303 	adc.w	r3, r5, r3
 8004a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a4c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	4621      	mov	r1, r4
 8004a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a66:	4621      	mov	r1, r4
 8004a68:	008a      	lsls	r2, r1, #2
 8004a6a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004a6e:	f7fc f8a3 	bl	8000bb8 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <LL_USART_SetBaudRate+0x458>)
 8004a78:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	b29c      	uxth	r4, r3
 8004a84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a92:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004a96:	4642      	mov	r2, r8
 8004a98:	464b      	mov	r3, r9
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	61b9      	str	r1, [r7, #24]
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	1851      	adds	r1, r2, r1
 8004aaa:	6139      	str	r1, [r7, #16]
 8004aac:	4649      	mov	r1, r9
 8004aae:	414b      	adcs	r3, r1
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abe:	4659      	mov	r1, fp
 8004ac0:	00cb      	lsls	r3, r1, #3
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac8:	4651      	mov	r1, sl
 8004aca:	00ca      	lsls	r2, r1, #3
 8004acc:	4610      	mov	r0, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ada:	464b      	mov	r3, r9
 8004adc:	460a      	mov	r2, r1
 8004ade:	eb42 0303 	adc.w	r3, r2, r3
 8004ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004af0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004b00:	4649      	mov	r1, r9
 8004b02:	008b      	lsls	r3, r1, #2
 8004b04:	4641      	mov	r1, r8
 8004b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	008a      	lsls	r2, r1, #2
 8004b0e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004b12:	f7fc f851 	bl	8000bb8 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <LL_USART_SetBaudRate+0x458>)
 8004b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2264      	movs	r2, #100	; 0x64
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	1acb      	subs	r3, r1, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	3332      	adds	r3, #50	; 0x32
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <LL_USART_SetBaudRate+0x458>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4423      	add	r3, r4
 8004b42:	b29c      	uxth	r4, r3
 8004b44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b48:	2200      	movs	r2, #0
 8004b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b4e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b62:	4641      	mov	r1, r8
 8004b64:	1851      	adds	r1, r2, r1
 8004b66:	6039      	str	r1, [r7, #0]
 8004b68:	4649      	mov	r1, r9
 8004b6a:	414b      	adcs	r3, r1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	00cb      	lsls	r3, r1, #3
 8004b7e:	4651      	mov	r1, sl
 8004b80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b84:	4651      	mov	r1, sl
 8004b86:	00ca      	lsls	r2, r1, #3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4642      	mov	r2, r8
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	673b      	str	r3, [r7, #112]	; 0x70
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8004b9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	008a      	lsls	r2, r1, #2
 8004bc2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004bc6:	f7fb fff7 	bl	8000bb8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <LL_USART_SetBaudRate+0x458>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <LL_USART_SetBaudRate+0x458>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4423      	add	r3, r4
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0a:	bf00      	nop
 8004c0c:	51eb851f 	.word	0x51eb851f

08004c10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fd8c 	bl	8004740 <LL_USART_IsEnabled>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d149      	bne.n	8004cc2 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c36:	f023 030c 	bic.w	r3, r3, #12
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	6851      	ldr	r1, [r2, #4]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68d2      	ldr	r2, [r2, #12]
 8004c42:	4311      	orrs	r1, r2
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	6912      	ldr	r2, [r2, #16]
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6992      	ldr	r2, [r2, #24]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fd83 	bl	8004768 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fd90 	bl	800478e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff f96a 	bl	8003f4c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <LL_USART_Init+0xbc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d102      	bne.n	8004c86 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e00c      	b.n	8004ca0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <LL_USART_Init+0xc0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d102      	bne.n	8004c94 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e005      	b.n	8004ca0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <LL_USART_Init+0xc4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00d      	beq.n	8004cc2 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fd79 	bl	80047b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40011000 	.word	0x40011000
 8004cd0:	40004400 	.word	0x40004400
 8004cd4:	40011400 	.word	0x40011400

08004cd8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <LL_InitTick+0x30>)
 8004cec:	3b01      	subs	r3, #1
 8004cee:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <LL_InitTick+0x30>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <LL_InitTick+0x30>)
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004d14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ffdd 	bl	8004cd8 <LL_InitTick>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004d30:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <LL_SetSystemCoreClock+0x1c>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000000 	.word	0x20000000

08004d48 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	_file = file;
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <__Custom_Exception_Set_Message+0x2c>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6013      	str	r3, [r2, #0]
	_line = line;
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <__Custom_Exception_Set_Message+0x30>)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6013      	str	r3, [r2, #0]
	_message = message;
 8004d60:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <__Custom_Exception_Set_Message+0x34>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000026c 	.word	0x2000026c
 8004d78:	20000270 	.word	0x20000270
 8004d7c:	20000274 	.word	0x20000274

08004d80 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8004d84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d88:	4803      	ldr	r0, [pc, #12]	; (8004d98 <Custom_FileSystem_Load+0x18>)
 8004d8a:	f000 f851 	bl	8004e30 <Custom_Flash_Read>
	filesystemLoaded = true;
 8004d8e:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <Custom_FileSystem_Load+0x1c>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000278 	.word	0x20000278
 8004d9c:	20001279 	.word	0x20001279

08004da0 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <Custom_Flash_Check_Error+0x78>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <Custom_Flash_Check_Error+0x24>
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <Custom_Flash_Check_Error+0x7c>)
 8004db8:	2113      	movs	r1, #19
 8004dba:	4819      	ldr	r0, [pc, #100]	; (8004e20 <Custom_Flash_Check_Error+0x80>)
 8004dbc:	f7ff ffc4 	bl	8004d48 <__Custom_Exception_Set_Message>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e024      	b.n	8004e0e <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <Custom_Flash_Check_Error+0x3c>
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <Custom_Flash_Check_Error+0x84>)
 8004dd0:	2114      	movs	r1, #20
 8004dd2:	4813      	ldr	r0, [pc, #76]	; (8004e20 <Custom_Flash_Check_Error+0x80>)
 8004dd4:	f7ff ffb8 	bl	8004d48 <__Custom_Exception_Set_Message>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e018      	b.n	8004e0e <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <Custom_Flash_Check_Error+0x54>
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <Custom_Flash_Check_Error+0x88>)
 8004de8:	2115      	movs	r1, #21
 8004dea:	480d      	ldr	r0, [pc, #52]	; (8004e20 <Custom_Flash_Check_Error+0x80>)
 8004dec:	f7ff ffac 	bl	8004d48 <__Custom_Exception_Set_Message>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e00c      	b.n	8004e0e <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <Custom_Flash_Check_Error+0x6c>
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <Custom_Flash_Check_Error+0x8c>)
 8004e00:	2116      	movs	r1, #22
 8004e02:	4807      	ldr	r0, [pc, #28]	; (8004e20 <Custom_Flash_Check_Error+0x80>)
 8004e04:	f7ff ffa0 	bl	8004d48 <__Custom_Exception_Set_Message>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <Custom_Flash_Check_Error+0x6e>

	return true;
 8004e0c:	2301      	movs	r3, #1
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023c00 	.word	0x40023c00
 8004e1c:	08009d90 	.word	0x08009d90
 8004e20:	08009dac 	.word	0x08009dac
 8004e24:	08009dd4 	.word	0x08009dd4
 8004e28:	08009df4 	.word	0x08009df4
 8004e2c:	08009e14 	.word	0x08009e14

08004e30 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e40:	d306      	bcc.n	8004e50 <Custom_Flash_Read+0x20>
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <Custom_Flash_Read+0x5c>)
 8004e44:	211d      	movs	r1, #29
 8004e46:	4812      	ldr	r0, [pc, #72]	; (8004e90 <Custom_Flash_Read+0x60>)
 8004e48:	f7ff ff7e 	bl	8004d48 <__Custom_Exception_Set_Message>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e019      	b.n	8004e84 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e00f      	b.n	8004e76 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004e5c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004e60:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	440b      	add	r3, r1
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d8eb      	bhi.n	8004e56 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8004e7e:	f7ff ff8f 	bl	8004da0 <Custom_Flash_Check_Error>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	08009e2c 	.word	0x08009e2c
 8004e90:	08009dac 	.word	0x08009dac

08004e94 <LL_SPI_Enable>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_SPI_SetTransferDirection>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d101      	bne.n	8004ef2 <LL_SPI_IsActiveFlag_TXE+0x18>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d101      	bne.n	8004f18 <LL_SPI_IsActiveFlag_BSY+0x18>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_SPI_IsActiveFlag_BSY+0x1a>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	330c      	adds	r3, #12
 8004f36:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <Custom_GPIO_Set>:
		uint32_t value) {
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <Custom_GPIO_Set+0x22>
 8004f66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f6a:	e000      	b.n	8004f6e <Custom_GPIO_Set+0x24>
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	400b      	ands	r3, r1
 8004f72:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	615a      	str	r2, [r3, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8004f8e:	bf00      	nop
 8004f90:	480b      	ldr	r0, [pc, #44]	; (8004fc0 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004f92:	f7ff ffa2 	bl	8004eda <LL_SPI_IsActiveFlag_TXE>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f9      	beq.n	8004f90 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4807      	ldr	r0, [pc, #28]	; (8004fc0 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004fa2:	f7ff ffc0 	bl	8004f26 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8004fa6:	bf00      	nop
 8004fa8:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004faa:	f7ff ffa9 	bl	8004f00 <LL_SPI_IsActiveFlag_BSY>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40003800 	.word	0x40003800

08004fc4 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	4811      	ldr	r0, [pc, #68]	; (8005018 <Custom_OLED_Write_Command+0x54>)
 8004fd4:	f7ff ffb9 	bl	8004f4a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2104      	movs	r1, #4
 8004fdc:	480f      	ldr	r0, [pc, #60]	; (800501c <Custom_OLED_Write_Command+0x58>)
 8004fde:	f7ff ffb4 	bl	8004f4a <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	e009      	b.n	8004ffc <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ffc7 	bl	8004f84 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d8f1      	bhi.n	8004fe8 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8005004:	2201      	movs	r2, #1
 8005006:	2104      	movs	r1, #4
 8005008:	4804      	ldr	r0, [pc, #16]	; (800501c <Custom_OLED_Write_Command+0x58>)
 800500a:	f7ff ff9e 	bl	8004f4a <Custom_GPIO_Set>
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40020000 	.word	0x40020000
 800501c:	40020400 	.word	0x40020400

08005020 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 800502a:	2201      	movs	r2, #1
 800502c:	2110      	movs	r1, #16
 800502e:	4817      	ldr	r0, [pc, #92]	; (800508c <Custom_OLED_Write_Data+0x6c>)
 8005030:	f7ff ff8b 	bl	8004f4a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8005034:	2200      	movs	r2, #0
 8005036:	2104      	movs	r1, #4
 8005038:	4815      	ldr	r0, [pc, #84]	; (8005090 <Custom_OLED_Write_Data+0x70>)
 800503a:	f7ff ff86 	bl	8004f4a <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e016      	b.n	8005072 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff95 	bl	8004f84 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ff8c 	bl	8004f84 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d8e4      	bhi.n	8005044 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 800507a:	2201      	movs	r2, #1
 800507c:	2104      	movs	r1, #4
 800507e:	4804      	ldr	r0, [pc, #16]	; (8005090 <Custom_OLED_Write_Data+0x70>)
 8005080:	f7ff ff63 	bl	8004f4a <Custom_GPIO_Set>
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40020000 	.word	0x40020000
 8005090:	40020400 	.word	0x40020400

08005094 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	71fb      	strb	r3, [r7, #7]
 80050a6:	4603      	mov	r3, r0
 80050a8:	71bb      	strb	r3, [r7, #6]
 80050aa:	460b      	mov	r3, r1
 80050ac:	717b      	strb	r3, [r7, #5]
 80050ae:	4613      	mov	r3, r2
 80050b0:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 80050b2:	2315      	movs	r3, #21
 80050b4:	723b      	strb	r3, [r7, #8]
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	727b      	strb	r3, [r7, #9]
 80050ba:	797b      	ldrb	r3, [r7, #5]
 80050bc:	72bb      	strb	r3, [r7, #10]
 80050be:	2375      	movs	r3, #117	; 0x75
 80050c0:	72fb      	strb	r3, [r7, #11]
 80050c2:	79bb      	ldrb	r3, [r7, #6]
 80050c4:	733b      	strb	r3, [r7, #12]
 80050c6:	793b      	ldrb	r3, [r7, #4]
 80050c8:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	2106      	movs	r1, #6
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff77 	bl	8004fc4 <Custom_OLED_Write_Command>
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}

080050de <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 80050e4:	2300      	movs	r3, #0
 80050e6:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 80050e8:	233f      	movs	r3, #63	; 0x3f
 80050ea:	225f      	movs	r2, #95	; 0x5f
 80050ec:	2100      	movs	r1, #0
 80050ee:	2000      	movs	r0, #0
 80050f0:	f7ff ffd0 	bl	8005094 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80050f4:	2300      	movs	r3, #0
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e007      	b.n	800510a <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 80050fa:	1cbb      	adds	r3, r7, #2
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff8e 	bl	8005020 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005110:	dbf3      	blt.n	80050fa <Custom_OLED_Clear+0x1c>
    }
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <Custom_OLED_Init>:

void Custom_OLED_Init() {
 800511c:	b5b0      	push	{r4, r5, r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8005122:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005126:	480e      	ldr	r0, [pc, #56]	; (8005160 <Custom_OLED_Init+0x44>)
 8005128:	f7ff fec4 	bl	8004eb4 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <Custom_OLED_Init+0x44>)
 800512e:	f7ff feb1 	bl	8004e94 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <Custom_OLED_Init+0x48>)
 8005134:	463c      	mov	r4, r7
 8005136:	461d      	mov	r5, r3
 8005138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005140:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005144:	6020      	str	r0, [r4, #0]
 8005146:	3404      	adds	r4, #4
 8005148:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 800514a:	463b      	mov	r3, r7
 800514c:	2125      	movs	r1, #37	; 0x25
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ff38 	bl	8004fc4 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8005154:	f7ff ffc3 	bl	80050de <Custom_OLED_Clear>
}
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bdb0      	pop	{r4, r5, r7, pc}
 8005160:	40003800 	.word	0x40003800
 8005164:	08009e74 	.word	0x08009e74

08005168 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4623      	mov	r3, r4
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	4603      	mov	r3, r0
 800517c:	80bb      	strh	r3, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	71bb      	strb	r3, [r7, #6]
 8005182:	4613      	mov	r3, r2
 8005184:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8005186:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800518a:	461a      	mov	r2, r3
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	4413      	add	r3, r2
 8005190:	b2da      	uxtb	r2, r3
 8005192:	79bb      	ldrb	r3, [r7, #6]
 8005194:	4413      	add	r3, r2
 8005196:	b2db      	uxtb	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 800519c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	4413      	add	r3, r2
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2b5f      	cmp	r3, #95	; 0x5f
 80051b2:	d802      	bhi.n	80051ba <Custom_OLED_Putchar+0x52>
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	2b3f      	cmp	r3, #63	; 0x3f
 80051b8:	d902      	bls.n	80051c0 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051be:	e06a      	b.n	8005296 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	78f9      	ldrb	r1, [r7, #3]
 80051c6:	79b8      	ldrb	r0, [r7, #6]
 80051c8:	f7ff ff64 	bl	8005094 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 80051cc:	79fa      	ldrb	r2, [r7, #7]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <Custom_OLED_Putchar+0x138>)
 80051d6:	4413      	add	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	e048      	b.n	8005272 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e03f      	b.n	8005266 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e034      	b.n	8005256 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e029      	b.n	8005246 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	fa42 f303 	asr.w	r3, r2, r3
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <Custom_OLED_Putchar+0xa6>
 800520a:	88b8      	ldrh	r0, [r7, #4]
 800520c:	e000      	b.n	8005210 <Custom_OLED_Putchar+0xa8>
 800520e:	2000      	movs	r0, #0
 8005210:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005214:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	fb02 f101 	mul.w	r1, r2, r1
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	440a      	add	r2, r1
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	00da      	lsls	r2, r3, #3
 8005228:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	441a      	add	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <Custom_OLED_Putchar+0x13c>)
 800523a:	4601      	mov	r1, r0
 800523c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3301      	adds	r3, #1
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	dbd0      	blt.n	80051f2 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	dbc5      	blt.n	80051ec <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	3301      	adds	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b07      	cmp	r3, #7
 800526a:	ddbc      	ble.n	80051e6 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b04      	cmp	r3, #4
 8005276:	ddb3      	ble.n	80051e0 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8005278:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800527c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005280:	fb03 f202 	mul.w	r2, r3, r2
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4619      	mov	r1, r3
 800528e:	4805      	ldr	r0, [pc, #20]	; (80052a4 <Custom_OLED_Putchar+0x13c>)
 8005290:	f7ff fec6 	bl	8005020 <Custom_OLED_Write_Data>
	return 0;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3724      	adds	r7, #36	; 0x24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop
 80052a0:	0800a340 	.word	0x0800a340
 80052a4:	2000127c 	.word	0x2000127c

080052a8 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 80052a8:	b40f      	push	{r0, r1, r2, r3}
 80052aa:	b590      	push	{r4, r7, lr}
 80052ac:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80052b0:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 80052be:	f507 720d 	add.w	r2, r7, #564	; 0x234
 80052c2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80052c6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80052ca:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 80052cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80052d0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80052d4:	f107 0008 	add.w	r0, r7, #8
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80052de:	f002 fc03 	bl	8007ae8 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80052e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ec:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80052f6:	e226      	b.n	8005746 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80052f8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80052fc:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8005300:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b2f      	cmp	r3, #47	; 0x2f
 800530a:	f040 81f7 	bne.w	80056fc <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 800530e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005312:	3301      	adds	r3, #1
 8005314:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005318:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800531c:	5cd3      	ldrb	r3, [r2, r3]
 800531e:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 8005322:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005326:	2b2f      	cmp	r3, #47	; 0x2f
 8005328:	d105      	bne.n	8005336 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 800532a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800532e:	3301      	adds	r3, #1
 8005330:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005334:	e1e2      	b.n	80056fc <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 8005336:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800533a:	3b23      	subs	r3, #35	; 0x23
 800533c:	2b56      	cmp	r3, #86	; 0x56
 800533e:	f200 81d7 	bhi.w	80056f0 <Custom_OLED_Printf+0x448>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <Custom_OLED_Printf+0xa0>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005561 	.word	0x08005561
 800534c:	080056f1 	.word	0x080056f1
 8005350:	080056f1 	.word	0x080056f1
 8005354:	080056f1 	.word	0x080056f1
 8005358:	080056f1 	.word	0x080056f1
 800535c:	080056f1 	.word	0x080056f1
 8005360:	080056f1 	.word	0x080056f1
 8005364:	080056f1 	.word	0x080056f1
 8005368:	080056f1 	.word	0x080056f1
 800536c:	080056f1 	.word	0x080056f1
 8005370:	080056f1 	.word	0x080056f1
 8005374:	080056f1 	.word	0x080056f1
 8005378:	080056f1 	.word	0x080056f1
 800537c:	080054a5 	.word	0x080054a5
 8005380:	080054a5 	.word	0x080054a5
 8005384:	080054a5 	.word	0x080054a5
 8005388:	080054a5 	.word	0x080054a5
 800538c:	080054a5 	.word	0x080054a5
 8005390:	080054a5 	.word	0x080054a5
 8005394:	080054a5 	.word	0x080054a5
 8005398:	080056f1 	.word	0x080056f1
 800539c:	080056f1 	.word	0x080056f1
 80053a0:	080056f1 	.word	0x080056f1
 80053a4:	080056f1 	.word	0x080056f1
 80053a8:	080056f1 	.word	0x080056f1
 80053ac:	080056f1 	.word	0x080056f1
 80053b0:	080056f1 	.word	0x080056f1
 80053b4:	080056f1 	.word	0x080056f1
 80053b8:	080056f1 	.word	0x080056f1
 80053bc:	080056f1 	.word	0x080056f1
 80053c0:	08005551 	.word	0x08005551
 80053c4:	080056f1 	.word	0x080056f1
 80053c8:	080056f1 	.word	0x080056f1
 80053cc:	080056f1 	.word	0x080056f1
 80053d0:	080056f1 	.word	0x080056f1
 80053d4:	080056f1 	.word	0x080056f1
 80053d8:	080056f1 	.word	0x080056f1
 80053dc:	080056f1 	.word	0x080056f1
 80053e0:	080056f1 	.word	0x080056f1
 80053e4:	080056f1 	.word	0x080056f1
 80053e8:	0800553f 	.word	0x0800553f
 80053ec:	080056f1 	.word	0x080056f1
 80053f0:	080056f1 	.word	0x080056f1
 80053f4:	080056f1 	.word	0x080056f1
 80053f8:	080056f1 	.word	0x080056f1
 80053fc:	080056f1 	.word	0x080056f1
 8005400:	080056f1 	.word	0x080056f1
 8005404:	080056f1 	.word	0x080056f1
 8005408:	080056f1 	.word	0x080056f1
 800540c:	080056f1 	.word	0x080056f1
 8005410:	080056f1 	.word	0x080056f1
 8005414:	080056f1 	.word	0x080056f1
 8005418:	080056f1 	.word	0x080056f1
 800541c:	080056f1 	.word	0x080056f1
 8005420:	080056f1 	.word	0x080056f1
 8005424:	080056f1 	.word	0x080056f1
 8005428:	080056f1 	.word	0x080056f1
 800542c:	080056f1 	.word	0x080056f1
 8005430:	080056f1 	.word	0x080056f1
 8005434:	080056f1 	.word	0x080056f1
 8005438:	080056f1 	.word	0x080056f1
 800543c:	080056f1 	.word	0x080056f1
 8005440:	08005559 	.word	0x08005559
 8005444:	080054dd 	.word	0x080054dd
 8005448:	080054ef 	.word	0x080054ef
 800544c:	080056f1 	.word	0x080056f1
 8005450:	080056f1 	.word	0x080056f1
 8005454:	080056f1 	.word	0x080056f1
 8005458:	080054d3 	.word	0x080054d3
 800545c:	080056f1 	.word	0x080056f1
 8005460:	080056f1 	.word	0x080056f1
 8005464:	080056f1 	.word	0x080056f1
 8005468:	08005549 	.word	0x08005549
 800546c:	0800550d 	.word	0x0800550d
 8005470:	080054f9 	.word	0x080054f9
 8005474:	080056f1 	.word	0x080056f1
 8005478:	08005503 	.word	0x08005503
 800547c:	08005535 	.word	0x08005535
 8005480:	080056f1 	.word	0x080056f1
 8005484:	080054c9 	.word	0x080054c9
 8005488:	08005521 	.word	0x08005521
 800548c:	08005517 	.word	0x08005517
 8005490:	080056f1 	.word	0x080056f1
 8005494:	0800552b 	.word	0x0800552b
 8005498:	080054bf 	.word	0x080054bf
 800549c:	080056f1 	.word	0x080056f1
 80054a0:	080054e5 	.word	0x080054e5
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 80054aa:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80054ae:	3b30      	subs	r3, #48	; 0x30
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	00d2      	lsls	r2, r2, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 80054bc:	e118      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 80054be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054c2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054c6:	e113      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 80054c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054cc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054d0:	e10e      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 80054d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80054d6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054da:	e109      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 80054dc:	231f      	movs	r3, #31
 80054de:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054e2:	e105      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80054e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80054e8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054ec:	e100      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80054ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80054f2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80054f6:	e0fb      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80054f8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80054fc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005500:	e0f6      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 8005502:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8005506:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800550a:	e0f1      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 800550c:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8005510:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005514:	e0ec      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 8005516:	f240 73ef 	movw	r3, #2031	; 0x7ef
 800551a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800551e:	e0e7      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 8005520:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005524:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005528:	e0e2      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 800552a:	f647 031f 	movw	r3, #30751	; 0x781f
 800552e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005532:	e0dd      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 8005534:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8005538:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800553c:	e0d8      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 800553e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005542:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005546:	e0d3      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8005548:	2300      	movs	r3, #0
 800554a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800554e:	e0cf      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8005550:	2302      	movs	r3, #2
 8005552:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8005556:	e0cb      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800555e:	e0c7      	b.n	80056f0 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800556c:	e099      	b.n	80056a2 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 800556e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005572:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005576:	4413      	add	r3, r2
 8005578:	3302      	adds	r3, #2
 800557a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800557e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005582:	5cd3      	ldrb	r3, [r2, r3]
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d924      	bls.n	80055d2 <Custom_OLED_Printf+0x32a>
 8005588:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800558c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005590:	4413      	add	r3, r2
 8005592:	3302      	adds	r3, #2
 8005594:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005598:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800559c:	5cd3      	ldrb	r3, [r2, r3]
 800559e:	2b46      	cmp	r3, #70	; 0x46
 80055a0:	d817      	bhi.n	80055d2 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 80055a2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 80055ac:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80055b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055b4:	4413      	add	r3, r2
 80055b6:	3302      	adds	r3, #2
 80055b8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80055bc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80055c8:	4413      	add	r3, r2
 80055ca:	3b37      	subs	r3, #55	; 0x37
 80055cc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80055d0:	e062      	b.n	8005698 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 80055d2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80055d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055da:	4413      	add	r3, r2
 80055dc:	3302      	adds	r3, #2
 80055de:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80055e2:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80055e6:	5cd3      	ldrb	r3, [r2, r3]
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d924      	bls.n	8005636 <Custom_OLED_Printf+0x38e>
 80055ec:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80055f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055f4:	4413      	add	r3, r2
 80055f6:	3302      	adds	r3, #2
 80055f8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80055fc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005600:	5cd3      	ldrb	r3, [r2, r3]
 8005602:	2b66      	cmp	r3, #102	; 0x66
 8005604:	d817      	bhi.n	8005636 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 8005606:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 8005610:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005614:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005618:	4413      	add	r3, r2
 800561a:	3302      	adds	r3, #2
 800561c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005620:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	461a      	mov	r2, r3
 8005628:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800562c:	4413      	add	r3, r2
 800562e:	3b57      	subs	r3, #87	; 0x57
 8005630:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005634:	e030      	b.n	8005698 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 8005636:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800563a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800563e:	4413      	add	r3, r2
 8005640:	3302      	adds	r3, #2
 8005642:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005646:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800564a:	5cd3      	ldrb	r3, [r2, r3]
 800564c:	2b2f      	cmp	r3, #47	; 0x2f
 800564e:	d923      	bls.n	8005698 <Custom_OLED_Printf+0x3f0>
 8005650:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005654:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005658:	4413      	add	r3, r2
 800565a:	3302      	adds	r3, #2
 800565c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005660:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005664:	5cd3      	ldrb	r3, [r2, r3]
 8005666:	2b39      	cmp	r3, #57	; 0x39
 8005668:	d816      	bhi.n	8005698 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 800566a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8005674:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005678:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800567c:	4413      	add	r3, r2
 800567e:	3302      	adds	r3, #2
 8005680:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005684:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005688:	5cd3      	ldrb	r3, [r2, r3]
 800568a:	461a      	mov	r2, r3
 800568c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005690:	4413      	add	r3, r2
 8005692:	3b30      	subs	r3, #48	; 0x30
 8005694:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005698:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80056a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	f67f af61 	bls.w	800556e <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 80056ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056b8:	f023 0307 	bic.w	r3, r3, #7
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 80056e4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80056e8:	3306      	adds	r3, #6
 80056ea:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80056ee:	bf00      	nop
				}

				cursor += 2;
 80056f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80056f4:	3302      	adds	r3, #2
 80056f6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80056fa:	e024      	b.n	8005746 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80056fc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005700:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8005704:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005708:	4413      	add	r3, r2
 800570a:	7818      	ldrb	r0, [r3, #0]
 800570c:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 8005710:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8005714:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8005718:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4623      	mov	r3, r4
 8005720:	f7ff fd22 	bl	8005168 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 8005724:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8005728:	461a      	mov	r2, r3
 800572a:	0052      	lsls	r2, r2, #1
 800572c:	4413      	add	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8005736:	4413      	add	r3, r2
 8005738:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 800573c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005740:	3301      	adds	r3, #1
 8005742:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 8005746:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800574a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800574e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f47f adce 	bne.w	80052f8 <Custom_OLED_Printf+0x50>
	}
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8005764:	46bd      	mov	sp, r7
 8005766:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800576a:	b004      	add	sp, #16
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <LL_GPIO_ReadInputPort>:
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
	return uwTick;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <Custom_Delay_Get_SysTick+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000254 	.word	0x20000254

080057a0 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 80057be:	f7ff ffe3 	bl	8005788 <Custom_Delay_Get_SysTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	741a      	strb	r2, [r3, #16]
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ffc3 	bl	8005770 <LL_GPIO_ReadInputPort>
 80057ea:	4602      	mov	r2, r0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 8005800:	f7ff ffc2 	bl	8005788 <Custom_Delay_Get_SysTick>
 8005804:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	3b01      	subs	r3, #1
 800580c:	2b07      	cmp	r3, #7
 800580e:	d873      	bhi.n	80058f8 <Custom_Switch_State_Machine+0x120>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <Custom_Switch_State_Machine+0x40>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	08005839 	.word	0x08005839
 800581c:	0800584d 	.word	0x0800584d
 8005820:	080058f9 	.word	0x080058f9
 8005824:	08005883 	.word	0x08005883
 8005828:	080058f9 	.word	0x080058f9
 800582c:	080058f9 	.word	0x080058f9
 8005830:	080058f9 	.word	0x080058f9
 8005834:	080058cd 	.word	0x080058cd

		case LONG_OFF:
			if (currentPushed) {
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d05b      	beq.n	80058f6 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2250      	movs	r2, #80	; 0x50
 8005848:	609a      	str	r2, [r3, #8]
			}
			break;
 800584a:	e054      	b.n	80058f6 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	1acb      	subs	r3, r1, r3
 8005858:	429a      	cmp	r2, r3
 800585a:	d808      	bhi.n	800586e <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 800585c:	2301      	movs	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2204      	movs	r2, #4
 8005864:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800586c:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68d9      	ldr	r1, [r3, #12]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	1acb      	subs	r3, r1, r3
 800587a:	441a      	add	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	609a      	str	r2, [r3, #8]
			break;
 8005880:	e03a      	b.n	80058f8 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	f083 0301 	eor.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2208      	movs	r2, #8
 8005892:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2250      	movs	r2, #80	; 0x50
 8005898:	609a      	str	r2, [r3, #8]
				break;
 800589a:	e02d      	b.n	80058f8 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d805      	bhi.n	80058b8 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058b6:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68d9      	ldr	r1, [r3, #12]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1acb      	subs	r3, r1, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
			break;
 80058ca:	e015      	b.n	80058f8 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	1acb      	subs	r3, r1, r3
 80058d8:	429a      	cmp	r2, r3
 80058da:	d802      	bhi.n	80058e2 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1acb      	subs	r3, r1, r3
 80058ee:	441a      	add	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]
			break;
 80058f4:	e000      	b.n	80058f8 <Custom_Switch_State_Machine+0x120>
			break;
 80058f6:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2, sw3;
	if (!isInitialized) {
 800590e:	4b59      	ldr	r3, [pc, #356]	; (8005a74 <Custom_Switch_Read+0x16c>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f083 0301 	eor.w	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d014      	beq.n	8005946 <Custom_Switch_Read+0x3e>
		isInitialized = true;
 800591c:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <Custom_Switch_Read+0x16c>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 8005922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005926:	4954      	ldr	r1, [pc, #336]	; (8005a78 <Custom_Switch_Read+0x170>)
 8005928:	4854      	ldr	r0, [pc, #336]	; (8005a7c <Custom_Switch_Read+0x174>)
 800592a:	f7ff ff39 	bl	80057a0 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 800592e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005932:	4951      	ldr	r1, [pc, #324]	; (8005a78 <Custom_Switch_Read+0x170>)
 8005934:	4852      	ldr	r0, [pc, #328]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005936:	f7ff ff33 	bl	80057a0 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw3, SW3_PORT, SW3_PIN);
 800593a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800593e:	494e      	ldr	r1, [pc, #312]	; (8005a78 <Custom_Switch_Read+0x170>)
 8005940:	4850      	ldr	r0, [pc, #320]	; (8005a84 <Custom_Switch_Read+0x17c>)
 8005942:	f7ff ff2d 	bl	80057a0 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8005946:	484d      	ldr	r0, [pc, #308]	; (8005a7c <Custom_Switch_Read+0x174>)
 8005948:	f7ff ff46 	bl	80057d8 <Custom_Switch_State_Machine>
 800594c:	4603      	mov	r3, r0
 800594e:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8005950:	484b      	ldr	r0, [pc, #300]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005952:	f7ff ff41 	bl	80057d8 <Custom_Switch_State_Machine>
 8005956:	4603      	mov	r3, r0
 8005958:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3PushEvent = Custom_Switch_State_Machine(&sw3);
 800595a:	484a      	ldr	r0, [pc, #296]	; (8005a84 <Custom_Switch_Read+0x17c>)
 800595c:	f7ff ff3c 	bl	80057d8 <Custom_Switch_State_Machine>
 8005960:	4603      	mov	r3, r0
 8005962:	717b      	strb	r3, [r7, #5]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if(sw1PushEvent) {
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <Custom_Switch_Read+0xa4>
		if (sw2.state & SHORT_ON){
 800596a:	4b45      	ldr	r3, [pc, #276]	; (8005a80 <Custom_Switch_Read+0x178>)
 800596c:	7c1b      	ldrb	r3, [r3, #16]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <Custom_Switch_Read+0x82>
			sw2PushEvent = true;
 8005976:	2301      	movs	r3, #1
 8005978:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw1.state;
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <Custom_Switch_Read+0x174>)
 800597c:	7c1a      	ldrb	r2, [r3, #16]
 800597e:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005980:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw1.timer;
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <Custom_Switch_Read+0x174>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005988:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <Custom_Switch_Read+0x17c>)
 800598c:	7c1b      	ldrb	r3, [r3, #16]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d051      	beq.n	8005a3a <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 8005996:	2301      	movs	r3, #1
 8005998:	717b      	strb	r3, [r7, #5]
			sw3.state = sw1.state;
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <Custom_Switch_Read+0x174>)
 800599c:	7c1a      	ldrb	r2, [r3, #16]
 800599e:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <Custom_Switch_Read+0x17c>)
 80059a0:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw1.timer;
 80059a2:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <Custom_Switch_Read+0x174>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <Custom_Switch_Read+0x17c>)
 80059a8:	6093      	str	r3, [r2, #8]
 80059aa:	e046      	b.n	8005a3a <Custom_Switch_Read+0x132>
		}
	}
	else if(sw2PushEvent) {
 80059ac:	79bb      	ldrb	r3, [r7, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <Custom_Switch_Read+0xec>
		if (sw1.state & SHORT_ON){
 80059b2:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <Custom_Switch_Read+0x174>)
 80059b4:	7c1b      	ldrb	r3, [r3, #16]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <Custom_Switch_Read+0xca>
			sw1PushEvent = true;
 80059be:	2301      	movs	r3, #1
 80059c0:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw2.state;
 80059c2:	4b2f      	ldr	r3, [pc, #188]	; (8005a80 <Custom_Switch_Read+0x178>)
 80059c4:	7c1a      	ldrb	r2, [r3, #16]
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <Custom_Switch_Read+0x174>)
 80059c8:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw2.timer;
 80059ca:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <Custom_Switch_Read+0x178>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <Custom_Switch_Read+0x174>)
 80059d0:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 80059d2:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <Custom_Switch_Read+0x17c>)
 80059d4:	7c1b      	ldrb	r3, [r3, #16]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d02d      	beq.n	8005a3a <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 80059de:	2301      	movs	r3, #1
 80059e0:	717b      	strb	r3, [r7, #5]
			sw3.state = sw2.state;
 80059e2:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <Custom_Switch_Read+0x178>)
 80059e4:	7c1a      	ldrb	r2, [r3, #16]
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <Custom_Switch_Read+0x17c>)
 80059e8:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw2.timer;
 80059ea:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <Custom_Switch_Read+0x178>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <Custom_Switch_Read+0x17c>)
 80059f0:	6093      	str	r3, [r2, #8]
 80059f2:	e022      	b.n	8005a3a <Custom_Switch_Read+0x132>
		}
	}
	else if(sw3PushEvent) {
 80059f4:	797b      	ldrb	r3, [r7, #5]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01f      	beq.n	8005a3a <Custom_Switch_Read+0x132>
		if (sw1.state & SHORT_ON){
 80059fa:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <Custom_Switch_Read+0x174>)
 80059fc:	7c1b      	ldrb	r3, [r3, #16]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <Custom_Switch_Read+0x112>
			sw1PushEvent = true;
 8005a06:	2301      	movs	r3, #1
 8005a08:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw3.state;
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <Custom_Switch_Read+0x17c>)
 8005a0c:	7c1a      	ldrb	r2, [r3, #16]
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <Custom_Switch_Read+0x174>)
 8005a10:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw3.timer;
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <Custom_Switch_Read+0x17c>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <Custom_Switch_Read+0x174>)
 8005a18:	6093      	str	r3, [r2, #8]
		}
		if (sw2.state & SHORT_ON) {
 8005a1a:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005a1c:	7c1b      	ldrb	r3, [r3, #16]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <Custom_Switch_Read+0x132>
			sw2PushEvent = true;
 8005a26:	2301      	movs	r3, #1
 8005a28:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw3.state;
 8005a2a:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <Custom_Switch_Read+0x17c>)
 8005a2c:	7c1a      	ldrb	r2, [r3, #16]
 8005a2e:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005a30:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw3.timer;
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <Custom_Switch_Read+0x17c>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4a12      	ldr	r2, [pc, #72]	; (8005a80 <Custom_Switch_Read+0x178>)
 8005a38:	6093      	str	r3, [r2, #8]
		}
	}


	uint8_t buttonPushEvent = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	713b      	strb	r3, [r7, #4]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <Custom_Switch_Read+0x144>
 8005a44:	793b      	ldrb	r3, [r7, #4]
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	713b      	strb	r3, [r7, #4]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8005a4c:	79bb      	ldrb	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <Custom_Switch_Read+0x152>
 8005a52:	793b      	ldrb	r3, [r7, #4]
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	713b      	strb	r3, [r7, #4]
	if (sw3PushEvent) buttonPushEvent |= CUSTOM_SW_3;
 8005a5a:	797b      	ldrb	r3, [r7, #5]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <Custom_Switch_Read+0x160>
 8005a60:	793b      	ldrb	r3, [r7, #4]
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	713b      	strb	r3, [r7, #4]

	return buttonPushEvent;
 8005a68:	793b      	ldrb	r3, [r7, #4]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	200013bc 	.word	0x200013bc
 8005a78:	40020800 	.word	0x40020800
 8005a7c:	200013c0 	.word	0x200013c0
 8005a80:	200013d4 	.word	0x200013d4
 8005a84:	200013e8 	.word	0x200013e8

08005a88 <LL_USART_Enable>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	605a      	str	r2, [r3, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8005afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8005b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8005b1e:	bf00      	nop
 8005b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d1f8      	bne.n	8005b20 <Custom_Delay_us+0x34>
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff ffcc 	bl	8005aec <Custom_Delay_us>
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <Custom_Delay_Init_SysTick+0x20>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <Custom_Delay_Init_SysTick+0x24>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <Custom_Delay_Init_SysTick+0x24>)
 8005b6c:	f043 0307 	orr.w	r3, r3, #7
 8005b70:	6013      	str	r3, [r2, #0]
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000254 	.word	0x20000254
 8005b80:	e000e010 	.word	0xe000e010

08005b84 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8005b8c:	bf00      	nop
 8005b8e:	4808      	ldr	r0, [pc, #32]	; (8005bb0 <__io_putchar+0x2c>)
 8005b90:	f7ff ff8a 	bl	8005aa8 <LL_USART_IsActiveFlag_TXE>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f9      	beq.n	8005b8e <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4803      	ldr	r0, [pc, #12]	; (8005bb0 <__io_putchar+0x2c>)
 8005ba2:	f7ff ff94 	bl	8005ace <LL_USART_TransmitData8>
	return ch;
 8005ba6:	687b      	ldr	r3, [r7, #4]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40004400 	.word	0x40004400

08005bb4 <Init>:



void Init() {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b0b8      	sub	sp, #224	; 0xe0
 8005bb8:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8005bba:	4838      	ldr	r0, [pc, #224]	; (8005c9c <Init+0xe8>)
 8005bbc:	f7ff ff64 	bl	8005a88 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8005bc0:	f7ff ffcc 	bl	8005b5c <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8005bc4:	f7ff faaa 	bl	800511c <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8005bc8:	f7ff f8da 	bl	8004d80 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8005bcc:	f7ff faa6 	bl	800511c <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8005bd0:	4833      	ldr	r0, [pc, #204]	; (8005ca0 <Init+0xec>)
 8005bd2:	f7ff fb69 	bl	80052a8 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8005bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bda:	f7ff ffaf 	bl	8005b3c <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8005bde:	4a31      	ldr	r2, [pc, #196]	; (8005ca4 <Init+0xf0>)
 8005be0:	463b      	mov	r3, r7
 8005be2:	4611      	mov	r1, r2
 8005be4:	22dc      	movs	r2, #220	; 0xdc
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 ffc1 	bl	8007b6e <memcpy>
//			{ "Test Velocity  ", Motor_Test_Velocity },
			{ "Test Position  ", Drive_Test_Position },
//			{ "Current setting", Current_Setting },
	};

	uint8_t sw = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t count = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 8005bf8:	230b      	movs	r3, #11
 8005bfa:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd

	Custom_OLED_Clear();
 8005bfe:	f7ff fa6e 	bl	80050de <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8005c02:	f7ff fa6c 	bl	80050de <Custom_OLED_Clear>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005c06:	e033      	b.n	8005c70 <Init+0xbc>
			Custom_OLED_Printf("%s", menus[count].menuName);
 8005c08:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4823      	ldr	r0, [pc, #140]	; (8005ca8 <Init+0xf4>)
 8005c1c:	f7ff fb44 	bl	80052a8 <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8005c20:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10f      	bne.n	8005c48 <Init+0x94>
				if (count == 0)
 8005c28:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <Init+0x88>
					count = menuCnt - 1;
 8005c30:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005c34:	3b01      	subs	r3, #1
 8005c36:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005c3a:	e019      	b.n	8005c70 <Init+0xbc>
				else
					count--;
 8005c3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005c46:	e013      	b.n	8005c70 <Init+0xbc>
			}
			else if (sw == CUSTOM_SW_2) {
 8005c48:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d10f      	bne.n	8005c70 <Init+0xbc>
				if (count == menuCnt - 1)
 8005c50:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8005c54:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d103      	bne.n	8005c66 <Init+0xb2>
					count = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005c64:	e004      	b.n	8005c70 <Init+0xbc>
				else
					count++;
 8005c66:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005c70:	f7ff fe4a 	bl	8005908 <Custom_Switch_Read>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8005c7a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d1c2      	bne.n	8005c08 <Init+0x54>
			}
		}
		menus[count].func();
 8005c82:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	33e0      	adds	r3, #224	; 0xe0
 8005c90:	443b      	add	r3, r7
 8005c92:	3bd0      	subs	r3, #208	; 0xd0
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4798      	blx	r3
		Custom_OLED_Clear();
 8005c98:	e7b3      	b.n	8005c02 <Init+0x4e>
 8005c9a:	bf00      	nop
 8005c9c:	40004400 	.word	0x40004400
 8005ca0:	08009e9c 	.word	0x08009e9c
 8005ca4:	08009eb4 	.word	0x08009eb4
 8005ca8:	08009eb0 	.word	0x08009eb0

08005cac <LL_TIM_EnableCounter>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_TIM_DisableCounter>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 0201 	bic.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_TIM_CC_EnableChannel>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <LL_TIM_CC_DisableChannel>:
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	401a      	ands	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <LL_TIM_OC_SetCompareCH2>:
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <Custom_GPIO_Set>:
		uint32_t value) {
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <Custom_GPIO_Set+0x22>
 8005d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d6e:	e000      	b.n	8005d72 <Custom_GPIO_Set+0x24>
 8005d70:	2100      	movs	r1, #0
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	400b      	ands	r3, r1
 8005d76:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	615a      	str	r2, [r3, #20]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <Sensor_Test_Raw>:
}




void Sensor_Test_Raw() {
 8005d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af06      	add	r7, sp, #24
	Sensor_Start();
 8005d8e:	f001 f80f 	bl	8006db0 <Sensor_Start>
	Custom_OLED_Clear();
 8005d92:	f7ff f9a4 	bl	80050de <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8005d96:	e053      	b.n	8005e40 <Sensor_Test_Raw+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005d98:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005d9e:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005da0:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005da6:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005da8:	4b2c      	ldr	r3, [pc, #176]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005daa:	789b      	ldrb	r3, [r3, #2]
 8005dac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dae:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005db6:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dba:	791b      	ldrb	r3, [r3, #4]
 8005dbc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dbe:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dc2:	795b      	ldrb	r3, [r3, #5]
 8005dc4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dc6:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005dc8:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dca:	799b      	ldrb	r3, [r3, #6]
 8005dcc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dce:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8005dd0:	4b22      	ldr	r3, [pc, #136]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dd2:	79db      	ldrb	r3, [r3, #7]
 8005dd4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	9403      	str	r4, [sp, #12]
 8005dda:	9002      	str	r0, [sp, #8]
 8005ddc:	9101      	str	r1, [sp, #4]
 8005dde:	9200      	str	r2, [sp, #0]
 8005de0:	4663      	mov	r3, ip
 8005de2:	4632      	mov	r2, r6
 8005de4:	4629      	mov	r1, r5
 8005de6:	481e      	ldr	r0, [pc, #120]	; (8005e60 <Sensor_Test_Raw+0xd8>)
 8005de8:	f7ff fa5e 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dee:	7a1b      	ldrb	r3, [r3, #8]
 8005df0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005df2:	461d      	mov	r5, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005df6:	7a5b      	ldrb	r3, [r3, #9]
 8005df8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005dfa:	461e      	mov	r6, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8005dfc:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005dfe:	7a9b      	ldrb	r3, [r3, #10]
 8005e00:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e02:	469c      	mov	ip, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005e06:	7adb      	ldrb	r3, [r3, #11]
 8005e08:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e0a:	461a      	mov	r2, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005e0e:	7b1b      	ldrb	r3, [r3, #12]
 8005e10:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e12:	4619      	mov	r1, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8005e14:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005e16:	7b5b      	ldrb	r3, [r3, #13]
 8005e18:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e1a:	4618      	mov	r0, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005e1e:	7b9b      	ldrb	r3, [r3, #14]
 8005e20:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e22:	461c      	mov	r4, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <Sensor_Test_Raw+0xd4>)
 8005e26:	7bdb      	ldrb	r3, [r3, #15]
 8005e28:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	9403      	str	r4, [sp, #12]
 8005e2e:	9002      	str	r0, [sp, #8]
 8005e30:	9101      	str	r1, [sp, #4]
 8005e32:	9200      	str	r2, [sp, #0]
 8005e34:	4663      	mov	r3, ip
 8005e36:	4632      	mov	r2, r6
 8005e38:	4629      	mov	r1, r5
 8005e3a:	480a      	ldr	r0, [pc, #40]	; (8005e64 <Sensor_Test_Raw+0xdc>)
 8005e3c:	f7ff fa34 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8005e40:	f7ff fd62 	bl	8005908 <Custom_Switch_Read>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d1a6      	bne.n	8005d98 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8005e4a:	f7ff f948 	bl	80050de <Custom_OLED_Clear>
	Sensor_Stop();
 8005e4e:	f000 ffc7 	bl	8006de0 <Sensor_Stop>
}
 8005e52:	bf00      	nop
 8005e54:	3704      	adds	r7, #4
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20001424 	.word	0x20001424
 8005e60:	0800a02c 	.word	0x0800a02c
 8005e64:	0800a058 	.word	0x0800a058

08005e68 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8005e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af06      	add	r7, sp, #24
	Sensor_Start();
 8005e6e:	f000 ff9f 	bl	8006db0 <Sensor_Start>
	Custom_OLED_Clear();
 8005e72:	f7ff f934 	bl	80050de <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8005e76:	e053      	b.n	8005f20 <Sensor_Test_Normalized+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e7e:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e86:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e8e:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8005e90:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e96:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005e9e:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ea2:	795b      	ldrb	r3, [r3, #5]
 8005ea4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ea6:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005ea8:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005eaa:	799b      	ldrb	r3, [r3, #6]
 8005eac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005eae:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8005eb0:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005eb2:	79db      	ldrb	r3, [r3, #7]
 8005eb4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9403      	str	r4, [sp, #12]
 8005eba:	9002      	str	r0, [sp, #8]
 8005ebc:	9101      	str	r1, [sp, #4]
 8005ebe:	9200      	str	r2, [sp, #0]
 8005ec0:	4663      	mov	r3, ip
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	481e      	ldr	r0, [pc, #120]	; (8005f40 <Sensor_Test_Normalized+0xd8>)
 8005ec8:	f7ff f9ee 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ece:	7a1b      	ldrb	r3, [r3, #8]
 8005ed0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ed2:	461d      	mov	r5, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ed6:	7a5b      	ldrb	r3, [r3, #9]
 8005ed8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005eda:	461e      	mov	r6, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8005edc:	4b17      	ldr	r3, [pc, #92]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ede:	7a9b      	ldrb	r3, [r3, #10]
 8005ee0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ee2:	469c      	mov	ip, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ee6:	7adb      	ldrb	r3, [r3, #11]
 8005ee8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005eea:	461a      	mov	r2, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005eee:	7b1b      	ldrb	r3, [r3, #12]
 8005ef0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005ef2:	4619      	mov	r1, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005ef6:	7b5b      	ldrb	r3, [r3, #13]
 8005ef8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005efa:	4618      	mov	r0, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005efe:	7b9b      	ldrb	r3, [r3, #14]
 8005f00:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005f02:	461c      	mov	r4, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <Sensor_Test_Normalized+0xd4>)
 8005f06:	7bdb      	ldrb	r3, [r3, #15]
 8005f08:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	9403      	str	r4, [sp, #12]
 8005f0e:	9002      	str	r0, [sp, #8]
 8005f10:	9101      	str	r1, [sp, #4]
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	4663      	mov	r3, ip
 8005f16:	4632      	mov	r2, r6
 8005f18:	4629      	mov	r1, r5
 8005f1a:	480a      	ldr	r0, [pc, #40]	; (8005f44 <Sensor_Test_Normalized+0xdc>)
 8005f1c:	f7ff f9c4 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8005f20:	f7ff fcf2 	bl	8005908 <Custom_Switch_Read>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d1a6      	bne.n	8005e78 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8005f2a:	f7ff f8d8 	bl	80050de <Custom_OLED_Clear>
	Sensor_Stop();
 8005f2e:	f000 ff57 	bl	8006de0 <Sensor_Stop>
}
 8005f32:	bf00      	nop
 8005f34:	3704      	adds	r7, #4
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20001434 	.word	0x20001434
 8005f40:	0800a02c 	.word	0x0800a02c
 8005f44:	0800a058 	.word	0x0800a058

08005f48 <Sensor_Test_State>:





void Sensor_Test_State() {
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 8005f52:	f000 ff2d 	bl	8006db0 <Sensor_Start>
	Custom_OLED_Clear();
 8005f56:	f7ff f8c2 	bl	80050de <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005f5a:	e0a9      	b.n	80060b0 <Sensor_Test_State+0x168>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8005f5c:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <Sensor_Test_State+0x188>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	4619      	mov	r1, r3
 8005f64:	485b      	ldr	r0, [pc, #364]	; (80060d4 <Sensor_Test_State+0x18c>)
 8005f66:	f7ff f99f 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005f6a:	4b5b      	ldr	r3, [pc, #364]	; (80060d8 <Sensor_Test_State+0x190>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f003 0501 	and.w	r5, r3, #1
 8005f78:	4b57      	ldr	r3, [pc, #348]	; (80060d8 <Sensor_Test_State+0x190>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f003 0601 	and.w	r6, r3, #1
 8005f86:	4b54      	ldr	r3, [pc, #336]	; (80060d8 <Sensor_Test_State+0x190>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f003 0c01 	and.w	ip, r3, #1
 8005f94:	4b50      	ldr	r3, [pc, #320]	; (80060d8 <Sensor_Test_State+0x190>)
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	4a4d      	ldr	r2, [pc, #308]	; (80060d8 <Sensor_Test_State+0x190>)
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	08d2      	lsrs	r2, r2, #3
 8005faa:	b292      	uxth	r2, r2
 8005fac:	f002 0201 	and.w	r2, r2, #1
 8005fb0:	4949      	ldr	r1, [pc, #292]	; (80060d8 <Sensor_Test_State+0x190>)
 8005fb2:	8809      	ldrh	r1, [r1, #0]
 8005fb4:	b289      	uxth	r1, r1
 8005fb6:	0889      	lsrs	r1, r1, #2
 8005fb8:	b289      	uxth	r1, r1
 8005fba:	f001 0101 	and.w	r1, r1, #1
 8005fbe:	4846      	ldr	r0, [pc, #280]	; (80060d8 <Sensor_Test_State+0x190>)
 8005fc0:	8800      	ldrh	r0, [r0, #0]
 8005fc2:	b280      	uxth	r0, r0
 8005fc4:	0840      	lsrs	r0, r0, #1
 8005fc6:	b280      	uxth	r0, r0
 8005fc8:	f000 0001 	and.w	r0, r0, #1
			(state >> 7) & 1, (state >> 6) & 1, (state >> 5) & 1, (state >> 4) & 1, \
			(state >> 3) & 1, (state >> 2) & 1, (state >> 1) & 1, (state >> 0) & 1);
 8005fcc:	4c42      	ldr	r4, [pc, #264]	; (80060d8 <Sensor_Test_State+0x190>)
 8005fce:	8824      	ldrh	r4, [r4, #0]
 8005fd0:	b2a4      	uxth	r4, r4
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005fd2:	f004 0401 	and.w	r4, r4, #1
 8005fd6:	9404      	str	r4, [sp, #16]
 8005fd8:	9003      	str	r0, [sp, #12]
 8005fda:	9102      	str	r1, [sp, #8]
 8005fdc:	9201      	str	r2, [sp, #4]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4663      	mov	r3, ip
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	483d      	ldr	r0, [pc, #244]	; (80060dc <Sensor_Test_State+0x194>)
 8005fe8:	f7ff f95e 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8005fec:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <Sensor_Test_State+0x190>)
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	0bdb      	lsrs	r3, r3, #15
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f003 0501 	and.w	r5, r3, #1
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <Sensor_Test_State+0x190>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	0b9b      	lsrs	r3, r3, #14
 8006002:	b29b      	uxth	r3, r3
 8006004:	f003 0601 	and.w	r6, r3, #1
 8006008:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <Sensor_Test_State+0x190>)
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	b29b      	uxth	r3, r3
 8006012:	f003 0c01 	and.w	ip, r3, #1
 8006016:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <Sensor_Test_State+0x190>)
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	0b1b      	lsrs	r3, r3, #12
 800601e:	b29b      	uxth	r3, r3
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <Sensor_Test_State+0x190>)
 8006026:	8812      	ldrh	r2, [r2, #0]
 8006028:	b292      	uxth	r2, r2
 800602a:	0ad2      	lsrs	r2, r2, #11
 800602c:	b292      	uxth	r2, r2
 800602e:	f002 0201 	and.w	r2, r2, #1
 8006032:	4929      	ldr	r1, [pc, #164]	; (80060d8 <Sensor_Test_State+0x190>)
 8006034:	8809      	ldrh	r1, [r1, #0]
 8006036:	b289      	uxth	r1, r1
 8006038:	0a89      	lsrs	r1, r1, #10
 800603a:	b289      	uxth	r1, r1
 800603c:	f001 0101 	and.w	r1, r1, #1
 8006040:	4825      	ldr	r0, [pc, #148]	; (80060d8 <Sensor_Test_State+0x190>)
 8006042:	8800      	ldrh	r0, [r0, #0]
 8006044:	b280      	uxth	r0, r0
 8006046:	0a40      	lsrs	r0, r0, #9
 8006048:	b280      	uxth	r0, r0
 800604a:	f000 0001 	and.w	r0, r0, #1
 800604e:	4c22      	ldr	r4, [pc, #136]	; (80060d8 <Sensor_Test_State+0x190>)
 8006050:	8824      	ldrh	r4, [r4, #0]
 8006052:	b2a4      	uxth	r4, r4
 8006054:	0a24      	lsrs	r4, r4, #8
 8006056:	b2a4      	uxth	r4, r4
 8006058:	f004 0401 	and.w	r4, r4, #1
 800605c:	9404      	str	r4, [sp, #16]
 800605e:	9003      	str	r0, [sp, #12]
 8006060:	9102      	str	r1, [sp, #8]
 8006062:	9201      	str	r2, [sp, #4]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4663      	mov	r3, ip
 8006068:	4632      	mov	r2, r6
 800606a:	4629      	mov	r1, r5
 800606c:	481c      	ldr	r0, [pc, #112]	; (80060e0 <Sensor_Test_State+0x198>)
 800606e:	f7ff f91b 	bl	80052a8 <Custom_OLED_Printf>
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);


		if (sw == CUSTOM_SW_1) {
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10c      	bne.n	8006092 <Sensor_Test_State+0x14a>
			if (threshold > THRESHOLD_MIN) {
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <Sensor_Test_State+0x188>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b14      	cmp	r3, #20
 8006080:	d916      	bls.n	80060b0 <Sensor_Test_State+0x168>
				threshold -= THRESHOLD_CHANGE_VAL;
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <Sensor_Test_State+0x188>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	3b05      	subs	r3, #5
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <Sensor_Test_State+0x188>)
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e00e      	b.n	80060b0 <Sensor_Test_State+0x168>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d10b      	bne.n	80060b0 <Sensor_Test_State+0x168>
			if (threshold < THRESHOLD_MAX) {
 8006098:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <Sensor_Test_State+0x188>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2bf9      	cmp	r3, #249	; 0xf9
 80060a0:	d806      	bhi.n	80060b0 <Sensor_Test_State+0x168>
				threshold += THRESHOLD_CHANGE_VAL;
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <Sensor_Test_State+0x188>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	3305      	adds	r3, #5
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <Sensor_Test_State+0x188>)
 80060ae:	701a      	strb	r2, [r3, #0]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80060b0:	f7ff fc2a 	bl	8005908 <Custom_Switch_Read>
 80060b4:	4603      	mov	r3, r0
 80060b6:	71fb      	strb	r3, [r7, #7]
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	f47f af4e 	bne.w	8005f5c <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 80060c0:	f7ff f80d 	bl	80050de <Custom_OLED_Clear>
	Sensor_Stop();
 80060c4:	f000 fe8c 	bl	8006de0 <Sensor_Stop>
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	2000002c 	.word	0x2000002c
 80060d4:	0800a084 	.word	0x0800a084
 80060d8:	20001474 	.word	0x20001474
 80060dc:	0800a02c 	.word	0x0800a02c
 80060e0:	0800a058 	.word	0x0800a058

080060e4 <Battery_Test_Voltage>:


void Battery_Test_Voltage() {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	Sensor_Start();
 80060e8:	f000 fe62 	bl	8006db0 <Sensor_Start>
	Custom_OLED_Clear();
 80060ec:	f7fe fff7 	bl	80050de <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 80060f0:	e009      	b.n	8006106 <Battery_Test_Voltage+0x22>

		Custom_OLED_Printf("/A%5f", sensingVoltage);
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <Battery_Test_Voltage+0x38>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa fa2e 	bl	8000558 <__aeabi_f2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4807      	ldr	r0, [pc, #28]	; (8006120 <Battery_Test_Voltage+0x3c>)
 8006102:	f7ff f8d1 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006106:	f7ff fbff 	bl	8005908 <Custom_Switch_Read>
 800610a:	4603      	mov	r3, r0
 800610c:	2b04      	cmp	r3, #4
 800610e:	d1f0      	bne.n	80060f2 <Battery_Test_Voltage+0xe>
	}

	Custom_OLED_Clear();
 8006110:	f7fe ffe5 	bl	80050de <Custom_OLED_Clear>
	Sensor_Stop();
 8006114:	f000 fe64 	bl	8006de0 <Sensor_Stop>
}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20001478 	.word	0x20001478
 8006120:	0800a098 	.word	0x0800a098

08006124 <MotorR_Test_Duty>:





void MotorR_Test_Duty() {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM11);
 800612a:	4859      	ldr	r0, [pc, #356]	; (8006290 <MotorR_Test_Duty+0x16c>)
 800612c:	f7ff fdbe 	bl	8005cac <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8006130:	2101      	movs	r1, #1
 8006132:	4857      	ldr	r0, [pc, #348]	; (8006290 <MotorR_Test_Duty+0x16c>)
 8006134:	f7ff fdda 	bl	8005cec <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 8006138:	2100      	movs	r1, #0
 800613a:	4855      	ldr	r0, [pc, #340]	; (8006290 <MotorR_Test_Duty+0x16c>)
 800613c:	f7ff fdf9 	bl	8005d32 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM3);
 8006140:	4854      	ldr	r0, [pc, #336]	; (8006294 <MotorR_Test_Duty+0x170>)
 8006142:	f7ff fdb3 	bl	8005cac <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM11->ARR + 1;
 8006146:	4b52      	ldr	r3, [pc, #328]	; (8006290 <MotorR_Test_Duty+0x16c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	b29b      	uxth	r3, r3
 800614c:	3301      	adds	r3, #1
 800614e:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8006156:	f7ff fbd7 	bl	8005908 <Custom_Switch_Read>
 800615a:	4603      	mov	r3, r0
 800615c:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 800615e:	797b      	ldrb	r3, [r7, #5]
 8006160:	2b04      	cmp	r3, #4
 8006162:	f000 8082 	beq.w	800626a <MotorR_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8006166:	797b      	ldrb	r3, [r7, #5]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d108      	bne.n	800617e <MotorR_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 800616c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006170:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006298 <MotorR_Test_Duty+0x174>
 8006174:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006178:	edc7 7a03 	vstr	s15, [r7, #12]
 800617c:	e00a      	b.n	8006194 <MotorR_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 800617e:	797b      	ldrb	r3, [r7, #5]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d107      	bne.n	8006194 <MotorR_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8006184:	edd7 7a03 	vldr	s15, [r7, #12]
 8006188:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006298 <MotorR_Test_Duty+0x174>
 800618c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006190:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800619e:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ae:	d50d      	bpl.n	80061cc <MotorR_Test_Duty+0xa8>
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	eef1 7a67 	vneg.f32	s15, s15
 80061c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ca:	e00a      	b.n	80061e2 <MotorR_Test_Duty+0xbe>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061e2:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	dd02      	ble.n	80061f4 <MotorR_Test_Duty+0xd0>
		 level = level_max;
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	e004      	b.n	80061fe <MotorR_Test_Duty+0xda>
		} else if (level < 0) {
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da01      	bge.n	80061fe <MotorR_Test_Duty+0xda>
		 level = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM11->CCR1 = level;
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <MotorR_Test_Duty+0x16c>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOC, 1 << 4, duty_ratio < 0 ? 1 : 0); // PC4
 8006204:	edd7 7a03 	vldr	s15, [r7, #12]
 8006208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006210:	bf4c      	ite	mi
 8006212:	2301      	movmi	r3, #1
 8006214:	2300      	movpl	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	2110      	movs	r1, #16
 800621c:	481f      	ldr	r0, [pc, #124]	; (800629c <MotorR_Test_Duty+0x178>)
 800621e:	f7ff fd96 	bl	8005d4e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOC, 1 << 5, duty_ratio > 0 ? 1 : 0); // PC5
 8006222:	edd7 7a03 	vldr	s15, [r7, #12]
 8006226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	bfcc      	ite	gt
 8006230:	2301      	movgt	r3, #1
 8006232:	2300      	movle	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	2120      	movs	r1, #32
 800623a:	4818      	ldr	r0, [pc, #96]	; (800629c <MotorR_Test_Duty+0x178>)
 800623c:	f7ff fd87 	bl	8005d4e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fa f989 	bl	8000558 <__aeabi_f2d>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4815      	ldr	r0, [pc, #84]	; (80062a0 <MotorR_Test_Duty+0x17c>)
 800624c:	f7ff f82c 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM11->CCR1);
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <MotorR_Test_Duty+0x16c>)
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	4619      	mov	r1, r3
 8006256:	4813      	ldr	r0, [pc, #76]	; (80062a4 <MotorR_Test_Duty+0x180>)
 8006258:	f7ff f826 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM3->CNT);
 800625c:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <MotorR_Test_Duty+0x170>)
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4619      	mov	r1, r3
 8006262:	4811      	ldr	r0, [pc, #68]	; (80062a8 <MotorR_Test_Duty+0x184>)
 8006264:	f7ff f820 	bl	80052a8 <Custom_OLED_Printf>
	for (;;) {
 8006268:	e775      	b.n	8006156 <MotorR_Test_Duty+0x32>
		 break;
 800626a:	bf00      	nop
	}

	TIM11->CCR1 = 0;
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <MotorR_Test_Duty+0x16c>)
 800626e:	2200      	movs	r2, #0
 8006270:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM11);
 8006272:	4807      	ldr	r0, [pc, #28]	; (8006290 <MotorR_Test_Duty+0x16c>)
 8006274:	f7ff fd2a 	bl	8005ccc <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8006278:	2101      	movs	r1, #1
 800627a:	4805      	ldr	r0, [pc, #20]	; (8006290 <MotorR_Test_Duty+0x16c>)
 800627c:	f7ff fd47 	bl	8005d0e <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM3);
 8006280:	4804      	ldr	r0, [pc, #16]	; (8006294 <MotorR_Test_Duty+0x170>)
 8006282:	f7ff fd23 	bl	8005ccc <LL_TIM_DisableCounter>
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40014800 	.word	0x40014800
 8006294:	40000400 	.word	0x40000400
 8006298:	3dcccccd 	.word	0x3dcccccd
 800629c:	40020800 	.word	0x40020800
 80062a0:	0800a0a0 	.word	0x0800a0a0
 80062a4:	0800a0b0 	.word	0x0800a0b0
 80062a8:	0800a0c0 	.word	0x0800a0c0

080062ac <MotorL_Test_Duty>:


void MotorL_Test_Duty() {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM10);
 80062b2:	485b      	ldr	r0, [pc, #364]	; (8006420 <MotorL_Test_Duty+0x174>)
 80062b4:	f7ff fcfa 	bl	8005cac <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 80062b8:	2101      	movs	r1, #1
 80062ba:	4859      	ldr	r0, [pc, #356]	; (8006420 <MotorL_Test_Duty+0x174>)
 80062bc:	f7ff fd16 	bl	8005cec <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 80062c0:	2100      	movs	r1, #0
 80062c2:	4857      	ldr	r0, [pc, #348]	; (8006420 <MotorL_Test_Duty+0x174>)
 80062c4:	f7ff fd35 	bl	8005d32 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM4);
 80062c8:	4856      	ldr	r0, [pc, #344]	; (8006424 <MotorL_Test_Duty+0x178>)
 80062ca:	f7ff fcef 	bl	8005cac <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM10->ARR + 1;
 80062ce:	4b54      	ldr	r3, [pc, #336]	; (8006420 <MotorL_Test_Duty+0x174>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

	TIM4->CNT = 30000;
 80062de:	4b51      	ldr	r3, [pc, #324]	; (8006424 <MotorL_Test_Duty+0x178>)
 80062e0:	f247 5230 	movw	r2, #30000	; 0x7530
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 80062e6:	f7ff fb0f 	bl	8005908 <Custom_Switch_Read>
 80062ea:	4603      	mov	r3, r0
 80062ec:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 80062ee:	797b      	ldrb	r3, [r7, #5]
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	f000 8082 	beq.w	80063fa <MotorL_Test_Duty+0x14e>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80062f6:	797b      	ldrb	r3, [r7, #5]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d108      	bne.n	800630e <MotorL_Test_Duty+0x62>
		 duty_ratio -= 0.1f;
 80062fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006300:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006428 <MotorL_Test_Duty+0x17c>
 8006304:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006308:	edc7 7a03 	vstr	s15, [r7, #12]
 800630c:	e00a      	b.n	8006324 <MotorL_Test_Duty+0x78>
		} else if (sw == CUSTOM_SW_2) {
 800630e:	797b      	ldrb	r3, [r7, #5]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d107      	bne.n	8006324 <MotorL_Test_Duty+0x78>
		 duty_ratio += 0.1f;
 8006314:	edd7 7a03 	vldr	s15, [r7, #12]
 8006318:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006428 <MotorL_Test_Duty+0x17c>
 800631c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006320:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800632e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633e:	d50d      	bpl.n	800635c <MotorL_Test_Duty+0xb0>
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800634a:	edd7 7a03 	vldr	s15, [r7, #12]
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	eef1 7a67 	vneg.f32	s15, s15
 8006356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800635a:	e00a      	b.n	8006372 <MotorL_Test_Duty+0xc6>
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006366:	edd7 7a03 	vldr	s15, [r7, #12]
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006372:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	dd02      	ble.n	8006384 <MotorL_Test_Duty+0xd8>
		 level = level_max;
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	e004      	b.n	800638e <MotorL_Test_Duty+0xe2>
		} else if (level < 0) {
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	da01      	bge.n	800638e <MotorL_Test_Duty+0xe2>
		 level = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM10->CCR1 = level;
 800638e:	4a24      	ldr	r2, [pc, #144]	; (8006420 <MotorL_Test_Duty+0x174>)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOB, 1 << 4, duty_ratio > 0 ? 1 : 0); // PB4
 8006394:	edd7 7a03 	vldr	s15, [r7, #12]
 8006398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a0:	bfcc      	ite	gt
 80063a2:	2301      	movgt	r3, #1
 80063a4:	2300      	movle	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	2110      	movs	r1, #16
 80063ac:	481f      	ldr	r0, [pc, #124]	; (800642c <MotorL_Test_Duty+0x180>)
 80063ae:	f7ff fcce 	bl	8005d4e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOB, 1 << 5, duty_ratio < 0 ? 1 : 0); // PB5
 80063b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80063b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063be:	bf4c      	ite	mi
 80063c0:	2301      	movmi	r3, #1
 80063c2:	2300      	movpl	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	2120      	movs	r1, #32
 80063ca:	4818      	ldr	r0, [pc, #96]	; (800642c <MotorL_Test_Duty+0x180>)
 80063cc:	f7ff fcbf 	bl	8005d4e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7fa f8c1 	bl	8000558 <__aeabi_f2d>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4815      	ldr	r0, [pc, #84]	; (8006430 <MotorL_Test_Duty+0x184>)
 80063dc:	f7fe ff64 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM10->CCR1);
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <MotorL_Test_Duty+0x174>)
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	4619      	mov	r1, r3
 80063e6:	4813      	ldr	r0, [pc, #76]	; (8006434 <MotorL_Test_Duty+0x188>)
 80063e8:	f7fe ff5e 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM4->CNT);
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <MotorL_Test_Duty+0x178>)
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	4619      	mov	r1, r3
 80063f2:	4811      	ldr	r0, [pc, #68]	; (8006438 <MotorL_Test_Duty+0x18c>)
 80063f4:	f7fe ff58 	bl	80052a8 <Custom_OLED_Printf>
	for (;;) {
 80063f8:	e775      	b.n	80062e6 <MotorL_Test_Duty+0x3a>
		 break;
 80063fa:	bf00      	nop
	}

	TIM10->CCR1 = 0;
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <MotorL_Test_Duty+0x174>)
 80063fe:	2200      	movs	r2, #0
 8006400:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM10);
 8006402:	4807      	ldr	r0, [pc, #28]	; (8006420 <MotorL_Test_Duty+0x174>)
 8006404:	f7ff fc62 	bl	8005ccc <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8006408:	2101      	movs	r1, #1
 800640a:	4805      	ldr	r0, [pc, #20]	; (8006420 <MotorL_Test_Duty+0x174>)
 800640c:	f7ff fc7f 	bl	8005d0e <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM4);
 8006410:	4804      	ldr	r0, [pc, #16]	; (8006424 <MotorL_Test_Duty+0x178>)
 8006412:	f7ff fc5b 	bl	8005ccc <LL_TIM_DisableCounter>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40014400 	.word	0x40014400
 8006424:	40000800 	.word	0x40000800
 8006428:	3dcccccd 	.word	0x3dcccccd
 800642c:	40020400 	.word	0x40020400
 8006430:	0800a0a0 	.word	0x0800a0a0
 8006434:	0800a0b0 	.word	0x0800a0b0
 8006438:	0800a0c0 	.word	0x0800a0c0

0800643c <MotorL_Test_PD>:




void MotorL_Test_PD() {
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0

	float coefChangeVal = 0.05;
 8006442:	4b5d      	ldr	r3, [pc, #372]	; (80065b8 <MotorL_Test_PD+0x17c>)
 8006444:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 50;
 8006446:	4b5d      	ldr	r3, [pc, #372]	; (80065bc <MotorL_Test_PD+0x180>)
 8006448:	60bb      	str	r3, [r7, #8]

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR = TIM10->ARR + 1;
 800644a:	4b5d      	ldr	r3, [pc, #372]	; (80065c0 <MotorL_Test_PD+0x184>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	3301      	adds	r3, #1
 8006450:	461a      	mov	r2, r3
 8006452:	4b5c      	ldr	r3, [pc, #368]	; (80065c4 <MotorL_Test_PD+0x188>)
 8006454:	601a      	str	r2, [r3, #0]
	prevErrorL = 0;
 8006456:	4b5c      	ldr	r3, [pc, #368]	; (80065c8 <MotorL_Test_PD+0x18c>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 800645c:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <MotorL_Test_PD+0x190>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
	prevErrorDiffL = 0;
 8006462:	4b5b      	ldr	r3, [pc, #364]	; (80065d0 <MotorL_Test_PD+0x194>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
	prevErrorDiffR = 0;
 8006468:	4b5a      	ldr	r3, [pc, #360]	; (80065d4 <MotorL_Test_PD+0x198>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
	targetEncoderValueL = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800646e:	4b5a      	ldr	r3, [pc, #360]	; (80065d8 <MotorL_Test_PD+0x19c>)
 8006470:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8006474:	601a      	str	r2, [r3, #0]
	targetEncoderValueR = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006476:	4b59      	ldr	r3, [pc, #356]	; (80065dc <MotorL_Test_PD+0x1a0>)
 8006478:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 800647c:	601a      	str	r2, [r3, #0]
	TIM3->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800647e:	4b58      	ldr	r3, [pc, #352]	; (80065e0 <MotorL_Test_PD+0x1a4>)
 8006480:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006484:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006486:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <MotorL_Test_PD+0x1a8>)
 8006488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800648c:	625a      	str	r2, [r3, #36]	; 0x24
	pCoef = P_COEF_INIT;
 800648e:	4b56      	ldr	r3, [pc, #344]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 8006490:	4a56      	ldr	r2, [pc, #344]	; (80065ec <MotorL_Test_PD+0x1b0>)
 8006492:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 8006494:	4b56      	ldr	r3, [pc, #344]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 8006496:	4a57      	ldr	r2, [pc, #348]	; (80065f4 <MotorL_Test_PD+0x1b8>)
 8006498:	601a      	str	r2, [r3, #0]

	dutyRatioSignL = 1;
 800649a:	4b57      	ldr	r3, [pc, #348]	; (80065f8 <MotorL_Test_PD+0x1bc>)
 800649c:	2201      	movs	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]
	dutyRatioSignR = 1;
 80064a0:	4b56      	ldr	r3, [pc, #344]	; (80065fc <MotorL_Test_PD+0x1c0>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]

	Sensor_Start();
 80064a6:	f000 fc83 	bl	8006db0 <Sensor_Start>
	Speed_Control_Start();
 80064aa:	f000 fbd1 	bl	8006c50 <Speed_Control_Start>
	MotorL_Start();
 80064ae:	f000 fb4b 	bl	8006b48 <MotorL_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 80064b2:	f7ff fa29 	bl	8005908 <Custom_Switch_Read>
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b07      	cmp	r3, #7
 80064be:	d06f      	beq.n	80065a0 <MotorL_Test_PD+0x164>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10a      	bne.n	80064dc <MotorL_Test_PD+0xa0>
			pCoef -= coefChangeVal;
 80064c6:	4b48      	ldr	r3, [pc, #288]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 80064c8:	ed93 7a00 	vldr	s14, [r3]
 80064cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80064d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d4:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 80064d6:	edc3 7a00 	vstr	s15, [r3]
 80064da:	e036      	b.n	800654a <MotorL_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_2) {
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d10a      	bne.n	80064f8 <MotorL_Test_PD+0xbc>
			pCoef += coefChangeVal;
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 80064e4:	ed93 7a00 	vldr	s14, [r3]
 80064e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80064ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f0:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 80064f2:	edc3 7a00 	vstr	s15, [r3]
 80064f6:	e028      	b.n	800654a <MotorL_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_1_2) {
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d10a      	bne.n	8006514 <MotorL_Test_PD+0xd8>
			dCoef -= coefChangeVal;
 80064fe:	4b3c      	ldr	r3, [pc, #240]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 8006500:	ed93 7a00 	vldr	s14, [r3]
 8006504:	edd7 7a03 	vldr	s15, [r7, #12]
 8006508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800650c:	4b38      	ldr	r3, [pc, #224]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 800650e:	edc3 7a00 	vstr	s15, [r3]
 8006512:	e01a      	b.n	800654a <MotorL_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_2_3) {
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b06      	cmp	r3, #6
 8006518:	d10a      	bne.n	8006530 <MotorL_Test_PD+0xf4>
			dCoef += coefChangeVal;
 800651a:	4b35      	ldr	r3, [pc, #212]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 800651c:	ed93 7a00 	vldr	s14, [r3]
 8006520:	edd7 7a03 	vldr	s15, [r7, #12]
 8006524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006528:	4b31      	ldr	r3, [pc, #196]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 800652a:	edc3 7a00 	vstr	s15, [r3]
 800652e:	e00c      	b.n	800654a <MotorL_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_3) {
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d109      	bne.n	800654a <MotorL_Test_PD+0x10e>
			targetEncoderValueL -= targetChangeVal;
 8006536:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <MotorL_Test_PD+0x19c>)
 8006538:	ed93 7a00 	vldr	s14, [r3]
 800653c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <MotorL_Test_PD+0x19c>)
 8006546:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM10->CCR1);
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <MotorL_Test_PD+0x184>)
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	4619      	mov	r1, r3
 8006550:	482b      	ldr	r0, [pc, #172]	; (8006600 <MotorL_Test_PD+0x1c4>)
 8006552:	f7fe fea9 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM4->CNT);
 8006556:	4b23      	ldr	r3, [pc, #140]	; (80065e4 <MotorL_Test_PD+0x1a8>)
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	4619      	mov	r1, r3
 800655c:	4829      	ldr	r0, [pc, #164]	; (8006604 <MotorL_Test_PD+0x1c8>)
 800655e:	f7fe fea3 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5f", targetEncoderValueL);
 8006562:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <MotorL_Test_PD+0x19c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 fff6 	bl	8000558 <__aeabi_f2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4825      	ldr	r0, [pc, #148]	; (8006608 <MotorL_Test_PD+0x1cc>)
 8006572:	f7fe fe99 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <MotorL_Test_PD+0x1ac>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7f9 ffec 	bl	8000558 <__aeabi_f2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4821      	ldr	r0, [pc, #132]	; (800660c <MotorL_Test_PD+0x1d0>)
 8006586:	f7fe fe8f 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 800658a:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <MotorL_Test_PD+0x1b4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7f9 ffe2 	bl	8000558 <__aeabi_f2d>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	481d      	ldr	r0, [pc, #116]	; (8006610 <MotorL_Test_PD+0x1d4>)
 800659a:	f7fe fe85 	bl	80052a8 <Custom_OLED_Printf>
	for (;;) {
 800659e:	e788      	b.n	80064b2 <MotorL_Test_PD+0x76>
		 break;
 80065a0:	bf00      	nop

	}

	MotorL_Stop();
 80065a2:	f000 fb25 	bl	8006bf0 <MotorL_Stop>
	Speed_Control_Stop();
 80065a6:	f000 fb5f 	bl	8006c68 <Speed_Control_Stop>
	Sensor_Stop();
 80065aa:	f000 fc19 	bl	8006de0 <Sensor_Stop>
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	3d4ccccd 	.word	0x3d4ccccd
 80065bc:	42480000 	.word	0x42480000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	200013fc 	.word	0x200013fc
 80065c8:	20001400 	.word	0x20001400
 80065cc:	20001404 	.word	0x20001404
 80065d0:	20001408 	.word	0x20001408
 80065d4:	2000140c 	.word	0x2000140c
 80065d8:	20001410 	.word	0x20001410
 80065dc:	20001414 	.word	0x20001414
 80065e0:	40000400 	.word	0x40000400
 80065e4:	40000800 	.word	0x40000800
 80065e8:	20000004 	.word	0x20000004
 80065ec:	3eb33333 	.word	0x3eb33333
 80065f0:	20000008 	.word	0x20000008
 80065f4:	3f4ccccd 	.word	0x3f4ccccd
 80065f8:	2000000c 	.word	0x2000000c
 80065fc:	2000000d 	.word	0x2000000d
 8006600:	0800a0d0 	.word	0x0800a0d0
 8006604:	0800a0e0 	.word	0x0800a0e0
 8006608:	0800a0f0 	.word	0x0800a0f0
 800660c:	0800a100 	.word	0x0800a100
 8006610:	0800a110 	.word	0x0800a110

08006614 <MotorR_Test_PD>:





void MotorR_Test_PD() {
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0

	float coefChangeVal = 0.05;
 800661a:	4b5d      	ldr	r3, [pc, #372]	; (8006790 <MotorR_Test_PD+0x17c>)
 800661c:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 50;
 800661e:	4b5d      	ldr	r3, [pc, #372]	; (8006794 <MotorR_Test_PD+0x180>)
 8006620:	60bb      	str	r3, [r7, #8]

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR = TIM10->ARR + 1;
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <MotorR_Test_PD+0x184>)
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	3301      	adds	r3, #1
 8006628:	461a      	mov	r2, r3
 800662a:	4b5c      	ldr	r3, [pc, #368]	; (800679c <MotorR_Test_PD+0x188>)
 800662c:	601a      	str	r2, [r3, #0]
	prevErrorL = 0;
 800662e:	4b5c      	ldr	r3, [pc, #368]	; (80067a0 <MotorR_Test_PD+0x18c>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 8006634:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <MotorR_Test_PD+0x190>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
	prevErrorDiffL = 0;
 800663a:	4b5b      	ldr	r3, [pc, #364]	; (80067a8 <MotorR_Test_PD+0x194>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
	prevErrorDiffR = 0;
 8006640:	4b5a      	ldr	r3, [pc, #360]	; (80067ac <MotorR_Test_PD+0x198>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	targetEncoderValueL = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006646:	4b5a      	ldr	r3, [pc, #360]	; (80067b0 <MotorR_Test_PD+0x19c>)
 8006648:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 800664c:	601a      	str	r2, [r3, #0]
	targetEncoderValueR = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800664e:	4b59      	ldr	r3, [pc, #356]	; (80067b4 <MotorR_Test_PD+0x1a0>)
 8006650:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8006654:	601a      	str	r2, [r3, #0]
	TIM3->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006656:	4b58      	ldr	r3, [pc, #352]	; (80067b8 <MotorR_Test_PD+0x1a4>)
 8006658:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800665e:	4b57      	ldr	r3, [pc, #348]	; (80067bc <MotorR_Test_PD+0x1a8>)
 8006660:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
	pCoef = P_COEF_INIT;
 8006666:	4b56      	ldr	r3, [pc, #344]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 8006668:	4a56      	ldr	r2, [pc, #344]	; (80067c4 <MotorR_Test_PD+0x1b0>)
 800666a:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 800666c:	4b56      	ldr	r3, [pc, #344]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 800666e:	4a57      	ldr	r2, [pc, #348]	; (80067cc <MotorR_Test_PD+0x1b8>)
 8006670:	601a      	str	r2, [r3, #0]

	dutyRatioSignL = 1;
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <MotorR_Test_PD+0x1bc>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
	dutyRatioSignR = 1;
 8006678:	4b56      	ldr	r3, [pc, #344]	; (80067d4 <MotorR_Test_PD+0x1c0>)
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]



	Sensor_Start();
 800667e:	f000 fb97 	bl	8006db0 <Sensor_Start>
	Speed_Control_Start();
 8006682:	f000 fae5 	bl	8006c50 <Speed_Control_Start>
	MotorR_Start();
 8006686:	f000 fa75 	bl	8006b74 <MotorR_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 800668a:	f7ff f93d 	bl	8005908 <Custom_Switch_Read>
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	2b07      	cmp	r3, #7
 8006696:	d06f      	beq.n	8006778 <MotorR_Test_PD+0x164>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10a      	bne.n	80066b4 <MotorR_Test_PD+0xa0>
			pCoef -= coefChangeVal;
 800669e:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 80066a0:	ed93 7a00 	vldr	s14, [r3]
 80066a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80066a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ac:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 80066ae:	edc3 7a00 	vstr	s15, [r3]
 80066b2:	e036      	b.n	8006722 <MotorR_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_2) {
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10a      	bne.n	80066d0 <MotorR_Test_PD+0xbc>
			pCoef += coefChangeVal;
 80066ba:	4b41      	ldr	r3, [pc, #260]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 80066bc:	ed93 7a00 	vldr	s14, [r3]
 80066c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80066c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c8:	4b3d      	ldr	r3, [pc, #244]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 80066ca:	edc3 7a00 	vstr	s15, [r3]
 80066ce:	e028      	b.n	8006722 <MotorR_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_1_2) {
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d10a      	bne.n	80066ec <MotorR_Test_PD+0xd8>
			dCoef -= coefChangeVal;
 80066d6:	4b3c      	ldr	r3, [pc, #240]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 80066d8:	ed93 7a00 	vldr	s14, [r3]
 80066dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80066e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e4:	4b38      	ldr	r3, [pc, #224]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 80066e6:	edc3 7a00 	vstr	s15, [r3]
 80066ea:	e01a      	b.n	8006722 <MotorR_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_2_3) {
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d10a      	bne.n	8006708 <MotorR_Test_PD+0xf4>
			dCoef += coefChangeVal;
 80066f2:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 80066f4:	ed93 7a00 	vldr	s14, [r3]
 80066f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006700:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 8006702:	edc3 7a00 	vstr	s15, [r3]
 8006706:	e00c      	b.n	8006722 <MotorR_Test_PD+0x10e>
		} else if (sw == CUSTOM_SW_3) {
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	2b04      	cmp	r3, #4
 800670c:	d109      	bne.n	8006722 <MotorR_Test_PD+0x10e>
			targetEncoderValueR -= targetChangeVal;
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <MotorR_Test_PD+0x1a0>)
 8006710:	ed93 7a00 	vldr	s14, [r3]
 8006714:	edd7 7a02 	vldr	s15, [r7, #8]
 8006718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800671c:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <MotorR_Test_PD+0x1a0>)
 800671e:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM11->CCR1);
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <MotorR_Test_PD+0x1c4>)
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	4619      	mov	r1, r3
 8006728:	482c      	ldr	r0, [pc, #176]	; (80067dc <MotorR_Test_PD+0x1c8>)
 800672a:	f7fe fdbd 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM3->CNT);
 800672e:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <MotorR_Test_PD+0x1a4>)
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	4619      	mov	r1, r3
 8006734:	482a      	ldr	r0, [pc, #168]	; (80067e0 <MotorR_Test_PD+0x1cc>)
 8006736:	f7fe fdb7 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5f", targetEncoderValueR);
 800673a:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <MotorR_Test_PD+0x1a0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7f9 ff0a 	bl	8000558 <__aeabi_f2d>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4826      	ldr	r0, [pc, #152]	; (80067e4 <MotorR_Test_PD+0x1d0>)
 800674a:	f7fe fdad 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 800674e:	4b1c      	ldr	r3, [pc, #112]	; (80067c0 <MotorR_Test_PD+0x1ac>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7f9 ff00 	bl	8000558 <__aeabi_f2d>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4822      	ldr	r0, [pc, #136]	; (80067e8 <MotorR_Test_PD+0x1d4>)
 800675e:	f7fe fda3 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 8006762:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <MotorR_Test_PD+0x1b4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7f9 fef6 	bl	8000558 <__aeabi_f2d>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	481e      	ldr	r0, [pc, #120]	; (80067ec <MotorR_Test_PD+0x1d8>)
 8006772:	f7fe fd99 	bl	80052a8 <Custom_OLED_Printf>
	for (;;) {
 8006776:	e788      	b.n	800668a <MotorR_Test_PD+0x76>
		 break;
 8006778:	bf00      	nop

	}
	MotorR_Stop();
 800677a:	f000 fa4d 	bl	8006c18 <MotorR_Stop>
	Speed_Control_Stop();
 800677e:	f000 fa73 	bl	8006c68 <Speed_Control_Stop>
	Sensor_Stop();
 8006782:	f000 fb2d 	bl	8006de0 <Sensor_Stop>
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	3d4ccccd 	.word	0x3d4ccccd
 8006794:	42480000 	.word	0x42480000
 8006798:	40014400 	.word	0x40014400
 800679c:	200013fc 	.word	0x200013fc
 80067a0:	20001400 	.word	0x20001400
 80067a4:	20001404 	.word	0x20001404
 80067a8:	20001408 	.word	0x20001408
 80067ac:	2000140c 	.word	0x2000140c
 80067b0:	20001410 	.word	0x20001410
 80067b4:	20001414 	.word	0x20001414
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	20000004 	.word	0x20000004
 80067c4:	3eb33333 	.word	0x3eb33333
 80067c8:	20000008 	.word	0x20000008
 80067cc:	3f4ccccd 	.word	0x3f4ccccd
 80067d0:	2000000c 	.word	0x2000000c
 80067d4:	2000000d 	.word	0x2000000d
 80067d8:	40014800 	.word	0x40014800
 80067dc:	0800a0d0 	.word	0x0800a0d0
 80067e0:	0800a0e0 	.word	0x0800a0e0
 80067e4:	0800a0f0 	.word	0x0800a0f0
 80067e8:	0800a100 	.word	0x0800a100
 80067ec:	0800a110 	.word	0x0800a110

080067f0 <Motor_Test_Speed>:





void Motor_Test_Speed() {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR = TIM10->ARR + 1;
 80067f6:	4b4e      	ldr	r3, [pc, #312]	; (8006930 <Motor_Test_Speed+0x140>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	3301      	adds	r3, #1
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b4d      	ldr	r3, [pc, #308]	; (8006934 <Motor_Test_Speed+0x144>)
 8006800:	601a      	str	r2, [r3, #0]
	prevErrorL = 0;
 8006802:	4b4d      	ldr	r3, [pc, #308]	; (8006938 <Motor_Test_Speed+0x148>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <Motor_Test_Speed+0x14c>)
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
	prevErrorDiffL = 0;
 800680e:	4b4c      	ldr	r3, [pc, #304]	; (8006940 <Motor_Test_Speed+0x150>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
	prevErrorDiffR = 0;
 8006814:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <Motor_Test_Speed+0x154>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
	targetEncoderValueL = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800681a:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <Motor_Test_Speed+0x158>)
 800681c:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8006820:	601a      	str	r2, [r3, #0]
	targetEncoderValueR = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006822:	4b4a      	ldr	r3, [pc, #296]	; (800694c <Motor_Test_Speed+0x15c>)
 8006824:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 8006828:	601a      	str	r2, [r3, #0]
	TIM3->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 800682a:	4b49      	ldr	r3, [pc, #292]	; (8006950 <Motor_Test_Speed+0x160>)
 800682c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = ENCODER_VALUE_ADJUST_THRESHOLD_MID;
 8006832:	4b48      	ldr	r3, [pc, #288]	; (8006954 <Motor_Test_Speed+0x164>)
 8006834:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
	pCoef = P_COEF_INIT;
 800683a:	4b47      	ldr	r3, [pc, #284]	; (8006958 <Motor_Test_Speed+0x168>)
 800683c:	4a47      	ldr	r2, [pc, #284]	; (800695c <Motor_Test_Speed+0x16c>)
 800683e:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 8006840:	4b47      	ldr	r3, [pc, #284]	; (8006960 <Motor_Test_Speed+0x170>)
 8006842:	4a48      	ldr	r2, [pc, #288]	; (8006964 <Motor_Test_Speed+0x174>)
 8006844:	601a      	str	r2, [r3, #0]

	dutyRatioSignL = 1;
 8006846:	4b48      	ldr	r3, [pc, #288]	; (8006968 <Motor_Test_Speed+0x178>)
 8006848:	2201      	movs	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]
	dutyRatioSignR = 1;
 800684c:	4b47      	ldr	r3, [pc, #284]	; (800696c <Motor_Test_Speed+0x17c>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]

	pCoef = P_COEF_INIT;
 8006852:	4b41      	ldr	r3, [pc, #260]	; (8006958 <Motor_Test_Speed+0x168>)
 8006854:	4a41      	ldr	r2, [pc, #260]	; (800695c <Motor_Test_Speed+0x16c>)
 8006856:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 8006858:	4b41      	ldr	r3, [pc, #260]	; (8006960 <Motor_Test_Speed+0x170>)
 800685a:	4a42      	ldr	r2, [pc, #264]	; (8006964 <Motor_Test_Speed+0x174>)
 800685c:	601a      	str	r2, [r3, #0]

	// 가속도 변수 초기화
	targetAccele = 1;
 800685e:	4b44      	ldr	r3, [pc, #272]	; (8006970 <Motor_Test_Speed+0x180>)
 8006860:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006864:	601a      	str	r2, [r3, #0]
	curAccele = 0;
 8006866:	4b43      	ldr	r3, [pc, #268]	; (8006974 <Motor_Test_Speed+0x184>)
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = 0;
 800686e:	4b42      	ldr	r3, [pc, #264]	; (8006978 <Motor_Test_Speed+0x188>)
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	decele = 1;
 8006876:	4b41      	ldr	r3, [pc, #260]	; (800697c <Motor_Test_Speed+0x18c>)
 8006878:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800687c:	601a      	str	r2, [r3, #0]
	curSpeed = 0;
 800687e:	4b40      	ldr	r3, [pc, #256]	; (8006980 <Motor_Test_Speed+0x190>)
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	601a      	str	r2, [r3, #0]


	Motor_Start();
 8006886:	f000 f98b 	bl	8006ba0 <Motor_Start>
	Sensor_Start();
 800688a:	f000 fa91 	bl	8006db0 <Sensor_Start>
	Speed_Control_Start();
 800688e:	f000 f9df 	bl	8006c50 <Speed_Control_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8006892:	f7ff f839 	bl	8005908 <Custom_Switch_Read>
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_3) {
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d03b      	beq.n	8006918 <Motor_Test_Speed+0x128>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10a      	bne.n	80068bc <Motor_Test_Speed+0xcc>
			targetSpeed -= 0.1f;
 80068a6:	4b34      	ldr	r3, [pc, #208]	; (8006978 <Motor_Test_Speed+0x188>)
 80068a8:	edd3 7a00 	vldr	s15, [r3]
 80068ac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006984 <Motor_Test_Speed+0x194>
 80068b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068b4:	4b30      	ldr	r3, [pc, #192]	; (8006978 <Motor_Test_Speed+0x188>)
 80068b6:	edc3 7a00 	vstr	s15, [r3]
 80068ba:	e00c      	b.n	80068d6 <Motor_Test_Speed+0xe6>
		} else if (sw == CUSTOM_SW_2) {
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d109      	bne.n	80068d6 <Motor_Test_Speed+0xe6>
			targetSpeed += 0.1f;
 80068c2:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <Motor_Test_Speed+0x188>)
 80068c4:	edd3 7a00 	vldr	s15, [r3]
 80068c8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006984 <Motor_Test_Speed+0x194>
 80068cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068d0:	4b29      	ldr	r3, [pc, #164]	; (8006978 <Motor_Test_Speed+0x188>)
 80068d2:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0speed  : %3.2f", curSpeed);
 80068d6:	4b2a      	ldr	r3, [pc, #168]	; (8006980 <Motor_Test_Speed+0x190>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7f9 fe3c 	bl	8000558 <__aeabi_f2d>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4828      	ldr	r0, [pc, #160]	; (8006988 <Motor_Test_Speed+0x198>)
 80068e6:	f7fe fcdf 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR    : %5d", TIM10->CCR1);
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <Motor_Test_Speed+0x140>)
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	4619      	mov	r1, r3
 80068f0:	4826      	ldr	r0, [pc, #152]	; (800698c <Motor_Test_Speed+0x19c>)
 80068f2:	f7fe fcd9 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2curECOD: %5d", TIM4->CNT);
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <Motor_Test_Speed+0x164>)
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	4619      	mov	r1, r3
 80068fc:	4824      	ldr	r0, [pc, #144]	; (8006990 <Motor_Test_Speed+0x1a0>)
 80068fe:	f7fe fcd3 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3tarECOD: %5f", targetEncoderValueL);
 8006902:	4b11      	ldr	r3, [pc, #68]	; (8006948 <Motor_Test_Speed+0x158>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7f9 fe26 	bl	8000558 <__aeabi_f2d>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4820      	ldr	r0, [pc, #128]	; (8006994 <Motor_Test_Speed+0x1a4>)
 8006912:	f7fe fcc9 	bl	80052a8 <Custom_OLED_Printf>
	for (;;) {
 8006916:	e7bc      	b.n	8006892 <Motor_Test_Speed+0xa2>
		 break;
 8006918:	bf00      	nop

	}

	Speed_Control_Stop();
 800691a:	f000 f9a5 	bl	8006c68 <Speed_Control_Stop>
	Sensor_Stop();
 800691e:	f000 fa5f 	bl	8006de0 <Sensor_Stop>
	Motor_Stop();
 8006922:	f000 f98d 	bl	8006c40 <Motor_Stop>


}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40014400 	.word	0x40014400
 8006934:	200013fc 	.word	0x200013fc
 8006938:	20001400 	.word	0x20001400
 800693c:	20001404 	.word	0x20001404
 8006940:	20001408 	.word	0x20001408
 8006944:	2000140c 	.word	0x2000140c
 8006948:	20001410 	.word	0x20001410
 800694c:	20001414 	.word	0x20001414
 8006950:	40000400 	.word	0x40000400
 8006954:	40000800 	.word	0x40000800
 8006958:	20000004 	.word	0x20000004
 800695c:	3eb33333 	.word	0x3eb33333
 8006960:	20000008 	.word	0x20000008
 8006964:	3f4ccccd 	.word	0x3f4ccccd
 8006968:	2000000c 	.word	0x2000000c
 800696c:	2000000d 	.word	0x2000000d
 8006970:	20000018 	.word	0x20000018
 8006974:	2000001c 	.word	0x2000001c
 8006978:	20000024 	.word	0x20000024
 800697c:	20000020 	.word	0x20000020
 8006980:	20000028 	.word	0x20000028
 8006984:	3dcccccd 	.word	0x3dcccccd
 8006988:	0800a120 	.word	0x0800a120
 800698c:	0800a134 	.word	0x0800a134
 8006990:	0800a144 	.word	0x0800a144
 8006994:	0800a154 	.word	0x0800a154

08006998 <Drive_Test_Position>:





void Drive_Test_Position() {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 80069a2:	f7fe fb9c 	bl	80050de <Custom_OLED_Clear>
	Sensor_Start();
 80069a6:	f000 fa03 	bl	8006db0 <Sensor_Start>
	Speed_Control_Start();
 80069aa:	f000 f951 	bl	8006c50 <Speed_Control_Start>

	// 좌우 모터 포지션에 관한 변수
	positionVal = 0;
 80069ae:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <Drive_Test_Position+0xb4>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
	positionCoef = POSITION_COEF_INIT;
 80069b4:	4b26      	ldr	r3, [pc, #152]	; (8006a50 <Drive_Test_Position+0xb8>)
 80069b6:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <Drive_Test_Position+0xbc>)
 80069b8:	601a      	str	r2, [r3, #0]

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80069ba:	e035      	b.n	8006a28 <Drive_Test_Position+0x90>

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 80069bc:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <Drive_Test_Position+0xb4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	4825      	ldr	r0, [pc, #148]	; (8006a58 <Drive_Test_Position+0xc0>)
 80069c4:	f7fe fc70 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL:  %f", (1 + positionVal * positionCoef));
 80069c8:	4b20      	ldr	r3, [pc, #128]	; (8006a4c <Drive_Test_Position+0xb4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069d4:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <Drive_Test_Position+0xb8>)
 80069d6:	edd3 7a00 	vldr	s15, [r3]
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069e6:	ee17 0a90 	vmov	r0, s15
 80069ea:	f7f9 fdb5 	bl	8000558 <__aeabi_f2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	481a      	ldr	r0, [pc, #104]	; (8006a5c <Drive_Test_Position+0xc4>)
 80069f4:	f7fe fc58 	bl	80052a8 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR:  %f", (1 - positionVal * positionCoef));
 80069f8:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <Drive_Test_Position+0xb4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <Drive_Test_Position+0xb8>)
 8006a06:	edd3 7a00 	vldr	s15, [r3]
 8006a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a16:	ee17 0a90 	vmov	r0, s15
 8006a1a:	f7f9 fd9d 	bl	8000558 <__aeabi_f2d>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	480f      	ldr	r0, [pc, #60]	; (8006a60 <Drive_Test_Position+0xc8>)
 8006a24:	f7fe fc40 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006a28:	f7fe ff6e 	bl	8005908 <Custom_Switch_Read>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	71fb      	strb	r3, [r7, #7]
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d1c2      	bne.n	80069bc <Drive_Test_Position+0x24>
	}
	Speed_Control_Stop();
 8006a36:	f000 f917 	bl	8006c68 <Speed_Control_Stop>
	Sensor_Stop();
 8006a3a:	f000 f9d1 	bl	8006de0 <Sensor_Stop>
	Custom_OLED_Clear();
 8006a3e:	f7fe fb4e 	bl	80050de <Custom_OLED_Clear>
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20001418 	.word	0x20001418
 8006a50:	20000010 	.word	0x20000010
 8006a54:	387ba882 	.word	0x387ba882
 8006a58:	0800a164 	.word	0x0800a164
 8006a5c:	0800a174 	.word	0x0800a174
 8006a60:	0800a184 	.word	0x0800a184

08006a64 <LL_TIM_EnableCounter>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <LL_TIM_DisableCounter>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f023 0201 	bic.w	r2, r3, #1
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <LL_TIM_CC_EnableChannel>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1a      	ldr	r2, [r3, #32]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_TIM_CC_DisableChannel>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	401a      	ands	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_TIM_OC_SetCompareCH2>:
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <LL_TIM_EnableIT_UPDATE>:
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <LL_TIM_DisableIT_UPDATE>:
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <MotorL_Start>:





void MotorL_Start() {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0

	// motorL pwm start
	LL_TIM_EnableCounter(TIM10);
 8006b4c:	4807      	ldr	r0, [pc, #28]	; (8006b6c <MotorL_Start+0x24>)
 8006b4e:	f7ff ff89 	bl	8006a64 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8006b52:	2101      	movs	r1, #1
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <MotorL_Start+0x24>)
 8006b56:	f7ff ffa5 	bl	8006aa4 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4803      	ldr	r0, [pc, #12]	; (8006b6c <MotorL_Start+0x24>)
 8006b5e:	f7ff ffc4 	bl	8006aea <LL_TIM_OC_SetCompareCH2>

	// motorL encoder start
	LL_TIM_EnableCounter(TIM4);
 8006b62:	4803      	ldr	r0, [pc, #12]	; (8006b70 <MotorL_Start+0x28>)
 8006b64:	f7ff ff7e 	bl	8006a64 <LL_TIM_EnableCounter>
}
 8006b68:	bf00      	nop
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40000800 	.word	0x40000800

08006b74 <MotorR_Start>:



void MotorR_Start() {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0

	// motorR pwm start
	LL_TIM_EnableCounter(TIM11);
 8006b78:	4807      	ldr	r0, [pc, #28]	; (8006b98 <MotorR_Start+0x24>)
 8006b7a:	f7ff ff73 	bl	8006a64 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4805      	ldr	r0, [pc, #20]	; (8006b98 <MotorR_Start+0x24>)
 8006b82:	f7ff ff8f 	bl	8006aa4 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 8006b86:	2100      	movs	r1, #0
 8006b88:	4803      	ldr	r0, [pc, #12]	; (8006b98 <MotorR_Start+0x24>)
 8006b8a:	f7ff ffae 	bl	8006aea <LL_TIM_OC_SetCompareCH2>

	// motorR encoder start
	LL_TIM_EnableCounter(TIM3);
 8006b8e:	4803      	ldr	r0, [pc, #12]	; (8006b9c <MotorR_Start+0x28>)
 8006b90:	f7ff ff68 	bl	8006a64 <LL_TIM_EnableCounter>
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40014800 	.word	0x40014800
 8006b9c:	40000400 	.word	0x40000400

08006ba0 <Motor_Start>:




void Motor_Start() {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0

	MotorL_Start();
 8006ba4:	f7ff ffd0 	bl	8006b48 <MotorL_Start>
	MotorR_Start();
 8006ba8:	f7ff ffe4 	bl	8006b74 <MotorR_Start>
}
 8006bac:	bf00      	nop
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <MotorL_Power_Off>:





void MotorL_Power_Off() {
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0

	TIM10->CCR1 = 0;
 8006bb4:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <MotorL_Power_Off+0x14>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006bba:	bf00      	nop
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	40014400 	.word	0x40014400

08006bc8 <MotorR_Power_Off>:


void MotorR_Power_Off() {
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0

	TIM11->CCR1 = 0;
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <MotorR_Power_Off+0x14>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40014800 	.word	0x40014800

08006be0 <Motor_Power_Off>:



void Motor_Power_Off() {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 8006be4:	f7ff ffe4 	bl	8006bb0 <MotorL_Power_Off>
	MotorR_Power_Off();
 8006be8:	f7ff ffee 	bl	8006bc8 <MotorR_Power_Off>
}
 8006bec:	bf00      	nop
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <MotorL_Stop>:





void MotorL_Stop() {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 8006bf4:	f7ff ffdc 	bl	8006bb0 <MotorL_Power_Off>

	// motorL pwm end
	LL_TIM_DisableCounter(TIM10);
 8006bf8:	4805      	ldr	r0, [pc, #20]	; (8006c10 <MotorL_Stop+0x20>)
 8006bfa:	f7ff ff43 	bl	8006a84 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8006bfe:	2101      	movs	r1, #1
 8006c00:	4803      	ldr	r0, [pc, #12]	; (8006c10 <MotorL_Stop+0x20>)
 8006c02:	f7ff ff60 	bl	8006ac6 <LL_TIM_CC_DisableChannel>

	// motorL encoder end
	LL_TIM_DisableCounter(TIM4);
 8006c06:	4803      	ldr	r0, [pc, #12]	; (8006c14 <MotorL_Stop+0x24>)
 8006c08:	f7ff ff3c 	bl	8006a84 <LL_TIM_DisableCounter>
}
 8006c0c:	bf00      	nop
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40000800 	.word	0x40000800

08006c18 <MotorR_Stop>:



void MotorR_Stop() {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0

	MotorR_Power_Off();
 8006c1c:	f7ff ffd4 	bl	8006bc8 <MotorR_Power_Off>

	// motorR pwm end
	LL_TIM_DisableCounter(TIM11);
 8006c20:	4805      	ldr	r0, [pc, #20]	; (8006c38 <MotorR_Stop+0x20>)
 8006c22:	f7ff ff2f 	bl	8006a84 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8006c26:	2101      	movs	r1, #1
 8006c28:	4803      	ldr	r0, [pc, #12]	; (8006c38 <MotorR_Stop+0x20>)
 8006c2a:	f7ff ff4c 	bl	8006ac6 <LL_TIM_CC_DisableChannel>

	// motorR encoder end
	LL_TIM_DisableCounter(TIM3);
 8006c2e:	4803      	ldr	r0, [pc, #12]	; (8006c3c <MotorR_Stop+0x24>)
 8006c30:	f7ff ff28 	bl	8006a84 <LL_TIM_DisableCounter>
}
 8006c34:	bf00      	nop
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40014800 	.word	0x40014800
 8006c3c:	40000400 	.word	0x40000400

08006c40 <Motor_Stop>:



void Motor_Stop() {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0

	MotorL_Stop();
 8006c44:	f7ff ffd4 	bl	8006bf0 <MotorL_Stop>
	MotorR_Stop();
 8006c48:	f7ff ffe6 	bl	8006c18 <MotorR_Stop>
}
 8006c4c:	bf00      	nop
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <Speed_Control_Start>:





void Speed_Control_Start(){
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8006c54:	4803      	ldr	r0, [pc, #12]	; (8006c64 <Speed_Control_Start+0x14>)
 8006c56:	f7ff ff05 	bl	8006a64 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 8006c5a:	4802      	ldr	r0, [pc, #8]	; (8006c64 <Speed_Control_Start+0x14>)
 8006c5c:	f7ff ff53 	bl	8006b06 <LL_TIM_EnableIT_UPDATE>
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40014000 	.word	0x40014000

08006c68 <Speed_Control_Stop>:




void Speed_Control_Stop(){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 8006c6c:	4803      	ldr	r0, [pc, #12]	; (8006c7c <Speed_Control_Stop+0x14>)
 8006c6e:	f7ff ff5a 	bl	8006b26 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8006c72:	4802      	ldr	r0, [pc, #8]	; (8006c7c <Speed_Control_Stop+0x14>)
 8006c74:	f7ff ff06 	bl	8006a84 <LL_TIM_DisableCounter>
}
 8006c78:	bf00      	nop
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40014000 	.word	0x40014000

08006c80 <LL_ADC_Enable>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f043 0201 	orr.w	r2, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <LL_ADC_Disable>:
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 0201 	bic.w	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <LL_TIM_EnableCounter>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <LL_TIM_DisableCounter>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f023 0201 	bic.w	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <LL_TIM_EnableIT_UPDATE>:
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f043 0201 	orr.w	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60da      	str	r2, [r3, #12]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_TIM_DisableIT_UPDATE>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f023 0201 	bic.w	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006d72:	bf00      	nop
 8006d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d1f8      	bne.n	8006d74 <Custom_Delay_us+0x34>
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff ffcc 	bl	8006d40 <Custom_Delay_us>
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <Sensor_Start>:





void Sensor_Start() {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0

	LL_ADC_Enable(ADC1);
 8006db4:	4808      	ldr	r0, [pc, #32]	; (8006dd8 <Sensor_Start+0x28>)
 8006db6:	f7ff ff63 	bl	8006c80 <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 8006dba:	200a      	movs	r0, #10
 8006dbc:	f7ff ffe8 	bl	8006d90 <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 8006dc0:	4806      	ldr	r0, [pc, #24]	; (8006ddc <Sensor_Start+0x2c>)
 8006dc2:	f7ff ff7d 	bl	8006cc0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 8006dc6:	4805      	ldr	r0, [pc, #20]	; (8006ddc <Sensor_Start+0x2c>)
 8006dc8:	f7ff ff9a 	bl	8006d00 <LL_TIM_EnableIT_UPDATE>
	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 8006dcc:	200a      	movs	r0, #10
 8006dce:	f7ff ffdf 	bl	8006d90 <Custom_Delay_ms>
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40012000 	.word	0x40012000
 8006ddc:	40000c00 	.word	0x40000c00

08006de0 <Sensor_Stop>:




void Sensor_Stop() {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 8006de4:	4805      	ldr	r0, [pc, #20]	; (8006dfc <Sensor_Stop+0x1c>)
 8006de6:	f7ff ff5b 	bl	8006ca0 <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 8006dea:	4805      	ldr	r0, [pc, #20]	; (8006e00 <Sensor_Stop+0x20>)
 8006dec:	f7ff ff78 	bl	8006ce0 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 8006df0:	4803      	ldr	r0, [pc, #12]	; (8006e00 <Sensor_Stop+0x20>)
 8006df2:	f7ff ff95 	bl	8006d20 <LL_TIM_DisableIT_UPDATE>
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40012000 	.word	0x40012000
 8006e00:	40000c00 	.word	0x40000c00

08006e04 <Sensor_Calibration>:





void Sensor_Calibration() {
 8006e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006e0e:	2300      	movs	r3, #0
 8006e10:	71fb      	strb	r3, [r7, #7]
 8006e12:	e00a      	b.n	8006e2a <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	4a8d      	ldr	r2, [pc, #564]	; (800704c <Sensor_Calibration+0x248>)
 8006e18:	2100      	movs	r1, #0
 8006e1a:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	4a8c      	ldr	r2, [pc, #560]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e20:	2100      	movs	r1, #0
 8006e22:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	3301      	adds	r3, #1
 8006e28:	71fb      	strb	r3, [r7, #7]
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	2b0f      	cmp	r3, #15
 8006e2e:	d9f1      	bls.n	8006e14 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 8006e30:	f7ff ffbe 	bl	8006db0 <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 8006e34:	f7fe f953 	bl	80050de <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006e38:	e06e      	b.n	8006f18 <Sensor_Calibration+0x114>
		Custom_OLED_Printf("/0Black Max");
 8006e3a:	4886      	ldr	r0, [pc, #536]	; (8007054 <Sensor_Calibration+0x250>)
 8006e3c:	f7fe fa34 	bl	80052a8 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006e40:	2300      	movs	r3, #0
 8006e42:	71bb      	strb	r3, [r7, #6]
 8006e44:	e011      	b.n	8006e6a <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 8006e46:	79bb      	ldrb	r3, [r7, #6]
 8006e48:	4a81      	ldr	r2, [pc, #516]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	79ba      	ldrb	r2, [r7, #6]
 8006e50:	4981      	ldr	r1, [pc, #516]	; (8007058 <Sensor_Calibration+0x254>)
 8006e52:	5c8a      	ldrb	r2, [r1, r2]
 8006e54:	70fa      	strb	r2, [r7, #3]
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 8006e5c:	79bb      	ldrb	r3, [r7, #6]
 8006e5e:	497c      	ldr	r1, [pc, #496]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006e64:	79bb      	ldrb	r3, [r7, #6]
 8006e66:	3301      	adds	r3, #1
 8006e68:	71bb      	strb	r3, [r7, #6]
 8006e6a:	79bb      	ldrb	r3, [r7, #6]
 8006e6c:	2b0f      	cmp	r3, #15
 8006e6e:	d9ea      	bls.n	8006e46 <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006e70:	4b77      	ldr	r3, [pc, #476]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e76:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006e78:	4b75      	ldr	r3, [pc, #468]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e7e:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006e80:	4b73      	ldr	r3, [pc, #460]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e86:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8006e88:	4b71      	ldr	r3, [pc, #452]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e8a:	78db      	ldrb	r3, [r3, #3]
 8006e8c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e8e:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006e90:	4b6f      	ldr	r3, [pc, #444]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e92:	791b      	ldrb	r3, [r3, #4]
 8006e94:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e96:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006e98:	4b6d      	ldr	r3, [pc, #436]	; (8007050 <Sensor_Calibration+0x24c>)
 8006e9a:	795b      	ldrb	r3, [r3, #5]
 8006e9c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e9e:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006ea0:	4b6b      	ldr	r3, [pc, #428]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ea2:	799b      	ldrb	r3, [r3, #6]
 8006ea4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ea6:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8006ea8:	4b69      	ldr	r3, [pc, #420]	; (8007050 <Sensor_Calibration+0x24c>)
 8006eaa:	79db      	ldrb	r3, [r3, #7]
 8006eac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	9403      	str	r4, [sp, #12]
 8006eb2:	9002      	str	r0, [sp, #8]
 8006eb4:	9101      	str	r1, [sp, #4]
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	4663      	mov	r3, ip
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4867      	ldr	r0, [pc, #412]	; (800705c <Sensor_Calibration+0x258>)
 8006ec0:	f7fe f9f2 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8006ec4:	4b62      	ldr	r3, [pc, #392]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ec6:	7a1b      	ldrb	r3, [r3, #8]
 8006ec8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006eca:	461d      	mov	r5, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8006ecc:	4b60      	ldr	r3, [pc, #384]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ece:	7a5b      	ldrb	r3, [r3, #9]
 8006ed0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ed2:	461e      	mov	r6, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8006ed4:	4b5e      	ldr	r3, [pc, #376]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ed6:	7a9b      	ldrb	r3, [r3, #10]
 8006ed8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006eda:	469c      	mov	ip, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8006edc:	4b5c      	ldr	r3, [pc, #368]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ede:	7adb      	ldrb	r3, [r3, #11]
 8006ee0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ee2:	461a      	mov	r2, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8006ee4:	4b5a      	ldr	r3, [pc, #360]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ee6:	7b1b      	ldrb	r3, [r3, #12]
 8006ee8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006eea:	4619      	mov	r1, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8006eec:	4b58      	ldr	r3, [pc, #352]	; (8007050 <Sensor_Calibration+0x24c>)
 8006eee:	7b5b      	ldrb	r3, [r3, #13]
 8006ef0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ef2:	4618      	mov	r0, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8006ef4:	4b56      	ldr	r3, [pc, #344]	; (8007050 <Sensor_Calibration+0x24c>)
 8006ef6:	7b9b      	ldrb	r3, [r3, #14]
 8006ef8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006efa:	461c      	mov	r4, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8006efc:	4b54      	ldr	r3, [pc, #336]	; (8007050 <Sensor_Calibration+0x24c>)
 8006efe:	7bdb      	ldrb	r3, [r3, #15]
 8006f00:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	9403      	str	r4, [sp, #12]
 8006f06:	9002      	str	r0, [sp, #8]
 8006f08:	9101      	str	r1, [sp, #4]
 8006f0a:	9200      	str	r2, [sp, #0]
 8006f0c:	4663      	mov	r3, ip
 8006f0e:	4632      	mov	r2, r6
 8006f10:	4629      	mov	r1, r5
 8006f12:	4853      	ldr	r0, [pc, #332]	; (8007060 <Sensor_Calibration+0x25c>)
 8006f14:	f7fe f9c8 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006f18:	f7fe fcf6 	bl	8005908 <Custom_Switch_Read>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d18b      	bne.n	8006e3a <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 8006f22:	f7fe f8dc 	bl	80050de <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006f26:	e06e      	b.n	8007006 <Sensor_Calibration+0x202>
		Custom_OLED_Printf("/0White Max");
 8006f28:	484e      	ldr	r0, [pc, #312]	; (8007064 <Sensor_Calibration+0x260>)
 8006f2a:	f7fe f9bd 	bl	80052a8 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006f2e:	2300      	movs	r3, #0
 8006f30:	717b      	strb	r3, [r7, #5]
 8006f32:	e011      	b.n	8006f58 <Sensor_Calibration+0x154>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8006f34:	797b      	ldrb	r3, [r7, #5]
 8006f36:	4a45      	ldr	r2, [pc, #276]	; (800704c <Sensor_Calibration+0x248>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	797a      	ldrb	r2, [r7, #5]
 8006f3e:	4946      	ldr	r1, [pc, #280]	; (8007058 <Sensor_Calibration+0x254>)
 8006f40:	5c8a      	ldrb	r2, [r1, r2]
 8006f42:	70fa      	strb	r2, [r7, #3]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d903      	bls.n	8006f52 <Sensor_Calibration+0x14e>
				whiteMaxs[i] = tmp;
 8006f4a:	797b      	ldrb	r3, [r7, #5]
 8006f4c:	493f      	ldr	r1, [pc, #252]	; (800704c <Sensor_Calibration+0x248>)
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8006f52:	797b      	ldrb	r3, [r7, #5]
 8006f54:	3301      	adds	r3, #1
 8006f56:	717b      	strb	r3, [r7, #5]
 8006f58:	797b      	ldrb	r3, [r7, #5]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d9ea      	bls.n	8006f34 <Sensor_Calibration+0x130>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006f5e:	4b3b      	ldr	r3, [pc, #236]	; (800704c <Sensor_Calibration+0x248>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f64:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <Sensor_Calibration+0x248>)
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f6c:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <Sensor_Calibration+0x248>)
 8006f70:	789b      	ldrb	r3, [r3, #2]
 8006f72:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f74:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8006f76:	4b35      	ldr	r3, [pc, #212]	; (800704c <Sensor_Calibration+0x248>)
 8006f78:	78db      	ldrb	r3, [r3, #3]
 8006f7a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f7c:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006f7e:	4b33      	ldr	r3, [pc, #204]	; (800704c <Sensor_Calibration+0x248>)
 8006f80:	791b      	ldrb	r3, [r3, #4]
 8006f82:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f84:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <Sensor_Calibration+0x248>)
 8006f88:	795b      	ldrb	r3, [r3, #5]
 8006f8a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f8c:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006f8e:	4b2f      	ldr	r3, [pc, #188]	; (800704c <Sensor_Calibration+0x248>)
 8006f90:	799b      	ldrb	r3, [r3, #6]
 8006f92:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f94:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <Sensor_Calibration+0x248>)
 8006f98:	79db      	ldrb	r3, [r3, #7]
 8006f9a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	9403      	str	r4, [sp, #12]
 8006fa0:	9002      	str	r0, [sp, #8]
 8006fa2:	9101      	str	r1, [sp, #4]
 8006fa4:	9200      	str	r2, [sp, #0]
 8006fa6:	4663      	mov	r3, ip
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4629      	mov	r1, r5
 8006fac:	482b      	ldr	r0, [pc, #172]	; (800705c <Sensor_Calibration+0x258>)
 8006fae:	f7fe f97b 	bl	80052a8 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <Sensor_Calibration+0x248>)
 8006fb4:	7a1b      	ldrb	r3, [r3, #8]
 8006fb6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fb8:	461d      	mov	r5, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <Sensor_Calibration+0x248>)
 8006fbc:	7a5b      	ldrb	r3, [r3, #9]
 8006fbe:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fc0:	461e      	mov	r6, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <Sensor_Calibration+0x248>)
 8006fc4:	7a9b      	ldrb	r3, [r3, #10]
 8006fc6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fc8:	469c      	mov	ip, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <Sensor_Calibration+0x248>)
 8006fcc:	7adb      	ldrb	r3, [r3, #11]
 8006fce:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fd0:	461a      	mov	r2, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <Sensor_Calibration+0x248>)
 8006fd4:	7b1b      	ldrb	r3, [r3, #12]
 8006fd6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fd8:	4619      	mov	r1, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8006fda:	4b1c      	ldr	r3, [pc, #112]	; (800704c <Sensor_Calibration+0x248>)
 8006fdc:	7b5b      	ldrb	r3, [r3, #13]
 8006fde:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fe0:	4618      	mov	r0, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	; (800704c <Sensor_Calibration+0x248>)
 8006fe4:	7b9b      	ldrb	r3, [r3, #14]
 8006fe6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006fe8:	461c      	mov	r4, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <Sensor_Calibration+0x248>)
 8006fec:	7bdb      	ldrb	r3, [r3, #15]
 8006fee:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9403      	str	r4, [sp, #12]
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	9101      	str	r1, [sp, #4]
 8006ff8:	9200      	str	r2, [sp, #0]
 8006ffa:	4663      	mov	r3, ip
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4629      	mov	r1, r5
 8007000:	4817      	ldr	r0, [pc, #92]	; (8007060 <Sensor_Calibration+0x25c>)
 8007002:	f7fe f951 	bl	80052a8 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007006:	f7fe fc7f 	bl	8005908 <Custom_Switch_Read>
 800700a:	4603      	mov	r3, r0
 800700c:	2b04      	cmp	r3, #4
 800700e:	d18b      	bne.n	8006f28 <Sensor_Calibration+0x124>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007010:	2300      	movs	r3, #0
 8007012:	713b      	strb	r3, [r7, #4]
 8007014:	e00f      	b.n	8007036 <Sensor_Calibration+0x232>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 8007016:	793b      	ldrb	r3, [r7, #4]
 8007018:	4a0c      	ldr	r2, [pc, #48]	; (800704c <Sensor_Calibration+0x248>)
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	b2d9      	uxtb	r1, r3
 800701e:	793b      	ldrb	r3, [r7, #4]
 8007020:	4a0b      	ldr	r2, [pc, #44]	; (8007050 <Sensor_Calibration+0x24c>)
 8007022:	5cd3      	ldrb	r3, [r2, r3]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	793b      	ldrb	r3, [r7, #4]
 8007028:	1a8a      	subs	r2, r1, r2
 800702a:	b2d1      	uxtb	r1, r2
 800702c:	4a0e      	ldr	r2, [pc, #56]	; (8007068 <Sensor_Calibration+0x264>)
 800702e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8007030:	793b      	ldrb	r3, [r7, #4]
 8007032:	3301      	adds	r3, #1
 8007034:	713b      	strb	r3, [r7, #4]
 8007036:	793b      	ldrb	r3, [r7, #4]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d9ec      	bls.n	8007016 <Sensor_Calibration+0x212>
	}

	Custom_OLED_Clear();
 800703c:	f7fe f84f 	bl	80050de <Custom_OLED_Clear>
	Sensor_Stop();
 8007040:	f7ff fece 	bl	8006de0 <Sensor_Stop>
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704c:	20001454 	.word	0x20001454
 8007050:	20001464 	.word	0x20001464
 8007054:	0800a298 	.word	0x0800a298
 8007058:	20001424 	.word	0x20001424
 800705c:	0800a2a4 	.word	0x0800a2a4
 8007060:	0800a2d0 	.word	0x0800a2d0
 8007064:	0800a2fc 	.word	0x0800a2fc
 8007068:	20001444 	.word	0x20001444

0800706c <__cvt>:
 800706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	ec55 4b10 	vmov	r4, r5, d0
 8007074:	2d00      	cmp	r5, #0
 8007076:	460e      	mov	r6, r1
 8007078:	4619      	mov	r1, r3
 800707a:	462b      	mov	r3, r5
 800707c:	bfbb      	ittet	lt
 800707e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007082:	461d      	movlt	r5, r3
 8007084:	2300      	movge	r3, #0
 8007086:	232d      	movlt	r3, #45	; 0x2d
 8007088:	700b      	strb	r3, [r1, #0]
 800708a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800708c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007090:	4691      	mov	r9, r2
 8007092:	f023 0820 	bic.w	r8, r3, #32
 8007096:	bfbc      	itt	lt
 8007098:	4622      	movlt	r2, r4
 800709a:	4614      	movlt	r4, r2
 800709c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070a0:	d005      	beq.n	80070ae <__cvt+0x42>
 80070a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070a6:	d100      	bne.n	80070aa <__cvt+0x3e>
 80070a8:	3601      	adds	r6, #1
 80070aa:	2102      	movs	r1, #2
 80070ac:	e000      	b.n	80070b0 <__cvt+0x44>
 80070ae:	2103      	movs	r1, #3
 80070b0:	ab03      	add	r3, sp, #12
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	ab02      	add	r3, sp, #8
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	ec45 4b10 	vmov	d0, r4, r5
 80070bc:	4653      	mov	r3, sl
 80070be:	4632      	mov	r2, r6
 80070c0:	f000 fdee 	bl	8007ca0 <_dtoa_r>
 80070c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070c8:	4607      	mov	r7, r0
 80070ca:	d102      	bne.n	80070d2 <__cvt+0x66>
 80070cc:	f019 0f01 	tst.w	r9, #1
 80070d0:	d022      	beq.n	8007118 <__cvt+0xac>
 80070d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070d6:	eb07 0906 	add.w	r9, r7, r6
 80070da:	d110      	bne.n	80070fe <__cvt+0x92>
 80070dc:	783b      	ldrb	r3, [r7, #0]
 80070de:	2b30      	cmp	r3, #48	; 0x30
 80070e0:	d10a      	bne.n	80070f8 <__cvt+0x8c>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ee:	b918      	cbnz	r0, 80070f8 <__cvt+0x8c>
 80070f0:	f1c6 0601 	rsb	r6, r6, #1
 80070f4:	f8ca 6000 	str.w	r6, [sl]
 80070f8:	f8da 3000 	ldr.w	r3, [sl]
 80070fc:	4499      	add	r9, r3
 80070fe:	2200      	movs	r2, #0
 8007100:	2300      	movs	r3, #0
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800710a:	b108      	cbz	r0, 8007110 <__cvt+0xa4>
 800710c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007110:	2230      	movs	r2, #48	; 0x30
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	454b      	cmp	r3, r9
 8007116:	d307      	bcc.n	8007128 <__cvt+0xbc>
 8007118:	9b03      	ldr	r3, [sp, #12]
 800711a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800711c:	1bdb      	subs	r3, r3, r7
 800711e:	4638      	mov	r0, r7
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	b004      	add	sp, #16
 8007124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007128:	1c59      	adds	r1, r3, #1
 800712a:	9103      	str	r1, [sp, #12]
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	e7f0      	b.n	8007112 <__cvt+0xa6>

08007130 <__exponent>:
 8007130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007132:	4603      	mov	r3, r0
 8007134:	2900      	cmp	r1, #0
 8007136:	bfb8      	it	lt
 8007138:	4249      	neglt	r1, r1
 800713a:	f803 2b02 	strb.w	r2, [r3], #2
 800713e:	bfb4      	ite	lt
 8007140:	222d      	movlt	r2, #45	; 0x2d
 8007142:	222b      	movge	r2, #43	; 0x2b
 8007144:	2909      	cmp	r1, #9
 8007146:	7042      	strb	r2, [r0, #1]
 8007148:	dd2a      	ble.n	80071a0 <__exponent+0x70>
 800714a:	f10d 0207 	add.w	r2, sp, #7
 800714e:	4617      	mov	r7, r2
 8007150:	260a      	movs	r6, #10
 8007152:	4694      	mov	ip, r2
 8007154:	fb91 f5f6 	sdiv	r5, r1, r6
 8007158:	fb06 1415 	mls	r4, r6, r5, r1
 800715c:	3430      	adds	r4, #48	; 0x30
 800715e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007162:	460c      	mov	r4, r1
 8007164:	2c63      	cmp	r4, #99	; 0x63
 8007166:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800716a:	4629      	mov	r1, r5
 800716c:	dcf1      	bgt.n	8007152 <__exponent+0x22>
 800716e:	3130      	adds	r1, #48	; 0x30
 8007170:	f1ac 0402 	sub.w	r4, ip, #2
 8007174:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007178:	1c41      	adds	r1, r0, #1
 800717a:	4622      	mov	r2, r4
 800717c:	42ba      	cmp	r2, r7
 800717e:	d30a      	bcc.n	8007196 <__exponent+0x66>
 8007180:	f10d 0209 	add.w	r2, sp, #9
 8007184:	eba2 020c 	sub.w	r2, r2, ip
 8007188:	42bc      	cmp	r4, r7
 800718a:	bf88      	it	hi
 800718c:	2200      	movhi	r2, #0
 800718e:	4413      	add	r3, r2
 8007190:	1a18      	subs	r0, r3, r0
 8007192:	b003      	add	sp, #12
 8007194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007196:	f812 5b01 	ldrb.w	r5, [r2], #1
 800719a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800719e:	e7ed      	b.n	800717c <__exponent+0x4c>
 80071a0:	2330      	movs	r3, #48	; 0x30
 80071a2:	3130      	adds	r1, #48	; 0x30
 80071a4:	7083      	strb	r3, [r0, #2]
 80071a6:	70c1      	strb	r1, [r0, #3]
 80071a8:	1d03      	adds	r3, r0, #4
 80071aa:	e7f1      	b.n	8007190 <__exponent+0x60>

080071ac <_printf_float>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	ed2d 8b02 	vpush	{d8}
 80071b4:	b08d      	sub	sp, #52	; 0x34
 80071b6:	460c      	mov	r4, r1
 80071b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071bc:	4616      	mov	r6, r2
 80071be:	461f      	mov	r7, r3
 80071c0:	4605      	mov	r5, r0
 80071c2:	f000 fca3 	bl	8007b0c <_localeconv_r>
 80071c6:	f8d0 a000 	ldr.w	sl, [r0]
 80071ca:	4650      	mov	r0, sl
 80071cc:	f7f9 f858 	bl	8000280 <strlen>
 80071d0:	2300      	movs	r3, #0
 80071d2:	930a      	str	r3, [sp, #40]	; 0x28
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	f8d8 3000 	ldr.w	r3, [r8]
 80071dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071e0:	3307      	adds	r3, #7
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	f103 0208 	add.w	r2, r3, #8
 80071ea:	f8c8 2000 	str.w	r2, [r8]
 80071ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80071fc:	ee08 0a10 	vmov	s16, r0
 8007200:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007208:	4b9e      	ldr	r3, [pc, #632]	; (8007484 <_printf_float+0x2d8>)
 800720a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800720e:	f7f9 fc95 	bl	8000b3c <__aeabi_dcmpun>
 8007212:	bb88      	cbnz	r0, 8007278 <_printf_float+0xcc>
 8007214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007218:	4b9a      	ldr	r3, [pc, #616]	; (8007484 <_printf_float+0x2d8>)
 800721a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800721e:	f7f9 fc6f 	bl	8000b00 <__aeabi_dcmple>
 8007222:	bb48      	cbnz	r0, 8007278 <_printf_float+0xcc>
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	4640      	mov	r0, r8
 800722a:	4649      	mov	r1, r9
 800722c:	f7f9 fc5e 	bl	8000aec <__aeabi_dcmplt>
 8007230:	b110      	cbz	r0, 8007238 <_printf_float+0x8c>
 8007232:	232d      	movs	r3, #45	; 0x2d
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007238:	4a93      	ldr	r2, [pc, #588]	; (8007488 <_printf_float+0x2dc>)
 800723a:	4b94      	ldr	r3, [pc, #592]	; (800748c <_printf_float+0x2e0>)
 800723c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007240:	bf94      	ite	ls
 8007242:	4690      	movls	r8, r2
 8007244:	4698      	movhi	r8, r3
 8007246:	2303      	movs	r3, #3
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	9b05      	ldr	r3, [sp, #20]
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	f04f 0900 	mov.w	r9, #0
 8007256:	9700      	str	r7, [sp, #0]
 8007258:	4633      	mov	r3, r6
 800725a:	aa0b      	add	r2, sp, #44	; 0x2c
 800725c:	4621      	mov	r1, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 f9da 	bl	8007618 <_printf_common>
 8007264:	3001      	adds	r0, #1
 8007266:	f040 8090 	bne.w	800738a <_printf_float+0x1de>
 800726a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800726e:	b00d      	add	sp, #52	; 0x34
 8007270:	ecbd 8b02 	vpop	{d8}
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007278:	4642      	mov	r2, r8
 800727a:	464b      	mov	r3, r9
 800727c:	4640      	mov	r0, r8
 800727e:	4649      	mov	r1, r9
 8007280:	f7f9 fc5c 	bl	8000b3c <__aeabi_dcmpun>
 8007284:	b140      	cbz	r0, 8007298 <_printf_float+0xec>
 8007286:	464b      	mov	r3, r9
 8007288:	2b00      	cmp	r3, #0
 800728a:	bfbc      	itt	lt
 800728c:	232d      	movlt	r3, #45	; 0x2d
 800728e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007292:	4a7f      	ldr	r2, [pc, #508]	; (8007490 <_printf_float+0x2e4>)
 8007294:	4b7f      	ldr	r3, [pc, #508]	; (8007494 <_printf_float+0x2e8>)
 8007296:	e7d1      	b.n	800723c <_printf_float+0x90>
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800729e:	9206      	str	r2, [sp, #24]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	d13f      	bne.n	8007324 <_printf_float+0x178>
 80072a4:	2306      	movs	r3, #6
 80072a6:	6063      	str	r3, [r4, #4]
 80072a8:	9b05      	ldr	r3, [sp, #20]
 80072aa:	6861      	ldr	r1, [r4, #4]
 80072ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072b0:	2300      	movs	r3, #0
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	ab0a      	add	r3, sp, #40	; 0x28
 80072b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072ba:	ab09      	add	r3, sp, #36	; 0x24
 80072bc:	ec49 8b10 	vmov	d0, r8, r9
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	6022      	str	r2, [r4, #0]
 80072c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072c8:	4628      	mov	r0, r5
 80072ca:	f7ff fecf 	bl	800706c <__cvt>
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d2:	2b47      	cmp	r3, #71	; 0x47
 80072d4:	4680      	mov	r8, r0
 80072d6:	d108      	bne.n	80072ea <_printf_float+0x13e>
 80072d8:	1cc8      	adds	r0, r1, #3
 80072da:	db02      	blt.n	80072e2 <_printf_float+0x136>
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	4299      	cmp	r1, r3
 80072e0:	dd41      	ble.n	8007366 <_printf_float+0x1ba>
 80072e2:	f1ab 0302 	sub.w	r3, fp, #2
 80072e6:	fa5f fb83 	uxtb.w	fp, r3
 80072ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072ee:	d820      	bhi.n	8007332 <_printf_float+0x186>
 80072f0:	3901      	subs	r1, #1
 80072f2:	465a      	mov	r2, fp
 80072f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072f8:	9109      	str	r1, [sp, #36]	; 0x24
 80072fa:	f7ff ff19 	bl	8007130 <__exponent>
 80072fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007300:	1813      	adds	r3, r2, r0
 8007302:	2a01      	cmp	r2, #1
 8007304:	4681      	mov	r9, r0
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	dc02      	bgt.n	8007310 <_printf_float+0x164>
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	07d2      	lsls	r2, r2, #31
 800730e:	d501      	bpl.n	8007314 <_printf_float+0x168>
 8007310:	3301      	adds	r3, #1
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007318:	2b00      	cmp	r3, #0
 800731a:	d09c      	beq.n	8007256 <_printf_float+0xaa>
 800731c:	232d      	movs	r3, #45	; 0x2d
 800731e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007322:	e798      	b.n	8007256 <_printf_float+0xaa>
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	2a47      	cmp	r2, #71	; 0x47
 8007328:	d1be      	bne.n	80072a8 <_printf_float+0xfc>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1bc      	bne.n	80072a8 <_printf_float+0xfc>
 800732e:	2301      	movs	r3, #1
 8007330:	e7b9      	b.n	80072a6 <_printf_float+0xfa>
 8007332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007336:	d118      	bne.n	800736a <_printf_float+0x1be>
 8007338:	2900      	cmp	r1, #0
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	dd0b      	ble.n	8007356 <_printf_float+0x1aa>
 800733e:	6121      	str	r1, [r4, #16]
 8007340:	b913      	cbnz	r3, 8007348 <_printf_float+0x19c>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	07d0      	lsls	r0, r2, #31
 8007346:	d502      	bpl.n	800734e <_printf_float+0x1a2>
 8007348:	3301      	adds	r3, #1
 800734a:	440b      	add	r3, r1
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007350:	f04f 0900 	mov.w	r9, #0
 8007354:	e7de      	b.n	8007314 <_printf_float+0x168>
 8007356:	b913      	cbnz	r3, 800735e <_printf_float+0x1b2>
 8007358:	6822      	ldr	r2, [r4, #0]
 800735a:	07d2      	lsls	r2, r2, #31
 800735c:	d501      	bpl.n	8007362 <_printf_float+0x1b6>
 800735e:	3302      	adds	r3, #2
 8007360:	e7f4      	b.n	800734c <_printf_float+0x1a0>
 8007362:	2301      	movs	r3, #1
 8007364:	e7f2      	b.n	800734c <_printf_float+0x1a0>
 8007366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800736a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736c:	4299      	cmp	r1, r3
 800736e:	db05      	blt.n	800737c <_printf_float+0x1d0>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	6121      	str	r1, [r4, #16]
 8007374:	07d8      	lsls	r0, r3, #31
 8007376:	d5ea      	bpl.n	800734e <_printf_float+0x1a2>
 8007378:	1c4b      	adds	r3, r1, #1
 800737a:	e7e7      	b.n	800734c <_printf_float+0x1a0>
 800737c:	2900      	cmp	r1, #0
 800737e:	bfd4      	ite	le
 8007380:	f1c1 0202 	rsble	r2, r1, #2
 8007384:	2201      	movgt	r2, #1
 8007386:	4413      	add	r3, r2
 8007388:	e7e0      	b.n	800734c <_printf_float+0x1a0>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	055a      	lsls	r2, r3, #21
 800738e:	d407      	bmi.n	80073a0 <_printf_float+0x1f4>
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	4642      	mov	r2, r8
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	d12c      	bne.n	80073f8 <_printf_float+0x24c>
 800739e:	e764      	b.n	800726a <_printf_float+0xbe>
 80073a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073a4:	f240 80e0 	bls.w	8007568 <_printf_float+0x3bc>
 80073a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073ac:	2200      	movs	r2, #0
 80073ae:	2300      	movs	r3, #0
 80073b0:	f7f9 fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d034      	beq.n	8007422 <_printf_float+0x276>
 80073b8:	4a37      	ldr	r2, [pc, #220]	; (8007498 <_printf_float+0x2ec>)
 80073ba:	2301      	movs	r3, #1
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f af51 	beq.w	800726a <_printf_float+0xbe>
 80073c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073cc:	429a      	cmp	r2, r3
 80073ce:	db02      	blt.n	80073d6 <_printf_float+0x22a>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07d8      	lsls	r0, r3, #31
 80073d4:	d510      	bpl.n	80073f8 <_printf_float+0x24c>
 80073d6:	ee18 3a10 	vmov	r3, s16
 80073da:	4652      	mov	r2, sl
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af41 	beq.w	800726a <_printf_float+0xbe>
 80073e8:	f04f 0800 	mov.w	r8, #0
 80073ec:	f104 091a 	add.w	r9, r4, #26
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4543      	cmp	r3, r8
 80073f6:	dc09      	bgt.n	800740c <_printf_float+0x260>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	079b      	lsls	r3, r3, #30
 80073fc:	f100 8107 	bmi.w	800760e <_printf_float+0x462>
 8007400:	68e0      	ldr	r0, [r4, #12]
 8007402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007404:	4298      	cmp	r0, r3
 8007406:	bfb8      	it	lt
 8007408:	4618      	movlt	r0, r3
 800740a:	e730      	b.n	800726e <_printf_float+0xc2>
 800740c:	2301      	movs	r3, #1
 800740e:	464a      	mov	r2, r9
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f af27 	beq.w	800726a <_printf_float+0xbe>
 800741c:	f108 0801 	add.w	r8, r8, #1
 8007420:	e7e6      	b.n	80073f0 <_printf_float+0x244>
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc39      	bgt.n	800749c <_printf_float+0x2f0>
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <_printf_float+0x2ec>)
 800742a:	2301      	movs	r3, #1
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f af19 	beq.w	800726a <_printf_float+0xbe>
 8007438:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800743c:	4313      	orrs	r3, r2
 800743e:	d102      	bne.n	8007446 <_printf_float+0x29a>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	07d9      	lsls	r1, r3, #31
 8007444:	d5d8      	bpl.n	80073f8 <_printf_float+0x24c>
 8007446:	ee18 3a10 	vmov	r3, s16
 800744a:	4652      	mov	r2, sl
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f af09 	beq.w	800726a <_printf_float+0xbe>
 8007458:	f04f 0900 	mov.w	r9, #0
 800745c:	f104 0a1a 	add.w	sl, r4, #26
 8007460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007462:	425b      	negs	r3, r3
 8007464:	454b      	cmp	r3, r9
 8007466:	dc01      	bgt.n	800746c <_printf_float+0x2c0>
 8007468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746a:	e792      	b.n	8007392 <_printf_float+0x1e6>
 800746c:	2301      	movs	r3, #1
 800746e:	4652      	mov	r2, sl
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f aef7 	beq.w	800726a <_printf_float+0xbe>
 800747c:	f109 0901 	add.w	r9, r9, #1
 8007480:	e7ee      	b.n	8007460 <_printf_float+0x2b4>
 8007482:	bf00      	nop
 8007484:	7fefffff 	.word	0x7fefffff
 8007488:	0800a5c0 	.word	0x0800a5c0
 800748c:	0800a5c4 	.word	0x0800a5c4
 8007490:	0800a5c8 	.word	0x0800a5c8
 8007494:	0800a5cc 	.word	0x0800a5cc
 8007498:	0800a5d0 	.word	0x0800a5d0
 800749c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800749e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074a0:	429a      	cmp	r2, r3
 80074a2:	bfa8      	it	ge
 80074a4:	461a      	movge	r2, r3
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	4691      	mov	r9, r2
 80074aa:	dc37      	bgt.n	800751c <_printf_float+0x370>
 80074ac:	f04f 0b00 	mov.w	fp, #0
 80074b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074b4:	f104 021a 	add.w	r2, r4, #26
 80074b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	eba3 0309 	sub.w	r3, r3, r9
 80074c0:	455b      	cmp	r3, fp
 80074c2:	dc33      	bgt.n	800752c <_printf_float+0x380>
 80074c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074c8:	429a      	cmp	r2, r3
 80074ca:	db3b      	blt.n	8007544 <_printf_float+0x398>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07da      	lsls	r2, r3, #31
 80074d0:	d438      	bmi.n	8007544 <_printf_float+0x398>
 80074d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80074d6:	eba2 0903 	sub.w	r9, r2, r3
 80074da:	9b05      	ldr	r3, [sp, #20]
 80074dc:	1ad2      	subs	r2, r2, r3
 80074de:	4591      	cmp	r9, r2
 80074e0:	bfa8      	it	ge
 80074e2:	4691      	movge	r9, r2
 80074e4:	f1b9 0f00 	cmp.w	r9, #0
 80074e8:	dc35      	bgt.n	8007556 <_printf_float+0x3aa>
 80074ea:	f04f 0800 	mov.w	r8, #0
 80074ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f2:	f104 0a1a 	add.w	sl, r4, #26
 80074f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	eba3 0309 	sub.w	r3, r3, r9
 8007500:	4543      	cmp	r3, r8
 8007502:	f77f af79 	ble.w	80073f8 <_printf_float+0x24c>
 8007506:	2301      	movs	r3, #1
 8007508:	4652      	mov	r2, sl
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f aeaa 	beq.w	800726a <_printf_float+0xbe>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	e7ec      	b.n	80074f6 <_printf_float+0x34a>
 800751c:	4613      	mov	r3, r2
 800751e:	4631      	mov	r1, r6
 8007520:	4642      	mov	r2, r8
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	d1c0      	bne.n	80074ac <_printf_float+0x300>
 800752a:	e69e      	b.n	800726a <_printf_float+0xbe>
 800752c:	2301      	movs	r3, #1
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	9205      	str	r2, [sp, #20]
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f ae97 	beq.w	800726a <_printf_float+0xbe>
 800753c:	9a05      	ldr	r2, [sp, #20]
 800753e:	f10b 0b01 	add.w	fp, fp, #1
 8007542:	e7b9      	b.n	80074b8 <_printf_float+0x30c>
 8007544:	ee18 3a10 	vmov	r3, s16
 8007548:	4652      	mov	r2, sl
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	d1be      	bne.n	80074d2 <_printf_float+0x326>
 8007554:	e689      	b.n	800726a <_printf_float+0xbe>
 8007556:	9a05      	ldr	r2, [sp, #20]
 8007558:	464b      	mov	r3, r9
 800755a:	4442      	add	r2, r8
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	d1c1      	bne.n	80074ea <_printf_float+0x33e>
 8007566:	e680      	b.n	800726a <_printf_float+0xbe>
 8007568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756a:	2a01      	cmp	r2, #1
 800756c:	dc01      	bgt.n	8007572 <_printf_float+0x3c6>
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d53a      	bpl.n	80075e8 <_printf_float+0x43c>
 8007572:	2301      	movs	r3, #1
 8007574:	4642      	mov	r2, r8
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae74 	beq.w	800726a <_printf_float+0xbe>
 8007582:	ee18 3a10 	vmov	r3, s16
 8007586:	4652      	mov	r2, sl
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f ae6b 	beq.w	800726a <_printf_float+0xbe>
 8007594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007598:	2200      	movs	r2, #0
 800759a:	2300      	movs	r3, #0
 800759c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80075a0:	f7f9 fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a4:	b9d8      	cbnz	r0, 80075de <_printf_float+0x432>
 80075a6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80075aa:	f108 0201 	add.w	r2, r8, #1
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	d10e      	bne.n	80075d6 <_printf_float+0x42a>
 80075b8:	e657      	b.n	800726a <_printf_float+0xbe>
 80075ba:	2301      	movs	r3, #1
 80075bc:	4652      	mov	r2, sl
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	f43f ae50 	beq.w	800726a <_printf_float+0xbe>
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	3b01      	subs	r3, #1
 80075d2:	4543      	cmp	r3, r8
 80075d4:	dcf1      	bgt.n	80075ba <_printf_float+0x40e>
 80075d6:	464b      	mov	r3, r9
 80075d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075dc:	e6da      	b.n	8007394 <_printf_float+0x1e8>
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	f104 0a1a 	add.w	sl, r4, #26
 80075e6:	e7f2      	b.n	80075ce <_printf_float+0x422>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4642      	mov	r2, r8
 80075ec:	e7df      	b.n	80075ae <_printf_float+0x402>
 80075ee:	2301      	movs	r3, #1
 80075f0:	464a      	mov	r2, r9
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f ae36 	beq.w	800726a <_printf_float+0xbe>
 80075fe:	f108 0801 	add.w	r8, r8, #1
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007606:	1a5b      	subs	r3, r3, r1
 8007608:	4543      	cmp	r3, r8
 800760a:	dcf0      	bgt.n	80075ee <_printf_float+0x442>
 800760c:	e6f8      	b.n	8007400 <_printf_float+0x254>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	f104 0919 	add.w	r9, r4, #25
 8007616:	e7f4      	b.n	8007602 <_printf_float+0x456>

08007618 <_printf_common>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	4616      	mov	r6, r2
 800761e:	4699      	mov	r9, r3
 8007620:	688a      	ldr	r2, [r1, #8]
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007628:	4293      	cmp	r3, r2
 800762a:	bfb8      	it	lt
 800762c:	4613      	movlt	r3, r2
 800762e:	6033      	str	r3, [r6, #0]
 8007630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	b10a      	cbz	r2, 800763e <_printf_common+0x26>
 800763a:	3301      	adds	r3, #1
 800763c:	6033      	str	r3, [r6, #0]
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	0699      	lsls	r1, r3, #26
 8007642:	bf42      	ittt	mi
 8007644:	6833      	ldrmi	r3, [r6, #0]
 8007646:	3302      	addmi	r3, #2
 8007648:	6033      	strmi	r3, [r6, #0]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d106      	bne.n	8007660 <_printf_common+0x48>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ab      	cmp	r3, r5
 800765e:	dc26      	bgt.n	80076ae <_printf_common+0x96>
 8007660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007664:	1e13      	subs	r3, r2, #0
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	bf18      	it	ne
 800766a:	2301      	movne	r3, #1
 800766c:	0692      	lsls	r2, r2, #26
 800766e:	d42b      	bmi.n	80076c8 <_printf_common+0xb0>
 8007670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007674:	4649      	mov	r1, r9
 8007676:	4638      	mov	r0, r7
 8007678:	47c0      	blx	r8
 800767a:	3001      	adds	r0, #1
 800767c:	d01e      	beq.n	80076bc <_printf_common+0xa4>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	f003 0306 	and.w	r3, r3, #6
 8007686:	2b04      	cmp	r3, #4
 8007688:	bf02      	ittt	eq
 800768a:	68e5      	ldreq	r5, [r4, #12]
 800768c:	6833      	ldreq	r3, [r6, #0]
 800768e:	1aed      	subeq	r5, r5, r3
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	bf0c      	ite	eq
 8007694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007698:	2500      	movne	r5, #0
 800769a:	4293      	cmp	r3, r2
 800769c:	bfc4      	itt	gt
 800769e:	1a9b      	subgt	r3, r3, r2
 80076a0:	18ed      	addgt	r5, r5, r3
 80076a2:	2600      	movs	r6, #0
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xc8>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xa8>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4649      	mov	r1, r9
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c0      	blx	r8
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xac>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c6      	b.n	8007656 <_printf_common+0x3e>
 80076c8:	18e1      	adds	r1, r4, r3
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	2030      	movs	r0, #48	; 0x30
 80076ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076d2:	4422      	add	r2, r4
 80076d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076dc:	3302      	adds	r3, #2
 80076de:	e7c7      	b.n	8007670 <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4649      	mov	r1, r9
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c0      	blx	r8
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa4>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x8e>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	7e0f      	ldrb	r7, [r1, #24]
 80076fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076fc:	2f78      	cmp	r7, #120	; 0x78
 80076fe:	4691      	mov	r9, r2
 8007700:	4680      	mov	r8, r0
 8007702:	460c      	mov	r4, r1
 8007704:	469a      	mov	sl, r3
 8007706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	; 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d4 	beq.w	80078be <_printf_i+0x1ca>
 8007716:	2f58      	cmp	r7, #88	; 0x58
 8007718:	f000 80c0 	beq.w	800789c <_printf_i+0x1a8>
 800771c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a101      	add	r1, pc, #4	; (adr r1, 8007734 <_printf_i+0x40>)
 8007730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078a5 	.word	0x080078a5
 8007764:	080077cd 	.word	0x080077cd
 8007768:	0800785f 	.word	0x0800785f
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078c7 	.word	0x080078c7
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077cd 	.word	0x080077cd
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007867 	.word	0x08007867
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	602a      	str	r2, [r5, #0]
 8007794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e09f      	b.n	80078e0 <_printf_i+0x1ec>
 80077a0:	6820      	ldr	r0, [r4, #0]
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	0607      	lsls	r7, r0, #24
 80077a6:	f103 0104 	add.w	r1, r3, #4
 80077aa:	6029      	str	r1, [r5, #0]
 80077ac:	d501      	bpl.n	80077b2 <_printf_i+0xbe>
 80077ae:	681e      	ldr	r6, [r3, #0]
 80077b0:	e003      	b.n	80077ba <_printf_i+0xc6>
 80077b2:	0646      	lsls	r6, r0, #25
 80077b4:	d5fb      	bpl.n	80077ae <_printf_i+0xba>
 80077b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	da03      	bge.n	80077c6 <_printf_i+0xd2>
 80077be:	232d      	movs	r3, #45	; 0x2d
 80077c0:	4276      	negs	r6, r6
 80077c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c6:	485a      	ldr	r0, [pc, #360]	; (8007930 <_printf_i+0x23c>)
 80077c8:	230a      	movs	r3, #10
 80077ca:	e012      	b.n	80077f2 <_printf_i+0xfe>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	1d19      	adds	r1, r3, #4
 80077d2:	6029      	str	r1, [r5, #0]
 80077d4:	0605      	lsls	r5, r0, #24
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0xe8>
 80077d8:	681e      	ldr	r6, [r3, #0]
 80077da:	e002      	b.n	80077e2 <_printf_i+0xee>
 80077dc:	0641      	lsls	r1, r0, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0xe4>
 80077e0:	881e      	ldrh	r6, [r3, #0]
 80077e2:	4853      	ldr	r0, [pc, #332]	; (8007930 <_printf_i+0x23c>)
 80077e4:	2f6f      	cmp	r7, #111	; 0x6f
 80077e6:	bf0c      	ite	eq
 80077e8:	2308      	moveq	r3, #8
 80077ea:	230a      	movne	r3, #10
 80077ec:	2100      	movs	r1, #0
 80077ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077f2:	6865      	ldr	r5, [r4, #4]
 80077f4:	60a5      	str	r5, [r4, #8]
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	bfa2      	ittt	ge
 80077fa:	6821      	ldrge	r1, [r4, #0]
 80077fc:	f021 0104 	bicge.w	r1, r1, #4
 8007800:	6021      	strge	r1, [r4, #0]
 8007802:	b90e      	cbnz	r6, 8007808 <_printf_i+0x114>
 8007804:	2d00      	cmp	r5, #0
 8007806:	d04b      	beq.n	80078a0 <_printf_i+0x1ac>
 8007808:	4615      	mov	r5, r2
 800780a:	fbb6 f1f3 	udiv	r1, r6, r3
 800780e:	fb03 6711 	mls	r7, r3, r1, r6
 8007812:	5dc7      	ldrb	r7, [r0, r7]
 8007814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007818:	4637      	mov	r7, r6
 800781a:	42bb      	cmp	r3, r7
 800781c:	460e      	mov	r6, r1
 800781e:	d9f4      	bls.n	800780a <_printf_i+0x116>
 8007820:	2b08      	cmp	r3, #8
 8007822:	d10b      	bne.n	800783c <_printf_i+0x148>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	07de      	lsls	r6, r3, #31
 8007828:	d508      	bpl.n	800783c <_printf_i+0x148>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	6861      	ldr	r1, [r4, #4]
 800782e:	4299      	cmp	r1, r3
 8007830:	bfde      	ittt	le
 8007832:	2330      	movle	r3, #48	; 0x30
 8007834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007838:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800783c:	1b52      	subs	r2, r2, r5
 800783e:	6122      	str	r2, [r4, #16]
 8007840:	f8cd a000 	str.w	sl, [sp]
 8007844:	464b      	mov	r3, r9
 8007846:	aa03      	add	r2, sp, #12
 8007848:	4621      	mov	r1, r4
 800784a:	4640      	mov	r0, r8
 800784c:	f7ff fee4 	bl	8007618 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	d14a      	bne.n	80078ea <_printf_i+0x1f6>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007858:	b004      	add	sp, #16
 800785a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f043 0320 	orr.w	r3, r3, #32
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	4833      	ldr	r0, [pc, #204]	; (8007934 <_printf_i+0x240>)
 8007868:	2778      	movs	r7, #120	; 0x78
 800786a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	6829      	ldr	r1, [r5, #0]
 8007872:	061f      	lsls	r7, r3, #24
 8007874:	f851 6b04 	ldr.w	r6, [r1], #4
 8007878:	d402      	bmi.n	8007880 <_printf_i+0x18c>
 800787a:	065f      	lsls	r7, r3, #25
 800787c:	bf48      	it	mi
 800787e:	b2b6      	uxthmi	r6, r6
 8007880:	07df      	lsls	r7, r3, #31
 8007882:	bf48      	it	mi
 8007884:	f043 0320 	orrmi.w	r3, r3, #32
 8007888:	6029      	str	r1, [r5, #0]
 800788a:	bf48      	it	mi
 800788c:	6023      	strmi	r3, [r4, #0]
 800788e:	b91e      	cbnz	r6, 8007898 <_printf_i+0x1a4>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	f023 0320 	bic.w	r3, r3, #32
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	2310      	movs	r3, #16
 800789a:	e7a7      	b.n	80077ec <_printf_i+0xf8>
 800789c:	4824      	ldr	r0, [pc, #144]	; (8007930 <_printf_i+0x23c>)
 800789e:	e7e4      	b.n	800786a <_printf_i+0x176>
 80078a0:	4615      	mov	r5, r2
 80078a2:	e7bd      	b.n	8007820 <_printf_i+0x12c>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	6826      	ldr	r6, [r4, #0]
 80078a8:	6961      	ldr	r1, [r4, #20]
 80078aa:	1d18      	adds	r0, r3, #4
 80078ac:	6028      	str	r0, [r5, #0]
 80078ae:	0635      	lsls	r5, r6, #24
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	d501      	bpl.n	80078b8 <_printf_i+0x1c4>
 80078b4:	6019      	str	r1, [r3, #0]
 80078b6:	e002      	b.n	80078be <_printf_i+0x1ca>
 80078b8:	0670      	lsls	r0, r6, #25
 80078ba:	d5fb      	bpl.n	80078b4 <_printf_i+0x1c0>
 80078bc:	8019      	strh	r1, [r3, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	6123      	str	r3, [r4, #16]
 80078c2:	4615      	mov	r5, r2
 80078c4:	e7bc      	b.n	8007840 <_printf_i+0x14c>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	2100      	movs	r1, #0
 80078d2:	4628      	mov	r0, r5
 80078d4:	f7f8 fc84 	bl	80001e0 <memchr>
 80078d8:	b108      	cbz	r0, 80078de <_printf_i+0x1ea>
 80078da:	1b40      	subs	r0, r0, r5
 80078dc:	6060      	str	r0, [r4, #4]
 80078de:	6863      	ldr	r3, [r4, #4]
 80078e0:	6123      	str	r3, [r4, #16]
 80078e2:	2300      	movs	r3, #0
 80078e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e8:	e7aa      	b.n	8007840 <_printf_i+0x14c>
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	462a      	mov	r2, r5
 80078ee:	4649      	mov	r1, r9
 80078f0:	4640      	mov	r0, r8
 80078f2:	47d0      	blx	sl
 80078f4:	3001      	adds	r0, #1
 80078f6:	d0ad      	beq.n	8007854 <_printf_i+0x160>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	079b      	lsls	r3, r3, #30
 80078fc:	d413      	bmi.n	8007926 <_printf_i+0x232>
 80078fe:	68e0      	ldr	r0, [r4, #12]
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	4298      	cmp	r0, r3
 8007904:	bfb8      	it	lt
 8007906:	4618      	movlt	r0, r3
 8007908:	e7a6      	b.n	8007858 <_printf_i+0x164>
 800790a:	2301      	movs	r3, #1
 800790c:	4632      	mov	r2, r6
 800790e:	4649      	mov	r1, r9
 8007910:	4640      	mov	r0, r8
 8007912:	47d0      	blx	sl
 8007914:	3001      	adds	r0, #1
 8007916:	d09d      	beq.n	8007854 <_printf_i+0x160>
 8007918:	3501      	adds	r5, #1
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	9903      	ldr	r1, [sp, #12]
 800791e:	1a5b      	subs	r3, r3, r1
 8007920:	42ab      	cmp	r3, r5
 8007922:	dcf2      	bgt.n	800790a <_printf_i+0x216>
 8007924:	e7eb      	b.n	80078fe <_printf_i+0x20a>
 8007926:	2500      	movs	r5, #0
 8007928:	f104 0619 	add.w	r6, r4, #25
 800792c:	e7f5      	b.n	800791a <_printf_i+0x226>
 800792e:	bf00      	nop
 8007930:	0800a5d2 	.word	0x0800a5d2
 8007934:	0800a5e3 	.word	0x0800a5e3

08007938 <std>:
 8007938:	2300      	movs	r3, #0
 800793a:	b510      	push	{r4, lr}
 800793c:	4604      	mov	r4, r0
 800793e:	e9c0 3300 	strd	r3, r3, [r0]
 8007942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007946:	6083      	str	r3, [r0, #8]
 8007948:	8181      	strh	r1, [r0, #12]
 800794a:	6643      	str	r3, [r0, #100]	; 0x64
 800794c:	81c2      	strh	r2, [r0, #14]
 800794e:	6183      	str	r3, [r0, #24]
 8007950:	4619      	mov	r1, r3
 8007952:	2208      	movs	r2, #8
 8007954:	305c      	adds	r0, #92	; 0x5c
 8007956:	f000 f8d1 	bl	8007afc <memset>
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <std+0x58>)
 800795c:	6263      	str	r3, [r4, #36]	; 0x24
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <std+0x5c>)
 8007960:	62a3      	str	r3, [r4, #40]	; 0x28
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <std+0x60>)
 8007964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007966:	4b0d      	ldr	r3, [pc, #52]	; (800799c <std+0x64>)
 8007968:	6323      	str	r3, [r4, #48]	; 0x30
 800796a:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <std+0x68>)
 800796c:	6224      	str	r4, [r4, #32]
 800796e:	429c      	cmp	r4, r3
 8007970:	d006      	beq.n	8007980 <std+0x48>
 8007972:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007976:	4294      	cmp	r4, r2
 8007978:	d002      	beq.n	8007980 <std+0x48>
 800797a:	33d0      	adds	r3, #208	; 0xd0
 800797c:	429c      	cmp	r4, r3
 800797e:	d105      	bne.n	800798c <std+0x54>
 8007980:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	f000 b8ee 	b.w	8007b68 <__retarget_lock_init_recursive>
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	080094f1 	.word	0x080094f1
 8007994:	08009513 	.word	0x08009513
 8007998:	0800954b 	.word	0x0800954b
 800799c:	0800956f 	.word	0x0800956f
 80079a0:	2000147c 	.word	0x2000147c

080079a4 <stdio_exit_handler>:
 80079a4:	4a02      	ldr	r2, [pc, #8]	; (80079b0 <stdio_exit_handler+0xc>)
 80079a6:	4903      	ldr	r1, [pc, #12]	; (80079b4 <stdio_exit_handler+0x10>)
 80079a8:	4803      	ldr	r0, [pc, #12]	; (80079b8 <stdio_exit_handler+0x14>)
 80079aa:	f000 b869 	b.w	8007a80 <_fwalk_sglue>
 80079ae:	bf00      	nop
 80079b0:	20000070 	.word	0x20000070
 80079b4:	08008d91 	.word	0x08008d91
 80079b8:	2000007c 	.word	0x2000007c

080079bc <cleanup_stdio>:
 80079bc:	6841      	ldr	r1, [r0, #4]
 80079be:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <cleanup_stdio+0x34>)
 80079c0:	4299      	cmp	r1, r3
 80079c2:	b510      	push	{r4, lr}
 80079c4:	4604      	mov	r4, r0
 80079c6:	d001      	beq.n	80079cc <cleanup_stdio+0x10>
 80079c8:	f001 f9e2 	bl	8008d90 <_fflush_r>
 80079cc:	68a1      	ldr	r1, [r4, #8]
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <cleanup_stdio+0x38>)
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <cleanup_stdio+0x1e>
 80079d4:	4620      	mov	r0, r4
 80079d6:	f001 f9db 	bl	8008d90 <_fflush_r>
 80079da:	68e1      	ldr	r1, [r4, #12]
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <cleanup_stdio+0x3c>)
 80079de:	4299      	cmp	r1, r3
 80079e0:	d004      	beq.n	80079ec <cleanup_stdio+0x30>
 80079e2:	4620      	mov	r0, r4
 80079e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e8:	f001 b9d2 	b.w	8008d90 <_fflush_r>
 80079ec:	bd10      	pop	{r4, pc}
 80079ee:	bf00      	nop
 80079f0:	2000147c 	.word	0x2000147c
 80079f4:	200014e4 	.word	0x200014e4
 80079f8:	2000154c 	.word	0x2000154c

080079fc <global_stdio_init.part.0>:
 80079fc:	b510      	push	{r4, lr}
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <global_stdio_init.part.0+0x30>)
 8007a00:	4c0b      	ldr	r4, [pc, #44]	; (8007a30 <global_stdio_init.part.0+0x34>)
 8007a02:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <global_stdio_init.part.0+0x38>)
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	4620      	mov	r0, r4
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2104      	movs	r1, #4
 8007a0c:	f7ff ff94 	bl	8007938 <std>
 8007a10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a14:	2201      	movs	r2, #1
 8007a16:	2109      	movs	r1, #9
 8007a18:	f7ff ff8e 	bl	8007938 <std>
 8007a1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a20:	2202      	movs	r2, #2
 8007a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a26:	2112      	movs	r1, #18
 8007a28:	f7ff bf86 	b.w	8007938 <std>
 8007a2c:	200015b4 	.word	0x200015b4
 8007a30:	2000147c 	.word	0x2000147c
 8007a34:	080079a5 	.word	0x080079a5

08007a38 <__sfp_lock_acquire>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__sfp_lock_acquire+0x8>)
 8007a3a:	f000 b896 	b.w	8007b6a <__retarget_lock_acquire_recursive>
 8007a3e:	bf00      	nop
 8007a40:	200015b9 	.word	0x200015b9

08007a44 <__sfp_lock_release>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__sfp_lock_release+0x8>)
 8007a46:	f000 b891 	b.w	8007b6c <__retarget_lock_release_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	200015b9 	.word	0x200015b9

08007a50 <__sinit>:
 8007a50:	b510      	push	{r4, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	f7ff fff0 	bl	8007a38 <__sfp_lock_acquire>
 8007a58:	6a23      	ldr	r3, [r4, #32]
 8007a5a:	b11b      	cbz	r3, 8007a64 <__sinit+0x14>
 8007a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a60:	f7ff bff0 	b.w	8007a44 <__sfp_lock_release>
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <__sinit+0x28>)
 8007a66:	6223      	str	r3, [r4, #32]
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <__sinit+0x2c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f5      	bne.n	8007a5c <__sinit+0xc>
 8007a70:	f7ff ffc4 	bl	80079fc <global_stdio_init.part.0>
 8007a74:	e7f2      	b.n	8007a5c <__sinit+0xc>
 8007a76:	bf00      	nop
 8007a78:	080079bd 	.word	0x080079bd
 8007a7c:	200015b4 	.word	0x200015b4

08007a80 <_fwalk_sglue>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	4607      	mov	r7, r0
 8007a86:	4688      	mov	r8, r1
 8007a88:	4614      	mov	r4, r2
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a90:	f1b9 0901 	subs.w	r9, r9, #1
 8007a94:	d505      	bpl.n	8007aa2 <_fwalk_sglue+0x22>
 8007a96:	6824      	ldr	r4, [r4, #0]
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	d1f7      	bne.n	8007a8c <_fwalk_sglue+0xc>
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d907      	bls.n	8007ab8 <_fwalk_sglue+0x38>
 8007aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aac:	3301      	adds	r3, #1
 8007aae:	d003      	beq.n	8007ab8 <_fwalk_sglue+0x38>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c0      	blx	r8
 8007ab6:	4306      	orrs	r6, r0
 8007ab8:	3568      	adds	r5, #104	; 0x68
 8007aba:	e7e9      	b.n	8007a90 <_fwalk_sglue+0x10>

08007abc <_vsiprintf_r>:
 8007abc:	b500      	push	{lr}
 8007abe:	b09b      	sub	sp, #108	; 0x6c
 8007ac0:	9100      	str	r1, [sp, #0]
 8007ac2:	9104      	str	r1, [sp, #16]
 8007ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	9102      	str	r1, [sp, #8]
 8007acc:	4905      	ldr	r1, [pc, #20]	; (8007ae4 <_vsiprintf_r+0x28>)
 8007ace:	9103      	str	r1, [sp, #12]
 8007ad0:	4669      	mov	r1, sp
 8007ad2:	f000 ff31 	bl	8008938 <_svfiprintf_r>
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	b01b      	add	sp, #108	; 0x6c
 8007ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ae2:	bf00      	nop
 8007ae4:	ffff0208 	.word	0xffff0208

08007ae8 <vsiprintf>:
 8007ae8:	4613      	mov	r3, r2
 8007aea:	460a      	mov	r2, r1
 8007aec:	4601      	mov	r1, r0
 8007aee:	4802      	ldr	r0, [pc, #8]	; (8007af8 <vsiprintf+0x10>)
 8007af0:	6800      	ldr	r0, [r0, #0]
 8007af2:	f7ff bfe3 	b.w	8007abc <_vsiprintf_r>
 8007af6:	bf00      	nop
 8007af8:	200000c8 	.word	0x200000c8

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>

08007b0c <_localeconv_r>:
 8007b0c:	4800      	ldr	r0, [pc, #0]	; (8007b10 <_localeconv_r+0x4>)
 8007b0e:	4770      	bx	lr
 8007b10:	200001bc 	.word	0x200001bc

08007b14 <__errno>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	; (8007b1c <__errno+0x8>)
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	200000c8 	.word	0x200000c8

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4d0d      	ldr	r5, [pc, #52]	; (8007b58 <__libc_init_array+0x38>)
 8007b24:	4c0d      	ldr	r4, [pc, #52]	; (8007b5c <__libc_init_array+0x3c>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	4d0b      	ldr	r5, [pc, #44]	; (8007b60 <__libc_init_array+0x40>)
 8007b32:	4c0c      	ldr	r4, [pc, #48]	; (8007b64 <__libc_init_array+0x44>)
 8007b34:	f002 f920 	bl	8009d78 <_init>
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	0800a93c 	.word	0x0800a93c
 8007b5c:	0800a93c 	.word	0x0800a93c
 8007b60:	0800a93c 	.word	0x0800a93c
 8007b64:	0800a940 	.word	0x0800a940

08007b68 <__retarget_lock_init_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <__retarget_lock_acquire_recursive>:
 8007b6a:	4770      	bx	lr

08007b6c <__retarget_lock_release_recursive>:
 8007b6c:	4770      	bx	lr

08007b6e <memcpy>:
 8007b6e:	440a      	add	r2, r1
 8007b70:	4291      	cmp	r1, r2
 8007b72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b76:	d100      	bne.n	8007b7a <memcpy+0xc>
 8007b78:	4770      	bx	lr
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b84:	4291      	cmp	r1, r2
 8007b86:	d1f9      	bne.n	8007b7c <memcpy+0xe>
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <quorem>:
 8007b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8e:	6903      	ldr	r3, [r0, #16]
 8007b90:	690c      	ldr	r4, [r1, #16]
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	4607      	mov	r7, r0
 8007b96:	db7e      	blt.n	8007c96 <quorem+0x10c>
 8007b98:	3c01      	subs	r4, #1
 8007b9a:	f101 0814 	add.w	r8, r1, #20
 8007b9e:	f100 0514 	add.w	r5, r0, #20
 8007ba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bc0:	d331      	bcc.n	8007c26 <quorem+0x9c>
 8007bc2:	f04f 0e00 	mov.w	lr, #0
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	46ac      	mov	ip, r5
 8007bca:	46f2      	mov	sl, lr
 8007bcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bd0:	b293      	uxth	r3, r2
 8007bd2:	fb06 e303 	mla	r3, r6, r3, lr
 8007bd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bda:	0c1a      	lsrs	r2, r3, #16
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ebaa 0303 	sub.w	r3, sl, r3
 8007be2:	f8dc a000 	ldr.w	sl, [ip]
 8007be6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bea:	fb06 220e 	mla	r2, r6, lr, r2
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	9b00      	ldr	r3, [sp, #0]
 8007bf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c00:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c04:	4581      	cmp	r9, r0
 8007c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c0a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c12:	d2db      	bcs.n	8007bcc <quorem+0x42>
 8007c14:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c18:	b92b      	cbnz	r3, 8007c26 <quorem+0x9c>
 8007c1a:	9b01      	ldr	r3, [sp, #4]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	d32c      	bcc.n	8007c7e <quorem+0xf4>
 8007c24:	613c      	str	r4, [r7, #16]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f001 fb62 	bl	80092f0 <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	db22      	blt.n	8007c76 <quorem+0xec>
 8007c30:	3601      	adds	r6, #1
 8007c32:	4629      	mov	r1, r5
 8007c34:	2000      	movs	r0, #0
 8007c36:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c3a:	f8d1 c000 	ldr.w	ip, [r1]
 8007c3e:	b293      	uxth	r3, r2
 8007c40:	1ac3      	subs	r3, r0, r3
 8007c42:	0c12      	lsrs	r2, r2, #16
 8007c44:	fa13 f38c 	uxtah	r3, r3, ip
 8007c48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c56:	45c1      	cmp	r9, r8
 8007c58:	f841 3b04 	str.w	r3, [r1], #4
 8007c5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c60:	d2e9      	bcs.n	8007c36 <quorem+0xac>
 8007c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c6a:	b922      	cbnz	r2, 8007c76 <quorem+0xec>
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	d30a      	bcc.n	8007c8a <quorem+0x100>
 8007c74:	613c      	str	r4, [r7, #16]
 8007c76:	4630      	mov	r0, r6
 8007c78:	b003      	add	sp, #12
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	3b04      	subs	r3, #4
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d1ce      	bne.n	8007c24 <quorem+0x9a>
 8007c86:	3c01      	subs	r4, #1
 8007c88:	e7c9      	b.n	8007c1e <quorem+0x94>
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	3b04      	subs	r3, #4
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d1f0      	bne.n	8007c74 <quorem+0xea>
 8007c92:	3c01      	subs	r4, #1
 8007c94:	e7eb      	b.n	8007c6e <quorem+0xe4>
 8007c96:	2000      	movs	r0, #0
 8007c98:	e7ee      	b.n	8007c78 <quorem+0xee>
 8007c9a:	0000      	movs	r0, r0
 8007c9c:	0000      	movs	r0, r0
	...

08007ca0 <_dtoa_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	ed2d 8b04 	vpush	{d8-d9}
 8007ca8:	69c5      	ldr	r5, [r0, #28]
 8007caa:	b093      	sub	sp, #76	; 0x4c
 8007cac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cb0:	ec57 6b10 	vmov	r6, r7, d0
 8007cb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb8:	9107      	str	r1, [sp, #28]
 8007cba:	4604      	mov	r4, r0
 8007cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8007cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc0:	b975      	cbnz	r5, 8007ce0 <_dtoa_r+0x40>
 8007cc2:	2010      	movs	r0, #16
 8007cc4:	f000 ff36 	bl	8008b34 <malloc>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	61e0      	str	r0, [r4, #28]
 8007ccc:	b920      	cbnz	r0, 8007cd8 <_dtoa_r+0x38>
 8007cce:	4bae      	ldr	r3, [pc, #696]	; (8007f88 <_dtoa_r+0x2e8>)
 8007cd0:	21ef      	movs	r1, #239	; 0xef
 8007cd2:	48ae      	ldr	r0, [pc, #696]	; (8007f8c <_dtoa_r+0x2ec>)
 8007cd4:	f001 fcee 	bl	80096b4 <__assert_func>
 8007cd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cdc:	6005      	str	r5, [r0, #0]
 8007cde:	60c5      	str	r5, [r0, #12]
 8007ce0:	69e3      	ldr	r3, [r4, #28]
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	b151      	cbz	r1, 8007cfc <_dtoa_r+0x5c>
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	604a      	str	r2, [r1, #4]
 8007cea:	2301      	movs	r3, #1
 8007cec:	4093      	lsls	r3, r2
 8007cee:	608b      	str	r3, [r1, #8]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f001 f8c1 	bl	8008e78 <_Bfree>
 8007cf6:	69e3      	ldr	r3, [r4, #28]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	1e3b      	subs	r3, r7, #0
 8007cfe:	bfbb      	ittet	lt
 8007d00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d04:	9303      	strlt	r3, [sp, #12]
 8007d06:	2300      	movge	r3, #0
 8007d08:	2201      	movlt	r2, #1
 8007d0a:	bfac      	ite	ge
 8007d0c:	f8c8 3000 	strge.w	r3, [r8]
 8007d10:	f8c8 2000 	strlt.w	r2, [r8]
 8007d14:	4b9e      	ldr	r3, [pc, #632]	; (8007f90 <_dtoa_r+0x2f0>)
 8007d16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d1a:	ea33 0308 	bics.w	r3, r3, r8
 8007d1e:	d11b      	bne.n	8007d58 <_dtoa_r+0xb8>
 8007d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d22:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d2c:	4333      	orrs	r3, r6
 8007d2e:	f000 8593 	beq.w	8008858 <_dtoa_r+0xbb8>
 8007d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d34:	b963      	cbnz	r3, 8007d50 <_dtoa_r+0xb0>
 8007d36:	4b97      	ldr	r3, [pc, #604]	; (8007f94 <_dtoa_r+0x2f4>)
 8007d38:	e027      	b.n	8007d8a <_dtoa_r+0xea>
 8007d3a:	4b97      	ldr	r3, [pc, #604]	; (8007f98 <_dtoa_r+0x2f8>)
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	9800      	ldr	r0, [sp, #0]
 8007d46:	b013      	add	sp, #76	; 0x4c
 8007d48:	ecbd 8b04 	vpop	{d8-d9}
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	4b90      	ldr	r3, [pc, #576]	; (8007f94 <_dtoa_r+0x2f4>)
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	3303      	adds	r3, #3
 8007d56:	e7f3      	b.n	8007d40 <_dtoa_r+0xa0>
 8007d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	ec51 0b17 	vmov	r0, r1, d7
 8007d62:	eeb0 8a47 	vmov.f32	s16, s14
 8007d66:	eef0 8a67 	vmov.f32	s17, s15
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f7f8 feb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d70:	4681      	mov	r9, r0
 8007d72:	b160      	cbz	r0, 8007d8e <_dtoa_r+0xee>
 8007d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d76:	2301      	movs	r3, #1
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8568 	beq.w	8008852 <_dtoa_r+0xbb2>
 8007d82:	4b86      	ldr	r3, [pc, #536]	; (8007f9c <_dtoa_r+0x2fc>)
 8007d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	e7da      	b.n	8007d44 <_dtoa_r+0xa4>
 8007d8e:	aa10      	add	r2, sp, #64	; 0x40
 8007d90:	a911      	add	r1, sp, #68	; 0x44
 8007d92:	4620      	mov	r0, r4
 8007d94:	eeb0 0a48 	vmov.f32	s0, s16
 8007d98:	eef0 0a68 	vmov.f32	s1, s17
 8007d9c:	f001 fb4e 	bl	800943c <__d2b>
 8007da0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007da4:	4682      	mov	sl, r0
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	d07f      	beq.n	8007eaa <_dtoa_r+0x20a>
 8007daa:	ee18 3a90 	vmov	r3, s17
 8007dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007db6:	ec51 0b18 	vmov	r0, r1, d8
 8007dba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b75      	ldr	r3, [pc, #468]	; (8007fa0 <_dtoa_r+0x300>)
 8007dcc:	f7f8 fa64 	bl	8000298 <__aeabi_dsub>
 8007dd0:	a367      	add	r3, pc, #412	; (adr r3, 8007f70 <_dtoa_r+0x2d0>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc17 	bl	8000608 <__aeabi_dmul>
 8007dda:	a367      	add	r3, pc, #412	; (adr r3, 8007f78 <_dtoa_r+0x2d8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fa5c 	bl	800029c <__adddf3>
 8007de4:	4606      	mov	r6, r0
 8007de6:	4628      	mov	r0, r5
 8007de8:	460f      	mov	r7, r1
 8007dea:	f7f8 fba3 	bl	8000534 <__aeabi_i2d>
 8007dee:	a364      	add	r3, pc, #400	; (adr r3, 8007f80 <_dtoa_r+0x2e0>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc08 	bl	8000608 <__aeabi_dmul>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f7f8 fa4c 	bl	800029c <__adddf3>
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	f7f8 feae 	bl	8000b68 <__aeabi_d2iz>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4683      	mov	fp, r0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 fe69 	bl	8000aec <__aeabi_dcmplt>
 8007e1a:	b148      	cbz	r0, 8007e30 <_dtoa_r+0x190>
 8007e1c:	4658      	mov	r0, fp
 8007e1e:	f7f8 fb89 	bl	8000534 <__aeabi_i2d>
 8007e22:	4632      	mov	r2, r6
 8007e24:	463b      	mov	r3, r7
 8007e26:	f7f8 fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e2a:	b908      	cbnz	r0, 8007e30 <_dtoa_r+0x190>
 8007e2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e30:	f1bb 0f16 	cmp.w	fp, #22
 8007e34:	d857      	bhi.n	8007ee6 <_dtoa_r+0x246>
 8007e36:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <_dtoa_r+0x304>)
 8007e38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	ec51 0b18 	vmov	r0, r1, d8
 8007e44:	f7f8 fe52 	bl	8000aec <__aeabi_dcmplt>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d04e      	beq.n	8007eea <_dtoa_r+0x24a>
 8007e4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e50:	2300      	movs	r3, #0
 8007e52:	930c      	str	r3, [sp, #48]	; 0x30
 8007e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e56:	1b5b      	subs	r3, r3, r5
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	bf45      	ittet	mi
 8007e5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e60:	9305      	strmi	r3, [sp, #20]
 8007e62:	2300      	movpl	r3, #0
 8007e64:	2300      	movmi	r3, #0
 8007e66:	9206      	str	r2, [sp, #24]
 8007e68:	bf54      	ite	pl
 8007e6a:	9305      	strpl	r3, [sp, #20]
 8007e6c:	9306      	strmi	r3, [sp, #24]
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	db3c      	blt.n	8007eee <_dtoa_r+0x24e>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e7a:	445b      	add	r3, fp
 8007e7c:	9306      	str	r3, [sp, #24]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9308      	str	r3, [sp, #32]
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d868      	bhi.n	8007f5a <_dtoa_r+0x2ba>
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	bfc4      	itt	gt
 8007e8c:	3b04      	subgt	r3, #4
 8007e8e:	9307      	strgt	r3, [sp, #28]
 8007e90:	9b07      	ldr	r3, [sp, #28]
 8007e92:	f1a3 0302 	sub.w	r3, r3, #2
 8007e96:	bfcc      	ite	gt
 8007e98:	2500      	movgt	r5, #0
 8007e9a:	2501      	movle	r5, #1
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	f200 8085 	bhi.w	8007fac <_dtoa_r+0x30c>
 8007ea2:	e8df f003 	tbb	[pc, r3]
 8007ea6:	3b2e      	.short	0x3b2e
 8007ea8:	5839      	.short	0x5839
 8007eaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eae:	441d      	add	r5, r3
 8007eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	bfc1      	itttt	gt
 8007eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ebc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ec8:	bfd6      	itet	le
 8007eca:	f1c3 0320 	rsble	r3, r3, #32
 8007ece:	ea48 0003 	orrgt.w	r0, r8, r3
 8007ed2:	fa06 f003 	lslle.w	r0, r6, r3
 8007ed6:	f7f8 fb1d 	bl	8000514 <__aeabi_ui2d>
 8007eda:	2201      	movs	r2, #1
 8007edc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ee0:	3d01      	subs	r5, #1
 8007ee2:	920e      	str	r2, [sp, #56]	; 0x38
 8007ee4:	e76f      	b.n	8007dc6 <_dtoa_r+0x126>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7b3      	b.n	8007e52 <_dtoa_r+0x1b2>
 8007eea:	900c      	str	r0, [sp, #48]	; 0x30
 8007eec:	e7b2      	b.n	8007e54 <_dtoa_r+0x1b4>
 8007eee:	9b05      	ldr	r3, [sp, #20]
 8007ef0:	eba3 030b 	sub.w	r3, r3, fp
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	f1cb 0300 	rsb	r3, fp, #0
 8007efa:	9308      	str	r3, [sp, #32]
 8007efc:	2300      	movs	r3, #0
 8007efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f00:	e7bf      	b.n	8007e82 <_dtoa_r+0x1e2>
 8007f02:	2300      	movs	r3, #0
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc52      	bgt.n	8007fb2 <_dtoa_r+0x312>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	9304      	str	r3, [sp, #16]
 8007f12:	461a      	mov	r2, r3
 8007f14:	920a      	str	r2, [sp, #40]	; 0x28
 8007f16:	e00b      	b.n	8007f30 <_dtoa_r+0x290>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e7f3      	b.n	8007f04 <_dtoa_r+0x264>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	445b      	add	r3, fp
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	3301      	adds	r3, #1
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	bfb8      	it	lt
 8007f2e:	2301      	movlt	r3, #1
 8007f30:	69e0      	ldr	r0, [r4, #28]
 8007f32:	2100      	movs	r1, #0
 8007f34:	2204      	movs	r2, #4
 8007f36:	f102 0614 	add.w	r6, r2, #20
 8007f3a:	429e      	cmp	r6, r3
 8007f3c:	d93d      	bls.n	8007fba <_dtoa_r+0x31a>
 8007f3e:	6041      	str	r1, [r0, #4]
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 ff59 	bl	8008df8 <_Balloc>
 8007f46:	9000      	str	r0, [sp, #0]
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d139      	bne.n	8007fc0 <_dtoa_r+0x320>
 8007f4c:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <_dtoa_r+0x308>)
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f240 11af 	movw	r1, #431	; 0x1af
 8007f54:	e6bd      	b.n	8007cd2 <_dtoa_r+0x32>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7e1      	b.n	8007f1e <_dtoa_r+0x27e>
 8007f5a:	2501      	movs	r5, #1
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	9509      	str	r5, [sp, #36]	; 0x24
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2312      	movs	r3, #18
 8007f6e:	e7d1      	b.n	8007f14 <_dtoa_r+0x274>
 8007f70:	636f4361 	.word	0x636f4361
 8007f74:	3fd287a7 	.word	0x3fd287a7
 8007f78:	8b60c8b3 	.word	0x8b60c8b3
 8007f7c:	3fc68a28 	.word	0x3fc68a28
 8007f80:	509f79fb 	.word	0x509f79fb
 8007f84:	3fd34413 	.word	0x3fd34413
 8007f88:	0800a601 	.word	0x0800a601
 8007f8c:	0800a618 	.word	0x0800a618
 8007f90:	7ff00000 	.word	0x7ff00000
 8007f94:	0800a5fd 	.word	0x0800a5fd
 8007f98:	0800a5f4 	.word	0x0800a5f4
 8007f9c:	0800a5d1 	.word	0x0800a5d1
 8007fa0:	3ff80000 	.word	0x3ff80000
 8007fa4:	0800a718 	.word	0x0800a718
 8007fa8:	0800a670 	.word	0x0800a670
 8007fac:	2301      	movs	r3, #1
 8007fae:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb0:	e7d7      	b.n	8007f62 <_dtoa_r+0x2c2>
 8007fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	e7ba      	b.n	8007f30 <_dtoa_r+0x290>
 8007fba:	3101      	adds	r1, #1
 8007fbc:	0052      	lsls	r2, r2, #1
 8007fbe:	e7ba      	b.n	8007f36 <_dtoa_r+0x296>
 8007fc0:	69e3      	ldr	r3, [r4, #28]
 8007fc2:	9a00      	ldr	r2, [sp, #0]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	2b0e      	cmp	r3, #14
 8007fca:	f200 80a8 	bhi.w	800811e <_dtoa_r+0x47e>
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	f000 80a5 	beq.w	800811e <_dtoa_r+0x47e>
 8007fd4:	f1bb 0f00 	cmp.w	fp, #0
 8007fd8:	dd38      	ble.n	800804c <_dtoa_r+0x3ac>
 8007fda:	4bc0      	ldr	r3, [pc, #768]	; (80082dc <_dtoa_r+0x63c>)
 8007fdc:	f00b 020f 	and.w	r2, fp, #15
 8007fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ff0:	d019      	beq.n	8008026 <_dtoa_r+0x386>
 8007ff2:	4bbb      	ldr	r3, [pc, #748]	; (80082e0 <_dtoa_r+0x640>)
 8007ff4:	ec51 0b18 	vmov	r0, r1, d8
 8007ff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ffc:	f7f8 fc2e 	bl	800085c <__aeabi_ddiv>
 8008000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008004:	f008 080f 	and.w	r8, r8, #15
 8008008:	2503      	movs	r5, #3
 800800a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80082e0 <_dtoa_r+0x640>
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	d10a      	bne.n	800802a <_dtoa_r+0x38a>
 8008014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 fc1e 	bl	800085c <__aeabi_ddiv>
 8008020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008024:	e02b      	b.n	800807e <_dtoa_r+0x3de>
 8008026:	2502      	movs	r5, #2
 8008028:	e7ef      	b.n	800800a <_dtoa_r+0x36a>
 800802a:	f018 0f01 	tst.w	r8, #1
 800802e:	d008      	beq.n	8008042 <_dtoa_r+0x3a2>
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008038:	f7f8 fae6 	bl	8000608 <__aeabi_dmul>
 800803c:	3501      	adds	r5, #1
 800803e:	4606      	mov	r6, r0
 8008040:	460f      	mov	r7, r1
 8008042:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008046:	f109 0908 	add.w	r9, r9, #8
 800804a:	e7e0      	b.n	800800e <_dtoa_r+0x36e>
 800804c:	f000 809f 	beq.w	800818e <_dtoa_r+0x4ee>
 8008050:	f1cb 0600 	rsb	r6, fp, #0
 8008054:	4ba1      	ldr	r3, [pc, #644]	; (80082dc <_dtoa_r+0x63c>)
 8008056:	4fa2      	ldr	r7, [pc, #648]	; (80082e0 <_dtoa_r+0x640>)
 8008058:	f006 020f 	and.w	r2, r6, #15
 800805c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	ec51 0b18 	vmov	r0, r1, d8
 8008068:	f7f8 face 	bl	8000608 <__aeabi_dmul>
 800806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008070:	1136      	asrs	r6, r6, #4
 8008072:	2300      	movs	r3, #0
 8008074:	2502      	movs	r5, #2
 8008076:	2e00      	cmp	r6, #0
 8008078:	d17e      	bne.n	8008178 <_dtoa_r+0x4d8>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1d0      	bne.n	8008020 <_dtoa_r+0x380>
 800807e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8084 	beq.w	8008192 <_dtoa_r+0x4f2>
 800808a:	4b96      	ldr	r3, [pc, #600]	; (80082e4 <_dtoa_r+0x644>)
 800808c:	2200      	movs	r2, #0
 800808e:	4640      	mov	r0, r8
 8008090:	4649      	mov	r1, r9
 8008092:	f7f8 fd2b 	bl	8000aec <__aeabi_dcmplt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d07b      	beq.n	8008192 <_dtoa_r+0x4f2>
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d078      	beq.n	8008192 <_dtoa_r+0x4f2>
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dd39      	ble.n	800811a <_dtoa_r+0x47a>
 80080a6:	4b90      	ldr	r3, [pc, #576]	; (80082e8 <_dtoa_r+0x648>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b6:	9e01      	ldr	r6, [sp, #4]
 80080b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80080bc:	3501      	adds	r5, #1
 80080be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080c2:	4628      	mov	r0, r5
 80080c4:	f7f8 fa36 	bl	8000534 <__aeabi_i2d>
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	f7f8 fa9c 	bl	8000608 <__aeabi_dmul>
 80080d0:	4b86      	ldr	r3, [pc, #536]	; (80082ec <_dtoa_r+0x64c>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7f8 f8e2 	bl	800029c <__adddf3>
 80080d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d158      	bne.n	8008198 <_dtoa_r+0x4f8>
 80080e6:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <_dtoa_r+0x650>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 f8d3 	bl	8000298 <__aeabi_dsub>
 80080f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080f6:	4680      	mov	r8, r0
 80080f8:	4689      	mov	r9, r1
 80080fa:	f7f8 fd15 	bl	8000b28 <__aeabi_dcmpgt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f040 8296 	bne.w	8008630 <_dtoa_r+0x990>
 8008104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008108:	4640      	mov	r0, r8
 800810a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 fcec 	bl	8000aec <__aeabi_dcmplt>
 8008114:	2800      	cmp	r0, #0
 8008116:	f040 8289 	bne.w	800862c <_dtoa_r+0x98c>
 800811a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800811e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008120:	2b00      	cmp	r3, #0
 8008122:	f2c0 814e 	blt.w	80083c2 <_dtoa_r+0x722>
 8008126:	f1bb 0f0e 	cmp.w	fp, #14
 800812a:	f300 814a 	bgt.w	80083c2 <_dtoa_r+0x722>
 800812e:	4b6b      	ldr	r3, [pc, #428]	; (80082dc <_dtoa_r+0x63c>)
 8008130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	f280 80dc 	bge.w	80082f8 <_dtoa_r+0x658>
 8008140:	9b04      	ldr	r3, [sp, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f300 80d8 	bgt.w	80082f8 <_dtoa_r+0x658>
 8008148:	f040 826f 	bne.w	800862a <_dtoa_r+0x98a>
 800814c:	4b68      	ldr	r3, [pc, #416]	; (80082f0 <_dtoa_r+0x650>)
 800814e:	2200      	movs	r2, #0
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800815c:	f7f8 fcda 	bl	8000b14 <__aeabi_dcmpge>
 8008160:	9e04      	ldr	r6, [sp, #16]
 8008162:	4637      	mov	r7, r6
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8245 	bne.w	80085f4 <_dtoa_r+0x954>
 800816a:	9d00      	ldr	r5, [sp, #0]
 800816c:	2331      	movs	r3, #49	; 0x31
 800816e:	f805 3b01 	strb.w	r3, [r5], #1
 8008172:	f10b 0b01 	add.w	fp, fp, #1
 8008176:	e241      	b.n	80085fc <_dtoa_r+0x95c>
 8008178:	07f2      	lsls	r2, r6, #31
 800817a:	d505      	bpl.n	8008188 <_dtoa_r+0x4e8>
 800817c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008180:	f7f8 fa42 	bl	8000608 <__aeabi_dmul>
 8008184:	3501      	adds	r5, #1
 8008186:	2301      	movs	r3, #1
 8008188:	1076      	asrs	r6, r6, #1
 800818a:	3708      	adds	r7, #8
 800818c:	e773      	b.n	8008076 <_dtoa_r+0x3d6>
 800818e:	2502      	movs	r5, #2
 8008190:	e775      	b.n	800807e <_dtoa_r+0x3de>
 8008192:	9e04      	ldr	r6, [sp, #16]
 8008194:	465f      	mov	r7, fp
 8008196:	e792      	b.n	80080be <_dtoa_r+0x41e>
 8008198:	9900      	ldr	r1, [sp, #0]
 800819a:	4b50      	ldr	r3, [pc, #320]	; (80082dc <_dtoa_r+0x63c>)
 800819c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a0:	4431      	add	r1, r6
 80081a2:	9102      	str	r1, [sp, #8]
 80081a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081a6:	eeb0 9a47 	vmov.f32	s18, s14
 80081aa:	eef0 9a67 	vmov.f32	s19, s15
 80081ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	d044      	beq.n	8008244 <_dtoa_r+0x5a4>
 80081ba:	494e      	ldr	r1, [pc, #312]	; (80082f4 <_dtoa_r+0x654>)
 80081bc:	2000      	movs	r0, #0
 80081be:	f7f8 fb4d 	bl	800085c <__aeabi_ddiv>
 80081c2:	ec53 2b19 	vmov	r2, r3, d9
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	9d00      	ldr	r5, [sp, #0]
 80081cc:	ec41 0b19 	vmov	d9, r0, r1
 80081d0:	4649      	mov	r1, r9
 80081d2:	4640      	mov	r0, r8
 80081d4:	f7f8 fcc8 	bl	8000b68 <__aeabi_d2iz>
 80081d8:	4606      	mov	r6, r0
 80081da:	f7f8 f9ab 	bl	8000534 <__aeabi_i2d>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4640      	mov	r0, r8
 80081e4:	4649      	mov	r1, r9
 80081e6:	f7f8 f857 	bl	8000298 <__aeabi_dsub>
 80081ea:	3630      	adds	r6, #48	; 0x30
 80081ec:	f805 6b01 	strb.w	r6, [r5], #1
 80081f0:	ec53 2b19 	vmov	r2, r3, d9
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	f7f8 fc78 	bl	8000aec <__aeabi_dcmplt>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d164      	bne.n	80082ca <_dtoa_r+0x62a>
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	4937      	ldr	r1, [pc, #220]	; (80082e4 <_dtoa_r+0x644>)
 8008206:	2000      	movs	r0, #0
 8008208:	f7f8 f846 	bl	8000298 <__aeabi_dsub>
 800820c:	ec53 2b19 	vmov	r2, r3, d9
 8008210:	f7f8 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8008214:	2800      	cmp	r0, #0
 8008216:	f040 80b6 	bne.w	8008386 <_dtoa_r+0x6e6>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	429d      	cmp	r5, r3
 800821e:	f43f af7c 	beq.w	800811a <_dtoa_r+0x47a>
 8008222:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <_dtoa_r+0x648>)
 8008224:	ec51 0b19 	vmov	r0, r1, d9
 8008228:	2200      	movs	r2, #0
 800822a:	f7f8 f9ed 	bl	8000608 <__aeabi_dmul>
 800822e:	4b2e      	ldr	r3, [pc, #184]	; (80082e8 <_dtoa_r+0x648>)
 8008230:	ec41 0b19 	vmov	d9, r0, r1
 8008234:	2200      	movs	r2, #0
 8008236:	4640      	mov	r0, r8
 8008238:	4649      	mov	r1, r9
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	e7c5      	b.n	80081d0 <_dtoa_r+0x530>
 8008244:	ec51 0b17 	vmov	r0, r1, d7
 8008248:	f7f8 f9de 	bl	8000608 <__aeabi_dmul>
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	9d00      	ldr	r5, [sp, #0]
 8008250:	930f      	str	r3, [sp, #60]	; 0x3c
 8008252:	ec41 0b19 	vmov	d9, r0, r1
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	f7f8 fc85 	bl	8000b68 <__aeabi_d2iz>
 800825e:	4606      	mov	r6, r0
 8008260:	f7f8 f968 	bl	8000534 <__aeabi_i2d>
 8008264:	3630      	adds	r6, #48	; 0x30
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f8 f813 	bl	8000298 <__aeabi_dsub>
 8008272:	f805 6b01 	strb.w	r6, [r5], #1
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	429d      	cmp	r5, r3
 800827a:	4680      	mov	r8, r0
 800827c:	4689      	mov	r9, r1
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	d124      	bne.n	80082ce <_dtoa_r+0x62e>
 8008284:	4b1b      	ldr	r3, [pc, #108]	; (80082f4 <_dtoa_r+0x654>)
 8008286:	ec51 0b19 	vmov	r0, r1, d9
 800828a:	f7f8 f807 	bl	800029c <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4640      	mov	r0, r8
 8008294:	4649      	mov	r1, r9
 8008296:	f7f8 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800829a:	2800      	cmp	r0, #0
 800829c:	d173      	bne.n	8008386 <_dtoa_r+0x6e6>
 800829e:	ec53 2b19 	vmov	r2, r3, d9
 80082a2:	4914      	ldr	r1, [pc, #80]	; (80082f4 <_dtoa_r+0x654>)
 80082a4:	2000      	movs	r0, #0
 80082a6:	f7f7 fff7 	bl	8000298 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f8 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f43f af2f 	beq.w	800811a <_dtoa_r+0x47a>
 80082bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082be:	1e6b      	subs	r3, r5, #1
 80082c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082c6:	2b30      	cmp	r3, #48	; 0x30
 80082c8:	d0f8      	beq.n	80082bc <_dtoa_r+0x61c>
 80082ca:	46bb      	mov	fp, r7
 80082cc:	e04a      	b.n	8008364 <_dtoa_r+0x6c4>
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <_dtoa_r+0x648>)
 80082d0:	f7f8 f99a 	bl	8000608 <__aeabi_dmul>
 80082d4:	4680      	mov	r8, r0
 80082d6:	4689      	mov	r9, r1
 80082d8:	e7bd      	b.n	8008256 <_dtoa_r+0x5b6>
 80082da:	bf00      	nop
 80082dc:	0800a718 	.word	0x0800a718
 80082e0:	0800a6f0 	.word	0x0800a6f0
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	40240000 	.word	0x40240000
 80082ec:	401c0000 	.word	0x401c0000
 80082f0:	40140000 	.word	0x40140000
 80082f4:	3fe00000 	.word	0x3fe00000
 80082f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082fc:	9d00      	ldr	r5, [sp, #0]
 80082fe:	4642      	mov	r2, r8
 8008300:	464b      	mov	r3, r9
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f8 faa9 	bl	800085c <__aeabi_ddiv>
 800830a:	f7f8 fc2d 	bl	8000b68 <__aeabi_d2iz>
 800830e:	9001      	str	r0, [sp, #4]
 8008310:	f7f8 f910 	bl	8000534 <__aeabi_i2d>
 8008314:	4642      	mov	r2, r8
 8008316:	464b      	mov	r3, r9
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ffb8 	bl	8000298 <__aeabi_dsub>
 8008328:	9e01      	ldr	r6, [sp, #4]
 800832a:	9f04      	ldr	r7, [sp, #16]
 800832c:	3630      	adds	r6, #48	; 0x30
 800832e:	f805 6b01 	strb.w	r6, [r5], #1
 8008332:	9e00      	ldr	r6, [sp, #0]
 8008334:	1bae      	subs	r6, r5, r6
 8008336:	42b7      	cmp	r7, r6
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	d134      	bne.n	80083a8 <_dtoa_r+0x708>
 800833e:	f7f7 ffad 	bl	800029c <__adddf3>
 8008342:	4642      	mov	r2, r8
 8008344:	464b      	mov	r3, r9
 8008346:	4606      	mov	r6, r0
 8008348:	460f      	mov	r7, r1
 800834a:	f7f8 fbed 	bl	8000b28 <__aeabi_dcmpgt>
 800834e:	b9c8      	cbnz	r0, 8008384 <_dtoa_r+0x6e4>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f8 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800835c:	b110      	cbz	r0, 8008364 <_dtoa_r+0x6c4>
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	07db      	lsls	r3, r3, #31
 8008362:	d40f      	bmi.n	8008384 <_dtoa_r+0x6e4>
 8008364:	4651      	mov	r1, sl
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fd86 	bl	8008e78 <_Bfree>
 800836c:	2300      	movs	r3, #0
 800836e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008370:	702b      	strb	r3, [r5, #0]
 8008372:	f10b 0301 	add.w	r3, fp, #1
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837a:	2b00      	cmp	r3, #0
 800837c:	f43f ace2 	beq.w	8007d44 <_dtoa_r+0xa4>
 8008380:	601d      	str	r5, [r3, #0]
 8008382:	e4df      	b.n	8007d44 <_dtoa_r+0xa4>
 8008384:	465f      	mov	r7, fp
 8008386:	462b      	mov	r3, r5
 8008388:	461d      	mov	r5, r3
 800838a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800838e:	2a39      	cmp	r2, #57	; 0x39
 8008390:	d106      	bne.n	80083a0 <_dtoa_r+0x700>
 8008392:	9a00      	ldr	r2, [sp, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d1f7      	bne.n	8008388 <_dtoa_r+0x6e8>
 8008398:	9900      	ldr	r1, [sp, #0]
 800839a:	2230      	movs	r2, #48	; 0x30
 800839c:	3701      	adds	r7, #1
 800839e:	700a      	strb	r2, [r1, #0]
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	3201      	adds	r2, #1
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e790      	b.n	80082ca <_dtoa_r+0x62a>
 80083a8:	4ba3      	ldr	r3, [pc, #652]	; (8008638 <_dtoa_r+0x998>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	f7f8 f92c 	bl	8000608 <__aeabi_dmul>
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	f7f8 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d09e      	beq.n	80082fe <_dtoa_r+0x65e>
 80083c0:	e7d0      	b.n	8008364 <_dtoa_r+0x6c4>
 80083c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	f000 80ca 	beq.w	800855e <_dtoa_r+0x8be>
 80083ca:	9a07      	ldr	r2, [sp, #28]
 80083cc:	2a01      	cmp	r2, #1
 80083ce:	f300 80ad 	bgt.w	800852c <_dtoa_r+0x88c>
 80083d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	f000 80a5 	beq.w	8008524 <_dtoa_r+0x884>
 80083da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083de:	9e08      	ldr	r6, [sp, #32]
 80083e0:	9d05      	ldr	r5, [sp, #20]
 80083e2:	9a05      	ldr	r2, [sp, #20]
 80083e4:	441a      	add	r2, r3
 80083e6:	9205      	str	r2, [sp, #20]
 80083e8:	9a06      	ldr	r2, [sp, #24]
 80083ea:	2101      	movs	r1, #1
 80083ec:	441a      	add	r2, r3
 80083ee:	4620      	mov	r0, r4
 80083f0:	9206      	str	r2, [sp, #24]
 80083f2:	f000 fdf7 	bl	8008fe4 <__i2b>
 80083f6:	4607      	mov	r7, r0
 80083f8:	b165      	cbz	r5, 8008414 <_dtoa_r+0x774>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dd09      	ble.n	8008414 <_dtoa_r+0x774>
 8008400:	42ab      	cmp	r3, r5
 8008402:	9a05      	ldr	r2, [sp, #20]
 8008404:	bfa8      	it	ge
 8008406:	462b      	movge	r3, r5
 8008408:	1ad2      	subs	r2, r2, r3
 800840a:	9205      	str	r2, [sp, #20]
 800840c:	9a06      	ldr	r2, [sp, #24]
 800840e:	1aed      	subs	r5, r5, r3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	9306      	str	r3, [sp, #24]
 8008414:	9b08      	ldr	r3, [sp, #32]
 8008416:	b1f3      	cbz	r3, 8008456 <_dtoa_r+0x7b6>
 8008418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80a3 	beq.w	8008566 <_dtoa_r+0x8c6>
 8008420:	2e00      	cmp	r6, #0
 8008422:	dd10      	ble.n	8008446 <_dtoa_r+0x7a6>
 8008424:	4639      	mov	r1, r7
 8008426:	4632      	mov	r2, r6
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fe9b 	bl	8009164 <__pow5mult>
 800842e:	4652      	mov	r2, sl
 8008430:	4601      	mov	r1, r0
 8008432:	4607      	mov	r7, r0
 8008434:	4620      	mov	r0, r4
 8008436:	f000 fdeb 	bl	8009010 <__multiply>
 800843a:	4651      	mov	r1, sl
 800843c:	4680      	mov	r8, r0
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fd1a 	bl	8008e78 <_Bfree>
 8008444:	46c2      	mov	sl, r8
 8008446:	9b08      	ldr	r3, [sp, #32]
 8008448:	1b9a      	subs	r2, r3, r6
 800844a:	d004      	beq.n	8008456 <_dtoa_r+0x7b6>
 800844c:	4651      	mov	r1, sl
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fe88 	bl	8009164 <__pow5mult>
 8008454:	4682      	mov	sl, r0
 8008456:	2101      	movs	r1, #1
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fdc3 	bl	8008fe4 <__i2b>
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	2b00      	cmp	r3, #0
 8008462:	4606      	mov	r6, r0
 8008464:	f340 8081 	ble.w	800856a <_dtoa_r+0x8ca>
 8008468:	461a      	mov	r2, r3
 800846a:	4601      	mov	r1, r0
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fe79 	bl	8009164 <__pow5mult>
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	2b01      	cmp	r3, #1
 8008476:	4606      	mov	r6, r0
 8008478:	dd7a      	ble.n	8008570 <_dtoa_r+0x8d0>
 800847a:	f04f 0800 	mov.w	r8, #0
 800847e:	6933      	ldr	r3, [r6, #16]
 8008480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008484:	6918      	ldr	r0, [r3, #16]
 8008486:	f000 fd5f 	bl	8008f48 <__hi0bits>
 800848a:	f1c0 0020 	rsb	r0, r0, #32
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	4418      	add	r0, r3
 8008492:	f010 001f 	ands.w	r0, r0, #31
 8008496:	f000 8094 	beq.w	80085c2 <_dtoa_r+0x922>
 800849a:	f1c0 0320 	rsb	r3, r0, #32
 800849e:	2b04      	cmp	r3, #4
 80084a0:	f340 8085 	ble.w	80085ae <_dtoa_r+0x90e>
 80084a4:	9b05      	ldr	r3, [sp, #20]
 80084a6:	f1c0 001c 	rsb	r0, r0, #28
 80084aa:	4403      	add	r3, r0
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	4403      	add	r3, r0
 80084b2:	4405      	add	r5, r0
 80084b4:	9306      	str	r3, [sp, #24]
 80084b6:	9b05      	ldr	r3, [sp, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dd05      	ble.n	80084c8 <_dtoa_r+0x828>
 80084bc:	4651      	mov	r1, sl
 80084be:	461a      	mov	r2, r3
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fea9 	bl	8009218 <__lshift>
 80084c6:	4682      	mov	sl, r0
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x83a>
 80084ce:	4631      	mov	r1, r6
 80084d0:	461a      	mov	r2, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fea0 	bl	8009218 <__lshift>
 80084d8:	4606      	mov	r6, r0
 80084da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d072      	beq.n	80085c6 <_dtoa_r+0x926>
 80084e0:	4631      	mov	r1, r6
 80084e2:	4650      	mov	r0, sl
 80084e4:	f000 ff04 	bl	80092f0 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	da6c      	bge.n	80085c6 <_dtoa_r+0x926>
 80084ec:	2300      	movs	r3, #0
 80084ee:	4651      	mov	r1, sl
 80084f0:	220a      	movs	r2, #10
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fce2 	bl	8008ebc <__multadd>
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084fe:	4682      	mov	sl, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 81b0 	beq.w	8008866 <_dtoa_r+0xbc6>
 8008506:	2300      	movs	r3, #0
 8008508:	4639      	mov	r1, r7
 800850a:	220a      	movs	r2, #10
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fcd5 	bl	8008ebc <__multadd>
 8008512:	9b01      	ldr	r3, [sp, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	4607      	mov	r7, r0
 8008518:	f300 8096 	bgt.w	8008648 <_dtoa_r+0x9a8>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	2b02      	cmp	r3, #2
 8008520:	dc59      	bgt.n	80085d6 <_dtoa_r+0x936>
 8008522:	e091      	b.n	8008648 <_dtoa_r+0x9a8>
 8008524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800852a:	e758      	b.n	80083de <_dtoa_r+0x73e>
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	1e5e      	subs	r6, r3, #1
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	42b3      	cmp	r3, r6
 8008534:	bfbf      	itttt	lt
 8008536:	9b08      	ldrlt	r3, [sp, #32]
 8008538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800853a:	9608      	strlt	r6, [sp, #32]
 800853c:	1af3      	sublt	r3, r6, r3
 800853e:	bfb4      	ite	lt
 8008540:	18d2      	addlt	r2, r2, r3
 8008542:	1b9e      	subge	r6, r3, r6
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	bfbc      	itt	lt
 8008548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800854a:	2600      	movlt	r6, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfb7      	itett	lt
 8008550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008558:	1a9d      	sublt	r5, r3, r2
 800855a:	2300      	movlt	r3, #0
 800855c:	e741      	b.n	80083e2 <_dtoa_r+0x742>
 800855e:	9e08      	ldr	r6, [sp, #32]
 8008560:	9d05      	ldr	r5, [sp, #20]
 8008562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008564:	e748      	b.n	80083f8 <_dtoa_r+0x758>
 8008566:	9a08      	ldr	r2, [sp, #32]
 8008568:	e770      	b.n	800844c <_dtoa_r+0x7ac>
 800856a:	9b07      	ldr	r3, [sp, #28]
 800856c:	2b01      	cmp	r3, #1
 800856e:	dc19      	bgt.n	80085a4 <_dtoa_r+0x904>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	b9bb      	cbnz	r3, 80085a4 <_dtoa_r+0x904>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800857a:	b99b      	cbnz	r3, 80085a4 <_dtoa_r+0x904>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008582:	0d1b      	lsrs	r3, r3, #20
 8008584:	051b      	lsls	r3, r3, #20
 8008586:	b183      	cbz	r3, 80085aa <_dtoa_r+0x90a>
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	3301      	adds	r3, #1
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	3301      	adds	r3, #1
 8008592:	9306      	str	r3, [sp, #24]
 8008594:	f04f 0801 	mov.w	r8, #1
 8008598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f af6f 	bne.w	800847e <_dtoa_r+0x7de>
 80085a0:	2001      	movs	r0, #1
 80085a2:	e774      	b.n	800848e <_dtoa_r+0x7ee>
 80085a4:	f04f 0800 	mov.w	r8, #0
 80085a8:	e7f6      	b.n	8008598 <_dtoa_r+0x8f8>
 80085aa:	4698      	mov	r8, r3
 80085ac:	e7f4      	b.n	8008598 <_dtoa_r+0x8f8>
 80085ae:	d082      	beq.n	80084b6 <_dtoa_r+0x816>
 80085b0:	9a05      	ldr	r2, [sp, #20]
 80085b2:	331c      	adds	r3, #28
 80085b4:	441a      	add	r2, r3
 80085b6:	9205      	str	r2, [sp, #20]
 80085b8:	9a06      	ldr	r2, [sp, #24]
 80085ba:	441a      	add	r2, r3
 80085bc:	441d      	add	r5, r3
 80085be:	9206      	str	r2, [sp, #24]
 80085c0:	e779      	b.n	80084b6 <_dtoa_r+0x816>
 80085c2:	4603      	mov	r3, r0
 80085c4:	e7f4      	b.n	80085b0 <_dtoa_r+0x910>
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc37      	bgt.n	800863c <_dtoa_r+0x99c>
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	dd34      	ble.n	800863c <_dtoa_r+0x99c>
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	b963      	cbnz	r3, 80085f4 <_dtoa_r+0x954>
 80085da:	4631      	mov	r1, r6
 80085dc:	2205      	movs	r2, #5
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 fc6c 	bl	8008ebc <__multadd>
 80085e4:	4601      	mov	r1, r0
 80085e6:	4606      	mov	r6, r0
 80085e8:	4650      	mov	r0, sl
 80085ea:	f000 fe81 	bl	80092f0 <__mcmp>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f73f adbb 	bgt.w	800816a <_dtoa_r+0x4ca>
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	9d00      	ldr	r5, [sp, #0]
 80085f8:	ea6f 0b03 	mvn.w	fp, r3
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	4631      	mov	r1, r6
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fc38 	bl	8008e78 <_Bfree>
 8008608:	2f00      	cmp	r7, #0
 800860a:	f43f aeab 	beq.w	8008364 <_dtoa_r+0x6c4>
 800860e:	f1b8 0f00 	cmp.w	r8, #0
 8008612:	d005      	beq.n	8008620 <_dtoa_r+0x980>
 8008614:	45b8      	cmp	r8, r7
 8008616:	d003      	beq.n	8008620 <_dtoa_r+0x980>
 8008618:	4641      	mov	r1, r8
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fc2c 	bl	8008e78 <_Bfree>
 8008620:	4639      	mov	r1, r7
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fc28 	bl	8008e78 <_Bfree>
 8008628:	e69c      	b.n	8008364 <_dtoa_r+0x6c4>
 800862a:	2600      	movs	r6, #0
 800862c:	4637      	mov	r7, r6
 800862e:	e7e1      	b.n	80085f4 <_dtoa_r+0x954>
 8008630:	46bb      	mov	fp, r7
 8008632:	4637      	mov	r7, r6
 8008634:	e599      	b.n	800816a <_dtoa_r+0x4ca>
 8008636:	bf00      	nop
 8008638:	40240000 	.word	0x40240000
 800863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80c8 	beq.w	80087d4 <_dtoa_r+0xb34>
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	2d00      	cmp	r5, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x9b8>
 800864c:	4639      	mov	r1, r7
 800864e:	462a      	mov	r2, r5
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fde1 	bl	8009218 <__lshift>
 8008656:	4607      	mov	r7, r0
 8008658:	f1b8 0f00 	cmp.w	r8, #0
 800865c:	d05b      	beq.n	8008716 <_dtoa_r+0xa76>
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fbc9 	bl	8008df8 <_Balloc>
 8008666:	4605      	mov	r5, r0
 8008668:	b928      	cbnz	r0, 8008676 <_dtoa_r+0x9d6>
 800866a:	4b83      	ldr	r3, [pc, #524]	; (8008878 <_dtoa_r+0xbd8>)
 800866c:	4602      	mov	r2, r0
 800866e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008672:	f7ff bb2e 	b.w	8007cd2 <_dtoa_r+0x32>
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	f107 010c 	add.w	r1, r7, #12
 8008680:	300c      	adds	r0, #12
 8008682:	f7ff fa74 	bl	8007b6e <memcpy>
 8008686:	2201      	movs	r2, #1
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fdc4 	bl	8009218 <__lshift>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800869a:	4413      	add	r3, r2
 800869c:	9308      	str	r3, [sp, #32]
 800869e:	9b02      	ldr	r3, [sp, #8]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	46b8      	mov	r8, r7
 80086a6:	9306      	str	r3, [sp, #24]
 80086a8:	4607      	mov	r7, r0
 80086aa:	9b04      	ldr	r3, [sp, #16]
 80086ac:	4631      	mov	r1, r6
 80086ae:	3b01      	subs	r3, #1
 80086b0:	4650      	mov	r0, sl
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	f7ff fa69 	bl	8007b8a <quorem>
 80086b8:	4641      	mov	r1, r8
 80086ba:	9002      	str	r0, [sp, #8]
 80086bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80086c0:	4650      	mov	r0, sl
 80086c2:	f000 fe15 	bl	80092f0 <__mcmp>
 80086c6:	463a      	mov	r2, r7
 80086c8:	9005      	str	r0, [sp, #20]
 80086ca:	4631      	mov	r1, r6
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 fe2b 	bl	8009328 <__mdiff>
 80086d2:	68c2      	ldr	r2, [r0, #12]
 80086d4:	4605      	mov	r5, r0
 80086d6:	bb02      	cbnz	r2, 800871a <_dtoa_r+0xa7a>
 80086d8:	4601      	mov	r1, r0
 80086da:	4650      	mov	r0, sl
 80086dc:	f000 fe08 	bl	80092f0 <__mcmp>
 80086e0:	4602      	mov	r2, r0
 80086e2:	4629      	mov	r1, r5
 80086e4:	4620      	mov	r0, r4
 80086e6:	9209      	str	r2, [sp, #36]	; 0x24
 80086e8:	f000 fbc6 	bl	8008e78 <_Bfree>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f0:	9d04      	ldr	r5, [sp, #16]
 80086f2:	ea43 0102 	orr.w	r1, r3, r2
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	4319      	orrs	r1, r3
 80086fa:	d110      	bne.n	800871e <_dtoa_r+0xa7e>
 80086fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008700:	d029      	beq.n	8008756 <_dtoa_r+0xab6>
 8008702:	9b05      	ldr	r3, [sp, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd02      	ble.n	800870e <_dtoa_r+0xa6e>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	f883 9000 	strb.w	r9, [r3]
 8008714:	e774      	b.n	8008600 <_dtoa_r+0x960>
 8008716:	4638      	mov	r0, r7
 8008718:	e7ba      	b.n	8008690 <_dtoa_r+0x9f0>
 800871a:	2201      	movs	r2, #1
 800871c:	e7e1      	b.n	80086e2 <_dtoa_r+0xa42>
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db04      	blt.n	800872e <_dtoa_r+0xa8e>
 8008724:	9907      	ldr	r1, [sp, #28]
 8008726:	430b      	orrs	r3, r1
 8008728:	9906      	ldr	r1, [sp, #24]
 800872a:	430b      	orrs	r3, r1
 800872c:	d120      	bne.n	8008770 <_dtoa_r+0xad0>
 800872e:	2a00      	cmp	r2, #0
 8008730:	dded      	ble.n	800870e <_dtoa_r+0xa6e>
 8008732:	4651      	mov	r1, sl
 8008734:	2201      	movs	r2, #1
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fd6e 	bl	8009218 <__lshift>
 800873c:	4631      	mov	r1, r6
 800873e:	4682      	mov	sl, r0
 8008740:	f000 fdd6 	bl	80092f0 <__mcmp>
 8008744:	2800      	cmp	r0, #0
 8008746:	dc03      	bgt.n	8008750 <_dtoa_r+0xab0>
 8008748:	d1e1      	bne.n	800870e <_dtoa_r+0xa6e>
 800874a:	f019 0f01 	tst.w	r9, #1
 800874e:	d0de      	beq.n	800870e <_dtoa_r+0xa6e>
 8008750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008754:	d1d8      	bne.n	8008708 <_dtoa_r+0xa68>
 8008756:	9a01      	ldr	r2, [sp, #4]
 8008758:	2339      	movs	r3, #57	; 0x39
 800875a:	7013      	strb	r3, [r2, #0]
 800875c:	462b      	mov	r3, r5
 800875e:	461d      	mov	r5, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008766:	2a39      	cmp	r2, #57	; 0x39
 8008768:	d06c      	beq.n	8008844 <_dtoa_r+0xba4>
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e747      	b.n	8008600 <_dtoa_r+0x960>
 8008770:	2a00      	cmp	r2, #0
 8008772:	dd07      	ble.n	8008784 <_dtoa_r+0xae4>
 8008774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008778:	d0ed      	beq.n	8008756 <_dtoa_r+0xab6>
 800877a:	9a01      	ldr	r2, [sp, #4]
 800877c:	f109 0301 	add.w	r3, r9, #1
 8008780:	7013      	strb	r3, [r2, #0]
 8008782:	e73d      	b.n	8008600 <_dtoa_r+0x960>
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	9a08      	ldr	r2, [sp, #32]
 8008788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800878c:	4293      	cmp	r3, r2
 800878e:	d043      	beq.n	8008818 <_dtoa_r+0xb78>
 8008790:	4651      	mov	r1, sl
 8008792:	2300      	movs	r3, #0
 8008794:	220a      	movs	r2, #10
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fb90 	bl	8008ebc <__multadd>
 800879c:	45b8      	cmp	r8, r7
 800879e:	4682      	mov	sl, r0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	f04f 020a 	mov.w	r2, #10
 80087a8:	4641      	mov	r1, r8
 80087aa:	4620      	mov	r0, r4
 80087ac:	d107      	bne.n	80087be <_dtoa_r+0xb1e>
 80087ae:	f000 fb85 	bl	8008ebc <__multadd>
 80087b2:	4680      	mov	r8, r0
 80087b4:	4607      	mov	r7, r0
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	e775      	b.n	80086aa <_dtoa_r+0xa0a>
 80087be:	f000 fb7d 	bl	8008ebc <__multadd>
 80087c2:	4639      	mov	r1, r7
 80087c4:	4680      	mov	r8, r0
 80087c6:	2300      	movs	r3, #0
 80087c8:	220a      	movs	r2, #10
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fb76 	bl	8008ebc <__multadd>
 80087d0:	4607      	mov	r7, r0
 80087d2:	e7f0      	b.n	80087b6 <_dtoa_r+0xb16>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	9d00      	ldr	r5, [sp, #0]
 80087da:	4631      	mov	r1, r6
 80087dc:	4650      	mov	r0, sl
 80087de:	f7ff f9d4 	bl	8007b8a <quorem>
 80087e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	f805 9b01 	strb.w	r9, [r5], #1
 80087ec:	1aea      	subs	r2, r5, r3
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	4293      	cmp	r3, r2
 80087f2:	dd07      	ble.n	8008804 <_dtoa_r+0xb64>
 80087f4:	4651      	mov	r1, sl
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fb5e 	bl	8008ebc <__multadd>
 8008800:	4682      	mov	sl, r0
 8008802:	e7ea      	b.n	80087da <_dtoa_r+0xb3a>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfc8      	it	gt
 800880a:	461d      	movgt	r5, r3
 800880c:	9b00      	ldr	r3, [sp, #0]
 800880e:	bfd8      	it	le
 8008810:	2501      	movle	r5, #1
 8008812:	441d      	add	r5, r3
 8008814:	f04f 0800 	mov.w	r8, #0
 8008818:	4651      	mov	r1, sl
 800881a:	2201      	movs	r2, #1
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fcfb 	bl	8009218 <__lshift>
 8008822:	4631      	mov	r1, r6
 8008824:	4682      	mov	sl, r0
 8008826:	f000 fd63 	bl	80092f0 <__mcmp>
 800882a:	2800      	cmp	r0, #0
 800882c:	dc96      	bgt.n	800875c <_dtoa_r+0xabc>
 800882e:	d102      	bne.n	8008836 <_dtoa_r+0xb96>
 8008830:	f019 0f01 	tst.w	r9, #1
 8008834:	d192      	bne.n	800875c <_dtoa_r+0xabc>
 8008836:	462b      	mov	r3, r5
 8008838:	461d      	mov	r5, r3
 800883a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883e:	2a30      	cmp	r2, #48	; 0x30
 8008840:	d0fa      	beq.n	8008838 <_dtoa_r+0xb98>
 8008842:	e6dd      	b.n	8008600 <_dtoa_r+0x960>
 8008844:	9a00      	ldr	r2, [sp, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d189      	bne.n	800875e <_dtoa_r+0xabe>
 800884a:	f10b 0b01 	add.w	fp, fp, #1
 800884e:	2331      	movs	r3, #49	; 0x31
 8008850:	e796      	b.n	8008780 <_dtoa_r+0xae0>
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <_dtoa_r+0xbdc>)
 8008854:	f7ff ba99 	b.w	8007d8a <_dtoa_r+0xea>
 8008858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885a:	2b00      	cmp	r3, #0
 800885c:	f47f aa6d 	bne.w	8007d3a <_dtoa_r+0x9a>
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <_dtoa_r+0xbe0>)
 8008862:	f7ff ba92 	b.w	8007d8a <_dtoa_r+0xea>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dcb5      	bgt.n	80087d8 <_dtoa_r+0xb38>
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	2b02      	cmp	r3, #2
 8008870:	f73f aeb1 	bgt.w	80085d6 <_dtoa_r+0x936>
 8008874:	e7b0      	b.n	80087d8 <_dtoa_r+0xb38>
 8008876:	bf00      	nop
 8008878:	0800a670 	.word	0x0800a670
 800887c:	0800a5d0 	.word	0x0800a5d0
 8008880:	0800a5f4 	.word	0x0800a5f4

08008884 <__ssputs_r>:
 8008884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	688e      	ldr	r6, [r1, #8]
 800888a:	461f      	mov	r7, r3
 800888c:	42be      	cmp	r6, r7
 800888e:	680b      	ldr	r3, [r1, #0]
 8008890:	4682      	mov	sl, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4690      	mov	r8, r2
 8008896:	d82c      	bhi.n	80088f2 <__ssputs_r+0x6e>
 8008898:	898a      	ldrh	r2, [r1, #12]
 800889a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800889e:	d026      	beq.n	80088ee <__ssputs_r+0x6a>
 80088a0:	6965      	ldr	r5, [r4, #20]
 80088a2:	6909      	ldr	r1, [r1, #16]
 80088a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a8:	eba3 0901 	sub.w	r9, r3, r1
 80088ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088b0:	1c7b      	adds	r3, r7, #1
 80088b2:	444b      	add	r3, r9
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	429d      	cmp	r5, r3
 80088b8:	bf38      	it	cc
 80088ba:	461d      	movcc	r5, r3
 80088bc:	0553      	lsls	r3, r2, #21
 80088be:	d527      	bpl.n	8008910 <__ssputs_r+0x8c>
 80088c0:	4629      	mov	r1, r5
 80088c2:	f000 f95f 	bl	8008b84 <_malloc_r>
 80088c6:	4606      	mov	r6, r0
 80088c8:	b360      	cbz	r0, 8008924 <__ssputs_r+0xa0>
 80088ca:	6921      	ldr	r1, [r4, #16]
 80088cc:	464a      	mov	r2, r9
 80088ce:	f7ff f94e 	bl	8007b6e <memcpy>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	6126      	str	r6, [r4, #16]
 80088e0:	6165      	str	r5, [r4, #20]
 80088e2:	444e      	add	r6, r9
 80088e4:	eba5 0509 	sub.w	r5, r5, r9
 80088e8:	6026      	str	r6, [r4, #0]
 80088ea:	60a5      	str	r5, [r4, #8]
 80088ec:	463e      	mov	r6, r7
 80088ee:	42be      	cmp	r6, r7
 80088f0:	d900      	bls.n	80088f4 <__ssputs_r+0x70>
 80088f2:	463e      	mov	r6, r7
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	4632      	mov	r2, r6
 80088f8:	4641      	mov	r1, r8
 80088fa:	f000 fe6b 	bl	80095d4 <memmove>
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	1b9b      	subs	r3, r3, r6
 8008902:	60a3      	str	r3, [r4, #8]
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	4433      	add	r3, r6
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2000      	movs	r0, #0
 800890c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008910:	462a      	mov	r2, r5
 8008912:	f000 fe30 	bl	8009576 <_realloc_r>
 8008916:	4606      	mov	r6, r0
 8008918:	2800      	cmp	r0, #0
 800891a:	d1e0      	bne.n	80088de <__ssputs_r+0x5a>
 800891c:	6921      	ldr	r1, [r4, #16]
 800891e:	4650      	mov	r0, sl
 8008920:	f000 fefc 	bl	800971c <_free_r>
 8008924:	230c      	movs	r3, #12
 8008926:	f8ca 3000 	str.w	r3, [sl]
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008936:	e7e9      	b.n	800890c <__ssputs_r+0x88>

08008938 <_svfiprintf_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	4698      	mov	r8, r3
 800893e:	898b      	ldrh	r3, [r1, #12]
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	b09d      	sub	sp, #116	; 0x74
 8008944:	4607      	mov	r7, r0
 8008946:	460d      	mov	r5, r1
 8008948:	4614      	mov	r4, r2
 800894a:	d50e      	bpl.n	800896a <_svfiprintf_r+0x32>
 800894c:	690b      	ldr	r3, [r1, #16]
 800894e:	b963      	cbnz	r3, 800896a <_svfiprintf_r+0x32>
 8008950:	2140      	movs	r1, #64	; 0x40
 8008952:	f000 f917 	bl	8008b84 <_malloc_r>
 8008956:	6028      	str	r0, [r5, #0]
 8008958:	6128      	str	r0, [r5, #16]
 800895a:	b920      	cbnz	r0, 8008966 <_svfiprintf_r+0x2e>
 800895c:	230c      	movs	r3, #12
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008964:	e0d0      	b.n	8008b08 <_svfiprintf_r+0x1d0>
 8008966:	2340      	movs	r3, #64	; 0x40
 8008968:	616b      	str	r3, [r5, #20]
 800896a:	2300      	movs	r3, #0
 800896c:	9309      	str	r3, [sp, #36]	; 0x24
 800896e:	2320      	movs	r3, #32
 8008970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008974:	f8cd 800c 	str.w	r8, [sp, #12]
 8008978:	2330      	movs	r3, #48	; 0x30
 800897a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b20 <_svfiprintf_r+0x1e8>
 800897e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008982:	f04f 0901 	mov.w	r9, #1
 8008986:	4623      	mov	r3, r4
 8008988:	469a      	mov	sl, r3
 800898a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898e:	b10a      	cbz	r2, 8008994 <_svfiprintf_r+0x5c>
 8008990:	2a25      	cmp	r2, #37	; 0x25
 8008992:	d1f9      	bne.n	8008988 <_svfiprintf_r+0x50>
 8008994:	ebba 0b04 	subs.w	fp, sl, r4
 8008998:	d00b      	beq.n	80089b2 <_svfiprintf_r+0x7a>
 800899a:	465b      	mov	r3, fp
 800899c:	4622      	mov	r2, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff ff6f 	bl	8008884 <__ssputs_r>
 80089a6:	3001      	adds	r0, #1
 80089a8:	f000 80a9 	beq.w	8008afe <_svfiprintf_r+0x1c6>
 80089ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ae:	445a      	add	r2, fp
 80089b0:	9209      	str	r2, [sp, #36]	; 0x24
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80a1 	beq.w	8008afe <_svfiprintf_r+0x1c6>
 80089bc:	2300      	movs	r3, #0
 80089be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c6:	f10a 0a01 	add.w	sl, sl, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	9307      	str	r3, [sp, #28]
 80089ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089d2:	931a      	str	r3, [sp, #104]	; 0x68
 80089d4:	4654      	mov	r4, sl
 80089d6:	2205      	movs	r2, #5
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	4850      	ldr	r0, [pc, #320]	; (8008b20 <_svfiprintf_r+0x1e8>)
 80089de:	f7f7 fbff 	bl	80001e0 <memchr>
 80089e2:	9a04      	ldr	r2, [sp, #16]
 80089e4:	b9d8      	cbnz	r0, 8008a1e <_svfiprintf_r+0xe6>
 80089e6:	06d0      	lsls	r0, r2, #27
 80089e8:	bf44      	itt	mi
 80089ea:	2320      	movmi	r3, #32
 80089ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089f0:	0711      	lsls	r1, r2, #28
 80089f2:	bf44      	itt	mi
 80089f4:	232b      	movmi	r3, #43	; 0x2b
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089fa:	f89a 3000 	ldrb.w	r3, [sl]
 80089fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008a00:	d015      	beq.n	8008a2e <_svfiprintf_r+0xf6>
 8008a02:	9a07      	ldr	r2, [sp, #28]
 8008a04:	4654      	mov	r4, sl
 8008a06:	2000      	movs	r0, #0
 8008a08:	f04f 0c0a 	mov.w	ip, #10
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a12:	3b30      	subs	r3, #48	; 0x30
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d94d      	bls.n	8008ab4 <_svfiprintf_r+0x17c>
 8008a18:	b1b0      	cbz	r0, 8008a48 <_svfiprintf_r+0x110>
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	e014      	b.n	8008a48 <_svfiprintf_r+0x110>
 8008a1e:	eba0 0308 	sub.w	r3, r0, r8
 8008a22:	fa09 f303 	lsl.w	r3, r9, r3
 8008a26:	4313      	orrs	r3, r2
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	46a2      	mov	sl, r4
 8008a2c:	e7d2      	b.n	80089d4 <_svfiprintf_r+0x9c>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	1d19      	adds	r1, r3, #4
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	9103      	str	r1, [sp, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfbb      	ittet	lt
 8008a3a:	425b      	neglt	r3, r3
 8008a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a40:	9307      	strge	r3, [sp, #28]
 8008a42:	9307      	strlt	r3, [sp, #28]
 8008a44:	bfb8      	it	lt
 8008a46:	9204      	strlt	r2, [sp, #16]
 8008a48:	7823      	ldrb	r3, [r4, #0]
 8008a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a4c:	d10c      	bne.n	8008a68 <_svfiprintf_r+0x130>
 8008a4e:	7863      	ldrb	r3, [r4, #1]
 8008a50:	2b2a      	cmp	r3, #42	; 0x2a
 8008a52:	d134      	bne.n	8008abe <_svfiprintf_r+0x186>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	1d1a      	adds	r2, r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	9203      	str	r2, [sp, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfb8      	it	lt
 8008a60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a64:	3402      	adds	r4, #2
 8008a66:	9305      	str	r3, [sp, #20]
 8008a68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008b30 <_svfiprintf_r+0x1f8>
 8008a6c:	7821      	ldrb	r1, [r4, #0]
 8008a6e:	2203      	movs	r2, #3
 8008a70:	4650      	mov	r0, sl
 8008a72:	f7f7 fbb5 	bl	80001e0 <memchr>
 8008a76:	b138      	cbz	r0, 8008a88 <_svfiprintf_r+0x150>
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	eba0 000a 	sub.w	r0, r0, sl
 8008a7e:	2240      	movs	r2, #64	; 0x40
 8008a80:	4082      	lsls	r2, r0
 8008a82:	4313      	orrs	r3, r2
 8008a84:	3401      	adds	r4, #1
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8c:	4825      	ldr	r0, [pc, #148]	; (8008b24 <_svfiprintf_r+0x1ec>)
 8008a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a92:	2206      	movs	r2, #6
 8008a94:	f7f7 fba4 	bl	80001e0 <memchr>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d038      	beq.n	8008b0e <_svfiprintf_r+0x1d6>
 8008a9c:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <_svfiprintf_r+0x1f0>)
 8008a9e:	bb1b      	cbnz	r3, 8008ae8 <_svfiprintf_r+0x1b0>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	3307      	adds	r3, #7
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	9303      	str	r3, [sp, #12]
 8008aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aae:	4433      	add	r3, r6
 8008ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab2:	e768      	b.n	8008986 <_svfiprintf_r+0x4e>
 8008ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab8:	460c      	mov	r4, r1
 8008aba:	2001      	movs	r0, #1
 8008abc:	e7a6      	b.n	8008a0c <_svfiprintf_r+0xd4>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	3401      	adds	r4, #1
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f04f 0c0a 	mov.w	ip, #10
 8008aca:	4620      	mov	r0, r4
 8008acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ad0:	3a30      	subs	r2, #48	; 0x30
 8008ad2:	2a09      	cmp	r2, #9
 8008ad4:	d903      	bls.n	8008ade <_svfiprintf_r+0x1a6>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0c6      	beq.n	8008a68 <_svfiprintf_r+0x130>
 8008ada:	9105      	str	r1, [sp, #20]
 8008adc:	e7c4      	b.n	8008a68 <_svfiprintf_r+0x130>
 8008ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e7f0      	b.n	8008aca <_svfiprintf_r+0x192>
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <_svfiprintf_r+0x1f4>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7fe fb5a 	bl	80071ac <_printf_float>
 8008af8:	1c42      	adds	r2, r0, #1
 8008afa:	4606      	mov	r6, r0
 8008afc:	d1d6      	bne.n	8008aac <_svfiprintf_r+0x174>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	065b      	lsls	r3, r3, #25
 8008b02:	f53f af2d 	bmi.w	8008960 <_svfiprintf_r+0x28>
 8008b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b08:	b01d      	add	sp, #116	; 0x74
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	ab03      	add	r3, sp, #12
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	462a      	mov	r2, r5
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <_svfiprintf_r+0x1f4>)
 8008b16:	a904      	add	r1, sp, #16
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7fe fdeb 	bl	80076f4 <_printf_i>
 8008b1e:	e7eb      	b.n	8008af8 <_svfiprintf_r+0x1c0>
 8008b20:	0800a681 	.word	0x0800a681
 8008b24:	0800a68b 	.word	0x0800a68b
 8008b28:	080071ad 	.word	0x080071ad
 8008b2c:	08008885 	.word	0x08008885
 8008b30:	0800a687 	.word	0x0800a687

08008b34 <malloc>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <malloc+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f000 b823 	b.w	8008b84 <_malloc_r>
 8008b3e:	bf00      	nop
 8008b40:	200000c8 	.word	0x200000c8

08008b44 <sbrk_aligned>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	4e0e      	ldr	r6, [pc, #56]	; (8008b80 <sbrk_aligned+0x3c>)
 8008b48:	460c      	mov	r4, r1
 8008b4a:	6831      	ldr	r1, [r6, #0]
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	b911      	cbnz	r1, 8008b56 <sbrk_aligned+0x12>
 8008b50:	f000 fd8e 	bl	8009670 <_sbrk_r>
 8008b54:	6030      	str	r0, [r6, #0]
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 fd89 	bl	8009670 <_sbrk_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	d00a      	beq.n	8008b78 <sbrk_aligned+0x34>
 8008b62:	1cc4      	adds	r4, r0, #3
 8008b64:	f024 0403 	bic.w	r4, r4, #3
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d007      	beq.n	8008b7c <sbrk_aligned+0x38>
 8008b6c:	1a21      	subs	r1, r4, r0
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 fd7e 	bl	8009670 <_sbrk_r>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d101      	bne.n	8008b7c <sbrk_aligned+0x38>
 8008b78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	200015c0 	.word	0x200015c0

08008b84 <_malloc_r>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	1ccd      	adds	r5, r1, #3
 8008b8a:	f025 0503 	bic.w	r5, r5, #3
 8008b8e:	3508      	adds	r5, #8
 8008b90:	2d0c      	cmp	r5, #12
 8008b92:	bf38      	it	cc
 8008b94:	250c      	movcc	r5, #12
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	4607      	mov	r7, r0
 8008b9a:	db01      	blt.n	8008ba0 <_malloc_r+0x1c>
 8008b9c:	42a9      	cmp	r1, r5
 8008b9e:	d905      	bls.n	8008bac <_malloc_r+0x28>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c80 <_malloc_r+0xfc>
 8008bb0:	f000 f916 	bl	8008de0 <__malloc_lock>
 8008bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb8:	461c      	mov	r4, r3
 8008bba:	bb5c      	cbnz	r4, 8008c14 <_malloc_r+0x90>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f7ff ffc0 	bl	8008b44 <sbrk_aligned>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	d155      	bne.n	8008c76 <_malloc_r+0xf2>
 8008bca:	f8d8 4000 	ldr.w	r4, [r8]
 8008bce:	4626      	mov	r6, r4
 8008bd0:	2e00      	cmp	r6, #0
 8008bd2:	d145      	bne.n	8008c60 <_malloc_r+0xdc>
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d048      	beq.n	8008c6a <_malloc_r+0xe6>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4638      	mov	r0, r7
 8008bde:	eb04 0903 	add.w	r9, r4, r3
 8008be2:	f000 fd45 	bl	8009670 <_sbrk_r>
 8008be6:	4581      	cmp	r9, r0
 8008be8:	d13f      	bne.n	8008c6a <_malloc_r+0xe6>
 8008bea:	6821      	ldr	r1, [r4, #0]
 8008bec:	1a6d      	subs	r5, r5, r1
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff ffa7 	bl	8008b44 <sbrk_aligned>
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d037      	beq.n	8008c6a <_malloc_r+0xe6>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	442b      	add	r3, r5
 8008bfe:	6023      	str	r3, [r4, #0]
 8008c00:	f8d8 3000 	ldr.w	r3, [r8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d038      	beq.n	8008c7a <_malloc_r+0xf6>
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	42a2      	cmp	r2, r4
 8008c0c:	d12b      	bne.n	8008c66 <_malloc_r+0xe2>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	e00f      	b.n	8008c34 <_malloc_r+0xb0>
 8008c14:	6822      	ldr	r2, [r4, #0]
 8008c16:	1b52      	subs	r2, r2, r5
 8008c18:	d41f      	bmi.n	8008c5a <_malloc_r+0xd6>
 8008c1a:	2a0b      	cmp	r2, #11
 8008c1c:	d917      	bls.n	8008c4e <_malloc_r+0xca>
 8008c1e:	1961      	adds	r1, r4, r5
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	6025      	str	r5, [r4, #0]
 8008c24:	bf18      	it	ne
 8008c26:	6059      	strne	r1, [r3, #4]
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	bf08      	it	eq
 8008c2c:	f8c8 1000 	streq.w	r1, [r8]
 8008c30:	5162      	str	r2, [r4, r5]
 8008c32:	604b      	str	r3, [r1, #4]
 8008c34:	4638      	mov	r0, r7
 8008c36:	f104 060b 	add.w	r6, r4, #11
 8008c3a:	f000 f8d7 	bl	8008dec <__malloc_unlock>
 8008c3e:	f026 0607 	bic.w	r6, r6, #7
 8008c42:	1d23      	adds	r3, r4, #4
 8008c44:	1af2      	subs	r2, r6, r3
 8008c46:	d0ae      	beq.n	8008ba6 <_malloc_r+0x22>
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	50a3      	str	r3, [r4, r2]
 8008c4c:	e7ab      	b.n	8008ba6 <_malloc_r+0x22>
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	6862      	ldr	r2, [r4, #4]
 8008c52:	d1dd      	bne.n	8008c10 <_malloc_r+0x8c>
 8008c54:	f8c8 2000 	str.w	r2, [r8]
 8008c58:	e7ec      	b.n	8008c34 <_malloc_r+0xb0>
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	6864      	ldr	r4, [r4, #4]
 8008c5e:	e7ac      	b.n	8008bba <_malloc_r+0x36>
 8008c60:	4634      	mov	r4, r6
 8008c62:	6876      	ldr	r6, [r6, #4]
 8008c64:	e7b4      	b.n	8008bd0 <_malloc_r+0x4c>
 8008c66:	4613      	mov	r3, r2
 8008c68:	e7cc      	b.n	8008c04 <_malloc_r+0x80>
 8008c6a:	230c      	movs	r3, #12
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f000 f8bc 	bl	8008dec <__malloc_unlock>
 8008c74:	e797      	b.n	8008ba6 <_malloc_r+0x22>
 8008c76:	6025      	str	r5, [r4, #0]
 8008c78:	e7dc      	b.n	8008c34 <_malloc_r+0xb0>
 8008c7a:	605b      	str	r3, [r3, #4]
 8008c7c:	deff      	udf	#255	; 0xff
 8008c7e:	bf00      	nop
 8008c80:	200015bc 	.word	0x200015bc

08008c84 <__sflush_r>:
 8008c84:	898a      	ldrh	r2, [r1, #12]
 8008c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	0710      	lsls	r0, r2, #28
 8008c8e:	460c      	mov	r4, r1
 8008c90:	d458      	bmi.n	8008d44 <__sflush_r+0xc0>
 8008c92:	684b      	ldr	r3, [r1, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc05      	bgt.n	8008ca4 <__sflush_r+0x20>
 8008c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dc02      	bgt.n	8008ca4 <__sflush_r+0x20>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	d0f9      	beq.n	8008c9e <__sflush_r+0x1a>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cb0:	682f      	ldr	r7, [r5, #0]
 8008cb2:	6a21      	ldr	r1, [r4, #32]
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	d032      	beq.n	8008d1e <__sflush_r+0x9a>
 8008cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	075a      	lsls	r2, r3, #29
 8008cbe:	d505      	bpl.n	8008ccc <__sflush_r+0x48>
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cc6:	b10b      	cbz	r3, 8008ccc <__sflush_r+0x48>
 8008cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cca:	1ac0      	subs	r0, r0, r3
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cd2:	6a21      	ldr	r1, [r4, #32]
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	d106      	bne.n	8008cec <__sflush_r+0x68>
 8008cde:	6829      	ldr	r1, [r5, #0]
 8008ce0:	291d      	cmp	r1, #29
 8008ce2:	d82b      	bhi.n	8008d3c <__sflush_r+0xb8>
 8008ce4:	4a29      	ldr	r2, [pc, #164]	; (8008d8c <__sflush_r+0x108>)
 8008ce6:	410a      	asrs	r2, r1
 8008ce8:	07d6      	lsls	r6, r2, #31
 8008cea:	d427      	bmi.n	8008d3c <__sflush_r+0xb8>
 8008cec:	2200      	movs	r2, #0
 8008cee:	6062      	str	r2, [r4, #4]
 8008cf0:	04d9      	lsls	r1, r3, #19
 8008cf2:	6922      	ldr	r2, [r4, #16]
 8008cf4:	6022      	str	r2, [r4, #0]
 8008cf6:	d504      	bpl.n	8008d02 <__sflush_r+0x7e>
 8008cf8:	1c42      	adds	r2, r0, #1
 8008cfa:	d101      	bne.n	8008d00 <__sflush_r+0x7c>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b903      	cbnz	r3, 8008d02 <__sflush_r+0x7e>
 8008d00:	6560      	str	r0, [r4, #84]	; 0x54
 8008d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d04:	602f      	str	r7, [r5, #0]
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d0c9      	beq.n	8008c9e <__sflush_r+0x1a>
 8008d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d002      	beq.n	8008d18 <__sflush_r+0x94>
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 fd02 	bl	800971c <_free_r>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8008d1c:	e7c0      	b.n	8008ca0 <__sflush_r+0x1c>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	1c41      	adds	r1, r0, #1
 8008d26:	d1c8      	bne.n	8008cba <__sflush_r+0x36>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0c5      	beq.n	8008cba <__sflush_r+0x36>
 8008d2e:	2b1d      	cmp	r3, #29
 8008d30:	d001      	beq.n	8008d36 <__sflush_r+0xb2>
 8008d32:	2b16      	cmp	r3, #22
 8008d34:	d101      	bne.n	8008d3a <__sflush_r+0xb6>
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	e7b1      	b.n	8008c9e <__sflush_r+0x1a>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	e7ad      	b.n	8008ca0 <__sflush_r+0x1c>
 8008d44:	690f      	ldr	r7, [r1, #16]
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	d0a9      	beq.n	8008c9e <__sflush_r+0x1a>
 8008d4a:	0793      	lsls	r3, r2, #30
 8008d4c:	680e      	ldr	r6, [r1, #0]
 8008d4e:	bf08      	it	eq
 8008d50:	694b      	ldreq	r3, [r1, #20]
 8008d52:	600f      	str	r7, [r1, #0]
 8008d54:	bf18      	it	ne
 8008d56:	2300      	movne	r3, #0
 8008d58:	eba6 0807 	sub.w	r8, r6, r7
 8008d5c:	608b      	str	r3, [r1, #8]
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	dd9c      	ble.n	8008c9e <__sflush_r+0x1a>
 8008d64:	6a21      	ldr	r1, [r4, #32]
 8008d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d68:	4643      	mov	r3, r8
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b0      	blx	r6
 8008d70:	2800      	cmp	r0, #0
 8008d72:	dc06      	bgt.n	8008d82 <__sflush_r+0xfe>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d80:	e78e      	b.n	8008ca0 <__sflush_r+0x1c>
 8008d82:	4407      	add	r7, r0
 8008d84:	eba8 0800 	sub.w	r8, r8, r0
 8008d88:	e7e9      	b.n	8008d5e <__sflush_r+0xda>
 8008d8a:	bf00      	nop
 8008d8c:	dfbffffe 	.word	0xdfbffffe

08008d90 <_fflush_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	690b      	ldr	r3, [r1, #16]
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b913      	cbnz	r3, 8008da0 <_fflush_r+0x10>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	b118      	cbz	r0, 8008daa <_fflush_r+0x1a>
 8008da2:	6a03      	ldr	r3, [r0, #32]
 8008da4:	b90b      	cbnz	r3, 8008daa <_fflush_r+0x1a>
 8008da6:	f7fe fe53 	bl	8007a50 <__sinit>
 8008daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0f3      	beq.n	8008d9a <_fflush_r+0xa>
 8008db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db4:	07d0      	lsls	r0, r2, #31
 8008db6:	d404      	bmi.n	8008dc2 <_fflush_r+0x32>
 8008db8:	0599      	lsls	r1, r3, #22
 8008dba:	d402      	bmi.n	8008dc2 <_fflush_r+0x32>
 8008dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dbe:	f7fe fed4 	bl	8007b6a <__retarget_lock_acquire_recursive>
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f7ff ff5d 	bl	8008c84 <__sflush_r>
 8008dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dcc:	07da      	lsls	r2, r3, #31
 8008dce:	4605      	mov	r5, r0
 8008dd0:	d4e4      	bmi.n	8008d9c <_fflush_r+0xc>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	059b      	lsls	r3, r3, #22
 8008dd6:	d4e1      	bmi.n	8008d9c <_fflush_r+0xc>
 8008dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dda:	f7fe fec7 	bl	8007b6c <__retarget_lock_release_recursive>
 8008dde:	e7dd      	b.n	8008d9c <_fflush_r+0xc>

08008de0 <__malloc_lock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__malloc_lock+0x8>)
 8008de2:	f7fe bec2 	b.w	8007b6a <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	200015b8 	.word	0x200015b8

08008dec <__malloc_unlock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__malloc_unlock+0x8>)
 8008dee:	f7fe bebd 	b.w	8007b6c <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	200015b8 	.word	0x200015b8

08008df8 <_Balloc>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	69c6      	ldr	r6, [r0, #28]
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	b976      	cbnz	r6, 8008e20 <_Balloc+0x28>
 8008e02:	2010      	movs	r0, #16
 8008e04:	f7ff fe96 	bl	8008b34 <malloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	61e0      	str	r0, [r4, #28]
 8008e0c:	b920      	cbnz	r0, 8008e18 <_Balloc+0x20>
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <_Balloc+0x78>)
 8008e10:	4818      	ldr	r0, [pc, #96]	; (8008e74 <_Balloc+0x7c>)
 8008e12:	216b      	movs	r1, #107	; 0x6b
 8008e14:	f000 fc4e 	bl	80096b4 <__assert_func>
 8008e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e1c:	6006      	str	r6, [r0, #0]
 8008e1e:	60c6      	str	r6, [r0, #12]
 8008e20:	69e6      	ldr	r6, [r4, #28]
 8008e22:	68f3      	ldr	r3, [r6, #12]
 8008e24:	b183      	cbz	r3, 8008e48 <_Balloc+0x50>
 8008e26:	69e3      	ldr	r3, [r4, #28]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e2e:	b9b8      	cbnz	r0, 8008e60 <_Balloc+0x68>
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f605 	lsl.w	r6, r1, r5
 8008e36:	1d72      	adds	r2, r6, #5
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fc58 	bl	80096f0 <_calloc_r>
 8008e40:	b160      	cbz	r0, 8008e5c <_Balloc+0x64>
 8008e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e46:	e00e      	b.n	8008e66 <_Balloc+0x6e>
 8008e48:	2221      	movs	r2, #33	; 0x21
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fc4f 	bl	80096f0 <_calloc_r>
 8008e52:	69e3      	ldr	r3, [r4, #28]
 8008e54:	60f0      	str	r0, [r6, #12]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e4      	bne.n	8008e26 <_Balloc+0x2e>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	6802      	ldr	r2, [r0, #0]
 8008e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e66:	2300      	movs	r3, #0
 8008e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e6c:	e7f7      	b.n	8008e5e <_Balloc+0x66>
 8008e6e:	bf00      	nop
 8008e70:	0800a601 	.word	0x0800a601
 8008e74:	0800a692 	.word	0x0800a692

08008e78 <_Bfree>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	69c6      	ldr	r6, [r0, #28]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b976      	cbnz	r6, 8008ea0 <_Bfree+0x28>
 8008e82:	2010      	movs	r0, #16
 8008e84:	f7ff fe56 	bl	8008b34 <malloc>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	61e8      	str	r0, [r5, #28]
 8008e8c:	b920      	cbnz	r0, 8008e98 <_Bfree+0x20>
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <_Bfree+0x3c>)
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <_Bfree+0x40>)
 8008e92:	218f      	movs	r1, #143	; 0x8f
 8008e94:	f000 fc0e 	bl	80096b4 <__assert_func>
 8008e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e9c:	6006      	str	r6, [r0, #0]
 8008e9e:	60c6      	str	r6, [r0, #12]
 8008ea0:	b13c      	cbz	r4, 8008eb2 <_Bfree+0x3a>
 8008ea2:	69eb      	ldr	r3, [r5, #28]
 8008ea4:	6862      	ldr	r2, [r4, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eac:	6021      	str	r1, [r4, #0]
 8008eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0800a601 	.word	0x0800a601
 8008eb8:	0800a692 	.word	0x0800a692

08008ebc <__multadd>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	690d      	ldr	r5, [r1, #16]
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	461e      	mov	r6, r3
 8008ec8:	f101 0c14 	add.w	ip, r1, #20
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f8dc 3000 	ldr.w	r3, [ip]
 8008ed2:	b299      	uxth	r1, r3
 8008ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ed8:	0c1e      	lsrs	r6, r3, #16
 8008eda:	0c0b      	lsrs	r3, r1, #16
 8008edc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ee0:	b289      	uxth	r1, r1
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ee8:	4285      	cmp	r5, r0
 8008eea:	f84c 1b04 	str.w	r1, [ip], #4
 8008eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ef2:	dcec      	bgt.n	8008ece <__multadd+0x12>
 8008ef4:	b30e      	cbz	r6, 8008f3a <__multadd+0x7e>
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dc19      	bgt.n	8008f30 <__multadd+0x74>
 8008efc:	6861      	ldr	r1, [r4, #4]
 8008efe:	4638      	mov	r0, r7
 8008f00:	3101      	adds	r1, #1
 8008f02:	f7ff ff79 	bl	8008df8 <_Balloc>
 8008f06:	4680      	mov	r8, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__multadd+0x5a>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <__multadd+0x84>)
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <__multadd+0x88>)
 8008f10:	21ba      	movs	r1, #186	; 0xba
 8008f12:	f000 fbcf 	bl	80096b4 <__assert_func>
 8008f16:	6922      	ldr	r2, [r4, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	f104 010c 	add.w	r1, r4, #12
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	300c      	adds	r0, #12
 8008f22:	f7fe fe24 	bl	8007b6e <memcpy>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <_Bfree>
 8008f2e:	4644      	mov	r4, r8
 8008f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f34:	3501      	adds	r5, #1
 8008f36:	615e      	str	r6, [r3, #20]
 8008f38:	6125      	str	r5, [r4, #16]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	0800a670 	.word	0x0800a670
 8008f44:	0800a692 	.word	0x0800a692

08008f48 <__hi0bits>:
 8008f48:	0c03      	lsrs	r3, r0, #16
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	b9d3      	cbnz	r3, 8008f84 <__hi0bits+0x3c>
 8008f4e:	0400      	lsls	r0, r0, #16
 8008f50:	2310      	movs	r3, #16
 8008f52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f56:	bf04      	itt	eq
 8008f58:	0200      	lsleq	r0, r0, #8
 8008f5a:	3308      	addeq	r3, #8
 8008f5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f60:	bf04      	itt	eq
 8008f62:	0100      	lsleq	r0, r0, #4
 8008f64:	3304      	addeq	r3, #4
 8008f66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f6a:	bf04      	itt	eq
 8008f6c:	0080      	lsleq	r0, r0, #2
 8008f6e:	3302      	addeq	r3, #2
 8008f70:	2800      	cmp	r0, #0
 8008f72:	db05      	blt.n	8008f80 <__hi0bits+0x38>
 8008f74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f78:	f103 0301 	add.w	r3, r3, #1
 8008f7c:	bf08      	it	eq
 8008f7e:	2320      	moveq	r3, #32
 8008f80:	4618      	mov	r0, r3
 8008f82:	4770      	bx	lr
 8008f84:	2300      	movs	r3, #0
 8008f86:	e7e4      	b.n	8008f52 <__hi0bits+0xa>

08008f88 <__lo0bits>:
 8008f88:	6803      	ldr	r3, [r0, #0]
 8008f8a:	f013 0207 	ands.w	r2, r3, #7
 8008f8e:	d00c      	beq.n	8008faa <__lo0bits+0x22>
 8008f90:	07d9      	lsls	r1, r3, #31
 8008f92:	d422      	bmi.n	8008fda <__lo0bits+0x52>
 8008f94:	079a      	lsls	r2, r3, #30
 8008f96:	bf49      	itett	mi
 8008f98:	085b      	lsrmi	r3, r3, #1
 8008f9a:	089b      	lsrpl	r3, r3, #2
 8008f9c:	6003      	strmi	r3, [r0, #0]
 8008f9e:	2201      	movmi	r2, #1
 8008fa0:	bf5c      	itt	pl
 8008fa2:	6003      	strpl	r3, [r0, #0]
 8008fa4:	2202      	movpl	r2, #2
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4770      	bx	lr
 8008faa:	b299      	uxth	r1, r3
 8008fac:	b909      	cbnz	r1, 8008fb2 <__lo0bits+0x2a>
 8008fae:	0c1b      	lsrs	r3, r3, #16
 8008fb0:	2210      	movs	r2, #16
 8008fb2:	b2d9      	uxtb	r1, r3
 8008fb4:	b909      	cbnz	r1, 8008fba <__lo0bits+0x32>
 8008fb6:	3208      	adds	r2, #8
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	0719      	lsls	r1, r3, #28
 8008fbc:	bf04      	itt	eq
 8008fbe:	091b      	lsreq	r3, r3, #4
 8008fc0:	3204      	addeq	r2, #4
 8008fc2:	0799      	lsls	r1, r3, #30
 8008fc4:	bf04      	itt	eq
 8008fc6:	089b      	lsreq	r3, r3, #2
 8008fc8:	3202      	addeq	r2, #2
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d403      	bmi.n	8008fd6 <__lo0bits+0x4e>
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	f102 0201 	add.w	r2, r2, #1
 8008fd4:	d003      	beq.n	8008fde <__lo0bits+0x56>
 8008fd6:	6003      	str	r3, [r0, #0]
 8008fd8:	e7e5      	b.n	8008fa6 <__lo0bits+0x1e>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	e7e3      	b.n	8008fa6 <__lo0bits+0x1e>
 8008fde:	2220      	movs	r2, #32
 8008fe0:	e7e1      	b.n	8008fa6 <__lo0bits+0x1e>
	...

08008fe4 <__i2b>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	2101      	movs	r1, #1
 8008fea:	f7ff ff05 	bl	8008df8 <_Balloc>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	b928      	cbnz	r0, 8008ffe <__i2b+0x1a>
 8008ff2:	4b05      	ldr	r3, [pc, #20]	; (8009008 <__i2b+0x24>)
 8008ff4:	4805      	ldr	r0, [pc, #20]	; (800900c <__i2b+0x28>)
 8008ff6:	f240 1145 	movw	r1, #325	; 0x145
 8008ffa:	f000 fb5b 	bl	80096b4 <__assert_func>
 8008ffe:	2301      	movs	r3, #1
 8009000:	6144      	str	r4, [r0, #20]
 8009002:	6103      	str	r3, [r0, #16]
 8009004:	bd10      	pop	{r4, pc}
 8009006:	bf00      	nop
 8009008:	0800a670 	.word	0x0800a670
 800900c:	0800a692 	.word	0x0800a692

08009010 <__multiply>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	4691      	mov	r9, r2
 8009016:	690a      	ldr	r2, [r1, #16]
 8009018:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800901c:	429a      	cmp	r2, r3
 800901e:	bfb8      	it	lt
 8009020:	460b      	movlt	r3, r1
 8009022:	460c      	mov	r4, r1
 8009024:	bfbc      	itt	lt
 8009026:	464c      	movlt	r4, r9
 8009028:	4699      	movlt	r9, r3
 800902a:	6927      	ldr	r7, [r4, #16]
 800902c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	6861      	ldr	r1, [r4, #4]
 8009034:	eb07 060a 	add.w	r6, r7, sl
 8009038:	42b3      	cmp	r3, r6
 800903a:	b085      	sub	sp, #20
 800903c:	bfb8      	it	lt
 800903e:	3101      	addlt	r1, #1
 8009040:	f7ff feda 	bl	8008df8 <_Balloc>
 8009044:	b930      	cbnz	r0, 8009054 <__multiply+0x44>
 8009046:	4602      	mov	r2, r0
 8009048:	4b44      	ldr	r3, [pc, #272]	; (800915c <__multiply+0x14c>)
 800904a:	4845      	ldr	r0, [pc, #276]	; (8009160 <__multiply+0x150>)
 800904c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009050:	f000 fb30 	bl	80096b4 <__assert_func>
 8009054:	f100 0514 	add.w	r5, r0, #20
 8009058:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800905c:	462b      	mov	r3, r5
 800905e:	2200      	movs	r2, #0
 8009060:	4543      	cmp	r3, r8
 8009062:	d321      	bcc.n	80090a8 <__multiply+0x98>
 8009064:	f104 0314 	add.w	r3, r4, #20
 8009068:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800906c:	f109 0314 	add.w	r3, r9, #20
 8009070:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009074:	9202      	str	r2, [sp, #8]
 8009076:	1b3a      	subs	r2, r7, r4
 8009078:	3a15      	subs	r2, #21
 800907a:	f022 0203 	bic.w	r2, r2, #3
 800907e:	3204      	adds	r2, #4
 8009080:	f104 0115 	add.w	r1, r4, #21
 8009084:	428f      	cmp	r7, r1
 8009086:	bf38      	it	cc
 8009088:	2204      	movcc	r2, #4
 800908a:	9201      	str	r2, [sp, #4]
 800908c:	9a02      	ldr	r2, [sp, #8]
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	429a      	cmp	r2, r3
 8009092:	d80c      	bhi.n	80090ae <__multiply+0x9e>
 8009094:	2e00      	cmp	r6, #0
 8009096:	dd03      	ble.n	80090a0 <__multiply+0x90>
 8009098:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05b      	beq.n	8009158 <__multiply+0x148>
 80090a0:	6106      	str	r6, [r0, #16]
 80090a2:	b005      	add	sp, #20
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	f843 2b04 	str.w	r2, [r3], #4
 80090ac:	e7d8      	b.n	8009060 <__multiply+0x50>
 80090ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80090b2:	f1ba 0f00 	cmp.w	sl, #0
 80090b6:	d024      	beq.n	8009102 <__multiply+0xf2>
 80090b8:	f104 0e14 	add.w	lr, r4, #20
 80090bc:	46a9      	mov	r9, r5
 80090be:	f04f 0c00 	mov.w	ip, #0
 80090c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090c6:	f8d9 1000 	ldr.w	r1, [r9]
 80090ca:	fa1f fb82 	uxth.w	fp, r2
 80090ce:	b289      	uxth	r1, r1
 80090d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80090d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090d8:	f8d9 2000 	ldr.w	r2, [r9]
 80090dc:	4461      	add	r1, ip
 80090de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80090e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090f0:	4577      	cmp	r7, lr
 80090f2:	f849 1b04 	str.w	r1, [r9], #4
 80090f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090fa:	d8e2      	bhi.n	80090c2 <__multiply+0xb2>
 80090fc:	9a01      	ldr	r2, [sp, #4]
 80090fe:	f845 c002 	str.w	ip, [r5, r2]
 8009102:	9a03      	ldr	r2, [sp, #12]
 8009104:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009108:	3304      	adds	r3, #4
 800910a:	f1b9 0f00 	cmp.w	r9, #0
 800910e:	d021      	beq.n	8009154 <__multiply+0x144>
 8009110:	6829      	ldr	r1, [r5, #0]
 8009112:	f104 0c14 	add.w	ip, r4, #20
 8009116:	46ae      	mov	lr, r5
 8009118:	f04f 0a00 	mov.w	sl, #0
 800911c:	f8bc b000 	ldrh.w	fp, [ip]
 8009120:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009124:	fb09 220b 	mla	r2, r9, fp, r2
 8009128:	4452      	add	r2, sl
 800912a:	b289      	uxth	r1, r1
 800912c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009130:	f84e 1b04 	str.w	r1, [lr], #4
 8009134:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009138:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800913c:	f8be 1000 	ldrh.w	r1, [lr]
 8009140:	fb09 110a 	mla	r1, r9, sl, r1
 8009144:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009148:	4567      	cmp	r7, ip
 800914a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800914e:	d8e5      	bhi.n	800911c <__multiply+0x10c>
 8009150:	9a01      	ldr	r2, [sp, #4]
 8009152:	50a9      	str	r1, [r5, r2]
 8009154:	3504      	adds	r5, #4
 8009156:	e799      	b.n	800908c <__multiply+0x7c>
 8009158:	3e01      	subs	r6, #1
 800915a:	e79b      	b.n	8009094 <__multiply+0x84>
 800915c:	0800a670 	.word	0x0800a670
 8009160:	0800a692 	.word	0x0800a692

08009164 <__pow5mult>:
 8009164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009168:	4615      	mov	r5, r2
 800916a:	f012 0203 	ands.w	r2, r2, #3
 800916e:	4606      	mov	r6, r0
 8009170:	460f      	mov	r7, r1
 8009172:	d007      	beq.n	8009184 <__pow5mult+0x20>
 8009174:	4c25      	ldr	r4, [pc, #148]	; (800920c <__pow5mult+0xa8>)
 8009176:	3a01      	subs	r2, #1
 8009178:	2300      	movs	r3, #0
 800917a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800917e:	f7ff fe9d 	bl	8008ebc <__multadd>
 8009182:	4607      	mov	r7, r0
 8009184:	10ad      	asrs	r5, r5, #2
 8009186:	d03d      	beq.n	8009204 <__pow5mult+0xa0>
 8009188:	69f4      	ldr	r4, [r6, #28]
 800918a:	b97c      	cbnz	r4, 80091ac <__pow5mult+0x48>
 800918c:	2010      	movs	r0, #16
 800918e:	f7ff fcd1 	bl	8008b34 <malloc>
 8009192:	4602      	mov	r2, r0
 8009194:	61f0      	str	r0, [r6, #28]
 8009196:	b928      	cbnz	r0, 80091a4 <__pow5mult+0x40>
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <__pow5mult+0xac>)
 800919a:	481e      	ldr	r0, [pc, #120]	; (8009214 <__pow5mult+0xb0>)
 800919c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80091a0:	f000 fa88 	bl	80096b4 <__assert_func>
 80091a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091a8:	6004      	str	r4, [r0, #0]
 80091aa:	60c4      	str	r4, [r0, #12]
 80091ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80091b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091b4:	b94c      	cbnz	r4, 80091ca <__pow5mult+0x66>
 80091b6:	f240 2171 	movw	r1, #625	; 0x271
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ff12 	bl	8008fe4 <__i2b>
 80091c0:	2300      	movs	r3, #0
 80091c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091c6:	4604      	mov	r4, r0
 80091c8:	6003      	str	r3, [r0, #0]
 80091ca:	f04f 0900 	mov.w	r9, #0
 80091ce:	07eb      	lsls	r3, r5, #31
 80091d0:	d50a      	bpl.n	80091e8 <__pow5mult+0x84>
 80091d2:	4639      	mov	r1, r7
 80091d4:	4622      	mov	r2, r4
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff ff1a 	bl	8009010 <__multiply>
 80091dc:	4639      	mov	r1, r7
 80091de:	4680      	mov	r8, r0
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff fe49 	bl	8008e78 <_Bfree>
 80091e6:	4647      	mov	r7, r8
 80091e8:	106d      	asrs	r5, r5, #1
 80091ea:	d00b      	beq.n	8009204 <__pow5mult+0xa0>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	b938      	cbnz	r0, 8009200 <__pow5mult+0x9c>
 80091f0:	4622      	mov	r2, r4
 80091f2:	4621      	mov	r1, r4
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff ff0b 	bl	8009010 <__multiply>
 80091fa:	6020      	str	r0, [r4, #0]
 80091fc:	f8c0 9000 	str.w	r9, [r0]
 8009200:	4604      	mov	r4, r0
 8009202:	e7e4      	b.n	80091ce <__pow5mult+0x6a>
 8009204:	4638      	mov	r0, r7
 8009206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920a:	bf00      	nop
 800920c:	0800a7e0 	.word	0x0800a7e0
 8009210:	0800a601 	.word	0x0800a601
 8009214:	0800a692 	.word	0x0800a692

08009218 <__lshift>:
 8009218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	460c      	mov	r4, r1
 800921e:	6849      	ldr	r1, [r1, #4]
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009226:	68a3      	ldr	r3, [r4, #8]
 8009228:	4607      	mov	r7, r0
 800922a:	4691      	mov	r9, r2
 800922c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009230:	f108 0601 	add.w	r6, r8, #1
 8009234:	42b3      	cmp	r3, r6
 8009236:	db0b      	blt.n	8009250 <__lshift+0x38>
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff fddd 	bl	8008df8 <_Balloc>
 800923e:	4605      	mov	r5, r0
 8009240:	b948      	cbnz	r0, 8009256 <__lshift+0x3e>
 8009242:	4602      	mov	r2, r0
 8009244:	4b28      	ldr	r3, [pc, #160]	; (80092e8 <__lshift+0xd0>)
 8009246:	4829      	ldr	r0, [pc, #164]	; (80092ec <__lshift+0xd4>)
 8009248:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800924c:	f000 fa32 	bl	80096b4 <__assert_func>
 8009250:	3101      	adds	r1, #1
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	e7ee      	b.n	8009234 <__lshift+0x1c>
 8009256:	2300      	movs	r3, #0
 8009258:	f100 0114 	add.w	r1, r0, #20
 800925c:	f100 0210 	add.w	r2, r0, #16
 8009260:	4618      	mov	r0, r3
 8009262:	4553      	cmp	r3, sl
 8009264:	db33      	blt.n	80092ce <__lshift+0xb6>
 8009266:	6920      	ldr	r0, [r4, #16]
 8009268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800926c:	f104 0314 	add.w	r3, r4, #20
 8009270:	f019 091f 	ands.w	r9, r9, #31
 8009274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800927c:	d02b      	beq.n	80092d6 <__lshift+0xbe>
 800927e:	f1c9 0e20 	rsb	lr, r9, #32
 8009282:	468a      	mov	sl, r1
 8009284:	2200      	movs	r2, #0
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	fa00 f009 	lsl.w	r0, r0, r9
 800928c:	4310      	orrs	r0, r2
 800928e:	f84a 0b04 	str.w	r0, [sl], #4
 8009292:	f853 2b04 	ldr.w	r2, [r3], #4
 8009296:	459c      	cmp	ip, r3
 8009298:	fa22 f20e 	lsr.w	r2, r2, lr
 800929c:	d8f3      	bhi.n	8009286 <__lshift+0x6e>
 800929e:	ebac 0304 	sub.w	r3, ip, r4
 80092a2:	3b15      	subs	r3, #21
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	3304      	adds	r3, #4
 80092aa:	f104 0015 	add.w	r0, r4, #21
 80092ae:	4584      	cmp	ip, r0
 80092b0:	bf38      	it	cc
 80092b2:	2304      	movcc	r3, #4
 80092b4:	50ca      	str	r2, [r1, r3]
 80092b6:	b10a      	cbz	r2, 80092bc <__lshift+0xa4>
 80092b8:	f108 0602 	add.w	r6, r8, #2
 80092bc:	3e01      	subs	r6, #1
 80092be:	4638      	mov	r0, r7
 80092c0:	612e      	str	r6, [r5, #16]
 80092c2:	4621      	mov	r1, r4
 80092c4:	f7ff fdd8 	bl	8008e78 <_Bfree>
 80092c8:	4628      	mov	r0, r5
 80092ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80092d2:	3301      	adds	r3, #1
 80092d4:	e7c5      	b.n	8009262 <__lshift+0x4a>
 80092d6:	3904      	subs	r1, #4
 80092d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80092e0:	459c      	cmp	ip, r3
 80092e2:	d8f9      	bhi.n	80092d8 <__lshift+0xc0>
 80092e4:	e7ea      	b.n	80092bc <__lshift+0xa4>
 80092e6:	bf00      	nop
 80092e8:	0800a670 	.word	0x0800a670
 80092ec:	0800a692 	.word	0x0800a692

080092f0 <__mcmp>:
 80092f0:	b530      	push	{r4, r5, lr}
 80092f2:	6902      	ldr	r2, [r0, #16]
 80092f4:	690c      	ldr	r4, [r1, #16]
 80092f6:	1b12      	subs	r2, r2, r4
 80092f8:	d10e      	bne.n	8009318 <__mcmp+0x28>
 80092fa:	f100 0314 	add.w	r3, r0, #20
 80092fe:	3114      	adds	r1, #20
 8009300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800930c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009310:	42a5      	cmp	r5, r4
 8009312:	d003      	beq.n	800931c <__mcmp+0x2c>
 8009314:	d305      	bcc.n	8009322 <__mcmp+0x32>
 8009316:	2201      	movs	r2, #1
 8009318:	4610      	mov	r0, r2
 800931a:	bd30      	pop	{r4, r5, pc}
 800931c:	4283      	cmp	r3, r0
 800931e:	d3f3      	bcc.n	8009308 <__mcmp+0x18>
 8009320:	e7fa      	b.n	8009318 <__mcmp+0x28>
 8009322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009326:	e7f7      	b.n	8009318 <__mcmp+0x28>

08009328 <__mdiff>:
 8009328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	460c      	mov	r4, r1
 800932e:	4606      	mov	r6, r0
 8009330:	4611      	mov	r1, r2
 8009332:	4620      	mov	r0, r4
 8009334:	4690      	mov	r8, r2
 8009336:	f7ff ffdb 	bl	80092f0 <__mcmp>
 800933a:	1e05      	subs	r5, r0, #0
 800933c:	d110      	bne.n	8009360 <__mdiff+0x38>
 800933e:	4629      	mov	r1, r5
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff fd59 	bl	8008df8 <_Balloc>
 8009346:	b930      	cbnz	r0, 8009356 <__mdiff+0x2e>
 8009348:	4b3a      	ldr	r3, [pc, #232]	; (8009434 <__mdiff+0x10c>)
 800934a:	4602      	mov	r2, r0
 800934c:	f240 2137 	movw	r1, #567	; 0x237
 8009350:	4839      	ldr	r0, [pc, #228]	; (8009438 <__mdiff+0x110>)
 8009352:	f000 f9af 	bl	80096b4 <__assert_func>
 8009356:	2301      	movs	r3, #1
 8009358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800935c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009360:	bfa4      	itt	ge
 8009362:	4643      	movge	r3, r8
 8009364:	46a0      	movge	r8, r4
 8009366:	4630      	mov	r0, r6
 8009368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800936c:	bfa6      	itte	ge
 800936e:	461c      	movge	r4, r3
 8009370:	2500      	movge	r5, #0
 8009372:	2501      	movlt	r5, #1
 8009374:	f7ff fd40 	bl	8008df8 <_Balloc>
 8009378:	b920      	cbnz	r0, 8009384 <__mdiff+0x5c>
 800937a:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <__mdiff+0x10c>)
 800937c:	4602      	mov	r2, r0
 800937e:	f240 2145 	movw	r1, #581	; 0x245
 8009382:	e7e5      	b.n	8009350 <__mdiff+0x28>
 8009384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009388:	6926      	ldr	r6, [r4, #16]
 800938a:	60c5      	str	r5, [r0, #12]
 800938c:	f104 0914 	add.w	r9, r4, #20
 8009390:	f108 0514 	add.w	r5, r8, #20
 8009394:	f100 0e14 	add.w	lr, r0, #20
 8009398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800939c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093a0:	f108 0210 	add.w	r2, r8, #16
 80093a4:	46f2      	mov	sl, lr
 80093a6:	2100      	movs	r1, #0
 80093a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80093ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093b0:	fa11 f88b 	uxtah	r8, r1, fp
 80093b4:	b299      	uxth	r1, r3
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	eba8 0801 	sub.w	r8, r8, r1
 80093bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093c4:	fa1f f888 	uxth.w	r8, r8
 80093c8:	1419      	asrs	r1, r3, #16
 80093ca:	454e      	cmp	r6, r9
 80093cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093d0:	f84a 3b04 	str.w	r3, [sl], #4
 80093d4:	d8e8      	bhi.n	80093a8 <__mdiff+0x80>
 80093d6:	1b33      	subs	r3, r6, r4
 80093d8:	3b15      	subs	r3, #21
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	3304      	adds	r3, #4
 80093e0:	3415      	adds	r4, #21
 80093e2:	42a6      	cmp	r6, r4
 80093e4:	bf38      	it	cc
 80093e6:	2304      	movcc	r3, #4
 80093e8:	441d      	add	r5, r3
 80093ea:	4473      	add	r3, lr
 80093ec:	469e      	mov	lr, r3
 80093ee:	462e      	mov	r6, r5
 80093f0:	4566      	cmp	r6, ip
 80093f2:	d30e      	bcc.n	8009412 <__mdiff+0xea>
 80093f4:	f10c 0203 	add.w	r2, ip, #3
 80093f8:	1b52      	subs	r2, r2, r5
 80093fa:	f022 0203 	bic.w	r2, r2, #3
 80093fe:	3d03      	subs	r5, #3
 8009400:	45ac      	cmp	ip, r5
 8009402:	bf38      	it	cc
 8009404:	2200      	movcc	r2, #0
 8009406:	4413      	add	r3, r2
 8009408:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800940c:	b17a      	cbz	r2, 800942e <__mdiff+0x106>
 800940e:	6107      	str	r7, [r0, #16]
 8009410:	e7a4      	b.n	800935c <__mdiff+0x34>
 8009412:	f856 8b04 	ldr.w	r8, [r6], #4
 8009416:	fa11 f288 	uxtah	r2, r1, r8
 800941a:	1414      	asrs	r4, r2, #16
 800941c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009420:	b292      	uxth	r2, r2
 8009422:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009426:	f84e 2b04 	str.w	r2, [lr], #4
 800942a:	1421      	asrs	r1, r4, #16
 800942c:	e7e0      	b.n	80093f0 <__mdiff+0xc8>
 800942e:	3f01      	subs	r7, #1
 8009430:	e7ea      	b.n	8009408 <__mdiff+0xe0>
 8009432:	bf00      	nop
 8009434:	0800a670 	.word	0x0800a670
 8009438:	0800a692 	.word	0x0800a692

0800943c <__d2b>:
 800943c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009440:	460f      	mov	r7, r1
 8009442:	2101      	movs	r1, #1
 8009444:	ec59 8b10 	vmov	r8, r9, d0
 8009448:	4616      	mov	r6, r2
 800944a:	f7ff fcd5 	bl	8008df8 <_Balloc>
 800944e:	4604      	mov	r4, r0
 8009450:	b930      	cbnz	r0, 8009460 <__d2b+0x24>
 8009452:	4602      	mov	r2, r0
 8009454:	4b24      	ldr	r3, [pc, #144]	; (80094e8 <__d2b+0xac>)
 8009456:	4825      	ldr	r0, [pc, #148]	; (80094ec <__d2b+0xb0>)
 8009458:	f240 310f 	movw	r1, #783	; 0x30f
 800945c:	f000 f92a 	bl	80096b4 <__assert_func>
 8009460:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009468:	bb2d      	cbnz	r5, 80094b6 <__d2b+0x7a>
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	f1b8 0300 	subs.w	r3, r8, #0
 8009470:	d026      	beq.n	80094c0 <__d2b+0x84>
 8009472:	4668      	mov	r0, sp
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	f7ff fd87 	bl	8008f88 <__lo0bits>
 800947a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800947e:	b1e8      	cbz	r0, 80094bc <__d2b+0x80>
 8009480:	f1c0 0320 	rsb	r3, r0, #32
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	430b      	orrs	r3, r1
 800948a:	40c2      	lsrs	r2, r0
 800948c:	6163      	str	r3, [r4, #20]
 800948e:	9201      	str	r2, [sp, #4]
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	61a3      	str	r3, [r4, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	bf14      	ite	ne
 8009498:	2202      	movne	r2, #2
 800949a:	2201      	moveq	r2, #1
 800949c:	6122      	str	r2, [r4, #16]
 800949e:	b1bd      	cbz	r5, 80094d0 <__d2b+0x94>
 80094a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094a4:	4405      	add	r5, r0
 80094a6:	603d      	str	r5, [r7, #0]
 80094a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	4620      	mov	r0, r4
 80094b0:	b003      	add	sp, #12
 80094b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ba:	e7d6      	b.n	800946a <__d2b+0x2e>
 80094bc:	6161      	str	r1, [r4, #20]
 80094be:	e7e7      	b.n	8009490 <__d2b+0x54>
 80094c0:	a801      	add	r0, sp, #4
 80094c2:	f7ff fd61 	bl	8008f88 <__lo0bits>
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6163      	str	r3, [r4, #20]
 80094ca:	3020      	adds	r0, #32
 80094cc:	2201      	movs	r2, #1
 80094ce:	e7e5      	b.n	800949c <__d2b+0x60>
 80094d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094d8:	6038      	str	r0, [r7, #0]
 80094da:	6918      	ldr	r0, [r3, #16]
 80094dc:	f7ff fd34 	bl	8008f48 <__hi0bits>
 80094e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094e4:	e7e2      	b.n	80094ac <__d2b+0x70>
 80094e6:	bf00      	nop
 80094e8:	0800a670 	.word	0x0800a670
 80094ec:	0800a692 	.word	0x0800a692

080094f0 <__sread>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	460c      	mov	r4, r1
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	f000 f8a8 	bl	800964c <_read_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	bfab      	itete	ge
 8009500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009502:	89a3      	ldrhlt	r3, [r4, #12]
 8009504:	181b      	addge	r3, r3, r0
 8009506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950a:	bfac      	ite	ge
 800950c:	6563      	strge	r3, [r4, #84]	; 0x54
 800950e:	81a3      	strhlt	r3, [r4, #12]
 8009510:	bd10      	pop	{r4, pc}

08009512 <__swrite>:
 8009512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	461f      	mov	r7, r3
 8009518:	898b      	ldrh	r3, [r1, #12]
 800951a:	05db      	lsls	r3, r3, #23
 800951c:	4605      	mov	r5, r0
 800951e:	460c      	mov	r4, r1
 8009520:	4616      	mov	r6, r2
 8009522:	d505      	bpl.n	8009530 <__swrite+0x1e>
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	2302      	movs	r3, #2
 800952a:	2200      	movs	r2, #0
 800952c:	f000 f87c 	bl	8009628 <_lseek_r>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	4632      	mov	r2, r6
 800953e:	463b      	mov	r3, r7
 8009540:	4628      	mov	r0, r5
 8009542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	f000 b8a3 	b.w	8009690 <_write_r>

0800954a <__sseek>:
 800954a:	b510      	push	{r4, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 f869 	bl	8009628 <_lseek_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	bf15      	itete	ne
 800955c:	6560      	strne	r0, [r4, #84]	; 0x54
 800955e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009566:	81a3      	strheq	r3, [r4, #12]
 8009568:	bf18      	it	ne
 800956a:	81a3      	strhne	r3, [r4, #12]
 800956c:	bd10      	pop	{r4, pc}

0800956e <__sclose>:
 800956e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009572:	f000 b849 	b.w	8009608 <_close_r>

08009576 <_realloc_r>:
 8009576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	4680      	mov	r8, r0
 800957c:	4614      	mov	r4, r2
 800957e:	460e      	mov	r6, r1
 8009580:	b921      	cbnz	r1, 800958c <_realloc_r+0x16>
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	4611      	mov	r1, r2
 8009588:	f7ff bafc 	b.w	8008b84 <_malloc_r>
 800958c:	b92a      	cbnz	r2, 800959a <_realloc_r+0x24>
 800958e:	f000 f8c5 	bl	800971c <_free_r>
 8009592:	4625      	mov	r5, r4
 8009594:	4628      	mov	r0, r5
 8009596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959a:	f000 f91d 	bl	80097d8 <_malloc_usable_size_r>
 800959e:	4284      	cmp	r4, r0
 80095a0:	4607      	mov	r7, r0
 80095a2:	d802      	bhi.n	80095aa <_realloc_r+0x34>
 80095a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095a8:	d812      	bhi.n	80095d0 <_realloc_r+0x5a>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4640      	mov	r0, r8
 80095ae:	f7ff fae9 	bl	8008b84 <_malloc_r>
 80095b2:	4605      	mov	r5, r0
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0ed      	beq.n	8009594 <_realloc_r+0x1e>
 80095b8:	42bc      	cmp	r4, r7
 80095ba:	4622      	mov	r2, r4
 80095bc:	4631      	mov	r1, r6
 80095be:	bf28      	it	cs
 80095c0:	463a      	movcs	r2, r7
 80095c2:	f7fe fad4 	bl	8007b6e <memcpy>
 80095c6:	4631      	mov	r1, r6
 80095c8:	4640      	mov	r0, r8
 80095ca:	f000 f8a7 	bl	800971c <_free_r>
 80095ce:	e7e1      	b.n	8009594 <_realloc_r+0x1e>
 80095d0:	4635      	mov	r5, r6
 80095d2:	e7df      	b.n	8009594 <_realloc_r+0x1e>

080095d4 <memmove>:
 80095d4:	4288      	cmp	r0, r1
 80095d6:	b510      	push	{r4, lr}
 80095d8:	eb01 0402 	add.w	r4, r1, r2
 80095dc:	d902      	bls.n	80095e4 <memmove+0x10>
 80095de:	4284      	cmp	r4, r0
 80095e0:	4623      	mov	r3, r4
 80095e2:	d807      	bhi.n	80095f4 <memmove+0x20>
 80095e4:	1e43      	subs	r3, r0, #1
 80095e6:	42a1      	cmp	r1, r4
 80095e8:	d008      	beq.n	80095fc <memmove+0x28>
 80095ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095f2:	e7f8      	b.n	80095e6 <memmove+0x12>
 80095f4:	4402      	add	r2, r0
 80095f6:	4601      	mov	r1, r0
 80095f8:	428a      	cmp	r2, r1
 80095fa:	d100      	bne.n	80095fe <memmove+0x2a>
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009606:	e7f7      	b.n	80095f8 <memmove+0x24>

08009608 <_close_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	; (8009624 <_close_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f9 fee9 	bl	80033ea <_close>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_close_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_close_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	200015c4 	.word	0x200015c4

08009628 <_lseek_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_lseek_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f9 fefe 	bl	8003438 <_lseek>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_lseek_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_lseek_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200015c4 	.word	0x200015c4

0800964c <_read_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_read_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f9 fe8c 	bl	8003378 <_read>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_read_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_read_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	200015c4 	.word	0x200015c4

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	; (800968c <_sbrk_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f9 feea 	bl	8003454 <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	200015c4 	.word	0x200015c4

08009690 <_write_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_write_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f9 fe87 	bl	80033b2 <_write>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_write_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_write_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	200015c4 	.word	0x200015c4

080096b4 <__assert_func>:
 80096b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096b6:	4614      	mov	r4, r2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <__assert_func+0x2c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4605      	mov	r5, r0
 80096c0:	68d8      	ldr	r0, [r3, #12]
 80096c2:	b14c      	cbz	r4, 80096d8 <__assert_func+0x24>
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <__assert_func+0x30>)
 80096c6:	9100      	str	r1, [sp, #0]
 80096c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096cc:	4906      	ldr	r1, [pc, #24]	; (80096e8 <__assert_func+0x34>)
 80096ce:	462b      	mov	r3, r5
 80096d0:	f000 f88a 	bl	80097e8 <fiprintf>
 80096d4:	f000 f8a7 	bl	8009826 <abort>
 80096d8:	4b04      	ldr	r3, [pc, #16]	; (80096ec <__assert_func+0x38>)
 80096da:	461c      	mov	r4, r3
 80096dc:	e7f3      	b.n	80096c6 <__assert_func+0x12>
 80096de:	bf00      	nop
 80096e0:	200000c8 	.word	0x200000c8
 80096e4:	0800a8f7 	.word	0x0800a8f7
 80096e8:	0800a904 	.word	0x0800a904
 80096ec:	0800a932 	.word	0x0800a932

080096f0 <_calloc_r>:
 80096f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096f2:	fba1 2402 	umull	r2, r4, r1, r2
 80096f6:	b94c      	cbnz	r4, 800970c <_calloc_r+0x1c>
 80096f8:	4611      	mov	r1, r2
 80096fa:	9201      	str	r2, [sp, #4]
 80096fc:	f7ff fa42 	bl	8008b84 <_malloc_r>
 8009700:	9a01      	ldr	r2, [sp, #4]
 8009702:	4605      	mov	r5, r0
 8009704:	b930      	cbnz	r0, 8009714 <_calloc_r+0x24>
 8009706:	4628      	mov	r0, r5
 8009708:	b003      	add	sp, #12
 800970a:	bd30      	pop	{r4, r5, pc}
 800970c:	220c      	movs	r2, #12
 800970e:	6002      	str	r2, [r0, #0]
 8009710:	2500      	movs	r5, #0
 8009712:	e7f8      	b.n	8009706 <_calloc_r+0x16>
 8009714:	4621      	mov	r1, r4
 8009716:	f7fe f9f1 	bl	8007afc <memset>
 800971a:	e7f4      	b.n	8009706 <_calloc_r+0x16>

0800971c <_free_r>:
 800971c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800971e:	2900      	cmp	r1, #0
 8009720:	d044      	beq.n	80097ac <_free_r+0x90>
 8009722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009726:	9001      	str	r0, [sp, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f1a1 0404 	sub.w	r4, r1, #4
 800972e:	bfb8      	it	lt
 8009730:	18e4      	addlt	r4, r4, r3
 8009732:	f7ff fb55 	bl	8008de0 <__malloc_lock>
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <_free_r+0x94>)
 8009738:	9801      	ldr	r0, [sp, #4]
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	b933      	cbnz	r3, 800974c <_free_r+0x30>
 800973e:	6063      	str	r3, [r4, #4]
 8009740:	6014      	str	r4, [r2, #0]
 8009742:	b003      	add	sp, #12
 8009744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009748:	f7ff bb50 	b.w	8008dec <__malloc_unlock>
 800974c:	42a3      	cmp	r3, r4
 800974e:	d908      	bls.n	8009762 <_free_r+0x46>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1961      	adds	r1, r4, r5
 8009754:	428b      	cmp	r3, r1
 8009756:	bf01      	itttt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	1949      	addeq	r1, r1, r5
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	e7ed      	b.n	800973e <_free_r+0x22>
 8009762:	461a      	mov	r2, r3
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b10b      	cbz	r3, 800976c <_free_r+0x50>
 8009768:	42a3      	cmp	r3, r4
 800976a:	d9fa      	bls.n	8009762 <_free_r+0x46>
 800976c:	6811      	ldr	r1, [r2, #0]
 800976e:	1855      	adds	r5, r2, r1
 8009770:	42a5      	cmp	r5, r4
 8009772:	d10b      	bne.n	800978c <_free_r+0x70>
 8009774:	6824      	ldr	r4, [r4, #0]
 8009776:	4421      	add	r1, r4
 8009778:	1854      	adds	r4, r2, r1
 800977a:	42a3      	cmp	r3, r4
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	d1e0      	bne.n	8009742 <_free_r+0x26>
 8009780:	681c      	ldr	r4, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	6053      	str	r3, [r2, #4]
 8009786:	440c      	add	r4, r1
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	e7da      	b.n	8009742 <_free_r+0x26>
 800978c:	d902      	bls.n	8009794 <_free_r+0x78>
 800978e:	230c      	movs	r3, #12
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	e7d6      	b.n	8009742 <_free_r+0x26>
 8009794:	6825      	ldr	r5, [r4, #0]
 8009796:	1961      	adds	r1, r4, r5
 8009798:	428b      	cmp	r3, r1
 800979a:	bf04      	itt	eq
 800979c:	6819      	ldreq	r1, [r3, #0]
 800979e:	685b      	ldreq	r3, [r3, #4]
 80097a0:	6063      	str	r3, [r4, #4]
 80097a2:	bf04      	itt	eq
 80097a4:	1949      	addeq	r1, r1, r5
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	6054      	str	r4, [r2, #4]
 80097aa:	e7ca      	b.n	8009742 <_free_r+0x26>
 80097ac:	b003      	add	sp, #12
 80097ae:	bd30      	pop	{r4, r5, pc}
 80097b0:	200015bc 	.word	0x200015bc

080097b4 <__ascii_mbtowc>:
 80097b4:	b082      	sub	sp, #8
 80097b6:	b901      	cbnz	r1, 80097ba <__ascii_mbtowc+0x6>
 80097b8:	a901      	add	r1, sp, #4
 80097ba:	b142      	cbz	r2, 80097ce <__ascii_mbtowc+0x1a>
 80097bc:	b14b      	cbz	r3, 80097d2 <__ascii_mbtowc+0x1e>
 80097be:	7813      	ldrb	r3, [r2, #0]
 80097c0:	600b      	str	r3, [r1, #0]
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	1e10      	subs	r0, r2, #0
 80097c6:	bf18      	it	ne
 80097c8:	2001      	movne	r0, #1
 80097ca:	b002      	add	sp, #8
 80097cc:	4770      	bx	lr
 80097ce:	4610      	mov	r0, r2
 80097d0:	e7fb      	b.n	80097ca <__ascii_mbtowc+0x16>
 80097d2:	f06f 0001 	mvn.w	r0, #1
 80097d6:	e7f8      	b.n	80097ca <__ascii_mbtowc+0x16>

080097d8 <_malloc_usable_size_r>:
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f18      	subs	r0, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfbc      	itt	lt
 80097e2:	580b      	ldrlt	r3, [r1, r0]
 80097e4:	18c0      	addlt	r0, r0, r3
 80097e6:	4770      	bx	lr

080097e8 <fiprintf>:
 80097e8:	b40e      	push	{r1, r2, r3}
 80097ea:	b503      	push	{r0, r1, lr}
 80097ec:	4601      	mov	r1, r0
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <fiprintf+0x20>)
 80097f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f6:	6800      	ldr	r0, [r0, #0]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f000 f845 	bl	8009888 <_vfiprintf_r>
 80097fe:	b002      	add	sp, #8
 8009800:	f85d eb04 	ldr.w	lr, [sp], #4
 8009804:	b003      	add	sp, #12
 8009806:	4770      	bx	lr
 8009808:	200000c8 	.word	0x200000c8

0800980c <__ascii_wctomb>:
 800980c:	b149      	cbz	r1, 8009822 <__ascii_wctomb+0x16>
 800980e:	2aff      	cmp	r2, #255	; 0xff
 8009810:	bf85      	ittet	hi
 8009812:	238a      	movhi	r3, #138	; 0x8a
 8009814:	6003      	strhi	r3, [r0, #0]
 8009816:	700a      	strbls	r2, [r1, #0]
 8009818:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800981c:	bf98      	it	ls
 800981e:	2001      	movls	r0, #1
 8009820:	4770      	bx	lr
 8009822:	4608      	mov	r0, r1
 8009824:	4770      	bx	lr

08009826 <abort>:
 8009826:	b508      	push	{r3, lr}
 8009828:	2006      	movs	r0, #6
 800982a:	f000 fa89 	bl	8009d40 <raise>
 800982e:	2001      	movs	r0, #1
 8009830:	f7f9 fd98 	bl	8003364 <_exit>

08009834 <__sfputc_r>:
 8009834:	6893      	ldr	r3, [r2, #8]
 8009836:	3b01      	subs	r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	b410      	push	{r4}
 800983c:	6093      	str	r3, [r2, #8]
 800983e:	da08      	bge.n	8009852 <__sfputc_r+0x1e>
 8009840:	6994      	ldr	r4, [r2, #24]
 8009842:	42a3      	cmp	r3, r4
 8009844:	db01      	blt.n	800984a <__sfputc_r+0x16>
 8009846:	290a      	cmp	r1, #10
 8009848:	d103      	bne.n	8009852 <__sfputc_r+0x1e>
 800984a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984e:	f000 b935 	b.w	8009abc <__swbuf_r>
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	1c58      	adds	r0, r3, #1
 8009856:	6010      	str	r0, [r2, #0]
 8009858:	7019      	strb	r1, [r3, #0]
 800985a:	4608      	mov	r0, r1
 800985c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009860:	4770      	bx	lr

08009862 <__sfputs_r>:
 8009862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	4614      	mov	r4, r2
 800986a:	18d5      	adds	r5, r2, r3
 800986c:	42ac      	cmp	r4, r5
 800986e:	d101      	bne.n	8009874 <__sfputs_r+0x12>
 8009870:	2000      	movs	r0, #0
 8009872:	e007      	b.n	8009884 <__sfputs_r+0x22>
 8009874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009878:	463a      	mov	r2, r7
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff ffda 	bl	8009834 <__sfputc_r>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d1f3      	bne.n	800986c <__sfputs_r+0xa>
 8009884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009888 <_vfiprintf_r>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	460d      	mov	r5, r1
 800988e:	b09d      	sub	sp, #116	; 0x74
 8009890:	4614      	mov	r4, r2
 8009892:	4698      	mov	r8, r3
 8009894:	4606      	mov	r6, r0
 8009896:	b118      	cbz	r0, 80098a0 <_vfiprintf_r+0x18>
 8009898:	6a03      	ldr	r3, [r0, #32]
 800989a:	b90b      	cbnz	r3, 80098a0 <_vfiprintf_r+0x18>
 800989c:	f7fe f8d8 	bl	8007a50 <__sinit>
 80098a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d405      	bmi.n	80098b2 <_vfiprintf_r+0x2a>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	059a      	lsls	r2, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_vfiprintf_r+0x2a>
 80098ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ae:	f7fe f95c 	bl	8007b6a <__retarget_lock_acquire_recursive>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	071b      	lsls	r3, r3, #28
 80098b6:	d501      	bpl.n	80098bc <_vfiprintf_r+0x34>
 80098b8:	692b      	ldr	r3, [r5, #16]
 80098ba:	b99b      	cbnz	r3, 80098e4 <_vfiprintf_r+0x5c>
 80098bc:	4629      	mov	r1, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	f000 f93a 	bl	8009b38 <__swsetup_r>
 80098c4:	b170      	cbz	r0, 80098e4 <_vfiprintf_r+0x5c>
 80098c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c8:	07dc      	lsls	r4, r3, #31
 80098ca:	d504      	bpl.n	80098d6 <_vfiprintf_r+0x4e>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d0:	b01d      	add	sp, #116	; 0x74
 80098d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	0598      	lsls	r0, r3, #22
 80098da:	d4f7      	bmi.n	80098cc <_vfiprintf_r+0x44>
 80098dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098de:	f7fe f945 	bl	8007b6c <__retarget_lock_release_recursive>
 80098e2:	e7f3      	b.n	80098cc <_vfiprintf_r+0x44>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	2320      	movs	r3, #32
 80098ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f2:	2330      	movs	r3, #48	; 0x30
 80098f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009aa8 <_vfiprintf_r+0x220>
 80098f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098fc:	f04f 0901 	mov.w	r9, #1
 8009900:	4623      	mov	r3, r4
 8009902:	469a      	mov	sl, r3
 8009904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009908:	b10a      	cbz	r2, 800990e <_vfiprintf_r+0x86>
 800990a:	2a25      	cmp	r2, #37	; 0x25
 800990c:	d1f9      	bne.n	8009902 <_vfiprintf_r+0x7a>
 800990e:	ebba 0b04 	subs.w	fp, sl, r4
 8009912:	d00b      	beq.n	800992c <_vfiprintf_r+0xa4>
 8009914:	465b      	mov	r3, fp
 8009916:	4622      	mov	r2, r4
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ffa1 	bl	8009862 <__sfputs_r>
 8009920:	3001      	adds	r0, #1
 8009922:	f000 80a9 	beq.w	8009a78 <_vfiprintf_r+0x1f0>
 8009926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009928:	445a      	add	r2, fp
 800992a:	9209      	str	r2, [sp, #36]	; 0x24
 800992c:	f89a 3000 	ldrb.w	r3, [sl]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80a1 	beq.w	8009a78 <_vfiprintf_r+0x1f0>
 8009936:	2300      	movs	r3, #0
 8009938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800993c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	9307      	str	r3, [sp, #28]
 8009948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800994c:	931a      	str	r3, [sp, #104]	; 0x68
 800994e:	4654      	mov	r4, sl
 8009950:	2205      	movs	r2, #5
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4854      	ldr	r0, [pc, #336]	; (8009aa8 <_vfiprintf_r+0x220>)
 8009958:	f7f6 fc42 	bl	80001e0 <memchr>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	b9d8      	cbnz	r0, 8009998 <_vfiprintf_r+0x110>
 8009960:	06d1      	lsls	r1, r2, #27
 8009962:	bf44      	itt	mi
 8009964:	2320      	movmi	r3, #32
 8009966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996a:	0713      	lsls	r3, r2, #28
 800996c:	bf44      	itt	mi
 800996e:	232b      	movmi	r3, #43	; 0x2b
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009974:	f89a 3000 	ldrb.w	r3, [sl]
 8009978:	2b2a      	cmp	r3, #42	; 0x2a
 800997a:	d015      	beq.n	80099a8 <_vfiprintf_r+0x120>
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	4654      	mov	r4, sl
 8009980:	2000      	movs	r0, #0
 8009982:	f04f 0c0a 	mov.w	ip, #10
 8009986:	4621      	mov	r1, r4
 8009988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800998c:	3b30      	subs	r3, #48	; 0x30
 800998e:	2b09      	cmp	r3, #9
 8009990:	d94d      	bls.n	8009a2e <_vfiprintf_r+0x1a6>
 8009992:	b1b0      	cbz	r0, 80099c2 <_vfiprintf_r+0x13a>
 8009994:	9207      	str	r2, [sp, #28]
 8009996:	e014      	b.n	80099c2 <_vfiprintf_r+0x13a>
 8009998:	eba0 0308 	sub.w	r3, r0, r8
 800999c:	fa09 f303 	lsl.w	r3, r9, r3
 80099a0:	4313      	orrs	r3, r2
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	46a2      	mov	sl, r4
 80099a6:	e7d2      	b.n	800994e <_vfiprintf_r+0xc6>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	1d19      	adds	r1, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9103      	str	r1, [sp, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbb      	ittet	lt
 80099b4:	425b      	neglt	r3, r3
 80099b6:	f042 0202 	orrlt.w	r2, r2, #2
 80099ba:	9307      	strge	r3, [sp, #28]
 80099bc:	9307      	strlt	r3, [sp, #28]
 80099be:	bfb8      	it	lt
 80099c0:	9204      	strlt	r2, [sp, #16]
 80099c2:	7823      	ldrb	r3, [r4, #0]
 80099c4:	2b2e      	cmp	r3, #46	; 0x2e
 80099c6:	d10c      	bne.n	80099e2 <_vfiprintf_r+0x15a>
 80099c8:	7863      	ldrb	r3, [r4, #1]
 80099ca:	2b2a      	cmp	r3, #42	; 0x2a
 80099cc:	d134      	bne.n	8009a38 <_vfiprintf_r+0x1b0>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	1d1a      	adds	r2, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfb8      	it	lt
 80099da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099de:	3402      	adds	r4, #2
 80099e0:	9305      	str	r3, [sp, #20]
 80099e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ab8 <_vfiprintf_r+0x230>
 80099e6:	7821      	ldrb	r1, [r4, #0]
 80099e8:	2203      	movs	r2, #3
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7f6 fbf8 	bl	80001e0 <memchr>
 80099f0:	b138      	cbz	r0, 8009a02 <_vfiprintf_r+0x17a>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	eba0 000a 	sub.w	r0, r0, sl
 80099f8:	2240      	movs	r2, #64	; 0x40
 80099fa:	4082      	lsls	r2, r0
 80099fc:	4313      	orrs	r3, r2
 80099fe:	3401      	adds	r4, #1
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a06:	4829      	ldr	r0, [pc, #164]	; (8009aac <_vfiprintf_r+0x224>)
 8009a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a0c:	2206      	movs	r2, #6
 8009a0e:	f7f6 fbe7 	bl	80001e0 <memchr>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d03f      	beq.n	8009a96 <_vfiprintf_r+0x20e>
 8009a16:	4b26      	ldr	r3, [pc, #152]	; (8009ab0 <_vfiprintf_r+0x228>)
 8009a18:	bb1b      	cbnz	r3, 8009a62 <_vfiprintf_r+0x1da>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	3307      	adds	r3, #7
 8009a1e:	f023 0307 	bic.w	r3, r3, #7
 8009a22:	3308      	adds	r3, #8
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a28:	443b      	add	r3, r7
 8009a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2c:	e768      	b.n	8009900 <_vfiprintf_r+0x78>
 8009a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a32:	460c      	mov	r4, r1
 8009a34:	2001      	movs	r0, #1
 8009a36:	e7a6      	b.n	8009986 <_vfiprintf_r+0xfe>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	3401      	adds	r4, #1
 8009a3c:	9305      	str	r3, [sp, #20]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f04f 0c0a 	mov.w	ip, #10
 8009a44:	4620      	mov	r0, r4
 8009a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4a:	3a30      	subs	r2, #48	; 0x30
 8009a4c:	2a09      	cmp	r2, #9
 8009a4e:	d903      	bls.n	8009a58 <_vfiprintf_r+0x1d0>
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0c6      	beq.n	80099e2 <_vfiprintf_r+0x15a>
 8009a54:	9105      	str	r1, [sp, #20]
 8009a56:	e7c4      	b.n	80099e2 <_vfiprintf_r+0x15a>
 8009a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e7f0      	b.n	8009a44 <_vfiprintf_r+0x1bc>
 8009a62:	ab03      	add	r3, sp, #12
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	462a      	mov	r2, r5
 8009a68:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <_vfiprintf_r+0x22c>)
 8009a6a:	a904      	add	r1, sp, #16
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7fd fb9d 	bl	80071ac <_printf_float>
 8009a72:	4607      	mov	r7, r0
 8009a74:	1c78      	adds	r0, r7, #1
 8009a76:	d1d6      	bne.n	8009a26 <_vfiprintf_r+0x19e>
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x202>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x202>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7fe f871 	bl	8007b6c <__retarget_lock_release_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	065b      	lsls	r3, r3, #25
 8009a8e:	f53f af1d 	bmi.w	80098cc <_vfiprintf_r+0x44>
 8009a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a94:	e71c      	b.n	80098d0 <_vfiprintf_r+0x48>
 8009a96:	ab03      	add	r3, sp, #12
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <_vfiprintf_r+0x22c>)
 8009a9e:	a904      	add	r1, sp, #16
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7fd fe27 	bl	80076f4 <_printf_i>
 8009aa6:	e7e4      	b.n	8009a72 <_vfiprintf_r+0x1ea>
 8009aa8:	0800a681 	.word	0x0800a681
 8009aac:	0800a68b 	.word	0x0800a68b
 8009ab0:	080071ad 	.word	0x080071ad
 8009ab4:	08009863 	.word	0x08009863
 8009ab8:	0800a687 	.word	0x0800a687

08009abc <__swbuf_r>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	460e      	mov	r6, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b118      	cbz	r0, 8009ace <__swbuf_r+0x12>
 8009ac6:	6a03      	ldr	r3, [r0, #32]
 8009ac8:	b90b      	cbnz	r3, 8009ace <__swbuf_r+0x12>
 8009aca:	f7fd ffc1 	bl	8007a50 <__sinit>
 8009ace:	69a3      	ldr	r3, [r4, #24]
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	071a      	lsls	r2, r3, #28
 8009ad6:	d525      	bpl.n	8009b24 <__swbuf_r+0x68>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	b31b      	cbz	r3, 8009b24 <__swbuf_r+0x68>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	6922      	ldr	r2, [r4, #16]
 8009ae0:	1a98      	subs	r0, r3, r2
 8009ae2:	6963      	ldr	r3, [r4, #20]
 8009ae4:	b2f6      	uxtb	r6, r6
 8009ae6:	4283      	cmp	r3, r0
 8009ae8:	4637      	mov	r7, r6
 8009aea:	dc04      	bgt.n	8009af6 <__swbuf_r+0x3a>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7ff f94e 	bl	8008d90 <_fflush_r>
 8009af4:	b9e0      	cbnz	r0, 8009b30 <__swbuf_r+0x74>
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	60a3      	str	r3, [r4, #8]
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	6022      	str	r2, [r4, #0]
 8009b02:	701e      	strb	r6, [r3, #0]
 8009b04:	6962      	ldr	r2, [r4, #20]
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d004      	beq.n	8009b16 <__swbuf_r+0x5a>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	07db      	lsls	r3, r3, #31
 8009b10:	d506      	bpl.n	8009b20 <__swbuf_r+0x64>
 8009b12:	2e0a      	cmp	r6, #10
 8009b14:	d104      	bne.n	8009b20 <__swbuf_r+0x64>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff f939 	bl	8008d90 <_fflush_r>
 8009b1e:	b938      	cbnz	r0, 8009b30 <__swbuf_r+0x74>
 8009b20:	4638      	mov	r0, r7
 8009b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b24:	4621      	mov	r1, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 f806 	bl	8009b38 <__swsetup_r>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d0d5      	beq.n	8009adc <__swbuf_r+0x20>
 8009b30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b34:	e7f4      	b.n	8009b20 <__swbuf_r+0x64>
	...

08009b38 <__swsetup_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	; (8009be4 <__swsetup_r+0xac>)
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	460c      	mov	r4, r1
 8009b42:	b118      	cbz	r0, 8009b4c <__swsetup_r+0x14>
 8009b44:	6a03      	ldr	r3, [r0, #32]
 8009b46:	b90b      	cbnz	r3, 8009b4c <__swsetup_r+0x14>
 8009b48:	f7fd ff82 	bl	8007a50 <__sinit>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b52:	0718      	lsls	r0, r3, #28
 8009b54:	d422      	bmi.n	8009b9c <__swsetup_r+0x64>
 8009b56:	06d9      	lsls	r1, r3, #27
 8009b58:	d407      	bmi.n	8009b6a <__swsetup_r+0x32>
 8009b5a:	2309      	movs	r3, #9
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b68:	e034      	b.n	8009bd4 <__swsetup_r+0x9c>
 8009b6a:	0758      	lsls	r0, r3, #29
 8009b6c:	d512      	bpl.n	8009b94 <__swsetup_r+0x5c>
 8009b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b70:	b141      	cbz	r1, 8009b84 <__swsetup_r+0x4c>
 8009b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b76:	4299      	cmp	r1, r3
 8009b78:	d002      	beq.n	8009b80 <__swsetup_r+0x48>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f7ff fdce 	bl	800971c <_free_r>
 8009b80:	2300      	movs	r3, #0
 8009b82:	6363      	str	r3, [r4, #52]	; 0x34
 8009b84:	89a3      	ldrh	r3, [r4, #12]
 8009b86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6063      	str	r3, [r4, #4]
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f043 0308 	orr.w	r3, r3, #8
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	b94b      	cbnz	r3, 8009bb4 <__swsetup_r+0x7c>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009baa:	d003      	beq.n	8009bb4 <__swsetup_r+0x7c>
 8009bac:	4621      	mov	r1, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 f840 	bl	8009c34 <__smakebuf_r>
 8009bb4:	89a0      	ldrh	r0, [r4, #12]
 8009bb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bba:	f010 0301 	ands.w	r3, r0, #1
 8009bbe:	d00a      	beq.n	8009bd6 <__swsetup_r+0x9e>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60a3      	str	r3, [r4, #8]
 8009bc4:	6963      	ldr	r3, [r4, #20]
 8009bc6:	425b      	negs	r3, r3
 8009bc8:	61a3      	str	r3, [r4, #24]
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	b943      	cbnz	r3, 8009be0 <__swsetup_r+0xa8>
 8009bce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bd2:	d1c4      	bne.n	8009b5e <__swsetup_r+0x26>
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	0781      	lsls	r1, r0, #30
 8009bd8:	bf58      	it	pl
 8009bda:	6963      	ldrpl	r3, [r4, #20]
 8009bdc:	60a3      	str	r3, [r4, #8]
 8009bde:	e7f4      	b.n	8009bca <__swsetup_r+0x92>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7f7      	b.n	8009bd4 <__swsetup_r+0x9c>
 8009be4:	200000c8 	.word	0x200000c8

08009be8 <__swhatbuf_r>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	460c      	mov	r4, r1
 8009bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	b096      	sub	sp, #88	; 0x58
 8009bf4:	4615      	mov	r5, r2
 8009bf6:	461e      	mov	r6, r3
 8009bf8:	da0d      	bge.n	8009c16 <__swhatbuf_r+0x2e>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c00:	f04f 0100 	mov.w	r1, #0
 8009c04:	bf0c      	ite	eq
 8009c06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c0a:	2340      	movne	r3, #64	; 0x40
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	6031      	str	r1, [r6, #0]
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	b016      	add	sp, #88	; 0x58
 8009c14:	bd70      	pop	{r4, r5, r6, pc}
 8009c16:	466a      	mov	r2, sp
 8009c18:	f000 f848 	bl	8009cac <_fstat_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	dbec      	blt.n	8009bfa <__swhatbuf_r+0x12>
 8009c20:	9901      	ldr	r1, [sp, #4]
 8009c22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c2a:	4259      	negs	r1, r3
 8009c2c:	4159      	adcs	r1, r3
 8009c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c32:	e7eb      	b.n	8009c0c <__swhatbuf_r+0x24>

08009c34 <__smakebuf_r>:
 8009c34:	898b      	ldrh	r3, [r1, #12]
 8009c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c38:	079d      	lsls	r5, r3, #30
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	d507      	bpl.n	8009c50 <__smakebuf_r+0x1c>
 8009c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	6163      	str	r3, [r4, #20]
 8009c4c:	b002      	add	sp, #8
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	ab01      	add	r3, sp, #4
 8009c52:	466a      	mov	r2, sp
 8009c54:	f7ff ffc8 	bl	8009be8 <__swhatbuf_r>
 8009c58:	9900      	ldr	r1, [sp, #0]
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7fe ff91 	bl	8008b84 <_malloc_r>
 8009c62:	b948      	cbnz	r0, 8009c78 <__smakebuf_r+0x44>
 8009c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c68:	059a      	lsls	r2, r3, #22
 8009c6a:	d4ef      	bmi.n	8009c4c <__smakebuf_r+0x18>
 8009c6c:	f023 0303 	bic.w	r3, r3, #3
 8009c70:	f043 0302 	orr.w	r3, r3, #2
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	e7e3      	b.n	8009c40 <__smakebuf_r+0xc>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	6020      	str	r0, [r4, #0]
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	6163      	str	r3, [r4, #20]
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	6120      	str	r0, [r4, #16]
 8009c8a:	b15b      	cbz	r3, 8009ca4 <__smakebuf_r+0x70>
 8009c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c90:	4630      	mov	r0, r6
 8009c92:	f000 f81d 	bl	8009cd0 <_isatty_r>
 8009c96:	b128      	cbz	r0, 8009ca4 <__smakebuf_r+0x70>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f023 0303 	bic.w	r3, r3, #3
 8009c9e:	f043 0301 	orr.w	r3, r3, #1
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	431d      	orrs	r5, r3
 8009ca8:	81a5      	strh	r5, [r4, #12]
 8009caa:	e7cf      	b.n	8009c4c <__smakebuf_r+0x18>

08009cac <_fstat_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d07      	ldr	r5, [pc, #28]	; (8009ccc <_fstat_r+0x20>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	f7f9 fba2 	bl	8003402 <_fstat>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d102      	bne.n	8009cc8 <_fstat_r+0x1c>
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	b103      	cbz	r3, 8009cc8 <_fstat_r+0x1c>
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	bd38      	pop	{r3, r4, r5, pc}
 8009cca:	bf00      	nop
 8009ccc:	200015c4 	.word	0x200015c4

08009cd0 <_isatty_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d06      	ldr	r5, [pc, #24]	; (8009cec <_isatty_r+0x1c>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	f7f9 fba1 	bl	8003422 <_isatty>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_isatty_r+0x1a>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_isatty_r+0x1a>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	200015c4 	.word	0x200015c4

08009cf0 <_raise_r>:
 8009cf0:	291f      	cmp	r1, #31
 8009cf2:	b538      	push	{r3, r4, r5, lr}
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	d904      	bls.n	8009d04 <_raise_r+0x14>
 8009cfa:	2316      	movs	r3, #22
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009d06:	b112      	cbz	r2, 8009d0e <_raise_r+0x1e>
 8009d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d0c:	b94b      	cbnz	r3, 8009d22 <_raise_r+0x32>
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 f830 	bl	8009d74 <_getpid_r>
 8009d14:	462a      	mov	r2, r5
 8009d16:	4601      	mov	r1, r0
 8009d18:	4620      	mov	r0, r4
 8009d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d1e:	f000 b817 	b.w	8009d50 <_kill_r>
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d00a      	beq.n	8009d3c <_raise_r+0x4c>
 8009d26:	1c59      	adds	r1, r3, #1
 8009d28:	d103      	bne.n	8009d32 <_raise_r+0x42>
 8009d2a:	2316      	movs	r3, #22
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	2001      	movs	r0, #1
 8009d30:	e7e7      	b.n	8009d02 <_raise_r+0x12>
 8009d32:	2400      	movs	r4, #0
 8009d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d38:	4628      	mov	r0, r5
 8009d3a:	4798      	blx	r3
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e7e0      	b.n	8009d02 <_raise_r+0x12>

08009d40 <raise>:
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <raise+0xc>)
 8009d42:	4601      	mov	r1, r0
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f7ff bfd3 	b.w	8009cf0 <_raise_r>
 8009d4a:	bf00      	nop
 8009d4c:	200000c8 	.word	0x200000c8

08009d50 <_kill_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	; (8009d70 <_kill_r+0x20>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	602b      	str	r3, [r5, #0]
 8009d5e:	f7f9 faf1 	bl	8003344 <_kill>
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	d102      	bne.n	8009d6c <_kill_r+0x1c>
 8009d66:	682b      	ldr	r3, [r5, #0]
 8009d68:	b103      	cbz	r3, 8009d6c <_kill_r+0x1c>
 8009d6a:	6023      	str	r3, [r4, #0]
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
 8009d6e:	bf00      	nop
 8009d70:	200015c4 	.word	0x200015c4

08009d74 <_getpid_r>:
 8009d74:	f7f9 bade 	b.w	8003334 <_getpid>

08009d78 <_init>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	bf00      	nop
 8009d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7e:	bc08      	pop	{r3}
 8009d80:	469e      	mov	lr, r3
 8009d82:	4770      	bx	lr

08009d84 <_fini>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr
