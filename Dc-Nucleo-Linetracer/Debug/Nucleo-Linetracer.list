
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c750  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  0800c8f0  0800c8f0  0001c8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7dc  0800d7dc  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7dc  0800d7dc  0001d7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7e4  0800d7e4  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7e4  0800d7e4  0001d7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800d7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045bc  20000288  0800da74  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  0800da74  00024844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e07f  00000000  00000000  000202fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003646  00000000  00000000  0002e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000319c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb5  00000000  00000000  00032a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001685c  00000000  00000000  00033745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001144c  00000000  00000000  00049fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000766a2  00000000  00000000  0005b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054b8  00000000  00000000  000d1a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d6f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8d8 	.word	0x0800c8d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0800c8d8 	.word	0x0800c8d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b984 	b.w	8000ed8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f81a 	bl	8000c10 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__popcountsi2>:
 8000be8:	0843      	lsrs	r3, r0, #1
 8000bea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000bee:	1ac0      	subs	r0, r0, r3
 8000bf0:	0883      	lsrs	r3, r0, #2
 8000bf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000bf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000bfa:	4418      	add	r0, r3
 8000bfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000c04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c0c:	0e00      	lsrs	r0, r0, #24
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14a      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4694      	mov	ip, r2
 8000c24:	d965      	bls.n	8000cf2 <__udivmoddi4+0xe2>
 8000c26:	fab2 f382 	clz	r3, r2
 8000c2a:	b143      	cbz	r3, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c30:	f1c3 0220 	rsb	r2, r3, #32
 8000c34:	409f      	lsls	r7, r3
 8000c36:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3a:	4317      	orrs	r7, r2
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c42:	fa1f f58c 	uxth.w	r5, ip
 8000c46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c4a:	0c22      	lsrs	r2, r4, #16
 8000c4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	fb01 f005 	mul.w	r0, r1, r5
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x62>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c64:	f080 811c 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f240 8119 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4462      	add	r2, ip
 8000c72:	1a12      	subs	r2, r2, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c82:	fb00 f505 	mul.w	r5, r0, r5
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x90>
 8000c8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c92:	f080 8107 	bcs.w	8000ea4 <__udivmoddi4+0x294>
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	f240 8104 	bls.w	8000ea4 <__udivmoddi4+0x294>
 8000c9c:	4464      	add	r4, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11e      	cbz	r6, 8000cb2 <__udivmoddi4+0xa2>
 8000caa:	40dc      	lsrs	r4, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0xbc>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <__udivmoddi4+0x28a>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d149      	bne.n	8000d68 <__udivmoddi4+0x158>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d302      	bcc.n	8000cde <__udivmoddi4+0xce>
 8000cd8:	4282      	cmp	r2, r0
 8000cda:	f200 80f8 	bhi.w	8000ece <__udivmoddi4+0x2be>
 8000cde:	1a84      	subs	r4, r0, r2
 8000ce0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d0e2      	beq.n	8000cb2 <__udivmoddi4+0xa2>
 8000cec:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf0:	e7df      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xe6>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f382 	clz	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d00:	1a8a      	subs	r2, r1, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d10:	fb07 2015 	mls	r0, r7, r5, r2
 8000d14:	0c22      	lsrs	r2, r4, #16
 8000d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d1a:	fb0e f005 	mul.w	r0, lr, r5
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d22:	eb1c 0202 	adds.w	r2, ip, r2
 8000d26:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2b8>
 8000d32:	4645      	mov	r5, r8
 8000d34:	1a12      	subs	r2, r2, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d3c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x14e>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x14c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2c2>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d66:	e79f      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000d68:	f1c1 0720 	rsb	r7, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa05 f401 	lsl.w	r4, r5, r1
 8000d7a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7e:	40fd      	lsrs	r5, r7
 8000d80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d84:	4323      	orrs	r3, r4
 8000d86:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d92:	0c1c      	lsrs	r4, r3, #16
 8000d94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d98:	fb08 f50e 	mul.w	r5, r8, lr
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	fa00 f001 	lsl.w	r0, r0, r1
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2b4>
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2b4>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4464      	add	r4, ip
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	b29d      	uxth	r5, r3
 8000dc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd4:	45a6      	cmp	lr, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2ac>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2ac>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dee:	fba3 9502 	umull	r9, r5, r3, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46ae      	mov	lr, r5
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x29c>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x298>
 8000e00:	b156      	cbz	r6, 8000e18 <__udivmoddi4+0x208>
 8000e02:	ebb0 0208 	subs.w	r2, r0, r8
 8000e06:	eb64 040e 	sbc.w	r4, r4, lr
 8000e0a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0e:	40ca      	lsrs	r2, r1
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	4317      	orrs	r7, r2
 8000e14:	e9c6 7400 	strd	r7, r4, [r6]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	f1c3 0120 	rsb	r1, r3, #32
 8000e24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e28:	fa20 f201 	lsr.w	r2, r0, r1
 8000e2c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e30:	409d      	lsls	r5, r3
 8000e32:	432a      	orrs	r2, r5
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1510 	mls	r5, r7, r0, r1
 8000e44:	0c11      	lsrs	r1, r2, #16
 8000e46:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e4a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4e:	428d      	cmp	r5, r1
 8000e50:	fa04 f403 	lsl.w	r4, r4, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x258>
 8000e56:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e60:	428d      	cmp	r5, r1
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	1b49      	subs	r1, r1, r5
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e70:	fb07 1115 	mls	r1, r7, r5, r1
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	fb05 f10e 	mul.w	r1, r5, lr
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x282>
 8000e80:	eb1c 0202 	adds.w	r2, ip, r2
 8000e84:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8a:	4291      	cmp	r1, r2
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	3d02      	subs	r5, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a52      	subs	r2, r2, r1
 8000e94:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0xfc>
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	e6e6      	b.n	8000c72 <__udivmoddi4+0x62>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	e6fb      	b.n	8000ca0 <__udivmoddi4+0x90>
 8000ea8:	4548      	cmp	r0, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb8:	4645      	mov	r5, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x282>
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x258>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec8:	3d02      	subs	r5, #2
 8000eca:	4462      	add	r2, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e70a      	b.n	8000ce8 <__udivmoddi4+0xd8>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x14e>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001036:	b480      	push	{r7}
 8001038:	b089      	sub	sp, #36	; 0x24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	332c      	adds	r3, #44	; 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800104e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001052:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	fa92 f2a2 	rbit	r2, r2
 800105a:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	40d3      	lsrs	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	211f      	movs	r1, #31
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 011f 	and.w	r1, r3, #31
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	431a      	orrs	r2, r3
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b08d      	sub	sp, #52	; 0x34
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	330c      	adds	r3, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	fa92 f2a2 	rbit	r2, r2
 80010ec:	617a      	str	r2, [r7, #20]
  return result;
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	40d3      	lsrs	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001108:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800110c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	fa91 f1a1 	rbit	r1, r1
 8001114:	61f9      	str	r1, [r7, #28]
  return result;
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	fab1 f181 	clz	r1, r1
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	40cb      	lsrs	r3, r1
 8001120:	2107      	movs	r1, #7
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001130:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001134:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001138:	fa91 f1a1 	rbit	r1, r1
 800113c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800113e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001140:	fab1 f181 	clz	r1, r1
 8001144:	b2c9      	uxtb	r1, r1
 8001146:	40cb      	lsrs	r3, r1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001154:	bf00      	nop
 8001156:	3734      	adds	r7, #52	; 0x34
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f023 0201 	bic.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60da      	str	r2, [r3, #12]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <LL_RCC_HSI_Enable+0x1c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <LL_RCC_HSI_Enable+0x1c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <LL_RCC_HSI_IsReady+0x20>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b02      	cmp	r3, #2
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800

0800122c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <LL_RCC_SetSysClkSource+0x24>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 0203 	bic.w	r2, r3, #3
 8001268:	4904      	ldr	r1, [pc, #16]	; (800127c <LL_RCC_SetSysClkSource+0x24>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40023800 	.word	0x40023800

08001280 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <LL_RCC_GetSysClkSource+0x18>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ac:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fc:	4904      	ldr	r1, [pc, #16]	; (8001310 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40023800 	.word	0x40023800

08001314 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <LL_RCC_SetTIMPrescaler+0x28>)
 800131e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001322:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001326:	4905      	ldr	r1, [pc, #20]	; (800133c <LL_RCC_SetTIMPrescaler+0x28>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40023800 	.word	0x40023800

08001340 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <LL_RCC_PLL_Enable+0x1c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <LL_RCC_PLL_Enable+0x1c>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <LL_RCC_PLL_IsReady+0x24>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800139c:	4013      	ands	r3, r2
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	4311      	orrs	r1, r2
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	0192      	lsls	r2, r2, #6
 80013a8:	430a      	orrs	r2, r1
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013b8:	4904      	ldr	r1, [pc, #16]	; (80013cc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023800 	.word	0x40023800
 80013d0:	ffbf8000 	.word	0xffbf8000

080013d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40023800 	.word	0x40023800

08001404 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023800 	.word	0x40023800

08001434 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <LL_APB2_GRP1_EnableClock+0x2c>)
 800143e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4313      	orrs	r3, r2
 8001446:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <LL_APB2_GRP1_EnableClock+0x2c>)
 800144a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4013      	ands	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40023800 	.word	0x40023800

08001464 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <LL_SYSCFG_SetEXTISource+0x58>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3302      	adds	r3, #2
 8001476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	43db      	mvns	r3, r3
 8001480:	ea02 0103 	and.w	r1, r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	60bb      	str	r3, [r7, #8]
  return result;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	fa03 f202 	lsl.w	r2, r3, r2
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <LL_SYSCFG_SetEXTISource+0x58>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	430a      	orrs	r2, r1
 80014aa:	3302      	adds	r3, #2
 80014ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40013800 	.word	0x40013800

080014c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <LL_FLASH_SetLatency+0x24>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 0207 	bic.w	r2, r3, #7
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <LL_FLASH_SetLatency+0x24>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <LL_FLASH_GetLatency+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40007000 	.word	0x40007000

0800152c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40007000 	.word	0x40007000

08001554 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f023 0210 	bic.w	r2, r3, #16
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0208 	bic.w	r2, r3, #8
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d01c      	beq.n	800160a <LL_TIM_OC_DisableFast+0x4a>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d017      	beq.n	8001606 <LL_TIM_OC_DisableFast+0x46>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d012      	beq.n	8001602 <LL_TIM_OC_DisableFast+0x42>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d00d      	beq.n	80015fe <LL_TIM_OC_DisableFast+0x3e>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e8:	d007      	beq.n	80015fa <LL_TIM_OC_DisableFast+0x3a>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f0:	d101      	bne.n	80015f6 <LL_TIM_OC_DisableFast+0x36>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e00a      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e008      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e006      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_TIM_OC_DisableFast+0x4c>
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3318      	adds	r3, #24
 8001612:	4619      	mov	r1, r3
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LL_TIM_OC_DisableFast+0x84>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	440b      	add	r3, r1
 800161c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4908      	ldr	r1, [pc, #32]	; (8001648 <LL_TIM_OC_DisableFast+0x88>)
 8001626:	5ccb      	ldrb	r3, [r1, r3]
 8001628:	4619      	mov	r1, r3
 800162a:	2304      	movs	r3, #4
 800162c:	408b      	lsls	r3, r1
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	601a      	str	r2, [r3, #0]

}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	0800d1b4 	.word	0x0800d1b4
 8001648:	0800d1bc 	.word	0x0800d1bc

0800164c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d01c      	beq.n	8001696 <LL_TIM_OC_EnablePreload+0x4a>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d017      	beq.n	8001692 <LL_TIM_OC_EnablePreload+0x46>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d012      	beq.n	800168e <LL_TIM_OC_EnablePreload+0x42>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b40      	cmp	r3, #64	; 0x40
 800166c:	d00d      	beq.n	800168a <LL_TIM_OC_EnablePreload+0x3e>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d007      	beq.n	8001686 <LL_TIM_OC_EnablePreload+0x3a>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d101      	bne.n	8001682 <LL_TIM_OC_EnablePreload+0x36>
 800167e:	2305      	movs	r3, #5
 8001680:	e00a      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 8001682:	2306      	movs	r3, #6
 8001684:	e008      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_TIM_OC_EnablePreload+0x4c>
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3318      	adds	r3, #24
 800169e:	4619      	mov	r1, r3
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <LL_TIM_OC_EnablePreload+0x80>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	440b      	add	r3, r1
 80016a8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <LL_TIM_OC_EnablePreload+0x84>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2308      	movs	r3, #8
 80016b8:	408b      	lsls	r3, r1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	0800d1b4 	.word	0x0800d1b4
 80016d0:	0800d1bc 	.word	0x0800d1bc

080016d4 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d01c      	beq.n	8001720 <LL_TIM_IC_SetActiveInput+0x4c>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d017      	beq.n	800171c <LL_TIM_IC_SetActiveInput+0x48>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d012      	beq.n	8001718 <LL_TIM_IC_SetActiveInput+0x44>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	d00d      	beq.n	8001714 <LL_TIM_IC_SetActiveInput+0x40>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016fe:	d007      	beq.n	8001710 <LL_TIM_IC_SetActiveInput+0x3c>
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d101      	bne.n	800170c <LL_TIM_IC_SetActiveInput+0x38>
 8001708:	2305      	movs	r3, #5
 800170a:	e00a      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 800170c:	2306      	movs	r3, #6
 800170e:	e008      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 8001710:	2304      	movs	r3, #4
 8001712:	e006      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 8001714:	2303      	movs	r3, #3
 8001716:	e004      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 8001718:	2302      	movs	r3, #2
 800171a:	e002      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_TIM_IC_SetActiveInput+0x4e>
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3318      	adds	r3, #24
 8001728:	4619      	mov	r1, r3
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LL_TIM_IC_SetActiveInput+0x94>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	440b      	add	r3, r1
 8001732:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	490c      	ldr	r1, [pc, #48]	; (800176c <LL_TIM_IC_SetActiveInput+0x98>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	4619      	mov	r1, r3
 8001740:	2303      	movs	r3, #3
 8001742:	408b      	lsls	r3, r1
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	7df9      	ldrb	r1, [r7, #23]
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <LL_TIM_IC_SetActiveInput+0x98>)
 8001750:	5c41      	ldrb	r1, [r0, r1]
 8001752:	408b      	lsls	r3, r1
 8001754:	431a      	orrs	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0800d1b4 	.word	0x0800d1b4
 800176c:	0800d1c4 	.word	0x0800d1c4

08001770 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d01c      	beq.n	80017bc <LL_TIM_IC_SetPrescaler+0x4c>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d017      	beq.n	80017b8 <LL_TIM_IC_SetPrescaler+0x48>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b10      	cmp	r3, #16
 800178c:	d012      	beq.n	80017b4 <LL_TIM_IC_SetPrescaler+0x44>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b40      	cmp	r3, #64	; 0x40
 8001792:	d00d      	beq.n	80017b0 <LL_TIM_IC_SetPrescaler+0x40>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179a:	d007      	beq.n	80017ac <LL_TIM_IC_SetPrescaler+0x3c>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d101      	bne.n	80017a8 <LL_TIM_IC_SetPrescaler+0x38>
 80017a4:	2305      	movs	r3, #5
 80017a6:	e00a      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017a8:	2306      	movs	r3, #6
 80017aa:	e008      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e006      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_TIM_IC_SetPrescaler+0x4e>
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3318      	adds	r3, #24
 80017c4:	4619      	mov	r1, r3
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LL_TIM_IC_SetPrescaler+0x94>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	440b      	add	r3, r1
 80017ce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	490c      	ldr	r1, [pc, #48]	; (8001808 <LL_TIM_IC_SetPrescaler+0x98>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	4619      	mov	r1, r3
 80017dc:	230c      	movs	r3, #12
 80017de:	408b      	lsls	r3, r1
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	7df9      	ldrb	r1, [r7, #23]
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <LL_TIM_IC_SetPrescaler+0x98>)
 80017ec:	5c41      	ldrb	r1, [r0, r1]
 80017ee:	408b      	lsls	r3, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	0800d1b4 	.word	0x0800d1b4
 8001808:	0800d1c4 	.word	0x0800d1c4

0800180c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d01c      	beq.n	8001858 <LL_TIM_IC_SetFilter+0x4c>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d017      	beq.n	8001854 <LL_TIM_IC_SetFilter+0x48>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d012      	beq.n	8001850 <LL_TIM_IC_SetFilter+0x44>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d00d      	beq.n	800184c <LL_TIM_IC_SetFilter+0x40>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001836:	d007      	beq.n	8001848 <LL_TIM_IC_SetFilter+0x3c>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183e:	d101      	bne.n	8001844 <LL_TIM_IC_SetFilter+0x38>
 8001840:	2305      	movs	r3, #5
 8001842:	e00a      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 8001844:	2306      	movs	r3, #6
 8001846:	e008      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 8001848:	2304      	movs	r3, #4
 800184a:	e006      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 800184c:	2303      	movs	r3, #3
 800184e:	e004      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <LL_TIM_IC_SetFilter+0x4e>
 8001858:	2300      	movs	r3, #0
 800185a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3318      	adds	r3, #24
 8001860:	4619      	mov	r1, r3
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LL_TIM_IC_SetFilter+0x94>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	440b      	add	r3, r1
 800186a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	490c      	ldr	r1, [pc, #48]	; (80018a4 <LL_TIM_IC_SetFilter+0x98>)
 8001874:	5ccb      	ldrb	r3, [r1, r3]
 8001876:	4619      	mov	r1, r3
 8001878:	23f0      	movs	r3, #240	; 0xf0
 800187a:	408b      	lsls	r3, r1
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	7df9      	ldrb	r1, [r7, #23]
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <LL_TIM_IC_SetFilter+0x98>)
 8001888:	5c41      	ldrb	r1, [r0, r1]
 800188a:	408b      	lsls	r3, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	0800d1b4 	.word	0x0800d1b4
 80018a4:	0800d1c4 	.word	0x0800d1c4

080018a8 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d01c      	beq.n	80018f4 <LL_TIM_IC_SetPolarity+0x4c>
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d017      	beq.n	80018f0 <LL_TIM_IC_SetPolarity+0x48>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d012      	beq.n	80018ec <LL_TIM_IC_SetPolarity+0x44>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d00d      	beq.n	80018e8 <LL_TIM_IC_SetPolarity+0x40>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d2:	d007      	beq.n	80018e4 <LL_TIM_IC_SetPolarity+0x3c>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d101      	bne.n	80018e0 <LL_TIM_IC_SetPolarity+0x38>
 80018dc:	2305      	movs	r3, #5
 80018de:	e00a      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018e0:	2306      	movs	r3, #6
 80018e2:	e008      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e006      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e004      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_TIM_IC_SetPolarity+0x4e>
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	490b      	ldr	r1, [pc, #44]	; (800192c <LL_TIM_IC_SetPolarity+0x84>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	4619      	mov	r1, r3
 8001904:	230a      	movs	r3, #10
 8001906:	408b      	lsls	r3, r1
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	4907      	ldr	r1, [pc, #28]	; (800192c <LL_TIM_IC_SetPolarity+0x84>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	4619      	mov	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	408b      	lsls	r3, r1
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	0800d1cc 	.word	0x0800d1cc

08001930 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001942:	f023 0307 	bic.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 0207 	bic.w	r2, r3, #7
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	605a      	str	r2, [r3, #4]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60da      	str	r2, [r3, #12]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	615a      	str	r2, [r3, #20]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b089      	sub	sp, #36	; 0x24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	613b      	str	r3, [r7, #16]
  return result;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2103      	movs	r1, #3
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	401a      	ands	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	3724      	adds	r7, #36	; 0x24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	613b      	str	r3, [r7, #16]
  return result;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2103      	movs	r1, #3
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	61bb      	str	r3, [r7, #24]
  return result;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	60da      	str	r2, [r3, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	041a      	lsls	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001af0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af4:	f7ff fc9e 	bl	8001434 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001af8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001afc:	f7ff fc82 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b00:	2007      	movs	r0, #7
 8001b02:	f7ff f9eb 	bl	8000edc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b06:	f000 f81b 	bl	8001b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f000 fc69 	bl	80023e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b0e:	f000 f865 	bl	8001bdc <MX_ADC1_Init>
  MX_I2C3_Init();
 8001b12:	f000 f8e1 	bl	8001cd8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001b16:	f000 f9a1 	bl	8001e5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b1a:	f000 f9d7 	bl	8001ecc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b1e:	f000 fa4f 	bl	8001fc0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b22:	f000 fac7 	bl	80020b4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001b26:	f000 fc0b 	bl	8002340 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001b2a:	f000 fb03 	bl	8002134 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001b2e:	f000 f941 	bl	8001db4 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001b32:	f000 fb39 	bl	80021a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b36:	f000 fb9d 	bl	8002274 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001b3a:	f005 fa43 	bl	8006fc4 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001b3e:	e7fe      	b.n	8001b3e <main+0x52>

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f7ff fcbb 	bl	80014c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff fccc 	bl	80014e8 <LL_FLASH_GetLatency>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d1fa      	bne.n	8001b4c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b56:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001b5a:	f7ff fcd3 	bl	8001504 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b5e:	2010      	movs	r0, #16
 8001b60:	f7ff fb64 	bl	800122c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001b64:	f7ff fb40 	bl	80011e8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001b68:	bf00      	nop
 8001b6a:	f7ff fb4d 	bl	8001208 <LL_RCC_HSI_IsReady>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d1fa      	bne.n	8001b6a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001b74:	2300      	movs	r3, #0
 8001b76:	2264      	movs	r2, #100	; 0x64
 8001b78:	2108      	movs	r1, #8
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fc04 	bl	8001388 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b80:	f7ff fbde 	bl	8001340 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b84:	bf00      	nop
 8001b86:	f7ff fbeb 	bl	8001360 <LL_RCC_PLL_IsReady>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d1fa      	bne.n	8001b86 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001b90:	bf00      	nop
 8001b92:	f7ff fccb 	bl	800152c <LL_PWR_IsActiveFlag_VOS>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0fa      	beq.n	8001b92 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff fb7d 	bl	800129c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001ba2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ba6:	f7ff fb8d 	bl	80012c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fb9e 	bl	80012ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f7ff fb51 	bl	8001258 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff fb62 	bl	8001280 <LL_RCC_GetSysClkSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d1fa      	bne.n	8001bb8 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <SystemClock_Config+0x98>)
 8001bc4:	f003 f802 	bl	8004bcc <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <SystemClock_Config+0x98>)
 8001bca:	f003 f80d 	bl	8004be8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fba0 	bl	8001314 <LL_RCC_SetTIMPrescaler>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	05f5e100 	.word	0x05f5e100

08001bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b090      	sub	sp, #64	; 0x40
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001c12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c16:	f7ff fc0d 	bl	8001434 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff fbda 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7ff fbd7 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <MX_ADC1_Init+0xe8>)
 8001c38:	f001 febe 	bl	80039b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ADC_Battery_GPIO_Port, &GPIO_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <MX_ADC1_Init+0xec>)
 8001c4e:	f001 feb3 	bl	80039b8 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c62:	4619      	mov	r1, r3
 8001c64:	4819      	ldr	r0, [pc, #100]	; (8001ccc <MX_ADC1_Init+0xf0>)
 8001c66:	f001 fc1d 	bl	80034a4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	4619      	mov	r1, r3
 8001c84:	4811      	ldr	r0, [pc, #68]	; (8001ccc <MX_ADC1_Init+0xf0>)
 8001c86:	f001 fc39 	bl	80034fc <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8e:	480f      	ldr	r0, [pc, #60]	; (8001ccc <MX_ADC1_Init+0xf0>)
 8001c90:	f7ff fa07 	bl	80010a2 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <MX_ADC1_Init+0xf4>)
 8001ca2:	f001 fbe1 	bl	8003468 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <MX_ADC1_Init+0xf8>)
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <MX_ADC1_Init+0xf0>)
 8001cae:	f7ff f9c2 	bl	8001036 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES);
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <MX_ADC1_Init+0xf8>)
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_ADC1_Init+0xf0>)
 8001cb8:	f7ff fa06 	bl	80010c8 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3740      	adds	r7, #64	; 0x40
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40012000 	.word	0x40012000
 8001cd0:	40012300 	.word	0x40012300
 8001cd4:	03200006 	.word	0x03200006

08001cd8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001cde:	f107 0318 	add.w	r3, r7, #24
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f008 fcb8 	bl	800a65c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001cfc:	2004      	movs	r0, #4
 8001cfe:	f7ff fb69 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fb66 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d16:	2301      	movs	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	481f      	ldr	r0, [pc, #124]	; (8001da4 <MX_I2C3_Init+0xcc>)
 8001d28:	f001 fe46 	bl	80039b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d32:	2302      	movs	r3, #2
 8001d34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d42:	2304      	movs	r3, #4
 8001d44:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	463b      	mov	r3, r7
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4817      	ldr	r0, [pc, #92]	; (8001da8 <MX_I2C3_Init+0xd0>)
 8001d4c:	f001 fe34 	bl	80039b8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001d50:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d54:	f7ff fb56 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001d58:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_I2C3_Init+0xd4>)
 8001d5a:	f7ff fa34 	bl	80011c6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001d5e:	4813      	ldr	r0, [pc, #76]	; (8001dac <MX_I2C3_Init+0xd4>)
 8001d60:	f7ff fa0e 	bl	8001180 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <MX_I2C3_Init+0xd4>)
 8001d66:	f7ff f9fb 	bl	8001160 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_I2C3_Init+0xd8>)
 8001d70:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_I2C3_Init+0xd4>)
 8001d8e:	f001 ff93 	bl	8003cb8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001d92:	2100      	movs	r1, #0
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_I2C3_Init+0xd4>)
 8001d96:	f7ff fa03 	bl	80011a0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	3738      	adds	r7, #56	; 0x38
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40005c00 	.word	0x40005c00
 8001db0:	000186a0 	.word	0x000186a0

08001db4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b090      	sub	sp, #64	; 0x40
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001dba:	f107 0318 	add.w	r3, r7, #24
 8001dbe:	2228      	movs	r2, #40	; 0x28
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f008 fc4a 	bl	800a65c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001dd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ddc:	f7ff fb12 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff faf7 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001de6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001dea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dec:	2302      	movs	r3, #2
 8001dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	4813      	ldr	r0, [pc, #76]	; (8001e54 <MX_SPI2_Init+0xa0>)
 8001e06:	f001 fdd7 	bl	80039b8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e12:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001e26:	2300      	movs	r3, #0
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e32:	230a      	movs	r3, #10
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_SPI2_Init+0xa4>)
 8001e3e:	f002 f8d2 	bl	8003fe6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001e42:	2100      	movs	r1, #0
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_SPI2_Init+0xa4>)
 8001e46:	f7ff fb85 	bl	8001554 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3740      	adds	r7, #64	; 0x40
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40003800 	.word	0x40003800

08001e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7ff fac7 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001e76:	2363      	movs	r3, #99	; 0x63
 8001e78:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e90:	f002 f96e 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e98:	f7ff fb82 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea2:	f7ff fd45 	bl	8001930 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eac:	f7ff fb65 	bl	800157a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb6:	f7ff fd63 	bl	8001980 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001eba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ebe:	f7ff fd72 	bl	80019a6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	; 0x30
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7ff fa86 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ef8:	2004      	movs	r0, #4
 8001efa:	f7ff fa6b 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MotorR_Encoder1_Pin|MotorR_Encoder2_Pin;
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f02:	2302      	movs	r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4827      	ldr	r0, [pc, #156]	; (8001fb8 <MX_TIM3_Init+0xec>)
 8001f1c:	f001 fd4c 	bl	80039b8 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001f20:	2101      	movs	r1, #1
 8001f22:	4826      	ldr	r0, [pc, #152]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f24:	f7ff fd19 	bl	800195a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4823      	ldr	r0, [pc, #140]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f30:	f7ff fbd0 	bl	80016d4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	4820      	ldr	r0, [pc, #128]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f3a:	f7ff fc19 	bl	8001770 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2101      	movs	r1, #1
 8001f42:	481e      	ldr	r0, [pc, #120]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f44:	f7ff fc62 	bl	800180c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f4e:	f7ff fcab 	bl	80018a8 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f56:	2110      	movs	r1, #16
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f5a:	f7ff fbbb 	bl	80016d4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2110      	movs	r1, #16
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f64:	f7ff fc04 	bl	8001770 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f6e:	f7ff fc4d 	bl	800180c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f78:	f7ff fc96 	bl	80018a8 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f96:	f002 f8eb 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001f9c:	f7ff fb00 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001fa4:	f7ff fcec 	bl	8001980 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_TIM3_Init+0xf0>)
 8001faa:	f7ff fcfc 	bl	80019a6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40000400 	.word	0x40000400

08001fc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001fe6:	2004      	movs	r0, #4
 8001fe8:	f7ff fa0c 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fec:	2002      	movs	r0, #2
 8001fee:	f7ff f9f1 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = MotorL_Encoder1_Pin|MotorL_Encoder2_Pin;
 8001ff2:	23c0      	movs	r3, #192	; 0xc0
 8001ff4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4619      	mov	r1, r3
 800200e:	4827      	ldr	r0, [pc, #156]	; (80020ac <MX_TIM4_Init+0xec>)
 8002010:	f001 fcd2 	bl	80039b8 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 8002014:	2101      	movs	r1, #1
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002018:	f7ff fc9f 	bl	800195a <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800201c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002020:	2101      	movs	r1, #1
 8002022:	4823      	ldr	r0, [pc, #140]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002024:	f7ff fb56 	bl	80016d4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002028:	2200      	movs	r2, #0
 800202a:	2101      	movs	r1, #1
 800202c:	4820      	ldr	r0, [pc, #128]	; (80020b0 <MX_TIM4_Init+0xf0>)
 800202e:	f7ff fb9f 	bl	8001770 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002032:	2200      	movs	r2, #0
 8002034:	2101      	movs	r1, #1
 8002036:	481e      	ldr	r0, [pc, #120]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002038:	f7ff fbe8 	bl	800180c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 800203c:	2200      	movs	r2, #0
 800203e:	2101      	movs	r1, #1
 8002040:	481b      	ldr	r0, [pc, #108]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002042:	f7ff fc31 	bl	80018a8 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800204a:	2110      	movs	r1, #16
 800204c:	4818      	ldr	r0, [pc, #96]	; (80020b0 <MX_TIM4_Init+0xf0>)
 800204e:	f7ff fb41 	bl	80016d4 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002052:	2200      	movs	r2, #0
 8002054:	2110      	movs	r1, #16
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002058:	f7ff fb8a 	bl	8001770 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800205c:	2200      	movs	r2, #0
 800205e:	2110      	movs	r1, #16
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002062:	f7ff fbd3 	bl	800180c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002066:	2200      	movs	r2, #0
 8002068:	2110      	movs	r1, #16
 800206a:	4811      	ldr	r0, [pc, #68]	; (80020b0 <MX_TIM4_Init+0xf0>)
 800206c:	f7ff fc1c 	bl	80018a8 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <MX_TIM4_Init+0xf0>)
 800208a:	f002 f871 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002090:	f7ff fa86 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002094:	2100      	movs	r1, #0
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_TIM4_Init+0xf0>)
 8002098:	f7ff fc72 	bl	8001980 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_TIM4_Init+0xf0>)
 800209e:	f7ff fc82 	bl	80019a6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3730      	adds	r7, #48	; 0x30
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80020c8:	2008      	movs	r0, #8
 80020ca:	f7ff f99b 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 80020ce:	f7fe ff29 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2201      	movs	r2, #1
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe ff79 	bl	8000fd0 <NVIC_EncodePriority>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	2032      	movs	r0, #50	; 0x32
 80020e4:	f7fe ff4a 	bl	8000f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80020e8:	2032      	movs	r0, #50	; 0x32
 80020ea:	f7fe ff29 	bl	8000f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 80020f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80020fa:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <MX_TIM5_Init+0x7c>)
 8002106:	f002 f833 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 800210a:	4809      	ldr	r0, [pc, #36]	; (8002130 <MX_TIM5_Init+0x7c>)
 800210c:	f7ff fa48 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002110:	2100      	movs	r1, #0
 8002112:	4807      	ldr	r0, [pc, #28]	; (8002130 <MX_TIM5_Init+0x7c>)
 8002114:	f7ff fc0c 	bl	8001930 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002118:	2100      	movs	r1, #0
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM5_Init+0x7c>)
 800211c:	f7ff fc30 	bl	8001980 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002120:	4803      	ldr	r0, [pc, #12]	; (8002130 <MX_TIM5_Init+0x7c>)
 8002122:	f7ff fc40 	bl	80019a6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40000c00 	.word	0x40000c00

08002134 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8002148:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800214c:	f7ff f972 	bl	8001434 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002150:	f7fe fee8 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 8002154:	4603      	mov	r3, r0
 8002156:	2201      	movs	r2, #1
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ff38 	bl	8000fd0 <NVIC_EncodePriority>
 8002160:	4603      	mov	r3, r0
 8002162:	4619      	mov	r1, r3
 8002164:	2018      	movs	r0, #24
 8002166:	f7fe ff09 	bl	8000f7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800216a:	2018      	movs	r0, #24
 800216c:	f7fe fee8 	bl	8000f40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8002178:	f24c 3350 	movw	r3, #50000	; 0xc350
 800217c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MX_TIM9_Init+0x70>)
 8002188:	f001 fff2 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_TIM9_Init+0x70>)
 800218e:	f7ff fa07 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002192:	2100      	movs	r1, #0
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <MX_TIM9_Init+0x70>)
 8002196:	f7ff fbcb 	bl	8001930 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40014000 	.word	0x40014000

080021a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b094      	sub	sp, #80	; 0x50
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	2220      	movs	r2, #32
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 fa48 	bl	800a65c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80021dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021e0:	f7ff f928 	bl	8001434 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021e8:	2300      	movs	r3, #0
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80021ec:	f241 3387 	movw	r3, #4999	; 0x1387
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 80021f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021fa:	4619      	mov	r1, r3
 80021fc:	481b      	ldr	r0, [pc, #108]	; (800226c <MX_TIM10_Init+0xc4>)
 80021fe:	f001 ffb7 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 8002202:	481a      	ldr	r0, [pc, #104]	; (800226c <MX_TIM10_Init+0xc4>)
 8002204:	f7ff f9cc 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM10, LL_TIM_CHANNEL_CH1);
 8002208:	2101      	movs	r1, #1
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <MX_TIM10_Init+0xc4>)
 800220c:	f7ff fa1e 	bl	800164c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002210:	2360      	movs	r3, #96	; 0x60
 8002212:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM10, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	461a      	mov	r2, r3
 800222a:	2101      	movs	r1, #1
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <MX_TIM10_Init+0xc4>)
 800222e:	f002 f819 	bl	8004264 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM10, LL_TIM_CHANNEL_CH1);
 8002232:	2101      	movs	r1, #1
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <MX_TIM10_Init+0xc4>)
 8002236:	f7ff f9c3 	bl	80015c0 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800223a:	2002      	movs	r0, #2
 800223c:	f7ff f8ca 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**TIM10 GPIO Configuration
  PB8   ------> TIM10_CH1
  */
  GPIO_InitStruct.Pin = MotorL_PWM_Pin;
 8002240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002246:	2302      	movs	r3, #2
 8002248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002252:	2302      	movs	r3, #2
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002256:	2303      	movs	r3, #3
 8002258:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorL_PWM_GPIO_Port, &GPIO_InitStruct);
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_TIM10_Init+0xc8>)
 8002260:	f001 fbaa 	bl	80039b8 <LL_GPIO_Init>

}
 8002264:	bf00      	nop
 8002266:	3750      	adds	r7, #80	; 0x50
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40014400 	.word	0x40014400
 8002270:	40020400 	.word	0x40020400

08002274 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b094      	sub	sp, #80	; 0x50
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800227a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	2220      	movs	r2, #32
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f008 f9e2 	bl	800a65c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 80022a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80022ac:	f7ff f8c2 	bl	8001434 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022b4:	2300      	movs	r3, #0
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80022b8:	f241 3387 	movw	r3, #4999	; 0x1387
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 80022c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c6:	4619      	mov	r1, r3
 80022c8:	481b      	ldr	r0, [pc, #108]	; (8002338 <MX_TIM11_Init+0xc4>)
 80022ca:	f001 ff51 	bl	8004170 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 80022ce:	481a      	ldr	r0, [pc, #104]	; (8002338 <MX_TIM11_Init+0xc4>)
 80022d0:	f7ff f966 	bl	80015a0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 80022d4:	2101      	movs	r1, #1
 80022d6:	4818      	ldr	r0, [pc, #96]	; (8002338 <MX_TIM11_Init+0xc4>)
 80022d8:	f7ff f9b8 	bl	800164c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022dc:	2360      	movs	r3, #96	; 0x60
 80022de:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	461a      	mov	r2, r3
 80022f6:	2101      	movs	r1, #1
 80022f8:	480f      	ldr	r0, [pc, #60]	; (8002338 <MX_TIM11_Init+0xc4>)
 80022fa:	f001 ffb3 	bl	8004264 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80022fe:	2101      	movs	r1, #1
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_TIM11_Init+0xc4>)
 8002302:	f7ff f95d 	bl	80015c0 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002306:	2002      	movs	r0, #2
 8002308:	f7ff f864 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**TIM11 GPIO Configuration
  PB9   ------> TIM11_CH1
  */
  GPIO_InitStruct.Pin = MotorR_PWM_Pin;
 800230c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002312:	2302      	movs	r3, #2
 8002314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800231e:	2302      	movs	r3, #2
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8002322:	2303      	movs	r3, #3
 8002324:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <MX_TIM11_Init+0xc8>)
 800232c:	f001 fb44 	bl	80039b8 <LL_GPIO_Init>

}
 8002330:	bf00      	nop
 8002332:	3750      	adds	r7, #80	; 0x50
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40014800 	.word	0x40014800
 800233c:	40020400 	.word	0x40020400

08002340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08e      	sub	sp, #56	; 0x38
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800236a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800236e:	f7ff f849 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff f82e 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002378:	230c      	movs	r3, #12
 800237a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800237c:	2302      	movs	r3, #2
 800237e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800238c:	2307      	movs	r3, #7
 800238e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	4619      	mov	r1, r3
 8002394:	4810      	ldr	r0, [pc, #64]	; (80023d8 <MX_USART2_UART_Init+0x98>)
 8002396:	f001 fb0f 	bl	80039b8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800239a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800239e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023ac:	230c      	movs	r3, #12
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4807      	ldr	r0, [pc, #28]	; (80023dc <MX_USART2_UART_Init+0x9c>)
 80023c0:	f002 fb86 	bl	8004ad0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_USART2_UART_Init+0x9c>)
 80023c6:	f7ff fb0e 	bl	80019e6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_USART2_UART_Init+0x9c>)
 80023cc:	f7ff fafb 	bl	80019c6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3738      	adds	r7, #56	; 0x38
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40004400 	.word	0x40004400

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80023e6:	f107 0318 	add.w	r3, r7, #24
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	463b      	mov	r3, r7
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002400:	2004      	movs	r0, #4
 8002402:	f7fe ffe7 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002406:	2080      	movs	r0, #128	; 0x80
 8002408:	f7fe ffe4 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe ffe1 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002412:	2002      	movs	r0, #2
 8002414:	f7fe ffde 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8002418:	213f      	movs	r1, #63	; 0x3f
 800241a:	483a      	ldr	r0, [pc, #232]	; (8002504 <MX_GPIO_Init+0x124>)
 800241c:	f7ff fb57 	bl	8001ace <LL_GPIO_ResetOutputPin>
                          |MotorR_1_Pin|MotorR_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8002420:	2130      	movs	r1, #48	; 0x30
 8002422:	4839      	ldr	r0, [pc, #228]	; (8002508 <MX_GPIO_Init+0x128>)
 8002424:	f7ff fb53 	bl	8001ace <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin);
 8002428:	2134      	movs	r1, #52	; 0x34
 800242a:	4838      	ldr	r0, [pc, #224]	; (800250c <MX_GPIO_Init+0x12c>)
 800242c:	f7ff fb4f 	bl	8001ace <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002430:	4937      	ldr	r1, [pc, #220]	; (8002510 <MX_GPIO_Init+0x130>)
 8002432:	2002      	movs	r0, #2
 8002434:	f7ff f816 	bl	8001464 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002442:	2300      	movs	r3, #0
 8002444:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002446:	2302      	movs	r3, #2
 8002448:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800244a:	f107 0318 	add.w	r3, r7, #24
 800244e:	4618      	mov	r0, r3
 8002450:	f001 f92e 	bl	80036b0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245a:	482a      	ldr	r0, [pc, #168]	; (8002504 <MX_GPIO_Init+0x124>)
 800245c:	f7ff fb08 	bl	8001a70 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002460:	2200      	movs	r2, #0
 8002462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002466:	4827      	ldr	r0, [pc, #156]	; (8002504 <MX_GPIO_Init+0x124>)
 8002468:	f7ff fad3 	bl	8001a12 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 800246c:	233f      	movs	r3, #63	; 0x3f
 800246e:	603b      	str	r3, [r7, #0]
                          |MotorR_1_Pin|MotorR_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002470:	2301      	movs	r3, #1
 8002472:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	463b      	mov	r3, r7
 8002482:	4619      	mov	r1, r3
 8002484:	481f      	ldr	r0, [pc, #124]	; (8002504 <MX_GPIO_Init+0x124>)
 8002486:	f001 fa97 	bl	80039b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800248a:	2310      	movs	r3, #16
 800248c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800248e:	2301      	movs	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800249a:	2302      	movs	r3, #2
 800249c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800249e:	463b      	mov	r3, r7
 80024a0:	4619      	mov	r1, r3
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <MX_GPIO_Init+0x128>)
 80024a4:	f001 fa88 	bl	80039b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80024a8:	2320      	movs	r3, #32
 80024aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024ac:	2301      	movs	r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024bc:	463b      	mov	r3, r7
 80024be:	4619      	mov	r1, r3
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_GPIO_Init+0x128>)
 80024c2:	f001 fa79 	bl	80039b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin;
 80024c6:	2334      	movs	r3, #52	; 0x34
 80024c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024ca:	2301      	movs	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80024d6:	2302      	movs	r3, #2
 80024d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	480b      	ldr	r0, [pc, #44]	; (800250c <MX_GPIO_Init+0x12c>)
 80024e0:	f001 fa6a 	bl	80039b8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin;
 80024e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <MX_GPIO_Init+0x124>)
 80024f8:	f001 fa5e 	bl	80039b8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40020800 	.word	0x40020800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	00f00003 	.word	0x00f00003

08002514 <LL_ADC_REG_SetSequencerRanks>:
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	332c      	adds	r3, #44	; 0x2c
 8002524:	4619      	mov	r1, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	617a      	str	r2, [r7, #20]
  return result;
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	211f      	movs	r1, #31
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f003 011f 	and.w	r1, r3, #31
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	431a      	orrs	r2, r3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	3724      	adds	r7, #36	; 0x24
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	b29b      	uxth	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f06f 0202 	mvn.w	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f06f 0201 	mvn.w	r2, #1
 800260a:	611a      	str	r2, [r3, #16]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <Custom_GPIO_Set+0x22>
 8002634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002638:	e000      	b.n	800263c <Custom_GPIO_Set+0x24>
 800263a:	2100      	movs	r1, #0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	400b      	ands	r3, r1
 8002640:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <ADC_Read>:
//	__enable_irq();
//	return adcValue;
//}


__STATIC_INLINE uint16_t	ADC_Read() {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
	uint16_t adcValue;
	LL_ADC_ClearFlag_EOCS(ADC1);
 800265a:	480d      	ldr	r0, [pc, #52]	; (8002690 <ADC_Read+0x3c>)
 800265c:	f7ff ffc0 	bl	80025e0 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002660:	480b      	ldr	r0, [pc, #44]	; (8002690 <ADC_Read+0x3c>)
 8002662:	f7ff ff8d 	bl	8002580 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8002666:	bf00      	nop
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <ADC_Read+0x3c>)
 800266a:	f7ff ffa6 	bl	80025ba <LL_ADC_IsActiveFlag_EOCS>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f9      	beq.n	8002668 <ADC_Read+0x14>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <ADC_Read+0x3c>)
 8002676:	f7ff ff93 	bl	80025a0 <LL_ADC_REG_ReadConversionData12>
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
	LL_ADC_ClearFlag_EOCS(ADC1);
 800267e:	4804      	ldr	r0, [pc, #16]	; (8002690 <ADC_Read+0x3c>)
 8002680:	f7ff ffae 	bl	80025e0 <LL_ADC_ClearFlag_EOCS>
	return adcValue;
 8002684:	88fb      	ldrh	r3, [r7, #6]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40012000 	.word	0x40012000

08002694 <Sensor_ADC_Midian_Filter>:





__STATIC_INLINE uint8_t	Sensor_ADC_Midian_Filter() {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
	uint16_t sensorMidian[3];

	sensorMidian[0] = ADC_Read();
 800269a:	f7ff ffdb 	bl	8002654 <ADC_Read>
 800269e:	4603      	mov	r3, r0
 80026a0:	803b      	strh	r3, [r7, #0]
	sensorMidian[1] = ADC_Read();
 80026a2:	f7ff ffd7 	bl	8002654 <ADC_Read>
 80026a6:	4603      	mov	r3, r0
 80026a8:	807b      	strh	r3, [r7, #2]
	sensorMidian[2] = ADC_Read();
 80026aa:	f7ff ffd3 	bl	8002654 <ADC_Read>
 80026ae:	4603      	mov	r3, r0
 80026b0:	80bb      	strh	r3, [r7, #4]

	if (sensorMidian[0] > sensorMidian[1]) {
 80026b2:	883a      	ldrh	r2, [r7, #0]
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d90e      	bls.n	80026d8 <Sensor_ADC_Midian_Filter+0x44>
		INT_SWAP(sensorMidian[0], sensorMidian[1]);
 80026ba:	883a      	ldrh	r2, [r7, #0]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4053      	eors	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	803b      	strh	r3, [r7, #0]
 80026c4:	887a      	ldrh	r2, [r7, #2]
 80026c6:	883b      	ldrh	r3, [r7, #0]
 80026c8:	4053      	eors	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	807b      	strh	r3, [r7, #2]
 80026ce:	883a      	ldrh	r2, [r7, #0]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4053      	eors	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	803b      	strh	r3, [r7, #0]
	}
	if (sensorMidian[1] > sensorMidian[2]) {
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	88bb      	ldrh	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d90e      	bls.n	80026fe <Sensor_ADC_Midian_Filter+0x6a>
		INT_SWAP(sensorMidian[1], sensorMidian[2]);
 80026e0:	887a      	ldrh	r2, [r7, #2]
 80026e2:	88bb      	ldrh	r3, [r7, #4]
 80026e4:	4053      	eors	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	88ba      	ldrh	r2, [r7, #4]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4053      	eors	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	80bb      	strh	r3, [r7, #4]
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	88bb      	ldrh	r3, [r7, #4]
 80026f8:	4053      	eors	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	807b      	strh	r3, [r7, #2]
	}
	if (sensorMidian[0] > sensorMidian[1]) {
 80026fe:	883a      	ldrh	r2, [r7, #0]
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	429a      	cmp	r2, r3
 8002704:	d90e      	bls.n	8002724 <Sensor_ADC_Midian_Filter+0x90>
		INT_SWAP(sensorMidian[0], sensorMidian[1]);
 8002706:	883a      	ldrh	r2, [r7, #0]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4053      	eors	r3, r2
 800270c:	b29b      	uxth	r3, r3
 800270e:	803b      	strh	r3, [r7, #0]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	883b      	ldrh	r3, [r7, #0]
 8002714:	4053      	eors	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	883a      	ldrh	r2, [r7, #0]
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	4053      	eors	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	803b      	strh	r3, [r7, #0]
	}

	return sensorMidian[1] >> 4;
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2db      	uxtb	r3, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <Make_Sensor_Raw_Vals>:





__STATIC_INLINE void	Make_Sensor_Raw_Vals(uint8_t idx) {
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <Make_Sensor_Raw_Vals+0x4c>)
 8002740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002744:	480f      	ldr	r0, [pc, #60]	; (8002784 <Make_Sensor_Raw_Vals+0x50>)
 8002746:	f7ff fee5 	bl	8002514 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx] = Sensor_ADC_Midian_Filter();
 800274a:	79fc      	ldrb	r4, [r7, #7]
 800274c:	f7ff ffa2 	bl	8002694 <Sensor_ADC_Midian_Filter>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <Make_Sensor_Raw_Vals+0x54>)
 8002756:	551a      	strb	r2, [r3, r4]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <Make_Sensor_Raw_Vals+0x58>)
 800275a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275e:	4809      	ldr	r0, [pc, #36]	; (8002784 <Make_Sensor_Raw_Vals+0x50>)
 8002760:	f7ff fed8 	bl	8002514 <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx + 8] = Sensor_ADC_Midian_Filter();
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f103 0408 	add.w	r4, r3, #8
 800276a:	f7ff ff93 	bl	8002694 <Sensor_ADC_Midian_Filter>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <Make_Sensor_Raw_Vals+0x54>)
 8002774:	551a      	strb	r2, [r3, r4]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop
 8002780:	03500007 	.word	0x03500007
 8002784:	40012000 	.word	0x40012000
 8002788:	200046c0 	.word	0x200046c0
 800278c:	03200006 	.word	0x03200006

08002790 <Make_Sensor_Norm_Vals>:




// normalized value 계산
__STATIC_INLINE void	Make_Sensor_Norm_Vals(uint8_t idx) {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 * 		& ( (sensorRawVals[idx] < blackMaxs[idx]) - 0x01 )  ) \
 * 		| ( (sensorRawVals[idx] < whiteMaxs[idx]) - 0x01 );
*/


	if (sensorRawVals[idx] < blackMaxs[idx])
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <Make_Sensor_Norm_Vals+0x80>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	491b      	ldr	r1, [pc, #108]	; (8002814 <Make_Sensor_Norm_Vals+0x84>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d204      	bcs.n	80027b8 <Make_Sensor_Norm_Vals+0x28>
		sensorNormVals[idx] = 0;
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <Make_Sensor_Norm_Vals+0x88>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	54d1      	strb	r1, [r2, r3]
	else if (sensorRawVals[idx] > whiteMaxs[idx])
		sensorNormVals[idx] = 255;
	else
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);

}
 80027b6:	e025      	b.n	8002804 <Make_Sensor_Norm_Vals+0x74>
	else if (sensorRawVals[idx] > whiteMaxs[idx])
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <Make_Sensor_Norm_Vals+0x80>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4916      	ldr	r1, [pc, #88]	; (800281c <Make_Sensor_Norm_Vals+0x8c>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d904      	bls.n	80027d6 <Make_Sensor_Norm_Vals+0x46>
		sensorNormVals[idx] = 255;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <Make_Sensor_Norm_Vals+0x88>)
 80027d0:	21ff      	movs	r1, #255	; 0xff
 80027d2:	54d1      	strb	r1, [r2, r3]
}
 80027d4:	e016      	b.n	8002804 <Make_Sensor_Norm_Vals+0x74>
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <Make_Sensor_Norm_Vals+0x80>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <Make_Sensor_Norm_Vals+0x84>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	1aca      	subs	r2, r1, r3
 80027ea:	4613      	mov	r3, r2
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	79fa      	ldrb	r2, [r7, #7]
 80027f2:	490b      	ldr	r1, [pc, #44]	; (8002820 <Make_Sensor_Norm_Vals+0x90>)
 80027f4:	5c8a      	ldrb	r2, [r1, r2]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	b2d1      	uxtb	r1, r2
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <Make_Sensor_Norm_Vals+0x88>)
 8002802:	54d1      	strb	r1, [r2, r3]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	200046c0 	.word	0x200046c0
 8002814:	2000006c 	.word	0x2000006c
 8002818:	200046d0 	.word	0x200046d0
 800281c:	2000005c 	.word	0x2000005c
 8002820:	200046e0 	.word	0x200046e0

08002824 <Make_Sensor_State>:



// sensor state 계산
__STATIC_INLINE void	Make_Sensor_State(uint8_t idx) {
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]

	uint8_t stateMaskingIdx = 15 - idx;
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f1c3 030f 	rsb	r3, r3, #15
 8002834:	73fb      	strb	r3, [r7, #15]

	irSensorState = ( irSensorState & ~(0x01 << stateMaskingIdx) ) | ( (sensorNormVals[idx] > threshold ? 1 : 0) << stateMaskingIdx );
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2201      	movs	r2, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	b21b      	sxth	r3, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <Make_Sensor_State+0x64>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	b21b      	sxth	r3, r3
 800284c:	4013      	ands	r3, r2
 800284e:	b21a      	sxth	r2, r3
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	490e      	ldr	r1, [pc, #56]	; (800288c <Make_Sensor_State+0x68>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	b2d9      	uxtb	r1, r3
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <Make_Sensor_State+0x6c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4299      	cmp	r1, r3
 8002860:	bf8c      	ite	hi
 8002862:	2301      	movhi	r3, #1
 8002864:	2300      	movls	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	b21b      	sxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b21b      	sxth	r3, r3
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <Make_Sensor_State+0x64>)
 800287a:	801a      	strh	r2, [r3, #0]
//		state |= 0x01 << (IR_SENSOR_LEN - 1 - idx);
//	}
//	else {
//		state &= ~(0x01 << (IR_SENSOR_LEN - 1 - idx));
//	}
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200046f0 	.word	0x200046f0
 800288c:	200046d0 	.word	0x200046d0
 8002890:	2000007c 	.word	0x2000007c

08002894 <Make_Voltage_Raw_Val>:



__STATIC_INLINE float	Make_Voltage_Raw_Val() {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <Make_Voltage_Raw_Val+0x38>)
 800289a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800289e:	480c      	ldr	r0, [pc, #48]	; (80028d0 <Make_Voltage_Raw_Val+0x3c>)
 80028a0:	f7ff fe38 	bl	8002514 <LL_ADC_REG_SetSequencerRanks>
	return 3.3f * 21.f * (float)ADC_Read() / 4095.f;
 80028a4:	f7ff fed6 	bl	8002654 <ADC_Read>
 80028a8:	4603      	mov	r3, r0
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028d4 <Make_Voltage_Raw_Val+0x40>
 80028b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028d8 <Make_Voltage_Raw_Val+0x44>
 80028be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80028c6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	03800008 	.word	0x03800008
 80028d0:	40012000 	.word	0x40012000
 80028d4:	428a9999 	.word	0x428a9999
 80028d8:	457ff000 	.word	0x457ff000

080028dc <Make_Battery_Voltage>:



__STATIC_INLINE void	Make_Battery_Voltage() {
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
	static uint8_t	sensingVoltageIdx = 0;
	static float	sensingVoltageMidian[3];


	switch(sensingVoltageIdx) {
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <Make_Battery_Voltage+0xd8>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	dc02      	bgt.n	80028f0 <Make_Battery_Voltage+0x14>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da03      	bge.n	80028f6 <Make_Battery_Voltage+0x1a>
			sensingVoltage = sensingVoltageMidian[1];
			sensingVoltageIdx = 0;

			break;
	}
}
 80028ee:	e05c      	b.n	80029aa <Make_Battery_Voltage+0xce>
	switch(sensingVoltageIdx) {
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d013      	beq.n	800291c <Make_Battery_Voltage+0x40>
}
 80028f4:	e059      	b.n	80029aa <Make_Battery_Voltage+0xce>
			sensingVoltageMidian[sensingVoltageIdx] = Make_Voltage_Raw_Val();
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <Make_Battery_Voltage+0xd8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461c      	mov	r4, r3
 80028fc:	f7ff ffca 	bl	8002894 <Make_Voltage_Raw_Val>
 8002900:	eef0 7a40 	vmov.f32	s15, s0
 8002904:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002906:	00a3      	lsls	r3, r4, #2
 8002908:	4413      	add	r3, r2
 800290a:	edc3 7a00 	vstr	s15, [r3]
			sensingVoltageIdx++;
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <Make_Battery_Voltage+0xd8>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <Make_Battery_Voltage+0xd8>)
 8002918:	701a      	strb	r2, [r3, #0]
			break;
 800291a:	e046      	b.n	80029aa <Make_Battery_Voltage+0xce>
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002924:	edd3 7a01 	vldr	s15, [r3, #4]
 8002928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	dd09      	ble.n	8002946 <Make_Battery_Voltage+0x6a>
				FLOAT_SWAP(sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6053      	str	r3, [r2, #4]
			if (sensingVoltageMidian[1] > sensingVoltageMidian[2]) {
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002948:	ed93 7a01 	vldr	s14, [r3, #4]
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800294e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	dd09      	ble.n	8002970 <Make_Battery_Voltage+0x94>
				FLOAT_SWAP(sensingVoltageMidian[1], sensingVoltageMidian[2]);
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002968:	6053      	str	r3, [r2, #4]
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6093      	str	r3, [r2, #8]
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002978:	edd3 7a01 	vldr	s15, [r3, #4]
 800297c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	dd09      	ble.n	800299a <Make_Battery_Voltage+0xbe>
				FLOAT_SWAP(sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6053      	str	r3, [r2, #4]
			sensingVoltage = sensingVoltageMidian[1];
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <Make_Battery_Voltage+0xdc>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <Make_Battery_Voltage+0xe0>)
 80029a0:	6013      	str	r3, [r2, #0]
			sensingVoltageIdx = 0;
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <Make_Battery_Voltage+0xd8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			break;
 80029a8:	bf00      	nop
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200002a9 	.word	0x200002a9
 80029b8:	200002ac 	.word	0x200002ac
 80029bc:	200046f4 	.word	0x200046f4

080029c0 <Sensor_TIM5_IRQ>:





__STATIC_INLINE void	Sensor_TIM5_IRQ() {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	static uint8_t	tim5Idx = 0;

	// 다음 IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | tim5Idx | 0x08;
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <Sensor_TIM5_IRQ+0x88>)
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 80029ce:	7812      	ldrb	r2, [r2, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <Sensor_TIM5_IRQ+0x88>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6153      	str	r3, [r2, #20]

	Make_Sensor_Raw_Vals(tim5Idx);
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fea8 	bl	8002734 <Make_Sensor_Raw_Vals>

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <Sensor_TIM5_IRQ+0x88>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <Sensor_TIM5_IRQ+0x88>)
 80029ea:	f023 0308 	bic.w	r3, r3, #8
 80029ee:	6153      	str	r3, [r2, #20]

	Make_Sensor_Norm_Vals(tim5Idx);
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fecb 	bl	8002790 <Make_Sensor_Norm_Vals>
	Make_Sensor_Norm_Vals(tim5Idx + 8);
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	3308      	adds	r3, #8
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fec4 	bl	8002790 <Make_Sensor_Norm_Vals>

	Make_Sensor_State(tim5Idx);
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff09 	bl	8002824 <Make_Sensor_State>
	Make_Sensor_State(tim5Idx + 8);
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	3308      	adds	r3, #8
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff02 	bl	8002824 <Make_Sensor_State>

	if (tim5Idx & 0x01) {
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <Sensor_TIM5_IRQ+0x70>
		Make_Battery_Voltage();
 8002a2c:	f7ff ff56 	bl	80028dc <Make_Battery_Voltage>
	}


	// 인덱스 증가
	tim5Idx = (tim5Idx + 1) & 0x07;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <Sensor_TIM5_IRQ+0x8c>)
 8002a40:	701a      	strb	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	200002a8 	.word	0x200002a8

08002a50 <Get_Encoder_Value_Gap>:





__STATIC_INLINE int32_t	Get_Encoder_Value_Gap(t_encoder target, t_encoder current) {
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	460a      	mov	r2, r1
 8002a5a:	80fb      	strh	r3, [r7, #6]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80bb      	strh	r3, [r7, #4]

	int32_t gap = target - current;
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	88bb      	ldrh	r3, [r7, #4]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
	int32_t absGap = ABS(gap);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bfb8      	it	lt
 8002a6e:	425b      	neglt	r3, r3
 8002a70:	60bb      	str	r3, [r7, #8]

	if (absGap > T_ENCODER_MAX / 2) {
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a78:	dd0c      	ble.n	8002a94 <Get_Encoder_Value_Gap+0x44>

		gap = (gap > 0 ? -1 : 1) * (T_ENCODER_MAX - absGap);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dd02      	ble.n	8002a86 <Get_Encoder_Value_Gap+0x36>
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a84:	e000      	b.n	8002a88 <Get_Encoder_Value_Gap+0x38>
 8002a86:	2301      	movs	r3, #1
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	f5c2 3280 	rsb	r2, r2, #65536	; 0x10000
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	60fb      	str	r3, [r7, #12]
	}

	return gap;
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <Motor_Speed_Control>:





__STATIC_INLINE void	Motor_Speed_Control(float speedL, float speedR) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8002aae:	edc7 0a00 	vstr	s1, [r7]


	t_encoder curEncoderValueL = TIM4->CNT;
 8002ab2:	4b83      	ldr	r3, [pc, #524]	; (8002cc0 <Motor_Speed_Control+0x21c>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	86fb      	strh	r3, [r7, #54]	; 0x36
	t_encoder curEncoderValueR = TIM3->CNT;
 8002ab8:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <Motor_Speed_Control+0x220>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	86bb      	strh	r3, [r7, #52]	; 0x34

	targetEncoderValueL_cntl += speedL * TICK_PER_M * MOTOR_CONTROL_INTERVAL_S;
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <Motor_Speed_Control+0x224>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002acc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002ccc <Motor_Speed_Control+0x228>
 8002ad4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ad8:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8002cd0 <Motor_Speed_Control+0x22c>
 8002adc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae8:	ee17 3a90 	vmov	r3, s15
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <Motor_Speed_Control+0x224>)
 8002af0:	801a      	strh	r2, [r3, #0]
	targetEncoderValueR_cntl += speedR * TICK_PER_M * MOTOR_CONTROL_INTERVAL_S;
 8002af2:	4b78      	ldr	r3, [pc, #480]	; (8002cd4 <Motor_Speed_Control+0x230>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b00:	edd7 7a00 	vldr	s15, [r7]
 8002b04:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002ccc <Motor_Speed_Control+0x228>
 8002b08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b0c:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002cd0 <Motor_Speed_Control+0x22c>
 8002b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1c:	ee17 3a90 	vmov	r3, s15
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <Motor_Speed_Control+0x230>)
 8002b24:	801a      	strh	r2, [r3, #0]


	int32_t	errorL = Get_Encoder_Value_Gap(targetEncoderValueL_cntl, curEncoderValueL);
 8002b26:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <Motor_Speed_Control+0x224>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff8d 	bl	8002a50 <Get_Encoder_Value_Gap>
 8002b36:	6338      	str	r0, [r7, #48]	; 0x30
	int32_t errorR = Get_Encoder_Value_Gap(targetEncoderValueR_cntl, curEncoderValueR);
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <Motor_Speed_Control+0x230>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff84 	bl	8002a50 <Get_Encoder_Value_Gap>
 8002b48:	62f8      	str	r0, [r7, #44]	; 0x2c

	float pTermL = errorL * pCoef;
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <Motor_Speed_Control+0x234>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float pTermR = errorR * pCoef;
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b6c:	4b5a      	ldr	r3, [pc, #360]	; (8002cd8 <Motor_Speed_Control+0x234>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float dTermL = (errorL - prevErrorL) * dCoef;
 8002b7a:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <Motor_Speed_Control+0x238>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8a:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <Motor_Speed_Control+0x23c>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b94:	edc7 7a08 	vstr	s15, [r7, #32]
	float dTermR = (errorR - prevErrorR) * dCoef;
 8002b98:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <Motor_Speed_Control+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <Motor_Speed_Control+0x23c>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a07 	vstr	s15, [r7, #28]


	float curVoltage = sensingVoltage;
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <Motor_Speed_Control+0x244>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
	float dutyRatioL = (pTermL + dTermL) / curVoltage;
 8002bbc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bc4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002bc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd0:	edc7 7a05 	vstr	s15, [r7, #20]
	float dutyRatioR = (pTermR + dTermR) / curVoltage;
 8002bd4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bdc:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002be0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be8:	edc7 7a04 	vstr	s15, [r7, #16]


	uint32_t levelCCR_L = ABS(dutyRatioL * levelMaxCCR);
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <Motor_Speed_Control+0x248>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	ee07 3a90 	vmov	s15, r3
 8002bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	d50e      	bpl.n	8002c28 <Motor_Speed_Control+0x184>
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	eef1 7a67 	vneg.f32	s15, s15
 8002c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c26:	e00b      	b.n	8002c40 <Motor_Speed_Control+0x19c>
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c40:	edc7 7a03 	vstr	s15, [r7, #12]
	levelCCR_L = GET_MIN(levelCCR_L, levelMaxCCR);
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d201      	bcs.n	8002c52 <Motor_Speed_Control+0x1ae>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	e001      	b.n	8002c56 <Motor_Speed_Control+0x1b2>
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

	uint32_t levelCCR_R = ABS(dutyRatioR * levelMaxCCR);
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d50e      	bpl.n	8002c94 <Motor_Speed_Control+0x1f0>
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	eef1 7a67 	vneg.f32	s15, s15
 8002c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c92:	e00b      	b.n	8002cac <Motor_Speed_Control+0x208>
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <Motor_Speed_Control+0x248>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cac:	edc7 7a02 	vstr	s15, [r7, #8]
	levelCCR_R = GET_MIN(levelCCR_R, levelMaxCCR);
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <Motor_Speed_Control+0x248>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d21a      	bcs.n	8002cf0 <Motor_Speed_Control+0x24c>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	e01a      	b.n	8002cf4 <Motor_Speed_Control+0x250>
 8002cbe:	bf00      	nop
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	20001458 	.word	0x20001458
 8002ccc:	478f8d33 	.word	0x478f8d33
 8002cd0:	3a03126f 	.word	0x3a03126f
 8002cd4:	2000145a 	.word	0x2000145a
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	20001450 	.word	0x20001450
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	20001454 	.word	0x20001454
 8002ce8:	200046f4 	.word	0x200046f4
 8002cec:	2000144c 	.word	0x2000144c
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <Motor_Speed_Control+0x330>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]


	TIM10->CCR1 = levelCCR_L;
 8002cf6:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <Motor_Speed_Control+0x334>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6353      	str	r3, [r2, #52]	; 0x34
	TIM11->CCR1 = levelCCR_R;
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <Motor_Speed_Control+0x338>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6353      	str	r3, [r2, #52]	; 0x34


	Custom_GPIO_Set(GPIOB, 1 << 4, dutyRatioL > 0 ? 1 : 0); // PB4
 8002d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	bfcc      	ite	gt
 8002d10:	2301      	movgt	r3, #1
 8002d12:	2300      	movle	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	2110      	movs	r1, #16
 8002d1a:	4831      	ldr	r0, [pc, #196]	; (8002de0 <Motor_Speed_Control+0x33c>)
 8002d1c:	f7ff fc7c 	bl	8002618 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOB, 1 << 5, dutyRatioL < 0 ? 1 : 0); // PB5
 8002d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	bf4c      	ite	mi
 8002d2e:	2301      	movmi	r3, #1
 8002d30:	2300      	movpl	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	2120      	movs	r1, #32
 8002d38:	4829      	ldr	r0, [pc, #164]	; (8002de0 <Motor_Speed_Control+0x33c>)
 8002d3a:	f7ff fc6d 	bl	8002618 <Custom_GPIO_Set>

	Custom_GPIO_Set(GPIOC, 1 << 4, dutyRatioR < 0 ? 1 : 0); // PC4
 8002d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	bf4c      	ite	mi
 8002d4c:	2301      	movmi	r3, #1
 8002d4e:	2300      	movpl	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	2110      	movs	r1, #16
 8002d56:	4823      	ldr	r0, [pc, #140]	; (8002de4 <Motor_Speed_Control+0x340>)
 8002d58:	f7ff fc5e 	bl	8002618 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOC, 1 << 5, dutyRatioR > 0 ? 1 : 0); // PC5
 8002d5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	bfcc      	ite	gt
 8002d6a:	2301      	movgt	r3, #1
 8002d6c:	2300      	movle	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	2120      	movs	r1, #32
 8002d74:	481b      	ldr	r0, [pc, #108]	; (8002de4 <Motor_Speed_Control+0x340>)
 8002d76:	f7ff fc4f 	bl	8002618 <Custom_GPIO_Set>


	curTick_L += Get_Encoder_Value_Gap(curEncoderValueL, prevCurEncoderValueL);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <Motor_Speed_Control+0x344>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fe63 	bl	8002a50 <Get_Encoder_Value_Gap>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <Motor_Speed_Control+0x348>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a16      	ldr	r2, [pc, #88]	; (8002dec <Motor_Speed_Control+0x348>)
 8002d94:	6013      	str	r3, [r2, #0]
	curTick_R += Get_Encoder_Value_Gap(curEncoderValueR, prevCurEncoderValueR);
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <Motor_Speed_Control+0x34c>)
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fe55 	bl	8002a50 <Get_Encoder_Value_Gap>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <Motor_Speed_Control+0x350>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <Motor_Speed_Control+0x350>)
 8002db0:	6013      	str	r3, [r2, #0]

	prevErrorL = errorL;
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <Motor_Speed_Control+0x354>)
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6013      	str	r3, [r2, #0]
	prevErrorR = errorR;
 8002db8:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <Motor_Speed_Control+0x358>)
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	6013      	str	r3, [r2, #0]
	prevCurEncoderValueL = curEncoderValueL;
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <Motor_Speed_Control+0x344>)
 8002dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dc2:	8013      	strh	r3, [r2, #0]
	prevCurEncoderValueR = curEncoderValueR;
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <Motor_Speed_Control+0x34c>)
 8002dc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002dc8:	8013      	strh	r3, [r2, #0]

}
 8002dca:	bf00      	nop
 8002dcc:	3738      	adds	r7, #56	; 0x38
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000144c 	.word	0x2000144c
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	2000145c 	.word	0x2000145c
 8002dec:	20001470 	.word	0x20001470
 8002df0:	2000145e 	.word	0x2000145e
 8002df4:	20001474 	.word	0x20001474
 8002df8:	20001450 	.word	0x20001450
 8002dfc:	20001454 	.word	0x20001454

08002e00 <Drive_Speed_Accele_Control>:




// 가속도 및 속도 제어
__STATIC_INLINE void	Drive_Speed_Accele_Control() {
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

	if (curSpeed == targetSpeed) {
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002e06:	ed93 7a00 	vldr	s14, [r3]
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	d104      	bne.n	8002e24 <Drive_Speed_Accele_Control+0x24>

		// 속도를 targetSpeed 까지 올린 후, curAccele을 0으로 변환
		// 혹은 직선 가속 후 targetSpeed 까지 도달하지 못하고 감속한 후 감속이 종료되었으면 , curAccele을 0으로 변환
		curAccele = 0.f;
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
		if (curSpeed < targetSpeed) {

			curSpeed = targetSpeed;
		}
	}
}
 8002e22:	e062      	b.n	8002eea <Drive_Speed_Accele_Control+0xea>
	else if (curSpeed < targetSpeed) {
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002e26:	ed93 7a00 	vldr	s14, [r3]
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	d538      	bpl.n	8002eac <Drive_Speed_Accele_Control+0xac>
		curAccele += 0.01f;
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f00 <Drive_Speed_Accele_Control+0x100>
 8002e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
		if (curAccele > targetAccele) {
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e50:	ed93 7a00 	vldr	s14, [r3]
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <Drive_Speed_Accele_Control+0x104>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	dd03      	ble.n	8002e6c <Drive_Speed_Accele_Control+0x6c>
			curAccele = targetAccele;
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <Drive_Speed_Accele_Control+0x104>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e6a:	6013      	str	r3, [r2, #0]
		curSpeed += curAccele * MOTOR_CONTROL_INTERVAL_S;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <Drive_Speed_Accele_Control+0xfc>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002f08 <Drive_Speed_Accele_Control+0x108>
 8002e76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed > targetSpeed) {
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002e8c:	ed93 7a00 	vldr	s14, [r3]
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	dc00      	bgt.n	8002ea2 <Drive_Speed_Accele_Control+0xa2>
}
 8002ea0:	e023      	b.n	8002eea <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002ea8:	6013      	str	r3, [r2, #0]
}
 8002eaa:	e01e      	b.n	8002eea <Drive_Speed_Accele_Control+0xea>
		curSpeed -= decele * MOTOR_CONTROL_INTERVAL_S;
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <Drive_Speed_Accele_Control+0x10c>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002f08 <Drive_Speed_Accele_Control+0x108>
 8002eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed < targetSpeed) {
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002ecc:	ed93 7a00 	vldr	s14, [r3]
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	d400      	bmi.n	8002ee2 <Drive_Speed_Accele_Control+0xe2>
}
 8002ee0:	e003      	b.n	8002eea <Drive_Speed_Accele_Control+0xea>
			curSpeed = targetSpeed;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <Drive_Speed_Accele_Control+0xf8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <Drive_Speed_Accele_Control+0xf4>)
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000030 	.word	0x20000030
 8002ef8:	2000002c 	.word	0x2000002c
 8002efc:	20000024 	.word	0x20000024
 8002f00:	3c23d70a 	.word	0x3c23d70a
 8002f04:	20000020 	.word	0x20000020
 8002f08:	3a03126f 	.word	0x3a03126f
 8002f0c:	20000028 	.word	0x20000028

08002f10 <Make_Limited_Position>:




//limitedPositionVal 값 업데이트
__STATIC_INLINE void	Make_Limited_Position() {
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0

	int32_t absPositionVal = ABS(positionVal - curInlineVal);
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <Make_Limited_Position+0x78>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <Make_Limited_Position+0x7c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da05      	bge.n	8002f30 <Make_Limited_Position+0x20>
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <Make_Limited_Position+0x7c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <Make_Limited_Position+0x78>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	e004      	b.n	8002f3a <Make_Limited_Position+0x2a>
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <Make_Limited_Position+0x78>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <Make_Limited_Position+0x7c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	607b      	str	r3, [r7, #4]

	// 곡선에 진입을 시작했을 때 빠르게 curve decel을 해줌
	if (limitedPositionVal < absPositionVal) {
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	dd0d      	ble.n	8002f62 <Make_Limited_Position+0x52>

		limitedPositionVal += 100;
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3364      	adds	r3, #100	; 0x64
 8002f4c:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f4e:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal > absPositionVal) {
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	da10      	bge.n	8002f7c <Make_Limited_Position+0x6c>
			limitedPositionVal = absPositionVal;
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6013      	str	r3, [r2, #0]
		limitedPositionVal -= 50;
		if (limitedPositionVal < absPositionVal) {
			limitedPositionVal = absPositionVal;
		}
	}
}
 8002f60:	e00c      	b.n	8002f7c <Make_Limited_Position+0x6c>
		limitedPositionVal -= 50;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3b32      	subs	r3, #50	; 0x32
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f6a:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal < absPositionVal) {
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dd02      	ble.n	8002f7c <Make_Limited_Position+0x6c>
			limitedPositionVal = absPositionVal;
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <Make_Limited_Position+0x80>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	20001460 	.word	0x20001460
 8002f8c:	2000147c 	.word	0x2000147c
 8002f90:	20001464 	.word	0x20001464

08002f94 <Make_Inline_Val>:


__STATIC_INLINE void	Make_Inline_Val(float finalSpeed) {
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	 * l(m) 이동햇을 때 (curInlineVal == targetInlineVal)이 되도록 하는 curInlineVal의 변회량
	 * 		= targetInlineVal / { l(m) 이동하는데 걸리는 시간(l(m) / 500(us)) }
	 * 		= targetInlineVal * curSpeed / l(m) / 2000
	 */

	if (curInlineVal < targetInlineVal) {
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <Make_Inline_Val+0xcc>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <Make_Inline_Val+0xd0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	da2a      	bge.n	8003000 <Make_Inline_Val+0x6c>

		curInlineVal += targetInlineVal * finalSpeed * MOTOR_CONTROL_INTERVAL_S / INLINE_POSITIONING_LEN;
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <Make_Inline_Val+0xd0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003068 <Make_Inline_Val+0xd4>
 8002fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800306c <Make_Inline_Val+0xd8>
 8002fca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <Make_Inline_Val+0xcc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe2:	ee17 2a90 	vmov	r2, s15
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <Make_Inline_Val+0xcc>)
 8002fe8:	601a      	str	r2, [r3, #0]
		if (curInlineVal > targetInlineVal) {
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <Make_Inline_Val+0xcc>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <Make_Inline_Val+0xd0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	dd2e      	ble.n	8003054 <Make_Inline_Val+0xc0>
			curInlineVal = targetInlineVal;
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <Make_Inline_Val+0xd0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a19      	ldr	r2, [pc, #100]	; (8003060 <Make_Inline_Val+0xcc>)
 8002ffc:	6013      	str	r3, [r2, #0]
		curInlineVal -= targetInlineVal * finalSpeed * MOTOR_CONTROL_INTERVAL_S / INLINE_POSITIONING_LEN;
		if (curInlineVal < targetInlineVal) {
			curInlineVal = targetInlineVal;
		}
	}
}
 8002ffe:	e029      	b.n	8003054 <Make_Inline_Val+0xc0>
		curInlineVal -= targetInlineVal * finalSpeed * MOTOR_CONTROL_INTERVAL_S / INLINE_POSITIONING_LEN;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <Make_Inline_Val+0xd0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003068 <Make_Inline_Val+0xd4>
 8003018:	ee27 7a87 	vmul.f32	s14, s15, s14
 800301c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800306c <Make_Inline_Val+0xd8>
 8003020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <Make_Inline_Val+0xcc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	ee07 3a10 	vmov	s14, r3
 800302c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003038:	ee17 2a90 	vmov	r2, s15
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <Make_Inline_Val+0xcc>)
 800303e:	601a      	str	r2, [r3, #0]
		if (curInlineVal < targetInlineVal) {
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <Make_Inline_Val+0xcc>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <Make_Inline_Val+0xd0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	da03      	bge.n	8003054 <Make_Inline_Val+0xc0>
			curInlineVal = targetInlineVal;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <Make_Inline_Val+0xd0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a03      	ldr	r2, [pc, #12]	; (8003060 <Make_Inline_Val+0xcc>)
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	2000147c 	.word	0x2000147c
 8003064:	20001478 	.word	0x20001478
 8003068:	3a03126f 	.word	0x3a03126f
 800306c:	3dcccccd 	.word	0x3dcccccd

08003070 <Drive_TIM9_IRQ>:



// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
//	DWT->CYCCNT = 0;


	/* origin */
	// 가속도 및 속도 제어
	Drive_Speed_Accele_Control();
 8003076:	f7ff fec3 	bl	8002e00 <Drive_Speed_Accele_Control>

	// limitedPositionVal 값 업데이트
	Make_Limited_Position();
 800307a:	f7ff ff49 	bl	8002f10 <Make_Limited_Position>

	// 포지션 값에 따른 감속
	float finalSpeed = curSpeed * curveDeceleCoef / (limitedPositionVal + curveDeceleCoef);
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <Drive_TIM9_IRQ+0xc8>)
 8003080:	ed93 7a00 	vldr	s14, [r3]
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <Drive_TIM9_IRQ+0xcc>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800308e:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <Drive_TIM9_IRQ+0xd0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <Drive_TIM9_IRQ+0xcc>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a8:	edc7 7a02 	vstr	s15, [r7, #8]

	// inLine 값 생성
	Make_Inline_Val(finalSpeed);
 80030ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80030b0:	f7ff ff70 	bl	8002f94 <Make_Inline_Val>

	int32_t finalPositionValue = limitedPositionVal;
 80030b4:	4b22      	ldr	r3, [pc, #136]	; (8003140 <Drive_TIM9_IRQ+0xd0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
	if (positionVal < 0) {
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <Drive_TIM9_IRQ+0xd4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da03      	bge.n	80030ca <Drive_TIM9_IRQ+0x5a>
		finalPositionValue = -1 * limitedPositionVal;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <Drive_TIM9_IRQ+0xd0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	425b      	negs	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
	}
	finalPositionValue -= curInlineVal;
 80030ca:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <Drive_TIM9_IRQ+0xd8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]

	//position 값에 따른 좌우 모터 속도 조정
	float speedL = finalSpeed * (1 + finalPositionValue * positionCoef);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <Drive_TIM9_IRQ+0xdc>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80030f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f8:	edc7 7a01 	vstr	s15, [r7, #4]
	float speedR = finalSpeed * (1 - finalPositionValue * positionCoef);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <Drive_TIM9_IRQ+0xdc>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003118:	ed97 7a02 	vldr	s14, [r7, #8]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	edc7 7a00 	vstr	s15, [r7]

	Motor_Speed_Control(speedL, speedR);
 8003124:	edd7 0a00 	vldr	s1, [r7]
 8003128:	ed97 0a01 	vldr	s0, [r7, #4]
 800312c:	f7ff fcba 	bl	8002aa4 <Motor_Speed_Control>

//	uint32_t tickElapsed = DWT->CYCCNT;
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000030 	.word	0x20000030
 800313c:	20000038 	.word	0x20000038
 8003140:	20001464 	.word	0x20001464
 8003144:	20001460 	.word	0x20001460
 8003148:	2000147c 	.word	0x2000147c
 800314c:	20000018 	.word	0x20000018

08003150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003154:	e7fe      	b.n	8003154 <NMI_Handler+0x4>

08003156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 800315a:	f005 faef 	bl	800873c <Motor_Power_Off>
 800315e:	e7fc      	b.n	800315a <HardFault_Handler+0x4>

08003160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 8003164:	f005 faea 	bl	800873c <Motor_Power_Off>
 8003168:	e7fc      	b.n	8003164 <MemManage_Handler+0x4>

0800316a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 800316e:	f005 fae5 	bl	800873c <Motor_Power_Off>
 8003172:	e7fc      	b.n	800316e <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 8003178:	f005 fae0 	bl	800873c <Motor_Power_Off>
 800317c:	e7fc      	b.n	8003178 <UsageFault_Handler+0x4>

0800317e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SysTick_Handler+0x18>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a03      	ldr	r2, [pc, #12]	; (80031c0 <SysTick_Handler+0x18>)
 80031b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	200002a4 	.word	0x200002a4

080031c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	Drive_TIM9_IRQ();
 80031c8:	f7ff ff52 	bl	8003070 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM9);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80031ce:	f7ff fa15 	bl	80025fc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40014000 	.word	0x40014000

080031dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	Sensor_TIM5_IRQ();
 80031e0:	f7ff fbee 	bl	80029c0 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM5);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <TIM5_IRQHandler+0x14>)
 80031e6:	f7ff fa09 	bl	80025fc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40000c00 	.word	0x40000c00

080031f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	return 1;
 80031f8:	2301      	movs	r3, #1
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_kill>:

int _kill(int pid, int sig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800320e:	f007 fa31 	bl	800a674 <__errno>
 8003212:	4603      	mov	r3, r0
 8003214:	2216      	movs	r2, #22
 8003216:	601a      	str	r2, [r3, #0]
	return -1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_exit>:

void _exit (int status)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800322c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ffe7 	bl	8003204 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003236:	e7fe      	b.n	8003236 <_exit+0x12>

08003238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e00a      	b.n	8003260 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324a:	f3af 8000 	nop.w
 800324e:	4601      	mov	r1, r0
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	60ba      	str	r2, [r7, #8]
 8003256:	b2ca      	uxtb	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	dbf0      	blt.n	800324a <_read+0x12>
	}

return len;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e009      	b.n	8003298 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	60ba      	str	r2, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fe81 	bl	8006f94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	dbf1      	blt.n	8003284 <_write+0x12>
	}
	return len;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_close>:

int _close(int file)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
	return -1;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d2:	605a      	str	r2, [r3, #4]
	return 0;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_isatty>:

int _isatty(int file)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	return 1;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	return 0;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f007 f996 	bl	800a674 <__errno>
 8003348:	4603      	mov	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <_sbrk+0x64>)
 8003364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20020000 	.word	0x20020000
 8003374:	00000400 	.word	0x00000400
 8003378:	200002b8 	.word	0x200002b8
 800337c:	20004848 	.word	0x20004848

08003380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <SystemInit+0x20>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <SystemInit+0x20>)
 800338c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c0:	4c0b      	ldr	r4, [pc, #44]	; (80033f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ce:	f7ff ffd7 	bl	8003380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d2:	f007 f955 	bl	800a680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d6:	f7fe fb89 	bl	8001aec <main>
  bx  lr    
 80033da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e4:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 80033e8:	0800d7ec 	.word	0x0800d7ec
  ldr r2, =_sbss
 80033ec:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80033f0:	20004844 	.word	0x20004844

080033f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f4:	e7fe      	b.n	80033f4 <ADC_IRQHandler>

080033f6 <LL_ADC_SetCommonClock>:
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_REG_SetSequencerLength>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_ADC_IsEnabled>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003476:	480a      	ldr	r0, [pc, #40]	; (80034a0 <LL_ADC_CommonInit+0x38>)
 8003478:	f7ff ffe3 	bl	8003442 <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ffb4 	bl	80033f6 <LL_ADC_SetCommonClock>
 800348e:	e001      	b.n	8003494 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40012000 	.word	0x40012000

080034a4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffc5 	bl	8003442 <LL_ADC_IsEnabled>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d117      	bne.n	80034ee <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80034c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	6811      	ldr	r1, [r2, #0]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e001      	b.n	80034f2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff99 	bl	8003442 <LL_ADC_IsEnabled>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12b      	bne.n	800356e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	e005      	b.n	800353e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <LL_ADC_REG_Init+0x80>)
 8003544:	4013      	ands	r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	68d2      	ldr	r2, [r2, #12]
 8003552:	4311      	orrs	r1, r2
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	6912      	ldr	r2, [r2, #16]
 8003558:	430a      	orrs	r2, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff58 	bl	800341c <LL_ADC_REG_SetSequencerLength>
 800356c:	e001      	b.n	8003572 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	c0fffcfd 	.word	0xc0fffcfd

08003580 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <LL_EXTI_EnableIT_0_31+0x20>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40013c00 	.word	0x40013c00

080035a4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4904      	ldr	r1, [pc, #16]	; (80035c8 <LL_EXTI_DisableIT_0_31+0x24>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40013c00 	.word	0x40013c00

080035cc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <LL_EXTI_EnableEvent_0_31+0x20>)
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <LL_EXTI_EnableEvent_0_31+0x20>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]

}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40013c00 	.word	0x40013c00

080035f0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <LL_EXTI_DisableEvent_0_31+0x24>)
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	43db      	mvns	r3, r3
 8003600:	4904      	ldr	r1, [pc, #16]	; (8003614 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003602:	4013      	ands	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40013c00 	.word	0x40013c00

08003618 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4313      	orrs	r3, r2
 800362a:	608b      	str	r3, [r1, #8]

}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40013c00 	.word	0x40013c00

0800363c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	43db      	mvns	r3, r3
 800364c:	4904      	ldr	r1, [pc, #16]	; (8003660 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800364e:	4013      	ands	r3, r2
 8003650:	608b      	str	r3, [r1, #8]

}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40013c00 	.word	0x40013c00

08003664 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	4904      	ldr	r1, [pc, #16]	; (8003684 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40013c00 	.word	0x40013c00

08003688 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	43db      	mvns	r3, r3
 8003698:	4904      	ldr	r1, [pc, #16]	; (80036ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800369a:	4013      	ands	r3, r2
 800369c:	60cb      	str	r3, [r1, #12]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	791b      	ldrb	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d065      	beq.n	8003790 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d06b      	beq.n	80037a4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	795b      	ldrb	r3, [r3, #5]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d01c      	beq.n	800370e <LL_EXTI_Init+0x5e>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	dc25      	bgt.n	8003724 <LL_EXTI_Init+0x74>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <LL_EXTI_Init+0x32>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d00b      	beq.n	80036f8 <LL_EXTI_Init+0x48>
 80036e0:	e020      	b.n	8003724 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff82 	bl	80035f0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff45 	bl	8003580 <LL_EXTI_EnableIT_0_31>
          break;
 80036f6:	e018      	b.n	800372a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff51 	bl	80035a4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff60 	bl	80035cc <LL_EXTI_EnableEvent_0_31>
          break;
 800370c:	e00d      	b.n	800372a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff34 	bl	8003580 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff55 	bl	80035cc <LL_EXTI_EnableEvent_0_31>
          break;
 8003722:	e002      	b.n	800372a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
          break;
 8003728:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	799b      	ldrb	r3, [r3, #6]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d038      	beq.n	80037a4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	799b      	ldrb	r3, [r3, #6]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d01c      	beq.n	8003774 <LL_EXTI_Init+0xc4>
 800373a:	2b03      	cmp	r3, #3
 800373c:	dc25      	bgt.n	800378a <LL_EXTI_Init+0xda>
 800373e:	2b01      	cmp	r3, #1
 8003740:	d002      	beq.n	8003748 <LL_EXTI_Init+0x98>
 8003742:	2b02      	cmp	r3, #2
 8003744:	d00b      	beq.n	800375e <LL_EXTI_Init+0xae>
 8003746:	e020      	b.n	800378a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff9b 	bl	8003688 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ff5e 	bl	8003618 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800375c:	e022      	b.n	80037a4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff6a 	bl	800363c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff79 	bl	8003664 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003772:	e017      	b.n	80037a4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff4d 	bl	8003618 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff6e 	bl	8003664 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003788:	e00c      	b.n	80037a4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
            break;
 800378e:	e009      	b.n	80037a4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff05 	bl	80035a4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff26 	bl	80035f0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <LL_GPIO_SetPinMode>:
{
 80037ae:	b480      	push	{r7}
 80037b0:	b089      	sub	sp, #36	; 0x24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	613b      	str	r3, [r7, #16]
  return result;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2103      	movs	r1, #3
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	61bb      	str	r3, [r7, #24]
  return result;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3724      	adds	r7, #36	; 0x24
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_GPIO_SetPinOutputType>:
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	43db      	mvns	r3, r3
 8003820:	401a      	ands	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_GPIO_SetPinSpeed>:
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	613b      	str	r3, [r7, #16]
  return result;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2103      	movs	r1, #3
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	61bb      	str	r3, [r7, #24]
  return result;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_GPIO_SetPinPull>:
{
 800389a:	b480      	push	{r7}
 800389c:	b089      	sub	sp, #36	; 0x24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	613b      	str	r3, [r7, #16]
  return result;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2103      	movs	r1, #3
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	401a      	ands	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	61bb      	str	r3, [r7, #24]
  return result;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3724      	adds	r7, #36	; 0x24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_GPIO_SetAFPin_0_7>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	613b      	str	r3, [r7, #16]
  return result;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	210f      	movs	r1, #15
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61bb      	str	r3, [r7, #24]
  return result;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_GPIO_SetAFPin_8_15>:
{
 8003956:	b480      	push	{r7}
 8003958:	b089      	sub	sp, #36	; 0x24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	613b      	str	r3, [r7, #16]
  return result;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	210f      	movs	r1, #15
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	61bb      	str	r3, [r7, #24]
  return result;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039ac:	bf00      	nop
 80039ae:	3724      	adds	r7, #36	; 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	613b      	str	r3, [r7, #16]
  return result;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039e2:	e050      	b.n	8003a86 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d042      	beq.n	8003a80 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d003      	beq.n	8003a0a <LL_GPIO_Init+0x52>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d10d      	bne.n	8003a26 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff12 	bl	800383c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fef3 	bl	800380c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ff33 	bl	800389a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d11a      	bne.n	8003a72 <LL_GPIO_Init+0xba>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	60bb      	str	r3, [r7, #8]
  return result;
 8003a48:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b07      	cmp	r3, #7
 8003a52:	d807      	bhi.n	8003a64 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff4b 	bl	80038f8 <LL_GPIO_SetAFPin_0_7>
 8003a62:	e006      	b.n	8003a72 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff72 	bl	8003956 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe97 	bl	80037ae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1a7      	bne.n	80039e4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <LL_I2C_Enable>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_I2C_Disable>:
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_I2C_ConfigFilters>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f023 021f 	bic.w	r2, r3, #31
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_I2C_SetOwnAddress1>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <LL_I2C_ConfigSpeed+0x124>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	0c9b      	lsrs	r3, r3, #18
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	493a      	ldr	r1, [pc, #232]	; (8003c64 <LL_I2C_ConfigSpeed+0x128>)
 8003b7a:	428b      	cmp	r3, r1
 8003b7c:	d802      	bhi.n	8003b84 <LL_I2C_ConfigSpeed+0x48>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3301      	adds	r3, #1
 8003b82:	e009      	b.n	8003b98 <LL_I2C_ConfigSpeed+0x5c>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4936      	ldr	r1, [pc, #216]	; (8003c68 <LL_I2C_ConfigSpeed+0x12c>)
 8003b90:	fba1 1303 	umull	r1, r3, r1, r3
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	3301      	adds	r3, #1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <LL_I2C_ConfigSpeed+0x128>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d939      	bls.n	8003c1a <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d117      	bne.n	8003bdc <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	e01d      	b.n	8003c12 <LL_I2C_ConfigSpeed+0xd6>
 8003bd6:	f248 0301 	movw	r3, #32769	; 0x8001
 8003bda:	e01a      	b.n	8003c12 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009a      	lsls	r2, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0c:	e001      	b.n	8003c12 <LL_I2C_ConfigSpeed+0xd6>
 8003c0e:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e011      	b.n	8003c3e <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c28:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	e000      	b.n	8003c3c <LL_I2C_ConfigSpeed+0x100>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	61da      	str	r2, [r3, #28]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	431bde83 	.word	0x431bde83
 8003c64:	000186a0 	.word	0x000186a0
 8003c68:	10624dd3 	.word	0x10624dd3

08003c6c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 021a 	bic.w	r2, r3, #26
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fefb 	bl	8003abe <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f89d 	bl	8003e0c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fefe 	bl	8003ade <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003ce2:	6939      	ldr	r1, [r7, #16]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff25 	bl	8003b3c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6959      	ldr	r1, [r3, #20]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ff04 	bl	8003b0a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ffaf 	bl	8003c6c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fec5 	bl	8003a9e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffb9 	bl	8003c92 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <LL_RCC_GetSysClkSource>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <LL_RCC_GetSysClkSource+0x18>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <LL_RCC_GetAHBPrescaler>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <LL_RCC_GetAHBPrescaler+0x18>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <LL_RCC_GetAPB1Prescaler>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <LL_RCC_GetAPB1Prescaler+0x18>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800

08003d80 <LL_RCC_GetAPB2Prescaler>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <LL_RCC_PLL_GetN+0x18>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	099b      	lsrs	r3, r3, #6
 8003dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <LL_RCC_PLL_GetP+0x18>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <LL_RCC_PLL_GetDivider+0x18>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e14:	f000 f820 	bl	8003e58 <RCC_GetSystemClockFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f840 	bl	8003ea8 <RCC_GetHCLKClockFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f84e 	bl	8003ed4 <RCC_GetPCLK1ClockFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f85a 	bl	8003efc <RCC_GetPCLK2ClockFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e62:	f7ff ff63 	bl	8003d2c <LL_RCC_GetSysClkSource>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00c      	beq.n	8003e86 <RCC_GetSystemClockFreq+0x2e>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d80f      	bhi.n	8003e90 <RCC_GetSystemClockFreq+0x38>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <RCC_GetSystemClockFreq+0x22>
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d003      	beq.n	8003e80 <RCC_GetSystemClockFreq+0x28>
 8003e78:	e00a      	b.n	8003e90 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <RCC_GetSystemClockFreq+0x48>)
 8003e7c:	607b      	str	r3, [r7, #4]
      break;
 8003e7e:	e00a      	b.n	8003e96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <RCC_GetSystemClockFreq+0x4c>)
 8003e82:	607b      	str	r3, [r7, #4]
      break;
 8003e84:	e007      	b.n	8003e96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003e86:	2008      	movs	r0, #8
 8003e88:	f000 f84c 	bl	8003f24 <RCC_PLL_GetFreqDomain_SYS>
 8003e8c:	6078      	str	r0, [r7, #4]
      break;
 8003e8e:	e002      	b.n	8003e96 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <RCC_GetSystemClockFreq+0x48>)
 8003e92:	607b      	str	r3, [r7, #4]
      break;
 8003e94:	bf00      	nop
  }

  return frequency;
 8003e96:	687b      	ldr	r3, [r7, #4]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003eb0:	f7ff ff4a 	bl	8003d48 <LL_RCC_GetAHBPrescaler>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <RCC_GetHCLKClockFreq+0x28>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	40d3      	lsrs	r3, r2
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	0800d1d4 	.word	0x0800d1d4

08003ed4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003edc:	f7ff ff42 	bl	8003d64 <LL_RCC_GetAPB1Prescaler>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0a9b      	lsrs	r3, r3, #10
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	40d3      	lsrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	0800d1e4 	.word	0x0800d1e4

08003efc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f04:	f7ff ff3c 	bl	8003d80 <LL_RCC_GetAPB2Prescaler>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	0b5b      	lsrs	r3, r3, #13
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	461a      	mov	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	40d3      	lsrs	r3, r2
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	0800d1e4 	.word	0x0800d1e4

08003f24 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f38:	f7ff ff30 	bl	8003d9c <LL_RCC_PLL_GetMainSource>
 8003f3c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d003      	beq.n	8003f54 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003f4c:	e005      	b.n	8003f5a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f50:	617b      	str	r3, [r7, #20]
      break;
 8003f52:	e005      	b.n	8003f60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003f56:	617b      	str	r3, [r7, #20]
      break;
 8003f58:	e002      	b.n	8003f60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003f5c:	617b      	str	r3, [r7, #20]
      break;
 8003f5e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d113      	bne.n	8003f8e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f66:	f7ff ff43 	bl	8003df0 <LL_RCC_PLL_GetDivider>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003f72:	f7ff ff21 	bl	8003db8 <LL_RCC_PLL_GetN>
 8003f76:	4603      	mov	r3, r0
 8003f78:	fb03 f404 	mul.w	r4, r3, r4
 8003f7c:	f7ff ff2a 	bl	8003dd4 <LL_RCC_PLL_GetP>
 8003f80:	4603      	mov	r3, r0
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	3301      	adds	r3, #1
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f8c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003f8e:	693b      	ldr	r3, [r7, #16]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <LL_SPI_IsEnabled>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d101      	bne.n	8003fb8 <LL_SPI_IsEnabled+0x18>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <LL_SPI_IsEnabled+0x1a>
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ffd3 	bl	8003fa0 <LL_SPI_IsEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d139      	bne.n	8004074 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004008:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	6811      	ldr	r1, [r2, #0]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	4311      	orrs	r1, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6892      	ldr	r2, [r2, #8]
 800401a:	4311      	orrs	r1, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	68d2      	ldr	r2, [r2, #12]
 8004020:	4311      	orrs	r1, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6912      	ldr	r2, [r2, #16]
 8004026:	4311      	orrs	r1, r2
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	6952      	ldr	r2, [r2, #20]
 800402c:	4311      	orrs	r1, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	6992      	ldr	r2, [r2, #24]
 8004032:	4311      	orrs	r1, r2
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	69d2      	ldr	r2, [r2, #28]
 8004038:	4311      	orrs	r1, r2
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	6a12      	ldr	r2, [r2, #32]
 800403e:	430a      	orrs	r2, r1
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 0204 	bic.w	r2, r3, #4
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	d105      	bne.n	8004070 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffab 	bl	8003fc6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	61da      	str	r2, [r3, #28]
  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <LL_TIM_SetPrescaler>:
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_TIM_SetAutoReload>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_TIM_SetRepetitionCounter>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_TIM_OC_SetCompareCH1>:
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_TIM_OC_SetCompareCH2>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_TIM_OC_SetCompareCH3>:
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_TIM_OC_SetCompareCH4>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	615a      	str	r2, [r3, #20]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a31      	ldr	r2, [pc, #196]	; (8004248 <LL_TIM_Init+0xd8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00f      	beq.n	80041a8 <LL_TIM_Init+0x38>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d00b      	beq.n	80041a8 <LL_TIM_Init+0x38>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2e      	ldr	r2, [pc, #184]	; (800424c <LL_TIM_Init+0xdc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <LL_TIM_Init+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <LL_TIM_Init+0xe0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <LL_TIM_Init+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <LL_TIM_Init+0xe4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d106      	bne.n	80041b6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a23      	ldr	r2, [pc, #140]	; (8004248 <LL_TIM_Init+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d017      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <LL_TIM_Init+0xdc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <LL_TIM_Init+0xe0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <LL_TIM_Init+0xe4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <LL_TIM_Init+0xe8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <LL_TIM_Init+0xec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <LL_TIM_Init+0x86>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <LL_TIM_Init+0xf0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d106      	bne.n	8004204 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff48 	bl	80040a6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff34 	bl	800408a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <LL_TIM_Init+0xd8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d105      	bne.n	8004236 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff46 	bl	80040c2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff89 	bl	800414e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800

08004264 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427a:	d027      	beq.n	80042cc <LL_TIM_OC_Init+0x68>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d82a      	bhi.n	80042da <LL_TIM_OC_Init+0x76>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d018      	beq.n	80042be <LL_TIM_OC_Init+0x5a>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d822      	bhi.n	80042da <LL_TIM_OC_Init+0x76>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d003      	beq.n	80042a2 <LL_TIM_OC_Init+0x3e>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d007      	beq.n	80042b0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80042a0:	e01b      	b.n	80042da <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f81f 	bl	80042e8 <OC1Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	75fb      	strb	r3, [r7, #23]
      break;
 80042ae:	e015      	b.n	80042dc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f87e 	bl	80043b4 <OC2Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	e00e      	b.n	80042dc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f8e1 	bl	8004488 <OC3Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ca:	e007      	b.n	80042dc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f944 	bl	800455c <OC4Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]
      break;
 80042d8:	e000      	b.n	80042dc <LL_TIM_OC_Init+0x78>
      break;
 80042da:	bf00      	nop
  }

  return result;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0202 	bic.w	r2, r3, #2
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1a      	ldr	r2, [pc, #104]	; (80043b0 <OC1Config+0xc8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d11e      	bne.n	8004388 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0208 	bic.w	r2, r3, #8
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0204 	bic.w	r2, r3, #4
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fe9f 	bl	80040de <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40010000 	.word	0x40010000

080043b4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0210 	bic.w	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0220 	bic.w	r2, r3, #32
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <OC2Config+0xd0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d11f      	bne.n	800445c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	019b      	lsls	r3, r3, #6
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fe43 	bl	80040fa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40010000 	.word	0x40010000

08004488 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <OC3Config+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d11f      	bne.n	800452e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	029b      	lsls	r3, r3, #10
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fde8 	bl	8004116 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000

0800455c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	031b      	lsls	r3, r3, #12
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <OC4Config+0xa0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d107      	bne.n	80045d4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	019b      	lsls	r3, r3, #6
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fda3 	bl	8004132 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40010000 	.word	0x40010000

08004600 <LL_USART_IsEnabled>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <LL_USART_SetStopBitsLength>:
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_USART_SetHWFlowCtrl>:
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	615a      	str	r2, [r3, #20]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <LL_USART_SetBaudRate>:
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0c0      	sub	sp, #256	; 0x100
 800467a:	af00      	add	r7, sp, #0
 800467c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004680:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004684:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004688:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004694:	f040 810c 	bne.w	80048b0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046aa:	4622      	mov	r2, r4
 80046ac:	462b      	mov	r3, r5
 80046ae:	1891      	adds	r1, r2, r2
 80046b0:	6639      	str	r1, [r7, #96]	; 0x60
 80046b2:	415b      	adcs	r3, r3
 80046b4:	667b      	str	r3, [r7, #100]	; 0x64
 80046b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046ba:	4621      	mov	r1, r4
 80046bc:	eb12 0801 	adds.w	r8, r2, r1
 80046c0:	4629      	mov	r1, r5
 80046c2:	eb43 0901 	adc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046e8:	462b      	mov	r3, r5
 80046ea:	eb49 0303 	adc.w	r3, r9, r3
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046f6:	2200      	movs	r2, #0
 80046f8:	469a      	mov	sl, r3
 80046fa:	4693      	mov	fp, r2
 80046fc:	eb1a 030a 	adds.w	r3, sl, sl
 8004700:	65bb      	str	r3, [r7, #88]	; 0x58
 8004702:	eb4b 030b 	adc.w	r3, fp, fp
 8004706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004708:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800470c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004710:	f7fc fa52 	bl	8000bb8 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b64      	ldr	r3, [pc, #400]	; (80048ac <LL_USART_SetBaudRate+0x238>)
 800471a:	fba3 2302 	umull	r2, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	b29b      	uxth	r3, r3
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	b29c      	uxth	r4, r3
 8004726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004730:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004734:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	6539      	str	r1, [r7, #80]	; 0x50
 8004740:	415b      	adcs	r3, r3
 8004742:	657b      	str	r3, [r7, #84]	; 0x54
 8004744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	64b9      	str	r1, [r7, #72]	; 0x48
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800477c:	464b      	mov	r3, r9
 800477e:	460a      	mov	r2, r1
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004788:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800478c:	2200      	movs	r2, #0
 800478e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004792:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004796:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800479a:	460b      	mov	r3, r1
 800479c:	18db      	adds	r3, r3, r3
 800479e:	643b      	str	r3, [r7, #64]	; 0x40
 80047a0:	4613      	mov	r3, r2
 80047a2:	eb42 0303 	adc.w	r3, r2, r3
 80047a6:	647b      	str	r3, [r7, #68]	; 0x44
 80047a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ac:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80047b0:	f7fc fa02 	bl	8000bb8 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	4b3c      	ldr	r3, [pc, #240]	; (80048ac <LL_USART_SetBaudRate+0x238>)
 80047bc:	fba3 2301 	umull	r2, r3, r3, r1
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	2264      	movs	r2, #100	; 0x64
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	1acb      	subs	r3, r1, r3
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047d0:	4b36      	ldr	r3, [pc, #216]	; (80048ac <LL_USART_SetBaudRate+0x238>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	b29b      	uxth	r3, r3
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4423      	add	r3, r4
 80047e6:	b29c      	uxth	r4, r3
 80047e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047f6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80047fa:	4642      	mov	r2, r8
 80047fc:	464b      	mov	r3, r9
 80047fe:	1891      	adds	r1, r2, r2
 8004800:	63b9      	str	r1, [r7, #56]	; 0x38
 8004802:	415b      	adcs	r3, r3
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004806:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800480a:	4641      	mov	r1, r8
 800480c:	1851      	adds	r1, r2, r1
 800480e:	6339      	str	r1, [r7, #48]	; 0x30
 8004810:	4649      	mov	r1, r9
 8004812:	414b      	adcs	r3, r1
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004822:	4659      	mov	r1, fp
 8004824:	00cb      	lsls	r3, r1, #3
 8004826:	4651      	mov	r1, sl
 8004828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482c:	4651      	mov	r1, sl
 800482e:	00ca      	lsls	r2, r1, #3
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	4603      	mov	r3, r0
 8004836:	4642      	mov	r2, r8
 8004838:	189b      	adds	r3, r3, r2
 800483a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800483e:	464b      	mov	r3, r9
 8004840:	460a      	mov	r2, r1
 8004842:	eb42 0303 	adc.w	r3, r2, r3
 8004846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800484a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004854:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004858:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800485c:	460b      	mov	r3, r1
 800485e:	18db      	adds	r3, r3, r3
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
 8004862:	4613      	mov	r3, r2
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800486e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004872:	f7fc f9a1 	bl	8000bb8 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <LL_USART_SetBaudRate+0x238>)
 800487c:	fba3 1302 	umull	r1, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	2164      	movs	r1, #100	; 0x64
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	3332      	adds	r3, #50	; 0x32
 800488e:	4a07      	ldr	r2, [pc, #28]	; (80048ac <LL_USART_SetBaudRate+0x238>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	b29b      	uxth	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	b29b      	uxth	r3, r3
 800489e:	4423      	add	r3, r4
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	e108      	b.n	8004abe <LL_USART_SetBaudRate+0x44a>
 80048ac:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80048b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ba:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048be:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80048c2:	4642      	mov	r2, r8
 80048c4:	464b      	mov	r3, r9
 80048c6:	1891      	adds	r1, r2, r2
 80048c8:	6239      	str	r1, [r7, #32]
 80048ca:	415b      	adcs	r3, r3
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048d2:	4641      	mov	r1, r8
 80048d4:	1854      	adds	r4, r2, r1
 80048d6:	4649      	mov	r1, r9
 80048d8:	eb43 0501 	adc.w	r5, r3, r1
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	00eb      	lsls	r3, r5, #3
 80048e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ea:	00e2      	lsls	r2, r4, #3
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	18e3      	adds	r3, r4, r3
 80048f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048f8:	464b      	mov	r3, r9
 80048fa:	eb45 0303 	adc.w	r3, r5, r3
 80048fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800490c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800491c:	4629      	mov	r1, r5
 800491e:	008b      	lsls	r3, r1, #2
 8004920:	4621      	mov	r1, r4
 8004922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004926:	4621      	mov	r1, r4
 8004928:	008a      	lsls	r2, r1, #2
 800492a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800492e:	f7fc f943 	bl	8000bb8 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <LL_USART_SetBaudRate+0x458>)
 8004938:	fba3 2302 	umull	r2, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	b29b      	uxth	r3, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	b29c      	uxth	r4, r3
 8004944:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004952:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004956:	4642      	mov	r2, r8
 8004958:	464b      	mov	r3, r9
 800495a:	1891      	adds	r1, r2, r2
 800495c:	61b9      	str	r1, [r7, #24]
 800495e:	415b      	adcs	r3, r3
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004966:	4641      	mov	r1, r8
 8004968:	1851      	adds	r1, r2, r1
 800496a:	6139      	str	r1, [r7, #16]
 800496c:	4649      	mov	r1, r9
 800496e:	414b      	adcs	r3, r1
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800497e:	4659      	mov	r1, fp
 8004980:	00cb      	lsls	r3, r1, #3
 8004982:	4651      	mov	r1, sl
 8004984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004988:	4651      	mov	r1, sl
 800498a:	00ca      	lsls	r2, r1, #3
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	4603      	mov	r3, r0
 8004992:	4642      	mov	r2, r8
 8004994:	189b      	adds	r3, r3, r2
 8004996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800499a:	464b      	mov	r3, r9
 800499c:	460a      	mov	r2, r1
 800499e:	eb42 0303 	adc.w	r3, r2, r3
 80049a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80049c0:	4649      	mov	r1, r9
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ca:	4641      	mov	r1, r8
 80049cc:	008a      	lsls	r2, r1, #2
 80049ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80049d2:	f7fc f8f1 	bl	8000bb8 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <LL_USART_SetBaudRate+0x458>)
 80049de:	fba3 2301 	umull	r2, r3, r3, r1
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2264      	movs	r2, #100	; 0x64
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	1acb      	subs	r3, r1, r3
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	3332      	adds	r3, #50	; 0x32
 80049f0:	4a36      	ldr	r2, [pc, #216]	; (8004acc <LL_USART_SetBaudRate+0x458>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4423      	add	r3, r4
 8004a02:	b29c      	uxth	r4, r3
 8004a04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a08:	2200      	movs	r2, #0
 8004a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a0c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a0e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a12:	4642      	mov	r2, r8
 8004a14:	464b      	mov	r3, r9
 8004a16:	1891      	adds	r1, r2, r2
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	415b      	adcs	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a22:	4641      	mov	r1, r8
 8004a24:	1851      	adds	r1, r2, r1
 8004a26:	6039      	str	r1, [r7, #0]
 8004a28:	4649      	mov	r1, r9
 8004a2a:	414b      	adcs	r3, r1
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3a:	4659      	mov	r1, fp
 8004a3c:	00cb      	lsls	r3, r1, #3
 8004a3e:	4651      	mov	r1, sl
 8004a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a44:	4651      	mov	r1, sl
 8004a46:	00ca      	lsls	r2, r1, #3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4642      	mov	r2, r8
 8004a50:	189b      	adds	r3, r3, r2
 8004a52:	673b      	str	r3, [r7, #112]	; 0x70
 8004a54:	464b      	mov	r3, r9
 8004a56:	460a      	mov	r2, r1
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a62:	2200      	movs	r2, #0
 8004a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004a74:	4649      	mov	r1, r9
 8004a76:	008b      	lsls	r3, r1, #2
 8004a78:	4641      	mov	r1, r8
 8004a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a7e:	4641      	mov	r1, r8
 8004a80:	008a      	lsls	r2, r1, #2
 8004a82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a86:	f7fc f897 	bl	8000bb8 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <LL_USART_SetBaudRate+0x458>)
 8004a90:	fba3 1302 	umull	r1, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	2164      	movs	r1, #100	; 0x64
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	3332      	adds	r3, #50	; 0x32
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <LL_USART_SetBaudRate+0x458>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4423      	add	r3, r4
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	609a      	str	r2, [r3, #8]
}
 8004abe:	bf00      	nop
 8004ac0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	51eb851f 	.word	0x51eb851f

08004ad0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fd8c 	bl	8004600 <LL_USART_IsEnabled>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d149      	bne.n	8004b82 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004af6:	f023 030c 	bic.w	r3, r3, #12
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	6851      	ldr	r1, [r2, #4]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	68d2      	ldr	r2, [r2, #12]
 8004b02:	4311      	orrs	r1, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	6912      	ldr	r2, [r2, #16]
 8004b08:	4311      	orrs	r1, r2
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	6992      	ldr	r2, [r2, #24]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fd83 	bl	8004628 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff fd90 	bl	800464e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004b2e:	f107 0308 	add.w	r3, r7, #8
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff f96a 	bl	8003e0c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <LL_USART_Init+0xbc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d102      	bne.n	8004b46 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e00c      	b.n	8004b60 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <LL_USART_Init+0xc0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d102      	bne.n	8004b54 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e005      	b.n	8004b60 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <LL_USART_Init+0xc4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69b9      	ldr	r1, [r7, #24]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fd79 	bl	8004674 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40011400 	.word	0x40011400

08004b98 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <LL_InitTick+0x30>)
 8004bac:	3b01      	subs	r3, #1
 8004bae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <LL_InitTick+0x30>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <LL_InitTick+0x30>)
 8004bb8:	2205      	movs	r2, #5
 8004bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000e010 	.word	0xe000e010

08004bcc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffdd 	bl	8004b98 <LL_InitTick>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <LL_SetSystemCoreClock+0x1c>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000000 	.word	0x20000000

08004c08 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	_file = file;
 8004c14:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <__Custom_Exception_Set_Message+0x2c>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6013      	str	r3, [r2, #0]
	_line = line;
 8004c1a:	4a07      	ldr	r2, [pc, #28]	; (8004c38 <__Custom_Exception_Set_Message+0x30>)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6013      	str	r3, [r2, #0]
	_message = message;
 8004c20:	4a06      	ldr	r2, [pc, #24]	; (8004c3c <__Custom_Exception_Set_Message+0x34>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6013      	str	r3, [r2, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	200002bc 	.word	0x200002bc
 8004c38:	200002c0 	.word	0x200002c0
 8004c3c:	200002c4 	.word	0x200002c4

08004c40 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8004c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c48:	4803      	ldr	r0, [pc, #12]	; (8004c58 <Custom_FileSystem_Load+0x18>)
 8004c4a:	f000 f851 	bl	8004cf0 <Custom_Flash_Read>
	filesystemLoaded = true;
 8004c4e:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <Custom_FileSystem_Load+0x1c>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200002c8 	.word	0x200002c8
 8004c5c:	200012c9 	.word	0x200012c9

08004c60 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <Custom_Flash_Check_Error+0x78>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <Custom_Flash_Check_Error+0x24>
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <Custom_Flash_Check_Error+0x7c>)
 8004c78:	2113      	movs	r1, #19
 8004c7a:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <Custom_Flash_Check_Error+0x80>)
 8004c7c:	f7ff ffc4 	bl	8004c08 <__Custom_Exception_Set_Message>
 8004c80:	2300      	movs	r3, #0
 8004c82:	e024      	b.n	8004cce <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <Custom_Flash_Check_Error+0x3c>
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <Custom_Flash_Check_Error+0x84>)
 8004c90:	2114      	movs	r1, #20
 8004c92:	4813      	ldr	r0, [pc, #76]	; (8004ce0 <Custom_Flash_Check_Error+0x80>)
 8004c94:	f7ff ffb8 	bl	8004c08 <__Custom_Exception_Set_Message>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e018      	b.n	8004cce <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <Custom_Flash_Check_Error+0x54>
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <Custom_Flash_Check_Error+0x88>)
 8004ca8:	2115      	movs	r1, #21
 8004caa:	480d      	ldr	r0, [pc, #52]	; (8004ce0 <Custom_Flash_Check_Error+0x80>)
 8004cac:	f7ff ffac 	bl	8004c08 <__Custom_Exception_Set_Message>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e00c      	b.n	8004cce <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <Custom_Flash_Check_Error+0x6c>
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <Custom_Flash_Check_Error+0x8c>)
 8004cc0:	2116      	movs	r1, #22
 8004cc2:	4807      	ldr	r0, [pc, #28]	; (8004ce0 <Custom_Flash_Check_Error+0x80>)
 8004cc4:	f7ff ffa0 	bl	8004c08 <__Custom_Exception_Set_Message>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <Custom_Flash_Check_Error+0x6e>

	return true;
 8004ccc:	2301      	movs	r3, #1
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023c00 	.word	0x40023c00
 8004cdc:	0800c8f0 	.word	0x0800c8f0
 8004ce0:	0800c90c 	.word	0x0800c90c
 8004ce4:	0800c934 	.word	0x0800c934
 8004ce8:	0800c954 	.word	0x0800c954
 8004cec:	0800c974 	.word	0x0800c974

08004cf0 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d00:	d306      	bcc.n	8004d10 <Custom_Flash_Read+0x20>
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <Custom_Flash_Read+0x5c>)
 8004d04:	211d      	movs	r1, #29
 8004d06:	4812      	ldr	r0, [pc, #72]	; (8004d50 <Custom_Flash_Read+0x60>)
 8004d08:	f7ff ff7e 	bl	8004c08 <__Custom_Exception_Set_Message>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e019      	b.n	8004d44 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e00f      	b.n	8004d36 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004d1c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004d20:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	440b      	add	r3, r1
 8004d2a:	7812      	ldrb	r2, [r2, #0]
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d8eb      	bhi.n	8004d16 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8004d3e:	f7ff ff8f 	bl	8004c60 <Custom_Flash_Check_Error>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	0800c98c 	.word	0x0800c98c
 8004d50:	0800c90c 	.word	0x0800c90c

08004d54 <LL_SPI_Enable>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <LL_SPI_SetTransferDirection>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d101      	bne.n	8004db2 <LL_SPI_IsActiveFlag_TXE+0x18>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d101      	bne.n	8004dd8 <LL_SPI_IsActiveFlag_BSY+0x18>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <LL_SPI_IsActiveFlag_BSY+0x1a>
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	330c      	adds	r3, #12
 8004df6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <Custom_GPIO_Set>:
		uint32_t value) {
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <Custom_GPIO_Set+0x22>
 8004e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e2a:	e000      	b.n	8004e2e <Custom_GPIO_Set+0x24>
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	400b      	ands	r3, r1
 8004e32:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	615a      	str	r2, [r3, #20]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8004e4e:	bf00      	nop
 8004e50:	480b      	ldr	r0, [pc, #44]	; (8004e80 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e52:	f7ff ffa2 	bl	8004d9a <LL_SPI_IsActiveFlag_TXE>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f9      	beq.n	8004e50 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e62:	f7ff ffc0 	bl	8004de6 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8004e66:	bf00      	nop
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004e6a:	f7ff ffa9 	bl	8004dc0 <LL_SPI_IsActiveFlag_BSY>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f9      	bne.n	8004e68 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40003800 	.word	0x40003800

08004e84 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2110      	movs	r1, #16
 8004e92:	4811      	ldr	r0, [pc, #68]	; (8004ed8 <Custom_OLED_Write_Command+0x54>)
 8004e94:	f7ff ffb9 	bl	8004e0a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	480f      	ldr	r0, [pc, #60]	; (8004edc <Custom_OLED_Write_Command+0x58>)
 8004e9e:	f7ff ffb4 	bl	8004e0a <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e009      	b.n	8004ebc <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ffc7 	bl	8004e44 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d8f1      	bhi.n	8004ea8 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	4804      	ldr	r0, [pc, #16]	; (8004edc <Custom_OLED_Write_Command+0x58>)
 8004eca:	f7ff ff9e 	bl	8004e0a <Custom_GPIO_Set>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40020000 	.word	0x40020000
 8004edc:	40020400 	.word	0x40020400

08004ee0 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 8004eea:	2201      	movs	r2, #1
 8004eec:	2110      	movs	r1, #16
 8004eee:	4817      	ldr	r0, [pc, #92]	; (8004f4c <Custom_OLED_Write_Data+0x6c>)
 8004ef0:	f7ff ff8b 	bl	8004e0a <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	4815      	ldr	r0, [pc, #84]	; (8004f50 <Custom_OLED_Write_Data+0x70>)
 8004efa:	f7ff ff86 	bl	8004e0a <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e016      	b.n	8004f32 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ff95 	bl	8004e44 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ff8c 	bl	8004e44 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d8e4      	bhi.n	8004f04 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2104      	movs	r1, #4
 8004f3e:	4804      	ldr	r0, [pc, #16]	; (8004f50 <Custom_OLED_Write_Data+0x70>)
 8004f40:	f7ff ff63 	bl	8004e0a <Custom_GPIO_Set>
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40020000 	.word	0x40020000
 8004f50:	40020400 	.word	0x40020400

08004f54 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	71fb      	strb	r3, [r7, #7]
 8004f66:	4603      	mov	r3, r0
 8004f68:	71bb      	strb	r3, [r7, #6]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	717b      	strb	r3, [r7, #5]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8004f72:	2315      	movs	r3, #21
 8004f74:	723b      	strb	r3, [r7, #8]
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	727b      	strb	r3, [r7, #9]
 8004f7a:	797b      	ldrb	r3, [r7, #5]
 8004f7c:	72bb      	strb	r3, [r7, #10]
 8004f7e:	2375      	movs	r3, #117	; 0x75
 8004f80:	72fb      	strb	r3, [r7, #11]
 8004f82:	79bb      	ldrb	r3, [r7, #6]
 8004f84:	733b      	strb	r3, [r7, #12]
 8004f86:	793b      	ldrb	r3, [r7, #4]
 8004f88:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	2106      	movs	r1, #6
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff77 	bl	8004e84 <Custom_OLED_Write_Command>
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd90      	pop	{r4, r7, pc}

08004f9e <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 8004fa8:	233f      	movs	r3, #63	; 0x3f
 8004faa:	225f      	movs	r2, #95	; 0x5f
 8004fac:	2100      	movs	r1, #0
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7ff ffd0 	bl	8004f54 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e007      	b.n	8004fca <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 8004fba:	1cbb      	adds	r3, r7, #2
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff8e 	bl	8004ee0 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004fd0:	dbf3      	blt.n	8004fba <Custom_OLED_Clear+0x1c>
    }
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <Custom_OLED_Init>:

void Custom_OLED_Init() {
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8004fe2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004fe6:	480e      	ldr	r0, [pc, #56]	; (8005020 <Custom_OLED_Init+0x44>)
 8004fe8:	f7ff fec4 	bl	8004d74 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <Custom_OLED_Init+0x44>)
 8004fee:	f7ff feb1 	bl	8004d54 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <Custom_OLED_Init+0x48>)
 8004ff4:	463c      	mov	r4, r7
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005000:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005004:	6020      	str	r0, [r4, #0]
 8005006:	3404      	adds	r4, #4
 8005008:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 800500a:	463b      	mov	r3, r7
 800500c:	2125      	movs	r1, #37	; 0x25
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ff38 	bl	8004e84 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8005014:	f7ff ffc3 	bl	8004f9e <Custom_OLED_Clear>
}
 8005018:	bf00      	nop
 800501a:	3728      	adds	r7, #40	; 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bdb0      	pop	{r4, r5, r7, pc}
 8005020:	40003800 	.word	0x40003800
 8005024:	0800c9d4 	.word	0x0800c9d4

08005028 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b089      	sub	sp, #36	; 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4623      	mov	r3, r4
 8005038:	71fb      	strb	r3, [r7, #7]
 800503a:	4603      	mov	r3, r0
 800503c:	80bb      	strh	r3, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	71bb      	strb	r3, [r7, #6]
 8005042:	4613      	mov	r3, r2
 8005044:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8005046:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800504a:	461a      	mov	r2, r3
 800504c:	0092      	lsls	r2, r2, #2
 800504e:	4413      	add	r3, r2
 8005050:	b2da      	uxtb	r2, r3
 8005052:	79bb      	ldrb	r3, [r7, #6]
 8005054:	4413      	add	r3, r2
 8005056:	b2db      	uxtb	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 800505c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	b2da      	uxtb	r2, r3
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	4413      	add	r3, r2
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b5f      	cmp	r3, #95	; 0x5f
 8005072:	d802      	bhi.n	800507a <Custom_OLED_Putchar+0x52>
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	2b3f      	cmp	r3, #63	; 0x3f
 8005078:	d902      	bls.n	8005080 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800507e:	e06a      	b.n	8005156 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	78f9      	ldrb	r1, [r7, #3]
 8005086:	79b8      	ldrb	r0, [r7, #6]
 8005088:	f7ff ff64 	bl	8004f54 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 800508c:	79fa      	ldrb	r2, [r7, #7]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	4a32      	ldr	r2, [pc, #200]	; (8005160 <Custom_OLED_Putchar+0x138>)
 8005096:	4413      	add	r3, r2
 8005098:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e048      	b.n	8005132 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e03f      	b.n	8005126 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e034      	b.n	8005116 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e029      	b.n	8005106 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	4413      	add	r3, r2
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	fa42 f303 	asr.w	r3, r2, r3
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <Custom_OLED_Putchar+0xa6>
 80050ca:	88b8      	ldrh	r0, [r7, #4]
 80050cc:	e000      	b.n	80050d0 <Custom_OLED_Putchar+0xa8>
 80050ce:	2000      	movs	r0, #0
 80050d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050d4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	fb02 f101 	mul.w	r1, r2, r1
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	440a      	add	r2, r1
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	00da      	lsls	r2, r3, #3
 80050e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <Custom_OLED_Putchar+0x13c>)
 80050fa:	4601      	mov	r1, r0
 80050fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3301      	adds	r3, #1
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	dbd0      	blt.n	80050b2 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3301      	adds	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	dbc5      	blt.n	80050ac <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	3301      	adds	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b07      	cmp	r3, #7
 800512a:	ddbc      	ble.n	80050a6 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2b04      	cmp	r3, #4
 8005136:	ddb3      	ble.n	80050a0 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8005138:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800513c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005140:	fb03 f202 	mul.w	r2, r3, r2
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4619      	mov	r1, r3
 800514e:	4805      	ldr	r0, [pc, #20]	; (8005164 <Custom_OLED_Putchar+0x13c>)
 8005150:	f7ff fec6 	bl	8004ee0 <Custom_OLED_Write_Data>
	return 0;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	0800d1ec 	.word	0x0800d1ec
 8005164:	200012cc 	.word	0x200012cc

08005168 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8005168:	b40f      	push	{r0, r1, r2, r3}
 800516a:	b590      	push	{r4, r7, lr}
 800516c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8005170:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 800517e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8005182:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005186:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800518a:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 800518c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005190:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005194:	f107 0008 	add.w	r0, r7, #8
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800519e:	f005 fa53 	bl	800a648 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80051a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ac:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80051b6:	e226      	b.n	8005606 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80051b8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80051bc:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80051c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051c4:	4413      	add	r3, r2
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b2f      	cmp	r3, #47	; 0x2f
 80051ca:	f040 81f7 	bne.w	80055bc <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 80051ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051d2:	3301      	adds	r3, #1
 80051d4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80051d8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80051dc:	5cd3      	ldrb	r3, [r2, r3]
 80051de:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 80051e2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80051e6:	2b2f      	cmp	r3, #47	; 0x2f
 80051e8:	d105      	bne.n	80051f6 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 80051ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80051ee:	3301      	adds	r3, #1
 80051f0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80051f4:	e1e2      	b.n	80055bc <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 80051f6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80051fa:	3b23      	subs	r3, #35	; 0x23
 80051fc:	2b56      	cmp	r3, #86	; 0x56
 80051fe:	f200 81d7 	bhi.w	80055b0 <Custom_OLED_Printf+0x448>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <Custom_OLED_Printf+0xa0>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005421 	.word	0x08005421
 800520c:	080055b1 	.word	0x080055b1
 8005210:	080055b1 	.word	0x080055b1
 8005214:	080055b1 	.word	0x080055b1
 8005218:	080055b1 	.word	0x080055b1
 800521c:	080055b1 	.word	0x080055b1
 8005220:	080055b1 	.word	0x080055b1
 8005224:	080055b1 	.word	0x080055b1
 8005228:	080055b1 	.word	0x080055b1
 800522c:	080055b1 	.word	0x080055b1
 8005230:	080055b1 	.word	0x080055b1
 8005234:	080055b1 	.word	0x080055b1
 8005238:	080055b1 	.word	0x080055b1
 800523c:	08005365 	.word	0x08005365
 8005240:	08005365 	.word	0x08005365
 8005244:	08005365 	.word	0x08005365
 8005248:	08005365 	.word	0x08005365
 800524c:	08005365 	.word	0x08005365
 8005250:	08005365 	.word	0x08005365
 8005254:	08005365 	.word	0x08005365
 8005258:	080055b1 	.word	0x080055b1
 800525c:	080055b1 	.word	0x080055b1
 8005260:	080055b1 	.word	0x080055b1
 8005264:	080055b1 	.word	0x080055b1
 8005268:	080055b1 	.word	0x080055b1
 800526c:	080055b1 	.word	0x080055b1
 8005270:	080055b1 	.word	0x080055b1
 8005274:	080055b1 	.word	0x080055b1
 8005278:	080055b1 	.word	0x080055b1
 800527c:	080055b1 	.word	0x080055b1
 8005280:	08005411 	.word	0x08005411
 8005284:	080055b1 	.word	0x080055b1
 8005288:	080055b1 	.word	0x080055b1
 800528c:	080055b1 	.word	0x080055b1
 8005290:	080055b1 	.word	0x080055b1
 8005294:	080055b1 	.word	0x080055b1
 8005298:	080055b1 	.word	0x080055b1
 800529c:	080055b1 	.word	0x080055b1
 80052a0:	080055b1 	.word	0x080055b1
 80052a4:	080055b1 	.word	0x080055b1
 80052a8:	080053ff 	.word	0x080053ff
 80052ac:	080055b1 	.word	0x080055b1
 80052b0:	080055b1 	.word	0x080055b1
 80052b4:	080055b1 	.word	0x080055b1
 80052b8:	080055b1 	.word	0x080055b1
 80052bc:	080055b1 	.word	0x080055b1
 80052c0:	080055b1 	.word	0x080055b1
 80052c4:	080055b1 	.word	0x080055b1
 80052c8:	080055b1 	.word	0x080055b1
 80052cc:	080055b1 	.word	0x080055b1
 80052d0:	080055b1 	.word	0x080055b1
 80052d4:	080055b1 	.word	0x080055b1
 80052d8:	080055b1 	.word	0x080055b1
 80052dc:	080055b1 	.word	0x080055b1
 80052e0:	080055b1 	.word	0x080055b1
 80052e4:	080055b1 	.word	0x080055b1
 80052e8:	080055b1 	.word	0x080055b1
 80052ec:	080055b1 	.word	0x080055b1
 80052f0:	080055b1 	.word	0x080055b1
 80052f4:	080055b1 	.word	0x080055b1
 80052f8:	080055b1 	.word	0x080055b1
 80052fc:	080055b1 	.word	0x080055b1
 8005300:	08005419 	.word	0x08005419
 8005304:	0800539d 	.word	0x0800539d
 8005308:	080053af 	.word	0x080053af
 800530c:	080055b1 	.word	0x080055b1
 8005310:	080055b1 	.word	0x080055b1
 8005314:	080055b1 	.word	0x080055b1
 8005318:	08005393 	.word	0x08005393
 800531c:	080055b1 	.word	0x080055b1
 8005320:	080055b1 	.word	0x080055b1
 8005324:	080055b1 	.word	0x080055b1
 8005328:	08005409 	.word	0x08005409
 800532c:	080053cd 	.word	0x080053cd
 8005330:	080053b9 	.word	0x080053b9
 8005334:	080055b1 	.word	0x080055b1
 8005338:	080053c3 	.word	0x080053c3
 800533c:	080053f5 	.word	0x080053f5
 8005340:	080055b1 	.word	0x080055b1
 8005344:	08005389 	.word	0x08005389
 8005348:	080053e1 	.word	0x080053e1
 800534c:	080053d7 	.word	0x080053d7
 8005350:	080055b1 	.word	0x080055b1
 8005354:	080053eb 	.word	0x080053eb
 8005358:	0800537f 	.word	0x0800537f
 800535c:	080055b1 	.word	0x080055b1
 8005360:	080053a5 	.word	0x080053a5
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 800536a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800536e:	3b30      	subs	r3, #48	; 0x30
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	00d2      	lsls	r2, r2, #3
 8005376:	4413      	add	r3, r2
 8005378:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 800537c:	e118      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 800537e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005382:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005386:	e113      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 8005388:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800538c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005390:	e10e      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8005392:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005396:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800539a:	e109      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 800539c:	231f      	movs	r3, #31
 800539e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053a2:	e105      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80053a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80053a8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053ac:	e100      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80053ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80053b2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053b6:	e0fb      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80053b8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80053bc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053c0:	e0f6      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 80053c2:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 80053c6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053ca:	e0f1      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 80053cc:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80053d0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053d4:	e0ec      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 80053d6:	f240 73ef 	movw	r3, #2031	; 0x7ef
 80053da:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053de:	e0e7      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 80053e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80053e4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053e8:	e0e2      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 80053ea:	f647 031f 	movw	r3, #30751	; 0x781f
 80053ee:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053f2:	e0dd      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 80053f4:	f64f 030f 	movw	r3, #63503	; 0xf80f
 80053f8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80053fc:	e0d8      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 80053fe:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8005402:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005406:	e0d3      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8005408:	2300      	movs	r3, #0
 800540a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800540e:	e0cf      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8005410:	2302      	movs	r3, #2
 8005412:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8005416:	e0cb      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800541e:	e0c7      	b.n	80055b0 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800542c:	e099      	b.n	8005562 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 800542e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005432:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005436:	4413      	add	r3, r2
 8005438:	3302      	adds	r3, #2
 800543a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800543e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005442:	5cd3      	ldrb	r3, [r2, r3]
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d924      	bls.n	8005492 <Custom_OLED_Printf+0x32a>
 8005448:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800544c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005450:	4413      	add	r3, r2
 8005452:	3302      	adds	r3, #2
 8005454:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005458:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800545c:	5cd3      	ldrb	r3, [r2, r3]
 800545e:	2b46      	cmp	r3, #70	; 0x46
 8005460:	d817      	bhi.n	8005492 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 8005462:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 800546c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005470:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005474:	4413      	add	r3, r2
 8005476:	3302      	adds	r3, #2
 8005478:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800547c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005480:	5cd3      	ldrb	r3, [r2, r3]
 8005482:	461a      	mov	r2, r3
 8005484:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005488:	4413      	add	r3, r2
 800548a:	3b37      	subs	r3, #55	; 0x37
 800548c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005490:	e062      	b.n	8005558 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 8005492:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005496:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800549a:	4413      	add	r3, r2
 800549c:	3302      	adds	r3, #2
 800549e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054a2:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d924      	bls.n	80054f6 <Custom_OLED_Printf+0x38e>
 80054ac:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054b4:	4413      	add	r3, r2
 80054b6:	3302      	adds	r3, #2
 80054b8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054bc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054c0:	5cd3      	ldrb	r3, [r2, r3]
 80054c2:	2b66      	cmp	r3, #102	; 0x66
 80054c4:	d817      	bhi.n	80054f6 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 80054c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 80054d0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054d4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054d8:	4413      	add	r3, r2
 80054da:	3302      	adds	r3, #2
 80054dc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80054e0:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80054e4:	5cd3      	ldrb	r3, [r2, r3]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80054ec:	4413      	add	r3, r2
 80054ee:	3b57      	subs	r3, #87	; 0x57
 80054f0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80054f4:	e030      	b.n	8005558 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 80054f6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80054fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80054fe:	4413      	add	r3, r2
 8005500:	3302      	adds	r3, #2
 8005502:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005506:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800550a:	5cd3      	ldrb	r3, [r2, r3]
 800550c:	2b2f      	cmp	r3, #47	; 0x2f
 800550e:	d923      	bls.n	8005558 <Custom_OLED_Printf+0x3f0>
 8005510:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005514:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005518:	4413      	add	r3, r2
 800551a:	3302      	adds	r3, #2
 800551c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005520:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005524:	5cd3      	ldrb	r3, [r2, r3]
 8005526:	2b39      	cmp	r3, #57	; 0x39
 8005528:	d816      	bhi.n	8005558 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 800552a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8005534:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005538:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800553c:	4413      	add	r3, r2
 800553e:	3302      	adds	r3, #2
 8005540:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005544:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005548:	5cd3      	ldrb	r3, [r2, r3]
 800554a:	461a      	mov	r2, r3
 800554c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005550:	4413      	add	r3, r2
 8005552:	3b30      	subs	r3, #48	; 0x30
 8005554:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005558:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800555c:	3301      	adds	r3, #1
 800555e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005562:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005566:	2b05      	cmp	r3, #5
 8005568:	f67f af61 	bls.w	800542e <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 800556c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	b29b      	uxth	r3, r3
 8005586:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800558a:	b29b      	uxth	r3, r3
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005594:	08db      	lsrs	r3, r3, #3
 8005596:	b29b      	uxth	r3, r3
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	b29b      	uxth	r3, r3
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 80055a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055a8:	3306      	adds	r3, #6
 80055aa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80055ae:	bf00      	nop
				}

				cursor += 2;
 80055b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055b4:	3302      	adds	r3, #2
 80055b6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80055ba:	e024      	b.n	8005606 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80055bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80055c0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80055c4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055c8:	4413      	add	r3, r2
 80055ca:	7818      	ldrb	r0, [r3, #0]
 80055cc:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 80055d0:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80055d4:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 80055d8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4623      	mov	r3, r4
 80055e0:	f7ff fd22 	bl	8005028 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 80055e4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80055e8:	461a      	mov	r2, r3
 80055ea:	0052      	lsls	r2, r2, #1
 80055ec:	4413      	add	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80055f6:	4413      	add	r3, r2
 80055f8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 80055fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005600:	3301      	adds	r3, #1
 8005602:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 8005606:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800560a:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800560e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005612:	4413      	add	r3, r2
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f adce 	bne.w	80051b8 <Custom_OLED_Printf+0x50>
	}
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800562a:	b004      	add	sp, #16
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <LL_GPIO_ReadInputPort>:
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	return uwTick;
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <Custom_Delay_Get_SysTick+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	200002a4 	.word	0x200002a4

08005660 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 800567e:	f7ff ffe3 	bl	8005648 <Custom_Delay_Get_SysTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	741a      	strb	r2, [r3, #16]
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ffc3 	bl	8005630 <LL_GPIO_ReadInputPort>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 80056c0:	f7ff ffc2 	bl	8005648 <Custom_Delay_Get_SysTick>
 80056c4:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	7c1b      	ldrb	r3, [r3, #16]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	d873      	bhi.n	80057b8 <Custom_Switch_State_Machine+0x120>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <Custom_Switch_State_Machine+0x40>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056f9 	.word	0x080056f9
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	080057b9 	.word	0x080057b9
 80056e4:	08005743 	.word	0x08005743
 80056e8:	080057b9 	.word	0x080057b9
 80056ec:	080057b9 	.word	0x080057b9
 80056f0:	080057b9 	.word	0x080057b9
 80056f4:	0800578d 	.word	0x0800578d

		case LONG_OFF:
			if (currentPushed) {
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d05b      	beq.n	80057b6 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2250      	movs	r2, #80	; 0x50
 8005708:	609a      	str	r2, [r3, #8]
			}
			break;
 800570a:	e054      	b.n	80057b6 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	1acb      	subs	r3, r1, r3
 8005718:	429a      	cmp	r2, r3
 800571a:	d808      	bhi.n	800572e <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2204      	movs	r2, #4
 8005724:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800572c:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1acb      	subs	r3, r1, r3
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
			break;
 8005740:	e03a      	b.n	80057b8 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2208      	movs	r2, #8
 8005752:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2250      	movs	r2, #80	; 0x50
 8005758:	609a      	str	r2, [r3, #8]
				break;
 800575a:	e02d      	b.n	80057b8 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	1acb      	subs	r3, r1, r3
 8005768:	429a      	cmp	r2, r3
 800576a:	d805      	bhi.n	8005778 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005776:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1acb      	subs	r3, r1, r3
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	609a      	str	r2, [r3, #8]
			break;
 800578a:	e015      	b.n	80057b8 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	1acb      	subs	r3, r1, r3
 8005798:	429a      	cmp	r2, r3
 800579a:	d802      	bhi.n	80057a2 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68d9      	ldr	r1, [r3, #12]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1acb      	subs	r3, r1, r3
 80057ae:	441a      	add	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]
			break;
 80057b4:	e000      	b.n	80057b8 <Custom_Switch_State_Machine+0x120>
			break;
 80057b6:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2, sw3;
	if (!isInitialized) {
 80057ce:	4b59      	ldr	r3, [pc, #356]	; (8005934 <Custom_Switch_Read+0x16c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	f083 0301 	eor.w	r3, r3, #1
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <Custom_Switch_Read+0x3e>
		isInitialized = true;
 80057dc:	4b55      	ldr	r3, [pc, #340]	; (8005934 <Custom_Switch_Read+0x16c>)
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 80057e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057e6:	4954      	ldr	r1, [pc, #336]	; (8005938 <Custom_Switch_Read+0x170>)
 80057e8:	4854      	ldr	r0, [pc, #336]	; (800593c <Custom_Switch_Read+0x174>)
 80057ea:	f7ff ff39 	bl	8005660 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 80057ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f2:	4951      	ldr	r1, [pc, #324]	; (8005938 <Custom_Switch_Read+0x170>)
 80057f4:	4852      	ldr	r0, [pc, #328]	; (8005940 <Custom_Switch_Read+0x178>)
 80057f6:	f7ff ff33 	bl	8005660 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw3, SW3_PORT, SW3_PIN);
 80057fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057fe:	494e      	ldr	r1, [pc, #312]	; (8005938 <Custom_Switch_Read+0x170>)
 8005800:	4850      	ldr	r0, [pc, #320]	; (8005944 <Custom_Switch_Read+0x17c>)
 8005802:	f7ff ff2d 	bl	8005660 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8005806:	484d      	ldr	r0, [pc, #308]	; (800593c <Custom_Switch_Read+0x174>)
 8005808:	f7ff ff46 	bl	8005698 <Custom_Switch_State_Machine>
 800580c:	4603      	mov	r3, r0
 800580e:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8005810:	484b      	ldr	r0, [pc, #300]	; (8005940 <Custom_Switch_Read+0x178>)
 8005812:	f7ff ff41 	bl	8005698 <Custom_Switch_State_Machine>
 8005816:	4603      	mov	r3, r0
 8005818:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3PushEvent = Custom_Switch_State_Machine(&sw3);
 800581a:	484a      	ldr	r0, [pc, #296]	; (8005944 <Custom_Switch_Read+0x17c>)
 800581c:	f7ff ff3c 	bl	8005698 <Custom_Switch_State_Machine>
 8005820:	4603      	mov	r3, r0
 8005822:	717b      	strb	r3, [r7, #5]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if(sw1PushEvent) {
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <Custom_Switch_Read+0xa4>
		if (sw2.state & SHORT_ON){
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <Custom_Switch_Read+0x178>)
 800582c:	7c1b      	ldrb	r3, [r3, #16]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <Custom_Switch_Read+0x82>
			sw2PushEvent = true;
 8005836:	2301      	movs	r3, #1
 8005838:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw1.state;
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <Custom_Switch_Read+0x174>)
 800583c:	7c1a      	ldrb	r2, [r3, #16]
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <Custom_Switch_Read+0x178>)
 8005840:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw1.timer;
 8005842:	4b3e      	ldr	r3, [pc, #248]	; (800593c <Custom_Switch_Read+0x174>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4a3e      	ldr	r2, [pc, #248]	; (8005940 <Custom_Switch_Read+0x178>)
 8005848:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 800584a:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <Custom_Switch_Read+0x17c>)
 800584c:	7c1b      	ldrb	r3, [r3, #16]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d051      	beq.n	80058fa <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 8005856:	2301      	movs	r3, #1
 8005858:	717b      	strb	r3, [r7, #5]
			sw3.state = sw1.state;
 800585a:	4b38      	ldr	r3, [pc, #224]	; (800593c <Custom_Switch_Read+0x174>)
 800585c:	7c1a      	ldrb	r2, [r3, #16]
 800585e:	4b39      	ldr	r3, [pc, #228]	; (8005944 <Custom_Switch_Read+0x17c>)
 8005860:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw1.timer;
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <Custom_Switch_Read+0x174>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	4a37      	ldr	r2, [pc, #220]	; (8005944 <Custom_Switch_Read+0x17c>)
 8005868:	6093      	str	r3, [r2, #8]
 800586a:	e046      	b.n	80058fa <Custom_Switch_Read+0x132>
		}
	}
	else if(sw2PushEvent) {
 800586c:	79bb      	ldrb	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d020      	beq.n	80058b4 <Custom_Switch_Read+0xec>
		if (sw1.state & SHORT_ON){
 8005872:	4b32      	ldr	r3, [pc, #200]	; (800593c <Custom_Switch_Read+0x174>)
 8005874:	7c1b      	ldrb	r3, [r3, #16]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <Custom_Switch_Read+0xca>
			sw1PushEvent = true;
 800587e:	2301      	movs	r3, #1
 8005880:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw2.state;
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <Custom_Switch_Read+0x178>)
 8005884:	7c1a      	ldrb	r2, [r3, #16]
 8005886:	4b2d      	ldr	r3, [pc, #180]	; (800593c <Custom_Switch_Read+0x174>)
 8005888:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw2.timer;
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <Custom_Switch_Read+0x178>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4a2b      	ldr	r2, [pc, #172]	; (800593c <Custom_Switch_Read+0x174>)
 8005890:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <Custom_Switch_Read+0x17c>)
 8005894:	7c1b      	ldrb	r3, [r3, #16]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02d      	beq.n	80058fa <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 800589e:	2301      	movs	r3, #1
 80058a0:	717b      	strb	r3, [r7, #5]
			sw3.state = sw2.state;
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <Custom_Switch_Read+0x178>)
 80058a4:	7c1a      	ldrb	r2, [r3, #16]
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058a8:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw2.timer;
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <Custom_Switch_Read+0x178>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4a25      	ldr	r2, [pc, #148]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058b0:	6093      	str	r3, [r2, #8]
 80058b2:	e022      	b.n	80058fa <Custom_Switch_Read+0x132>
		}
	}
	else if(sw3PushEvent) {
 80058b4:	797b      	ldrb	r3, [r7, #5]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01f      	beq.n	80058fa <Custom_Switch_Read+0x132>
		if (sw1.state & SHORT_ON){
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <Custom_Switch_Read+0x174>)
 80058bc:	7c1b      	ldrb	r3, [r3, #16]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <Custom_Switch_Read+0x112>
			sw1PushEvent = true;
 80058c6:	2301      	movs	r3, #1
 80058c8:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw3.state;
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058cc:	7c1a      	ldrb	r2, [r3, #16]
 80058ce:	4b1b      	ldr	r3, [pc, #108]	; (800593c <Custom_Switch_Read+0x174>)
 80058d0:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw3.timer;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4a19      	ldr	r2, [pc, #100]	; (800593c <Custom_Switch_Read+0x174>)
 80058d8:	6093      	str	r3, [r2, #8]
		}
		if (sw2.state & SHORT_ON) {
 80058da:	4b19      	ldr	r3, [pc, #100]	; (8005940 <Custom_Switch_Read+0x178>)
 80058dc:	7c1b      	ldrb	r3, [r3, #16]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <Custom_Switch_Read+0x132>
			sw2PushEvent = true;
 80058e6:	2301      	movs	r3, #1
 80058e8:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw3.state;
 80058ea:	4b16      	ldr	r3, [pc, #88]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058ec:	7c1a      	ldrb	r2, [r3, #16]
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <Custom_Switch_Read+0x178>)
 80058f0:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw3.timer;
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <Custom_Switch_Read+0x17c>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <Custom_Switch_Read+0x178>)
 80058f8:	6093      	str	r3, [r2, #8]
		}
	}


	uint8_t buttonPushEvent = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	713b      	strb	r3, [r7, #4]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <Custom_Switch_Read+0x144>
 8005904:	793b      	ldrb	r3, [r7, #4]
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	713b      	strb	r3, [r7, #4]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 800590c:	79bb      	ldrb	r3, [r7, #6]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <Custom_Switch_Read+0x152>
 8005912:	793b      	ldrb	r3, [r7, #4]
 8005914:	f043 0302 	orr.w	r3, r3, #2
 8005918:	713b      	strb	r3, [r7, #4]
	if (sw3PushEvent) buttonPushEvent |= CUSTOM_SW_3;
 800591a:	797b      	ldrb	r3, [r7, #5]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <Custom_Switch_Read+0x160>
 8005920:	793b      	ldrb	r3, [r7, #4]
 8005922:	f043 0304 	orr.w	r3, r3, #4
 8005926:	713b      	strb	r3, [r7, #4]

	return buttonPushEvent;
 8005928:	793b      	ldrb	r3, [r7, #4]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2000140c 	.word	0x2000140c
 8005938:	40020800 	.word	0x40020800
 800593c:	20001410 	.word	0x20001410
 8005940:	20001424 	.word	0x20001424
 8005944:	20001438 	.word	0x20001438

08005948 <Print_Drive_Data>:


#include "header_init.h"


void Print_Drive_Data() {
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
	uint32_t i = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
	uint8_t sw = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	717b      	strb	r3, [r7, #5]
	uint16_t markCnt_L = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	817b      	strh	r3, [r7, #10]
	uint16_t markCnt_R = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	813b      	strh	r3, [r7, #8]
	uint16_t crossCnt = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	80fb      	strh	r3, [r7, #6]

	// 마크 개수 세기
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 8005962:	2301      	movs	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	e04a      	b.n	80059fe <Print_Drive_Data+0xb6>

		// 현재상태가 좌측 곡선인 경우
		if (driveData[i].markState == MARK_CURVE_L) {
 8005968:	498c      	ldr	r1, [pc, #560]	; (8005b9c <Print_Drive_Data+0x254>)
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	3308      	adds	r3, #8
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d103      	bne.n	8005986 <Print_Drive_Data+0x3e>

			markCnt_L += 1;
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	3301      	adds	r3, #1
 8005982:	817b      	strh	r3, [r7, #10]
 8005984:	e038      	b.n	80059f8 <Print_Drive_Data+0xb0>
		}

		// 현재상태가 우측 곡선인 경우
		else if (driveData[i].markState == MARK_CURVE_R) {
 8005986:	4985      	ldr	r1, [pc, #532]	; (8005b9c <Print_Drive_Data+0x254>)
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3308      	adds	r3, #8
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d103      	bne.n	80059a4 <Print_Drive_Data+0x5c>

			markCnt_R += 1;
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	3301      	adds	r3, #1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	e029      	b.n	80059f8 <Print_Drive_Data+0xb0>
		}

		// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
		else if (driveData[i].markState == MARK_STRAIGHT) {
 80059a4:	497d      	ldr	r1, [pc, #500]	; (8005b9c <Print_Drive_Data+0x254>)
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	3308      	adds	r3, #8
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d11e      	bne.n	80059f8 <Print_Drive_Data+0xb0>

			// 이전 상태가 좌측 곡선이었을 경우
			if (driveData[i-1].markState == MARK_CURVE_L) {
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1e5a      	subs	r2, r3, #1
 80059be:	4977      	ldr	r1, [pc, #476]	; (8005b9c <Print_Drive_Data+0x254>)
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3308      	adds	r3, #8
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d103      	bne.n	80059da <Print_Drive_Data+0x92>
				markCnt_L += 1;
 80059d2:	897b      	ldrh	r3, [r7, #10]
 80059d4:	3301      	adds	r3, #1
 80059d6:	817b      	strh	r3, [r7, #10]
 80059d8:	e00e      	b.n	80059f8 <Print_Drive_Data+0xb0>
			}
			// 이전 상태가 우측 곡선이었을 경우
			else if (driveData[i-1].markState == MARK_CURVE_R) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1e5a      	subs	r2, r3, #1
 80059de:	496f      	ldr	r1, [pc, #444]	; (8005b9c <Print_Drive_Data+0x254>)
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	3308      	adds	r3, #8
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d102      	bne.n	80059f8 <Print_Drive_Data+0xb0>
				markCnt_R += 1;
 80059f2:	893b      	ldrh	r3, [r7, #8]
 80059f4:	3301      	adds	r3, #1
 80059f6:	813b      	strh	r3, [r7, #8]
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	4967      	ldr	r1, [pc, #412]	; (8005b9c <Print_Drive_Data+0x254>)
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1a9      	bne.n	8005968 <Print_Drive_Data+0x20>
			}
		}
	}

	for (i = 0; crossCntTable[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e005      	b.n	8005a26 <Print_Drive_Data+0xde>
		crossCnt++;
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	80fb      	strh	r3, [r7, #6]
	for (i = 0; crossCntTable[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4a5e      	ldr	r2, [pc, #376]	; (8005ba0 <Print_Drive_Data+0x258>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <Print_Drive_Data+0xf0>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b7f      	cmp	r3, #127	; 0x7f
 8005a36:	d9f0      	bls.n	8005a1a <Print_Drive_Data+0xd2>
	}


	// OLED에 변수명 변수값 출력
	Custom_OLED_Clear();
 8005a38:	f7ff fab1 	bl	8004f9e <Custom_OLED_Clear>
	Custom_OLED_Printf("/0mark L:   %d", markCnt_L);
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4858      	ldr	r0, [pc, #352]	; (8005ba4 <Print_Drive_Data+0x25c>)
 8005a42:	f7ff fb91 	bl	8005168 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1mark R:   %d", markCnt_R);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4857      	ldr	r0, [pc, #348]	; (8005ba8 <Print_Drive_Data+0x260>)
 8005a4c:	f7ff fb8c 	bl	8005168 <Custom_OLED_Printf>
	Custom_OLED_Printf("/2cross:    %d", crossCnt);
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4855      	ldr	r0, [pc, #340]	; (8005bac <Print_Drive_Data+0x264>)
 8005a56:	f7ff fb87 	bl	8005168 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 8005a5a:	bf00      	nop
 8005a5c:	f7ff feb4 	bl	80057c8 <Custom_Switch_Read>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d1fa      	bne.n	8005a5c <Print_Drive_Data+0x114>



	Custom_OLED_Clear();
 8005a66:	f7ff fa9a 	bl	8004f9e <Custom_OLED_Clear>

	i = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]

	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005a6e:	e085      	b.n	8005b7c <Print_Drive_Data+0x234>

		if (driveData[i].markState == MARK_CURVE_L) {
 8005a70:	494a      	ldr	r1, [pc, #296]	; (8005b9c <Print_Drive_Data+0x254>)
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3308      	adds	r3, #8
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d103      	bne.n	8005a8e <Print_Drive_Data+0x146>

			Custom_OLED_Printf("/0mark L");
 8005a86:	484a      	ldr	r0, [pc, #296]	; (8005bb0 <Print_Drive_Data+0x268>)
 8005a88:	f7ff fb6e 	bl	8005168 <Custom_OLED_Printf>
 8005a8c:	e038      	b.n	8005b00 <Print_Drive_Data+0x1b8>
		}
		else if (driveData[i].markState == MARK_CURVE_R) {
 8005a8e:	4943      	ldr	r1, [pc, #268]	; (8005b9c <Print_Drive_Data+0x254>)
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d103      	bne.n	8005aac <Print_Drive_Data+0x164>

			Custom_OLED_Printf("/0mark R");
 8005aa4:	4843      	ldr	r0, [pc, #268]	; (8005bb4 <Print_Drive_Data+0x26c>)
 8005aa6:	f7ff fb5f 	bl	8005168 <Custom_OLED_Printf>
 8005aaa:	e029      	b.n	8005b00 <Print_Drive_Data+0x1b8>
		}
		else if (driveData[i].markState == MARK_STRAIGHT) {
 8005aac:	493b      	ldr	r1, [pc, #236]	; (8005b9c <Print_Drive_Data+0x254>)
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3308      	adds	r3, #8
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d11e      	bne.n	8005b00 <Print_Drive_Data+0x1b8>

			// 이전 상태가 좌측 곡선이었을 경우
			if (driveData[i-1].markState == MARK_CURVE_L) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1e5a      	subs	r2, r3, #1
 8005ac6:	4935      	ldr	r1, [pc, #212]	; (8005b9c <Print_Drive_Data+0x254>)
 8005ac8:	4613      	mov	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d103      	bne.n	8005ae2 <Print_Drive_Data+0x19a>
				Custom_OLED_Printf("/0mark L");
 8005ada:	4835      	ldr	r0, [pc, #212]	; (8005bb0 <Print_Drive_Data+0x268>)
 8005adc:	f7ff fb44 	bl	8005168 <Custom_OLED_Printf>
 8005ae0:	e00e      	b.n	8005b00 <Print_Drive_Data+0x1b8>
			}
			// 이전 상태가 우측 곡선이었을 경우
			else if (driveData[i-1].markState == MARK_CURVE_R) {
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1e5a      	subs	r2, r3, #1
 8005ae6:	492d      	ldr	r1, [pc, #180]	; (8005b9c <Print_Drive_Data+0x254>)
 8005ae8:	4613      	mov	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	3308      	adds	r3, #8
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d102      	bne.n	8005b00 <Print_Drive_Data+0x1b8>
				Custom_OLED_Printf("/0mark R");
 8005afa:	482e      	ldr	r0, [pc, #184]	; (8005bb4 <Print_Drive_Data+0x26c>)
 8005afc:	f7ff fb34 	bl	8005168 <Custom_OLED_Printf>
			}
		}

		Custom_OLED_Printf("/1L: %9u", driveData[i].tickCnt_L);
 8005b00:	4926      	ldr	r1, [pc, #152]	; (8005b9c <Print_Drive_Data+0x254>)
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4829      	ldr	r0, [pc, #164]	; (8005bb8 <Print_Drive_Data+0x270>)
 8005b14:	f7ff fb28 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2R: %9u", driveData[i].tickCnt_R);
 8005b18:	4920      	ldr	r1, [pc, #128]	; (8005b9c <Print_Drive_Data+0x254>)
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3304      	adds	r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4823      	ldr	r0, [pc, #140]	; (8005bbc <Print_Drive_Data+0x274>)
 8005b2e:	f7ff fb1b 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3C: %5u", driveData[i].crossCnt);
 8005b32:	491a      	ldr	r1, [pc, #104]	; (8005b9c <Print_Drive_Data+0x254>)
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3309      	adds	r3, #9
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	481e      	ldr	r0, [pc, #120]	; (8005bc0 <Print_Drive_Data+0x278>)
 8005b48:	f7ff fb0e 	bl	8005168 <Custom_OLED_Printf>

		if (sw == CUSTOM_SW_1) {
 8005b4c:	797b      	ldrb	r3, [r7, #5]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d103      	bne.n	8005b5a <Print_Drive_Data+0x212>

			i -= 1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e005      	b.n	8005b66 <Print_Drive_Data+0x21e>
		}
		else if (sw == CUSTOM_SW_2) {
 8005b5a:	797b      	ldrb	r3, [r7, #5]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d102      	bne.n	8005b66 <Print_Drive_Data+0x21e>

			i += 1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
		}

		if (driveData[i].markState == MARK_NONE) {
 8005b66:	490d      	ldr	r1, [pc, #52]	; (8005b9c <Print_Drive_Data+0x254>)
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3308      	adds	r3, #8
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <Print_Drive_Data+0x246>
	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005b7c:	f7ff fe24 	bl	80057c8 <Custom_Switch_Read>
 8005b80:	4603      	mov	r3, r0
 8005b82:	717b      	strb	r3, [r7, #5]
 8005b84:	797b      	ldrb	r3, [r7, #5]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	f47f af72 	bne.w	8005a70 <Print_Drive_Data+0x128>
 8005b8c:	e000      	b.n	8005b90 <Print_Drive_Data+0x248>
			break ;
 8005b8e:	bf00      	nop
		}
	}

	Custom_OLED_Clear();
 8005b90:	f7ff fa05 	bl	8004f9e <Custom_OLED_Clear>
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20001484 	.word	0x20001484
 8005ba0:	20004488 	.word	0x20004488
 8005ba4:	0800c9fc 	.word	0x0800c9fc
 8005ba8:	0800ca0c 	.word	0x0800ca0c
 8005bac:	0800ca1c 	.word	0x0800ca1c
 8005bb0:	0800ca2c 	.word	0x0800ca2c
 8005bb4:	0800ca38 	.word	0x0800ca38
 8005bb8:	0800ca44 	.word	0x0800ca44
 8005bbc:	0800ca50 	.word	0x0800ca50
 8005bc0:	0800ca5c 	.word	0x0800ca5c

08005bc4 <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting() {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0

	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <Pre_Drive_Setting+0x1c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <Pre_Drive_Setting+0x10>
		Pre_Drive_Var_Adjust_Second_Drive();
 8005bd0:	f000 f836 	bl	8005c40 <Pre_Drive_Var_Adjust_Second_Drive>
	}

	if (optimizeLevel >= OPTIMIZE_LEVEL_NONE) {
		Pre_Drive_Var_Adjust_First_Drive();
 8005bd4:	f000 f806 	bl	8005be4 <Pre_Drive_Var_Adjust_First_Drive>
	}

	Pre_Drive_Var_Init();
 8005bd8:	f000 fa2c 	bl	8006034 <Pre_Drive_Var_Init>

}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2000468a 	.word	0x2000468a

08005be4 <Pre_Drive_Var_Adjust_First_Drive>:



// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust_First_Drive() {
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b0a2      	sub	sp, #136	; 0x88
 8005be8:	af02      	add	r7, sp, #8

	t_driveMenu_Int		intValues[] = {
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <Pre_Drive_Var_Adjust_First_Drive+0x54>)
 8005bec:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005bf0:	461d      	mov	r5, r3
 8005bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005bfa:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "Threshold",			&threshold,			10 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


	t_driveMenu_Float	floatValues[] = {
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <Pre_Drive_Var_Adjust_First_Drive+0x58>)
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	4611      	mov	r1, r2
 8005c0a:	2260      	movs	r2, #96	; 0x60
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f004 fd5e 	bl	800a6ce <memcpy>
			{ "Pit In Len",			&pitInLen,			0.01f },
			{ "Target Speed",		&targetSpeed_init,	0.05f },
			{ "CurveDecel Coef",	&curveDeceleCoef,	500 },
			{ "Position Coef",		&positionCoef,		0.000001f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8005c12:	2304      	movs	r3, #4
 8005c14:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_TRUE);
 8005c18:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8005c1c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8005c20:	1d39      	adds	r1, r7, #4
 8005c22:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005c26:	2401      	movs	r4, #1
 8005c28:	9400      	str	r4, [sp, #0]
 8005c2a:	f000 f8bb 	bl	8005da4 <Pre_Drive_Var_Adjust_Switch_Cntl>
}
 8005c2e:	bf00      	nop
 8005c30:	3780      	adds	r7, #128	; 0x80
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bdb0      	pop	{r4, r5, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	0800ca68 	.word	0x0800ca68
 8005c3c:	0800ca80 	.word	0x0800ca80

08005c40 <Pre_Drive_Var_Adjust_Second_Drive>:



static void Pre_Drive_Var_Adjust_Second_Drive() {
 8005c40:	b5b0      	push	{r4, r5, r7, lr}
 8005c42:	b0aa      	sub	sp, #168	; 0xa8
 8005c44:	af02      	add	r7, sp, #8

	float acceleStartLen = acceleStartTick / TICK_PER_M;
 8005c46:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 8005c48:	ed93 7a00 	vldr	s14, [r3]
 8005c4c:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d70 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c54:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float deceleEndLen = deceleEndTick / TICK_PER_M;
 8005c58:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 8005c5a:	ed93 7a00 	vldr	s14, [r3]
 8005c5e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005d70 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c66:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	t_driveMenu_Int		intValues[] = {
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <Pre_Drive_Var_Adjust_Second_Drive+0x138>)
 8005c6c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8005c70:	461d      	mov	r5, r3
 8005c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c7a:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "optimize level",		&optimizeLevel,		1 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	t_driveMenu_Float	floatValues[] = {
 8005c84:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <Pre_Drive_Var_Adjust_Second_Drive+0x13c>)
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	2100      	movs	r1, #0
 8005c94:	460a      	mov	r2, r1
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	460a      	mov	r2, r1
 8005c9a:	709a      	strb	r2, [r3, #2]
 8005c9c:	4b38      	ldr	r3, [pc, #224]	; (8005d80 <Pre_Drive_Var_Adjust_Second_Drive+0x140>)
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	4a37      	ldr	r2, [pc, #220]	; (8005d84 <Pre_Drive_Var_Adjust_Second_Drive+0x144>)
 8005ca8:	f107 031c 	add.w	r3, r7, #28
 8005cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cb0:	6018      	str	r0, [r3, #0]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	8019      	strh	r1, [r3, #0]
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	0c0a      	lsrs	r2, r1, #16
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <Pre_Drive_Var_Adjust_Second_Drive+0x148>)
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cca:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd0:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <Pre_Drive_Var_Adjust_Second_Drive+0x14c>)
 8005cd2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cd8:	c407      	stmia	r4!, {r0, r1, r2}
 8005cda:	8023      	strh	r3, [r4, #0]
 8005cdc:	3402      	adds	r4, #2
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	7023      	strb	r3, [r4, #0]
 8005ce2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <Pre_Drive_Var_Adjust_Second_Drive+0x150>)
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cec:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <Pre_Drive_Var_Adjust_Second_Drive+0x154>)
 8005cee:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cf4:	c407      	stmia	r4!, {r0, r1, r2}
 8005cf6:	7023      	strb	r3, [r4, #0]
 8005cf8:	f107 0359 	add.w	r3, r7, #89	; 0x59
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 8005d08:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <Pre_Drive_Var_Adjust_Second_Drive+0x15c>)
 8005d0c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d12:	c407      	stmia	r4!, {r0, r1, r2}
 8005d14:	8023      	strh	r3, [r4, #0]
 8005d16:	3402      	adds	r4, #2
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	7023      	strb	r3, [r4, #0]
 8005d1c:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <Pre_Drive_Var_Adjust_Second_Drive+0x160>)
 8005d1e:	677b      	str	r3, [r7, #116]	; 0x74
 8005d20:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 8005d22:	67bb      	str	r3, [r7, #120]	; 0x78
			//{ "Decele",				&decele_init,		0.25f },
			{ "acceleStart len",	&acceleStartLen,	0.025f },
			{ "decelEnd len",		&deceleEndLen,		0.05f },
			{ "decelEnd ratio",		&deceleEndRatio,	0.05f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8005d24:	2305      	movs	r3, #5
 8005d26:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_FALSE);
 8005d2a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8005d2e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8005d32:	1d39      	adds	r1, r7, #4
 8005d34:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8005d38:	2400      	movs	r4, #0
 8005d3a:	9400      	str	r4, [sp, #0]
 8005d3c:	f000 f832 	bl	8005da4 <Pre_Drive_Var_Adjust_Switch_Cntl>

	acceleStartTick = acceleStartLen * TICK_PER_M;
 8005d40:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d44:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005d70 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 8005d4e:	edc3 7a00 	vstr	s15, [r3]
	deceleEndTick = deceleEndLen * TICK_PER_M;
 8005d52:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005d56:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005d70 <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 8005d60:	edc3 7a00 	vstr	s15, [r3]

}
 8005d64:	bf00      	nop
 8005d66:	37a0      	adds	r7, #160	; 0xa0
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d6c:	20000050 	.word	0x20000050
 8005d70:	478f8d33 	.word	0x478f8d33
 8005d74:	20000054 	.word	0x20000054
 8005d78:	0800cae0 	.word	0x0800cae0
 8005d7c:	0800caf8 	.word	0x0800caf8
 8005d80:	20000034 	.word	0x20000034
 8005d84:	0800cb08 	.word	0x0800cb08
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	0800cb18 	.word	0x0800cb18
 8005d90:	3ccccccd 	.word	0x3ccccccd
 8005d94:	0800cb28 	.word	0x0800cb28
 8005d98:	3d4ccccd 	.word	0x3d4ccccd
 8005d9c:	0800cb38 	.word	0x0800cb38
 8005da0:	20000058 	.word	0x20000058

08005da4 <Pre_Drive_Var_Adjust_Switch_Cntl>:


static void Pre_Drive_Var_Adjust_Switch_Cntl(t_driveMenu_Int *intValues, t_driveMenu_Float *floatValues, \
											uint8_t intValCnt, uint8_t floatValCnt, uint8_t isEnd) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	460b      	mov	r3, r1
 8005db4:	71fb      	strb	r3, [r7, #7]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71bb      	strb	r3, [r7, #6]

	uint8_t	sw = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	777b      	strb	r3, [r7, #29]


	for (uint8_t i = 0; i < intValCnt; i++) {
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e074      	b.n	8005eae <Pre_Drive_Var_Adjust_Switch_Cntl+0x10a>

		Custom_OLED_Clear();
 8005dc4:	f7ff f8eb 	bl	8004f9e <Custom_OLED_Clear>

		// 정수 변수 초기화
		if (i < intValCnt) {
 8005dc8:	7ffa      	ldrb	r2, [r7, #31]
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d26b      	bcs.n	8005ea8 <Pre_Drive_Var_Adjust_Switch_Cntl+0x104>

			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005dd0:	e063      	b.n	8005e9a <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>

				// OLED에 변수명 변수값 출력
				Custom_OLED_Printf("/2%s", intValues[i].valName);
 8005dd2:	7ffa      	ldrb	r2, [r7, #31]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	488d      	ldr	r0, [pc, #564]	; (800601c <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005de6:	f7ff f9bf 	bl	8005168 <Custom_OLED_Printf>
				Custom_OLED_Printf("/A/4%5d", *(intValues[i].val));
 8005dea:	7ffa      	ldrb	r2, [r7, #31]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	461a      	mov	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	4887      	ldr	r0, [pc, #540]	; (8006020 <Pre_Drive_Var_Adjust_Switch_Cntl+0x27c>)
 8005e04:	f7ff f9b0 	bl	8005168 <Custom_OLED_Printf>

				// 변수 값 빼기
				if (sw == CUSTOM_SW_1) {
 8005e08:	7f7b      	ldrb	r3, [r7, #29]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d121      	bne.n	8005e52 <Pre_Drive_Var_Adjust_Switch_Cntl+0xae>
					*(intValues[i].val) -= intValues[i].changeVal;
 8005e0e:	7ffa      	ldrb	r2, [r7, #31]
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	7d1b      	ldrb	r3, [r3, #20]
 8005e20:	b2d9      	uxtb	r1, r3
 8005e22:	7ffa      	ldrb	r2, [r7, #31]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b2d8      	uxtb	r0, r3
 8005e38:	7ffa      	ldrb	r2, [r7, #31]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	461a      	mov	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	1a42      	subs	r2, r0, r1
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e023      	b.n	8005e9a <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
				}
				// 변수값 더하기
				else if (sw == CUSTOM_SW_2) {
 8005e52:	7f7b      	ldrb	r3, [r7, #29]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d120      	bne.n	8005e9a <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
					*(intValues[i].val) += intValues[i].changeVal;
 8005e58:	7ffa      	ldrb	r2, [r7, #31]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	7d1b      	ldrb	r3, [r3, #20]
 8005e6a:	b2d8      	uxtb	r0, r3
 8005e6c:	7ffa      	ldrb	r2, [r7, #31]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2d9      	uxtb	r1, r3
 8005e82:	7ffa      	ldrb	r2, [r7, #31]
 8005e84:	4613      	mov	r3, r2
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	1842      	adds	r2, r0, r1
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005e9a:	f7ff fc95 	bl	80057c8 <Custom_Switch_Read>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	777b      	strb	r3, [r7, #29]
 8005ea2:	7f7b      	ldrb	r3, [r7, #29]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d194      	bne.n	8005dd2 <Pre_Drive_Var_Adjust_Switch_Cntl+0x2e>
	for (uint8_t i = 0; i < intValCnt; i++) {
 8005ea8:	7ffb      	ldrb	r3, [r7, #31]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	7ffa      	ldrb	r2, [r7, #31]
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d386      	bcc.n	8005dc4 <Pre_Drive_Var_Adjust_Switch_Cntl+0x20>
			}
		}
	}


	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	77bb      	strb	r3, [r7, #30]
 8005eba:	e0a3      	b.n	8006004 <Pre_Drive_Var_Adjust_Switch_Cntl+0x260>

		Custom_OLED_Clear();
 8005ebc:	f7ff f86f 	bl	8004f9e <Custom_OLED_Clear>

		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005ec0:	e095      	b.n	8005fee <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>

			uint32_t num1 = (uint32_t)(*(floatValues[i].val));
 8005ec2:	7fba      	ldrb	r2, [r7, #30]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	edd3 7a00 	vldr	s15, [r3]
 8005ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005edc:	ee17 3a90 	vmov	r3, s15
 8005ee0:	61bb      	str	r3, [r7, #24]
			uint32_t num2 = (uint32_t)( *(floatValues[i].val) * 100000 - num1 * 100000 );
 8005ee2:	7fba      	ldrb	r2, [r7, #30]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006024 <Pre_Drive_Var_Adjust_Switch_Cntl+0x280>
 8005efc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	4a49      	ldr	r2, [pc, #292]	; (8006028 <Pre_Drive_Var_Adjust_Switch_Cntl+0x284>)
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f18:	ee17 3a90 	vmov	r3, s15
 8005f1c:	617b      	str	r3, [r7, #20]

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/2%s", floatValues[i].valName);
 8005f1e:	7fba      	ldrb	r2, [r7, #30]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	483a      	ldr	r0, [pc, #232]	; (800601c <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005f32:	f7ff f919 	bl	8005168 <Custom_OLED_Printf>
			Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	483c      	ldr	r0, [pc, #240]	; (800602c <Pre_Drive_Var_Adjust_Switch_Cntl+0x288>)
 8005f3c:	f7ff f914 	bl	8005168 <Custom_OLED_Printf>

			if (isEnd == CUSTOM_TRUE && i == floatValCnt - 1) {
 8005f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d107      	bne.n	8005f58 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
 8005f48:	7fba      	ldrb	r2, [r7, #30]
 8005f4a:	79bb      	ldrb	r3, [r7, #6]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d102      	bne.n	8005f58 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
				Custom_OLED_Printf("/g/0Ready to Drive");
 8005f52:	4837      	ldr	r0, [pc, #220]	; (8006030 <Pre_Drive_Var_Adjust_Switch_Cntl+0x28c>)
 8005f54:	f7ff f908 	bl	8005168 <Custom_OLED_Printf>
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8005f58:	7f7b      	ldrb	r3, [r7, #29]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d122      	bne.n	8005fa4 <Pre_Drive_Var_Adjust_Switch_Cntl+0x200>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 8005f5e:	7fba      	ldrb	r2, [r7, #30]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f72:	7fba      	ldrb	r2, [r7, #30]
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	ed93 7a00 	vldr	s14, [r3]
 8005f88:	7fba      	ldrb	r2, [r7, #30]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	461a      	mov	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4413      	add	r3, r2
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9e:	edc3 7a00 	vstr	s15, [r3]
 8005fa2:	e024      	b.n	8005fee <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8005fa4:	7f7b      	ldrb	r3, [r7, #29]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d121      	bne.n	8005fee <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
				*(floatValues[i].val) += floatValues[i].changeVal;
 8005faa:	7fba      	ldrb	r2, [r7, #30]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4413      	add	r3, r2
 8005fba:	ed93 7a05 	vldr	s14, [r3, #20]
 8005fbe:	7fba      	ldrb	r2, [r7, #30]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	edd3 7a00 	vldr	s15, [r3]
 8005fd4:	7fba      	ldrb	r2, [r7, #30]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fea:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005fee:	f7ff fbeb 	bl	80057c8 <Custom_Switch_Read>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	777b      	strb	r3, [r7, #29]
 8005ff6:	7f7b      	ldrb	r3, [r7, #29]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	f47f af62 	bne.w	8005ec2 <Pre_Drive_Var_Adjust_Switch_Cntl+0x11e>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005ffe:	7fbb      	ldrb	r3, [r7, #30]
 8006000:	3301      	adds	r3, #1
 8006002:	77bb      	strb	r3, [r7, #30]
 8006004:	7fba      	ldrb	r2, [r7, #30]
 8006006:	79bb      	ldrb	r3, [r7, #6]
 8006008:	429a      	cmp	r2, r3
 800600a:	f4ff af57 	bcc.w	8005ebc <Pre_Drive_Var_Adjust_Switch_Cntl+0x118>
			}
		}
	}

	Custom_OLED_Clear();
 800600e:	f7fe ffc6 	bl	8004f9e <Custom_OLED_Clear>
}
 8006012:	bf00      	nop
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	0800cb48 	.word	0x0800cb48
 8006020:	0800cb50 	.word	0x0800cb50
 8006024:	47c35000 	.word	0x47c35000
 8006028:	000186a0 	.word	0x000186a0
 800602c:	0800cb58 	.word	0x0800cb58
 8006030:	0800cb64 	.word	0x0800cb64

08006034 <Pre_Drive_Var_Init>:



// 주행 전 초기값 대입
void Pre_Drive_Var_Init() {
 8006034:	b490      	push	{r4, r7}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
	/*
	 * 인터럽트에서 쓰는 변수
	 */

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR = TIM10->ARR + 1;
 800603a:	4b62      	ldr	r3, [pc, #392]	; (80061c4 <Pre_Drive_Var_Init+0x190>)
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	3301      	adds	r3, #1
 8006040:	4a61      	ldr	r2, [pc, #388]	; (80061c8 <Pre_Drive_Var_Init+0x194>)
 8006042:	6013      	str	r3, [r2, #0]
	prevErrorL = 0;
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <Pre_Drive_Var_Init+0x198>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
	prevErrorR = 0;
 800604a:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <Pre_Drive_Var_Init+0x19c>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
	targetEncoderValueL_cntl = 10000;
 8006050:	4b60      	ldr	r3, [pc, #384]	; (80061d4 <Pre_Drive_Var_Init+0x1a0>)
 8006052:	f242 7210 	movw	r2, #10000	; 0x2710
 8006056:	801a      	strh	r2, [r3, #0]
	targetEncoderValueR_cntl = 10000;
 8006058:	4b5f      	ldr	r3, [pc, #380]	; (80061d8 <Pre_Drive_Var_Init+0x1a4>)
 800605a:	f242 7210 	movw	r2, #10000	; 0x2710
 800605e:	801a      	strh	r2, [r3, #0]
	TIM3->CNT = targetEncoderValueL_cntl;
 8006060:	4b5c      	ldr	r3, [pc, #368]	; (80061d4 <Pre_Drive_Var_Init+0x1a0>)
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29a      	uxth	r2, r3
 8006066:	4b5d      	ldr	r3, [pc, #372]	; (80061dc <Pre_Drive_Var_Init+0x1a8>)
 8006068:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = targetEncoderValueR_cntl;
 800606a:	4b5b      	ldr	r3, [pc, #364]	; (80061d8 <Pre_Drive_Var_Init+0x1a4>)
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	4b5b      	ldr	r3, [pc, #364]	; (80061e0 <Pre_Drive_Var_Init+0x1ac>)
 8006072:	625a      	str	r2, [r3, #36]	; 0x24
	prevCurEncoderValueL = targetEncoderValueL_cntl;
 8006074:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <Pre_Drive_Var_Init+0x1a0>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29a      	uxth	r2, r3
 800607a:	4b5a      	ldr	r3, [pc, #360]	; (80061e4 <Pre_Drive_Var_Init+0x1b0>)
 800607c:	801a      	strh	r2, [r3, #0]
	prevCurEncoderValueR = targetEncoderValueR_cntl;
 800607e:	4b56      	ldr	r3, [pc, #344]	; (80061d8 <Pre_Drive_Var_Init+0x1a4>)
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	4b58      	ldr	r3, [pc, #352]	; (80061e8 <Pre_Drive_Var_Init+0x1b4>)
 8006086:	801a      	strh	r2, [r3, #0]
	pCoef = P_COEF_INIT;
 8006088:	4b58      	ldr	r3, [pc, #352]	; (80061ec <Pre_Drive_Var_Init+0x1b8>)
 800608a:	4a59      	ldr	r2, [pc, #356]	; (80061f0 <Pre_Drive_Var_Init+0x1bc>)
 800608c:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 800608e:	4b59      	ldr	r3, [pc, #356]	; (80061f4 <Pre_Drive_Var_Init+0x1c0>)
 8006090:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <Pre_Drive_Var_Init+0x1bc>)
 8006092:	601a      	str	r2, [r3, #0]

	// 가속도 변수 초기화
	targetAccele = targetAccele_init;
 8006094:	4b58      	ldr	r3, [pc, #352]	; (80061f8 <Pre_Drive_Var_Init+0x1c4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a58      	ldr	r2, [pc, #352]	; (80061fc <Pre_Drive_Var_Init+0x1c8>)
 800609a:	6013      	str	r3, [r2, #0]
	curAccele = 0;
 800609c:	4b58      	ldr	r3, [pc, #352]	; (8006200 <Pre_Drive_Var_Init+0x1cc>)
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = targetSpeed_init;
 80060a4:	4b57      	ldr	r3, [pc, #348]	; (8006204 <Pre_Drive_Var_Init+0x1d0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a57      	ldr	r2, [pc, #348]	; (8006208 <Pre_Drive_Var_Init+0x1d4>)
 80060aa:	6013      	str	r3, [r2, #0]
	decele = decele_init;
 80060ac:	4b57      	ldr	r3, [pc, #348]	; (800620c <Pre_Drive_Var_Init+0x1d8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a57      	ldr	r2, [pc, #348]	; (8006210 <Pre_Drive_Var_Init+0x1dc>)
 80060b2:	6013      	str	r3, [r2, #0]
	curSpeed = MIN_SPEED;
 80060b4:	4b57      	ldr	r3, [pc, #348]	; (8006214 <Pre_Drive_Var_Init+0x1e0>)
 80060b6:	4a58      	ldr	r2, [pc, #352]	; (8006218 <Pre_Drive_Var_Init+0x1e4>)
 80060b8:	601a      	str	r2, [r3, #0]

	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 80060ba:	4b58      	ldr	r3, [pc, #352]	; (800621c <Pre_Drive_Var_Init+0x1e8>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 80060c0:	4b57      	ldr	r3, [pc, #348]	; (8006220 <Pre_Drive_Var_Init+0x1ec>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

	// positionVal을 windowing하여 구하는 것에 사용되는 변수 초기화
	positionSum = 0;
 80060c6:	4b57      	ldr	r3, [pc, #348]	; (8006224 <Pre_Drive_Var_Init+0x1f0>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 80060cc:	4b56      	ldr	r3, [pc, #344]	; (8006228 <Pre_Drive_Var_Init+0x1f4>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick_L = 0;
 80060d2:	4b56      	ldr	r3, [pc, #344]	; (800622c <Pre_Drive_Var_Init+0x1f8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
	curTick_R = 0;
 80060d8:	4b55      	ldr	r3, [pc, #340]	; (8006230 <Pre_Drive_Var_Init+0x1fc>)
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]

	// 2차 주행 inline 관현 값 초기화
	targetInlineVal = 0;
 80060de:	4b55      	ldr	r3, [pc, #340]	; (8006234 <Pre_Drive_Var_Init+0x200>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
	curInlineVal = 0;
 80060e4:	4b54      	ldr	r3, [pc, #336]	; (8006238 <Pre_Drive_Var_Init+0x204>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
	/*
	 * 주행문에서 쓰는 변수
	 */

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 80060ea:	4b54      	ldr	r3, [pc, #336]	; (800623c <Pre_Drive_Var_Init+0x208>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]

	// state machine 의 상태 업데이트
	driveState = DRIVE_STATE_IDLE;
 80060f0:	4b53      	ldr	r3, [pc, #332]	; (8006240 <Pre_Drive_Var_Init+0x20c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 80060f6:	4b53      	ldr	r3, [pc, #332]	; (8006244 <Pre_Drive_Var_Init+0x210>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	801a      	strh	r2, [r3, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 80060fc:	4b52      	ldr	r3, [pc, #328]	; (8006248 <Pre_Drive_Var_Init+0x214>)
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]

	// driveData 인덱스 초기화
	driveDataIdx = 0;
 8006102:	4b52      	ldr	r3, [pc, #328]	; (800624c <Pre_Drive_Var_Init+0x218>)
 8006104:	2200      	movs	r2, #0
 8006106:	801a      	strh	r2, [r3, #0]


	lineMasking = LINE_MASKING_INIT;
 8006108:	4b51      	ldr	r3, [pc, #324]	; (8006250 <Pre_Drive_Var_Init+0x21c>)
 800610a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800610e:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = RIGHT_MARK_MASKING_INIT;
 8006110:	4b50      	ldr	r3, [pc, #320]	; (8006254 <Pre_Drive_Var_Init+0x220>)
 8006112:	220e      	movs	r2, #14
 8006114:	801a      	strh	r2, [r3, #0]
	leftMarkMasking = LEFT_MARK_MASKING_INIT;
 8006116:	4b50      	ldr	r3, [pc, #320]	; (8006258 <Pre_Drive_Var_Init+0x224>)
 8006118:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800611c:	801a      	strh	r2, [r3, #0]
	bothMarkMasking = RIGHT_MARK_MASKING_INIT | LEFT_MARK_MASKING_INIT;
 800611e:	4b4f      	ldr	r3, [pc, #316]	; (800625c <Pre_Drive_Var_Init+0x228>)
 8006120:	f247 020e 	movw	r2, #28686	; 0x700e
 8006124:	801a      	strh	r2, [r3, #0]
	markAreaMasking = MARK_AREA_MASKING_INIT;
 8006126:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <Pre_Drive_Var_Init+0x22c>)
 8006128:	f24f 020f 	movw	r2, #61455	; 0xf00f
 800612c:	801a      	strh	r2, [r3, #0]


	// 1차 주행에서만 초기화할 변수
	if (optimizeLevel == OPTIMIZE_LEVEL_NONE) {
 800612e:	4b4d      	ldr	r3, [pc, #308]	; (8006264 <Pre_Drive_Var_Init+0x230>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d12f      	bne.n	8006196 <Pre_Drive_Var_Init+0x162>

		optimizeLevel = OPTIMIZE_LEVEL_NONE;
 8006136:	4b4b      	ldr	r3, [pc, #300]	; (8006264 <Pre_Drive_Var_Init+0x230>)
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e014      	b.n	800616c <Pre_Drive_Var_Init+0x138>
			t_driveData temp = T_DRIVE_DATA_INIT;
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	609a      	str	r2, [r3, #8]

			driveDataBuffer[i] = temp;
 800614c:	4946      	ldr	r1, [pc, #280]	; (8006268 <Pre_Drive_Var_Init+0x234>)
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4613      	mov	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	461c      	mov	r4, r3
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006172:	d3e6      	bcc.n	8006142 <Pre_Drive_Var_Init+0x10e>
		}

		// driveData의 0, 1번째 값 초기화
		// 0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠
		// 실질적으로 주행은 1번 인덱스부터 시작
		driveDataBuffer[0].markState = MARK_STRAIGHT;
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <Pre_Drive_Var_Init+0x234>)
 8006176:	2201      	movs	r2, #1
 8006178:	721a      	strb	r2, [r3, #8]


		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e007      	b.n	8006190 <Pre_Drive_Var_Init+0x15c>

			crossCntTableBuffer[i] = 0;
 8006180:	4a3a      	ldr	r2, [pc, #232]	; (800626c <Pre_Drive_Var_Init+0x238>)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2100      	movs	r1, #0
 8006186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	3301      	adds	r3, #1
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b7f      	cmp	r3, #127	; 0x7f
 8006194:	d9f4      	bls.n	8006180 <Pre_Drive_Var_Init+0x14c>
		}
	}

	// 2, 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8006196:	4b33      	ldr	r3, [pc, #204]	; (8006264 <Pre_Drive_Var_Init+0x230>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <Pre_Drive_Var_Init+0x176>

		// isReadAllMark 값 정상으로 변경
		isReadAllMark = CUSTOM_TRUE;
 800619e:	4b34      	ldr	r3, [pc, #208]	; (8006270 <Pre_Drive_Var_Init+0x23c>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]

		// 부스트 컨트롤 상태 업데이트
		starightBoostCntl = BOOST_CNTL_IDLE;
 80061a4:	4b33      	ldr	r3, [pc, #204]	; (8006274 <Pre_Drive_Var_Init+0x240>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
	}

	// 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_CURVE){
 80061aa:	4b2e      	ldr	r3, [pc, #184]	; (8006264 <Pre_Drive_Var_Init+0x230>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d902      	bls.n	80061b8 <Pre_Drive_Var_Init+0x184>

		// 커브 인라인 상태 업데이트
		curveInlineCntl = INLINE_CNTL_IDLE;
 80061b2:	4b31      	ldr	r3, [pc, #196]	; (8006278 <Pre_Drive_Var_Init+0x244>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
	}
}
 80061b8:	bf00      	nop
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc90      	pop	{r4, r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40014400 	.word	0x40014400
 80061c8:	2000144c 	.word	0x2000144c
 80061cc:	20001450 	.word	0x20001450
 80061d0:	20001454 	.word	0x20001454
 80061d4:	20001458 	.word	0x20001458
 80061d8:	2000145a 	.word	0x2000145a
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	2000145c 	.word	0x2000145c
 80061e8:	2000145e 	.word	0x2000145e
 80061ec:	20000004 	.word	0x20000004
 80061f0:	3ecccccd 	.word	0x3ecccccd
 80061f4:	20000008 	.word	0x20000008
 80061f8:	20000010 	.word	0x20000010
 80061fc:	20000020 	.word	0x20000020
 8006200:	20000024 	.word	0x20000024
 8006204:	2000000c 	.word	0x2000000c
 8006208:	2000002c 	.word	0x2000002c
 800620c:	20000014 	.word	0x20000014
 8006210:	20000028 	.word	0x20000028
 8006214:	20000030 	.word	0x20000030
 8006218:	3c23d70a 	.word	0x3c23d70a
 800621c:	20001460 	.word	0x20001460
 8006220:	20001464 	.word	0x20001464
 8006224:	20001468 	.word	0x20001468
 8006228:	2000146c 	.word	0x2000146c
 800622c:	20001470 	.word	0x20001470
 8006230:	20001474 	.word	0x20001474
 8006234:	20001478 	.word	0x20001478
 8006238:	2000147c 	.word	0x2000147c
 800623c:	2000003c 	.word	0x2000003c
 8006240:	20001480 	.word	0x20001480
 8006244:	20004688 	.word	0x20004688
 8006248:	2000468b 	.word	0x2000468b
 800624c:	20004484 	.word	0x20004484
 8006250:	2000003e 	.word	0x2000003e
 8006254:	20000040 	.word	0x20000040
 8006258:	20000042 	.word	0x20000042
 800625c:	20000044 	.word	0x20000044
 8006260:	20000046 	.word	0x20000046
 8006264:	2000468a 	.word	0x2000468a
 8006268:	20002c84 	.word	0x20002c84
 800626c:	20004588 	.word	0x20004588
 8006270:	20000048 	.word	0x20000048
 8006274:	20001481 	.word	0x20001481
 8006278:	20001482 	.word	0x20001482

0800627c <Position_Windowing>:
#include "main.h"
#include "motor.h"



__STATIC_INLINE void	Position_Windowing() {
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0

	int32_t	window = (positionVal + 30000) / 4000;
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <Position_Windowing+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800628a:	3330      	adds	r3, #48	; 0x30
 800628c:	4a10      	ldr	r2, [pc, #64]	; (80062d0 <Position_Windowing+0x54>)
 800628e:	fb82 1203 	smull	r1, r2, r2, r3
 8006292:	1212      	asrs	r2, r2, #8
 8006294:	17db      	asrs	r3, r3, #31
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	607b      	str	r3, [r7, #4]

	positionIdxMax = GET_MIN(window + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b0d      	cmp	r3, #13
 800629e:	bfa8      	it	ge
 80062a0:	230d      	movge	r3, #13
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	3302      	adds	r3, #2
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <Position_Windowing+0x58>)
 80062aa:	701a      	strb	r2, [r3, #0]
	positionIdxMin = GET_MAX(window - WINDOW_SIZE_HALF + 1, 0);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	bfb8      	it	lt
 80062b2:	2301      	movlt	r3, #1
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <Position_Windowing+0x5c>)
 80062bc:	701a      	strb	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20001460 	.word	0x20001460
 80062d0:	10624dd3 	.word	0x10624dd3
 80062d4:	2000001c 	.word	0x2000001c
 80062d8:	2000001d 	.word	0x2000001d

080062dc <Sum_Position_Val>:





__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]


	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 80062e6:	4b15      	ldr	r3, [pc, #84]	; (800633c <Sum_Position_Val+0x60>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d31e      	bcc.n	8006330 <Sum_Position_Val+0x54>
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <Sum_Position_Val+0x64>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	79fa      	ldrb	r2, [r7, #7]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d818      	bhi.n	8006330 <Sum_Position_Val+0x54>

		positionSum += positionTable[idx] * sensorNormVals[idx];
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	4a10      	ldr	r2, [pc, #64]	; (8006344 <Sum_Position_Val+0x68>)
 8006302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006306:	79fa      	ldrb	r2, [r7, #7]
 8006308:	490f      	ldr	r1, [pc, #60]	; (8006348 <Sum_Position_Val+0x6c>)
 800630a:	5c8a      	ldrb	r2, [r1, r2]
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	fb03 f202 	mul.w	r2, r3, r2
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <Sum_Position_Val+0x70>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4413      	add	r3, r2
 8006318:	4a0c      	ldr	r2, [pc, #48]	; (800634c <Sum_Position_Val+0x70>)
 800631a:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <Sum_Position_Val+0x6c>)
 8006320:	5cd3      	ldrb	r3, [r2, r3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <Sum_Position_Val+0x74>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4413      	add	r3, r2
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <Sum_Position_Val+0x74>)
 800632e:	6013      	str	r3, [r2, #0]
	}
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000001d 	.word	0x2000001d
 8006340:	2000001c 	.word	0x2000001c
 8006344:	20000080 	.word	0x20000080
 8006348:	200046d0 	.word	0x200046d0
 800634c:	20001468 	.word	0x20001468
 8006350:	2000146c 	.word	0x2000146c

08006354 <Make_Position_Val>:



__STATIC_INLINE void	Make_Position_Val() {
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0

		positionVal = positionSum / (sensorNormValsSum + 1);
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <Make_Position_Val+0x2c>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <Make_Position_Val+0x30>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	fb92 f3f3 	sdiv	r3, r2, r3
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <Make_Position_Val+0x34>)
 8006368:	6013      	str	r3, [r2, #0]

		positionSum = 0;
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <Make_Position_Val+0x2c>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <Make_Position_Val+0x30>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20001468 	.word	0x20001468
 8006384:	2000146c 	.word	0x2000146c
 8006388:	20001460 	.word	0x20001460

0800638c <Positioning>:


__STATIC_INLINE void	Positioning(uint8_t *idx) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

	switch(*idx) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b07      	cmp	r3, #7
 800639a:	dc02      	bgt.n	80063a2 <Positioning+0x16>
 800639c:	2b00      	cmp	r3, #0
 800639e:	da03      	bge.n	80063a8 <Positioning+0x1c>
				Position_Windowing();

				*idx = 0;
				break;
	}
}
 80063a0:	e01d      	b.n	80063de <Positioning+0x52>
	switch(*idx) {
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d013      	beq.n	80063ce <Positioning+0x42>
}
 80063a6:	e01a      	b.n	80063de <Positioning+0x52>
				Sum_Position_Val(*idx);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ff95 	bl	80062dc <Sum_Position_Val>
				Sum_Position_Val(*idx + 8);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff ff8e 	bl	80062dc <Sum_Position_Val>
				*idx += 1;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	701a      	strb	r2, [r3, #0]
				break;
 80063cc:	e007      	b.n	80063de <Positioning+0x52>
				Make_Position_Val();
 80063ce:	f7ff ffc1 	bl	8006354 <Make_Position_Val>
				Position_Windowing();
 80063d2:	f7ff ff53 	bl	800627c <Position_Windowing>
				*idx = 0;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
				break;
 80063dc:	bf00      	nop
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80063ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80063f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006418:	bf00      	nop
 800641a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d1f8      	bne.n	800641a <Custom_Delay_us+0x34>
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006444:	fb02 f303 	mul.w	r3, r2, r3
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ffcc 	bl	80063e6 <Custom_Delay_us>
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006462:	edc7 0a00 	vstr	s1, [r7]

	targetSpeed = pinSpeed;
 8006466:	4a25      	ldr	r2, [pc, #148]	; (80064fc <Drive_Fit_In+0xa4>)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2.f * s);
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <Drive_Fit_In+0xa8>)
 800646e:	edd3 7a00 	vldr	s15, [r3]
 8006472:	ed97 7a00 	vldr	s14, [r7]
 8006476:	ee37 7a67 	vsub.f32	s14, s14, s15
 800647a:	4b21      	ldr	r3, [pc, #132]	; (8006500 <Drive_Fit_In+0xa8>)
 800647c:	edd3 6a00 	vldr	s13, [r3]
 8006480:	edd7 7a00 	vldr	s15, [r7]
 8006484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006494:	d512      	bpl.n	80064bc <Drive_Fit_In+0x64>
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <Drive_Fit_In+0xa8>)
 8006498:	edd3 7a00 	vldr	s15, [r3]
 800649c:	ed97 7a00 	vldr	s14, [r7]
 80064a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064a4:	4b16      	ldr	r3, [pc, #88]	; (8006500 <Drive_Fit_In+0xa8>)
 80064a6:	edd3 6a00 	vldr	s13, [r3]
 80064aa:	edd7 7a00 	vldr	s15, [r7]
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	eef1 7a67 	vneg.f32	s15, s15
 80064ba:	e00f      	b.n	80064dc <Drive_Fit_In+0x84>
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <Drive_Fit_In+0xa8>)
 80064be:	edd3 7a00 	vldr	s15, [r3]
 80064c2:	ed97 7a00 	vldr	s14, [r7]
 80064c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <Drive_Fit_In+0xa8>)
 80064cc:	edd3 6a00 	vldr	s13, [r3]
 80064d0:	edd7 7a00 	vldr	s15, [r7]
 80064d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80064e0:	ee77 6a07 	vadd.f32	s13, s14, s14
 80064e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <Drive_Fit_In+0xac>)
 80064ea:	ed83 7a00 	vstr	s14, [r3]
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	2000002c 	.word	0x2000002c
 8006500:	20000030 	.word	0x20000030
 8006504:	20000028 	.word	0x20000028

08006508 <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End() {
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0

	if (endMarkCnt >= 2) {
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <Is_Drive_End+0x34>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d907      	bls.n	8006524 <Is_Drive_End+0x1c>

		optimizeLevel++;
 8006514:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <Is_Drive_End+0x38>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	b2da      	uxtb	r2, r3
 800651c:	4b08      	ldr	r3, [pc, #32]	; (8006540 <Is_Drive_End+0x38>)
 800651e:	701a      	strb	r2, [r3, #0]

		return EXIT_ECHO_END_MARK;
 8006520:	2301      	movs	r3, #1
 8006522:	e006      	b.n	8006532 <Is_Drive_End+0x2a>
	}
	if (markState == MARK_LINE_OUT) {
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <Is_Drive_End+0x3c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d101      	bne.n	8006530 <Is_Drive_End+0x28>

		return EXIT_ECHO_LINE_OUT;
 800652c:	2302      	movs	r3, #2
 800652e:	e000      	b.n	8006532 <Is_Drive_End+0x2a>
	}

	return EXIT_ECHO_IDLE;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000468b 	.word	0x2000468b
 8006540:	2000468a 	.word	0x2000468a
 8006544:	2000003c 	.word	0x2000003c

08006548 <Mark_Masking>:

#define IR_SENSOR_MID		7



__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]

	if (curIrSensorMid > IR_SENSOR_MID) {
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	2b07      	cmp	r3, #7
 8006558:	dd26      	ble.n	80065a8 <Mark_Masking+0x60>

		int8_t moveLen = curIrSensorMid - IR_SENSOR_MID;
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	3b07      	subs	r3, #7
 800655e:	b2db      	uxtb	r3, r3
 8006560:	73bb      	strb	r3, [r7, #14]

		lineMasking = LINE_MASKING_INIT >> moveLen;
 8006562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006566:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800656a:	fa42 f303 	asr.w	r3, r2, r3
 800656e:	b29a      	uxth	r2, r3
 8006570:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <Mark_Masking+0xdc>)
 8006572:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT >> moveLen;
 8006574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006578:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800657c:	fa42 f303 	asr.w	r3, r2, r3
 8006580:	b29a      	uxth	r2, r3
 8006582:	4b29      	ldr	r3, [pc, #164]	; (8006628 <Mark_Masking+0xe0>)
 8006584:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT >> moveLen;
 8006586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658a:	220e      	movs	r2, #14
 800658c:	fa42 f303 	asr.w	r3, r2, r3
 8006590:	b29a      	uxth	r2, r3
 8006592:	4b26      	ldr	r3, [pc, #152]	; (800662c <Mark_Masking+0xe4>)
 8006594:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <Mark_Masking+0xe0>)
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	4b24      	ldr	r3, [pc, #144]	; (800662c <Mark_Masking+0xe4>)
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	4b23      	ldr	r3, [pc, #140]	; (8006630 <Mark_Masking+0xe8>)
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e026      	b.n	80065f6 <Mark_Masking+0xae>

	} else {

		int8_t moveLen = IR_SENSOR_MID - curIrSensorMid;
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	f1c3 0307 	rsb	r3, r3, #7
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	73fb      	strb	r3, [r7, #15]

		lineMasking = LINE_MASKING_INIT << moveLen;
 80065b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	b29a      	uxth	r2, r3
 80065c0:	4b18      	ldr	r3, [pc, #96]	; (8006624 <Mark_Masking+0xdc>)
 80065c2:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT << moveLen;
 80065c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <Mark_Masking+0xe0>)
 80065d4:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT << moveLen;
 80065d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065da:	220e      	movs	r2, #14
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <Mark_Masking+0xe4>)
 80065e4:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <Mark_Masking+0xe0>)
 80065e8:	881a      	ldrh	r2, [r3, #0]
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <Mark_Masking+0xe4>)
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <Mark_Masking+0xe8>)
 80065f4:	801a      	strh	r2, [r3, #0]

	}

	markAreaMasking = ~(lineMasking << 1 | lineMasking >> 1);
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <Mark_Masking+0xdc>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	b21a      	sxth	r2, r3
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <Mark_Masking+0xdc>)
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	b21b      	sxth	r3, r3
 8006608:	4313      	orrs	r3, r2
 800660a:	b21b      	sxth	r3, r3
 800660c:	b29b      	uxth	r3, r3
 800660e:	43db      	mvns	r3, r3
 8006610:	b29a      	uxth	r2, r3
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <Mark_Masking+0xec>)
 8006614:	801a      	strh	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000003e 	.word	0x2000003e
 8006628:	20000042 	.word	0x20000042
 800662c:	20000040 	.word	0x20000040
 8006630:	20000044 	.word	0x20000044
 8006634:	20000046 	.word	0x20000046

08006638 <Mark_Accumming>:



__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
	// 11 => 0
	// 12 <= 1
	// 13 <= 2
	// 14 <= 3
	// 15 <= 4
	if (curIrSensorMid < 11) {
 8006642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006646:	2b0a      	cmp	r3, #10
 8006648:	dc17      	bgt.n	800667a <Mark_Accumming+0x42>

		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 800664a:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <Mark_Accumming+0xbc>)
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29a      	uxth	r2, r3
 8006650:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <Mark_Accumming+0xc0>)
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	4013      	ands	r3, r2
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	f1c3 030b 	rsb	r3, r3, #11
 8006662:	fa42 f303 	asr.w	r3, r2, r3
 8006666:	b25a      	sxtb	r2, r3
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <Mark_Accumming+0xc4>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b25b      	sxtb	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b25b      	sxtb	r3, r3
 8006672:	b2da      	uxtb	r2, r3
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <Mark_Accumming+0xc4>)
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e015      	b.n	80066a6 <Mark_Accumming+0x6e>
	} else {

		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 800667a:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <Mark_Accumming+0xbc>)
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <Mark_Accumming+0xc0>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	4013      	ands	r3, r2
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	3b0b      	subs	r3, #11
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	b25a      	sxtb	r2, r3
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <Mark_Accumming+0xc4>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b25b      	sxtb	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	b25b      	sxtb	r3, r3
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <Mark_Accumming+0xc4>)
 80066a4:	701a      	strb	r2, [r3, #0]
	}



	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <Mark_Accumming+0xbc>)
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <Mark_Accumming+0xc8>)
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	4013      	ands	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d006      	beq.n	80066c6 <Mark_Accumming+0x8e>

		irSensorStateSum |= 0x80;
 80066b8:	4b10      	ldr	r3, [pc, #64]	; (80066fc <Mark_Accumming+0xc4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <Mark_Accumming+0xc4>)
 80066c4:	701a      	strb	r2, [r3, #0]
	}

	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <Mark_Accumming+0xbc>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <Mark_Accumming+0xcc>)
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	4013      	ands	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <Mark_Accumming+0xae>

		irSensorStateSum |= 0x01;
 80066d8:	4b08      	ldr	r3, [pc, #32]	; (80066fc <Mark_Accumming+0xc4>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <Mark_Accumming+0xc4>)
 80066e4:	701a      	strb	r2, [r3, #0]
	}

}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200046f0 	.word	0x200046f0
 80066f8:	2000003e 	.word	0x2000003e
 80066fc:	2000468c 	.word	0x2000468c
 8006700:	20000042 	.word	0x20000042
 8006704:	20000040 	.word	0x20000040

08006708 <Mark_Accumming_Reset>:


__STATIC_INLINE void	Mark_Accumming_Reset() {
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0

	irSensorStateSum = 0x00;
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <Mark_Accumming_Reset+0x14>)
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000468c 	.word	0x2000468c

08006720 <Is_Line_Out>:





__STATIC_INLINE uint8_t	Is_Line_Out() {
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0

	if (irSensorState == 0x00) {
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <Is_Line_Out+0x20>)
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <Is_Line_Out+0x14>
	}

	return CUSTOM_FALSE;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	200046f0 	.word	0x200046f0

08006744 <Is_Passed_Marker>:




__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0

	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <Is_Passed_Marker+0x28>)
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29a      	uxth	r2, r3
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <Is_Passed_Marker+0x2c>)
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <Is_Passed_Marker+0x1c>
	}

	return CUSTOM_FALSE;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	200046f0 	.word	0x200046f0
 8006770:	20000046 	.word	0x20000046

08006774 <Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Decision() {
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0

	// cross
	if (irSensorStateSum == 0xff) {
 8006778:	4b1f      	ldr	r3, [pc, #124]	; (80067f8 <Decision+0x84>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2bff      	cmp	r3, #255	; 0xff
 800677e:	d103      	bne.n	8006788 <Decision+0x14>

		markState = MARK_CROSS;
 8006780:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <Decision+0x88>)
 8006782:	2205      	movs	r2, #5
 8006784:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 8006786:	e031      	b.n	80067ec <Decision+0x78>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <Decision+0x84>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8006790:	2b81      	cmp	r3, #129	; 0x81
 8006792:	d109      	bne.n	80067a8 <Decision+0x34>
		markState = MARK_END;
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <Decision+0x88>)
 8006796:	2204      	movs	r2, #4
 8006798:	701a      	strb	r2, [r3, #0]
		endMarkCnt++;
 800679a:	4b19      	ldr	r3, [pc, #100]	; (8006800 <Decision+0x8c>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <Decision+0x8c>)
 80067a4:	701a      	strb	r2, [r3, #0]
}
 80067a6:	e021      	b.n	80067ec <Decision+0x78>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <Decision+0x84>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da0b      	bge.n	80067ca <Decision+0x56>
		if (markState == MARK_CURVE_L) {
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <Decision+0x88>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d103      	bne.n	80067c2 <Decision+0x4e>
			markState = MARK_STRAIGHT;
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <Decision+0x88>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
}
 80067c0:	e014      	b.n	80067ec <Decision+0x78>
			markState = MARK_CURVE_L;
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Decision+0x88>)
 80067c4:	2203      	movs	r2, #3
 80067c6:	701a      	strb	r2, [r3, #0]
}
 80067c8:	e010      	b.n	80067ec <Decision+0x78>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <Decision+0x84>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <Decision+0x78>
		if (markState == MARK_CURVE_R) {
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <Decision+0x88>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d103      	bne.n	80067e6 <Decision+0x72>
			markState = MARK_STRAIGHT;
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <Decision+0x88>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]
}
 80067e4:	e002      	b.n	80067ec <Decision+0x78>
			markState = MARK_CURVE_R;
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <Decision+0x88>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	701a      	strb	r2, [r3, #0]
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	2000468c 	.word	0x2000468c
 80067fc:	2000003c 	.word	0x2000003c
 8006800:	2000468b 	.word	0x2000468b

08006804 <Drive_State_Machine>:





__STATIC_INLINE void	Drive_State_Machine() {
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0

	static uint32_t	lineOutStartTime = 0;

	int8_t	curIrSensorMid = positionIdxMax - WINDOW_SIZE_HALF;
 800680a:	4b4e      	ldr	r3, [pc, #312]	; (8006944 <Drive_State_Machine+0x140>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	3b02      	subs	r3, #2
 8006812:	b2db      	uxtb	r3, r3
 8006814:	71fb      	strb	r3, [r7, #7]

	Mark_Masking(curIrSensorMid);
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fe94 	bl	8006548 <Mark_Masking>


	switch (driveState) {
 8006820:	4b49      	ldr	r3, [pc, #292]	; (8006948 <Drive_State_Machine+0x144>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b04      	cmp	r3, #4
 8006826:	f200 8089 	bhi.w	800693c <Drive_State_Machine+0x138>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <Drive_State_Machine+0x2c>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006845 	.word	0x08006845
 8006834:	080068a3 	.word	0x080068a3
 8006838:	080068d1 	.word	0x080068d1
 800683c:	080068f7 	.word	0x080068f7
 8006840:	08006903 	.word	0x08006903


		case DRIVE_STATE_IDLE :

				// 라인 센서 4개 이상 인식
				if (__builtin_popcount(irSensorState & lineMasking) >= 4) {
 8006844:	4b41      	ldr	r3, [pc, #260]	; (800694c <Drive_State_Machine+0x148>)
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	4b41      	ldr	r3, [pc, #260]	; (8006950 <Drive_State_Machine+0x14c>)
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	4013      	ands	r3, r2
 8006850:	b29b      	uxth	r3, r3
 8006852:	4618      	mov	r0, r3
 8006854:	f7fa f9c8 	bl	8000be8 <__popcountsi2>
 8006858:	4603      	mov	r3, r0
 800685a:	2b03      	cmp	r3, #3
 800685c:	dd05      	ble.n	800686a <Drive_State_Machine+0x66>

					Mark_Accumming_Reset();
 800685e:	f7ff ff53 	bl	8006708 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_CROSS;
 8006862:	4b39      	ldr	r3, [pc, #228]	; (8006948 <Drive_State_Machine+0x144>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
					lineOutStartTime = uwTick;

					driveState = DRIVE_DECISION_LINE_OUT;
				}

				break;
 8006868:	e061      	b.n	800692e <Drive_State_Machine+0x12a>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 800686a:	4b38      	ldr	r3, [pc, #224]	; (800694c <Drive_State_Machine+0x148>)
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b38      	ldr	r3, [pc, #224]	; (8006954 <Drive_State_Machine+0x150>)
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	4013      	ands	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <Drive_State_Machine+0x84>
					Mark_Accumming_Reset();
 800687c:	f7ff ff44 	bl	8006708 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_MARKER;
 8006880:	4b31      	ldr	r3, [pc, #196]	; (8006948 <Drive_State_Machine+0x144>)
 8006882:	2202      	movs	r2, #2
 8006884:	701a      	strb	r2, [r3, #0]
				break;
 8006886:	e052      	b.n	800692e <Drive_State_Machine+0x12a>
				else if (Is_Line_Out()) {
 8006888:	f7ff ff4a 	bl	8006720 <Is_Line_Out>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d04d      	beq.n	800692e <Drive_State_Machine+0x12a>
					lineOutStartTime = uwTick;
 8006892:	4b31      	ldr	r3, [pc, #196]	; (8006958 <Drive_State_Machine+0x154>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a31      	ldr	r2, [pc, #196]	; (800695c <Drive_State_Machine+0x158>)
 8006898:	6013      	str	r3, [r2, #0]
					driveState = DRIVE_DECISION_LINE_OUT;
 800689a:	4b2b      	ldr	r3, [pc, #172]	; (8006948 <Drive_State_Machine+0x144>)
 800689c:	2204      	movs	r2, #4
 800689e:	701a      	strb	r2, [r3, #0]
				break;
 80068a0:	e045      	b.n	800692e <Drive_State_Machine+0x12a>


		case DRIVE_STATE_CROSS:

				// accum
				Mark_Accumming(curIrSensorMid);
 80068a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fec6 	bl	8006638 <Mark_Accumming>

				// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 80068ac:	4b2c      	ldr	r3, [pc, #176]	; (8006960 <Drive_State_Machine+0x15c>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2bff      	cmp	r3, #255	; 0xff
 80068b2:	d104      	bne.n	80068be <Drive_State_Machine+0xba>
 80068b4:	f7ff ff46 	bl	8006744 <Is_Passed_Marker>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <Drive_State_Machine+0xc4>
					|| Is_Line_Out() ) {
 80068be:	f7ff ff2f 	bl	8006720 <Is_Line_Out>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d034      	beq.n	8006932 <Drive_State_Machine+0x12e>

					driveState = DRIVE_STATE_DECISION;
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <Drive_State_Machine+0x144>)
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]
				}

				break;
 80068ce:	e030      	b.n	8006932 <Drive_State_Machine+0x12e>


		case DRIVE_STATE_MARKER :

				// accum
				Mark_Accumming(curIrSensorMid);
 80068d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff feaf 	bl	8006638 <Mark_Accumming>

				// 마커 센서가 0개 일 때
				if (Is_Passed_Marker() || Is_Line_Out()) {
 80068da:	f7ff ff33 	bl	8006744 <Is_Passed_Marker>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <Drive_State_Machine+0xea>
 80068e4:	f7ff ff1c 	bl	8006720 <Is_Line_Out>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d023      	beq.n	8006936 <Drive_State_Machine+0x132>

					driveState = DRIVE_STATE_DECISION;
 80068ee:	4b16      	ldr	r3, [pc, #88]	; (8006948 <Drive_State_Machine+0x144>)
 80068f0:	2203      	movs	r2, #3
 80068f2:	701a      	strb	r2, [r3, #0]
				}

				break;
 80068f4:	e01f      	b.n	8006936 <Drive_State_Machine+0x132>



		case DRIVE_STATE_DECISION :

				Decision();
 80068f6:	f7ff ff3d 	bl	8006774 <Decision>

				driveState = DRIVE_STATE_IDLE;
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <Drive_State_Machine+0x144>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]

				break;
 8006900:	e01c      	b.n	800693c <Drive_State_Machine+0x138>



		case DRIVE_DECISION_LINE_OUT :

				markState = MARK_LINE_OUT;
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <Drive_State_Machine+0x160>)
 8006904:	2206      	movs	r2, #6
 8006906:	701a      	strb	r2, [r3, #0]

				if (!Is_Line_Out()) {
 8006908:	f7ff ff0a 	bl	8006720 <Is_Line_Out>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <Drive_State_Machine+0x116>

					driveState = DRIVE_STATE_IDLE;
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <Drive_State_Machine+0x144>)
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {

					markState = MARK_LINE_OUT;
				}

				break ;
 8006918:	e00f      	b.n	800693a <Drive_State_Machine+0x136>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <Drive_State_Machine+0x154>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <Drive_State_Machine+0x158>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d909      	bls.n	800693a <Drive_State_Machine+0x136>
					markState = MARK_LINE_OUT;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <Drive_State_Machine+0x160>)
 8006928:	2206      	movs	r2, #6
 800692a:	701a      	strb	r2, [r3, #0]
				break ;
 800692c:	e005      	b.n	800693a <Drive_State_Machine+0x136>
				break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <Drive_State_Machine+0x138>
				break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <Drive_State_Machine+0x138>
				break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <Drive_State_Machine+0x138>
				break ;
 800693a:	bf00      	nop

	}
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	2000001c 	.word	0x2000001c
 8006948:	20001480 	.word	0x20001480
 800694c:	200046f0 	.word	0x200046f0
 8006950:	2000003e 	.word	0x2000003e
 8006954:	20000044 	.word	0x20000044
 8006958:	200002a4 	.word	0x200002a4
 800695c:	20004690 	.word	0x20004690
 8006960:	2000468c 	.word	0x2000468c
 8006964:	2000003c 	.word	0x2000003c

08006968 <First_Drive>:




//1차 주행
void First_Drive() {
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0

	uint8_t positioningIdx = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	71bb      	strb	r3, [r7, #6]

	uint8_t exitEcho = EXIT_ECHO_IDLE;
 8006972:	2300      	movs	r3, #0
 8006974:	71fb      	strb	r3, [r7, #7]


	Custom_OLED_Clear();
 8006976:	f7fe fb12 	bl	8004f9e <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting();
 800697a:	f7ff f923 	bl	8005bc4 <Pre_Drive_Setting>

	Sensor_Start();
 800697e:	f002 ffbd 	bl	80098fc <Sensor_Start>
	Motor_Start();
 8006982:	f001 febb 	bl	80086fc <Motor_Start>
	Speed_Control_Start();
 8006986:	f001 ff11 	bl	80087ac <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Positioning(&positioningIdx);
 800698a:	1dbb      	adds	r3, r7, #6
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fcfd 	bl	800638c <Positioning>

		Drive_State_Machine();
 8006992:	f7ff ff37 	bl	8006804 <Drive_State_Machine>
		First_Drive_Cntl();
 8006996:	f000 f837 	bl	8006a08 <First_Drive_Cntl>

		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 800699a:	f7ff fdb5 	bl	8006508 <Is_Drive_End>
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <First_Drive+0x22>

			Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <First_Drive+0x90>)
 80069aa:	edd3 7a00 	vldr	s15, [r3]
 80069ae:	eddf 0a13 	vldr	s1, [pc, #76]	; 80069fc <First_Drive+0x94>
 80069b2:	eeb0 0a67 	vmov.f32	s0, s15
 80069b6:	f7ff fd4f 	bl	8006458 <Drive_Fit_In>

			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 80069ba:	bf00      	nop
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <First_Drive+0x98>)
 80069be:	edd3 7a00 	vldr	s15, [r3]
 80069c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006a04 <First_Drive+0x9c>
 80069c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ce:	dcf5      	bgt.n	80069bc <First_Drive+0x54>
				//Drive_Speed_Cntl();
			}

			Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 80069d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069d4:	f7ff fd2f 	bl	8006436 <Custom_Delay_ms>

			break;
 80069d8:	bf00      	nop
		}
	}

	Motor_Stop();
 80069da:	f001 fedf 	bl	800879c <Motor_Stop>
	Speed_Control_Stop();
 80069de:	f001 fef1 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 80069e2:	f002 ffa3 	bl	800992c <Sensor_Stop>

	First_Drive_Data_Cntl(exitEcho);
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f8f5 	bl	8006bd8 <First_Drive_Data_Cntl>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	2000004c 	.word	0x2000004c
 80069fc:	3c23d70a 	.word	0x3c23d70a
 8006a00:	20000030 	.word	0x20000030
 8006a04:	3e4ccccd 	.word	0x3e4ccccd

08006a08 <First_Drive_Cntl>:





__STATIC_INLINE void First_Drive_Cntl() {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0



	switch (markState) {
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <First_Drive_Cntl+0xe8>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d869      	bhi.n	8006aea <First_Drive_Cntl+0xe2>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <First_Drive_Cntl+0x14>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006ae3 	.word	0x08006ae3
 8006a20:	08006ae3 	.word	0x08006ae3
 8006a24:	08006ae3 	.word	0x08006ae3
 8006a28:	08006a6f 	.word	0x08006a6f
 8006a2c:	08006a35 	.word	0x08006a35
 8006a30:	08006ae9 	.word	0x08006ae9
			 *    n번째 크로스(crossCnt)		0		1		...		50
			 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
			 *
			 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
			 */
			crossCntTableBuffer[crossCnt] = driveDataIdx + 1;
 8006a34:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	; (8006af8 <First_Drive_Cntl+0xf0>)
 8006a3a:	8812      	ldrh	r2, [r2, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	b299      	uxth	r1, r3
 8006a40:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <First_Drive_Cntl+0xf4>)
 8006a42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			crossCnt += 1;
 8006a46:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <First_Drive_Cntl+0xf0>)
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	; (8006af8 <First_Drive_Cntl+0xf0>)
 8006a50:	801a      	strh	r2, [r3, #0]

			// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
			markState = driveDataBuffer[driveDataIdx].markState;
 8006a52:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <First_Drive_Cntl+0xf8>)
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	440b      	add	r3, r1
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	3308      	adds	r3, #8
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <First_Drive_Cntl+0xe8>)
 8006a6a:	701a      	strb	r2, [r3, #0]

			break;
 8006a6c:	e03d      	b.n	8006aea <First_Drive_Cntl+0xe2>



		case MARK_END:

			if (endMarkCnt >= 2) {
 8006a6e:	4b25      	ldr	r3, [pc, #148]	; (8006b04 <First_Drive_Cntl+0xfc>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d927      	bls.n	8006ac6 <First_Drive_Cntl+0xbe>

				// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
				driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L;
 8006a76:	4b1f      	ldr	r3, [pc, #124]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <First_Drive_Cntl+0x100>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	491f      	ldr	r1, [pc, #124]	; (8006b00 <First_Drive_Cntl+0xf8>)
 8006a82:	4603      	mov	r3, r0
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4403      	add	r3, r0
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	601a      	str	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R;
 8006a8e:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <First_Drive_Cntl+0x104>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4919      	ldr	r1, [pc, #100]	; (8006b00 <First_Drive_Cntl+0xf8>)
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4403      	add	r3, r0
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	601a      	str	r2, [r3, #0]

				// 종료 시점에서의 읽은 크로스의 개수
				driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8006aa8:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <First_Drive_Cntl+0xf0>)
 8006aaa:	881a      	ldrh	r2, [r3, #0]
 8006aac:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	b2d0      	uxtb	r0, r2
 8006ab4:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <First_Drive_Cntl+0xf8>)
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	440b      	add	r3, r1
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	3309      	adds	r3, #9
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	701a      	strb	r2, [r3, #0]
			}

			// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
			markState = driveDataBuffer[driveDataIdx].markState;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <First_Drive_Cntl+0xec>)
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <First_Drive_Cntl+0xf8>)
 8006ace:	460b      	mov	r3, r1
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	440b      	add	r3, r1
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3308      	adds	r3, #8
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <First_Drive_Cntl+0xe8>)
 8006ade:	701a      	strb	r2, [r3, #0]

			break;
 8006ae0:	e003      	b.n	8006aea <First_Drive_Cntl+0xe2>

		case MARK_STRAIGHT:
		case MARK_CURVE_L:
		case MARK_CURVE_R:

			Set_First_Drive_Data();
 8006ae2:	f000 f815 	bl	8006b10 <Set_First_Drive_Data>

			break;
 8006ae6:	e000      	b.n	8006aea <First_Drive_Cntl+0xe2>
			break;
 8006ae8:	bf00      	nop
	}

}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000003c 	.word	0x2000003c
 8006af4:	20004484 	.word	0x20004484
 8006af8:	20004688 	.word	0x20004688
 8006afc:	20004588 	.word	0x20004588
 8006b00:	20002c84 	.word	0x20002c84
 8006b04:	2000468b 	.word	0x2000468b
 8006b08:	20001470 	.word	0x20001470
 8006b0c:	20001474 	.word	0x20001474

08006b10 <Set_First_Drive_Data>:




__STATIC_INLINE void Set_First_Drive_Data() {
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataBuffer[driveDataIdx].markState) {
 8006b14:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	; (8006bc4 <Set_First_Drive_Data+0xb4>)
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	440b      	add	r3, r1
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	3308      	adds	r3, #8
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <Set_First_Drive_Data+0xb8>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d041      	beq.n	8006bb6 <Set_First_Drive_Data+0xa6>

		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
		driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L;
 8006b32:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <Set_First_Drive_Data+0xbc>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <Set_First_Drive_Data+0xb4>)
 8006b3e:	4603      	mov	r3, r0
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4403      	add	r3, r0
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	601a      	str	r2, [r3, #0]
		driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R;
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <Set_First_Drive_Data+0xc0>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	491b      	ldr	r1, [pc, #108]	; (8006bc4 <Set_First_Drive_Data+0xb4>)
 8006b56:	4603      	mov	r3, r0
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4403      	add	r3, r0
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3304      	adds	r3, #4
 8006b62:	601a      	str	r2, [r3, #0]

		// curTick 초기화
		curTick_L = 0;
 8006b64:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <Set_First_Drive_Data+0xbc>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
		curTick_R = 0;
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <Set_First_Drive_Data+0xc0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

		// 종료 시점에서의 읽은 크로스의 개수
		driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8006b70:	4b18      	ldr	r3, [pc, #96]	; (8006bd4 <Set_First_Drive_Data+0xc4>)
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	b2d0      	uxtb	r0, r2
 8006b7c:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <Set_First_Drive_Data+0xb4>)
 8006b7e:	460b      	mov	r3, r1
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	3309      	adds	r3, #9
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	701a      	strb	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b98:	801a      	strh	r2, [r3, #0]


		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBuffer[driveDataIdx].markState = markState;
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <Set_First_Drive_Data+0xb0>)
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <Set_First_Drive_Data+0xb8>)
 8006ba2:	7818      	ldrb	r0, [r3, #0]
 8006ba4:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <Set_First_Drive_Data+0xb4>)
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	440b      	add	r3, r1
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	701a      	strb	r2, [r3, #0]
	}

}
 8006bb6:	bf00      	nop
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20004484 	.word	0x20004484
 8006bc4:	20002c84 	.word	0x20002c84
 8006bc8:	2000003c 	.word	0x2000003c
 8006bcc:	20001470 	.word	0x20001470
 8006bd0:	20001474 	.word	0x20001474
 8006bd4:	20004688 	.word	0x20004688

08006bd8 <First_Drive_Data_Cntl>:





static void First_Drive_Data_Cntl(uint8_t exitEcho) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	82fb      	strh	r3, [r7, #22]
	t_tick markCnt_L = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
	t_tick markCnt_R = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
	uint8_t crossCnt = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	72fb      	strb	r3, [r7, #11]

	if (exitEcho == EXIT_ECHO_END_MARK) {
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f040 808c 	bne.w	8006d12 <First_Drive_Data_Cntl+0x13a>

		// 마크 개수 세기
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	82fb      	strh	r3, [r7, #22]
 8006bfe:	e04a      	b.n	8006c96 <First_Drive_Data_Cntl+0xbe>

			// 현재상태가 좌측 곡선인 경우
			if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 8006c00:	8afa      	ldrh	r2, [r7, #22]
 8006c02:	494d      	ldr	r1, [pc, #308]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3308      	adds	r3, #8
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d103      	bne.n	8006c1e <First_Drive_Data_Cntl+0x46>

				markCnt_L += 1;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	e038      	b.n	8006c90 <First_Drive_Data_Cntl+0xb8>
			}

			// 현재상태가 우측 곡선인 경우
			else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 8006c1e:	8afa      	ldrh	r2, [r7, #22]
 8006c20:	4945      	ldr	r1, [pc, #276]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d103      	bne.n	8006c3c <First_Drive_Data_Cntl+0x64>

				markCnt_R += 1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e029      	b.n	8006c90 <First_Drive_Data_Cntl+0xb8>
			}

			// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
			else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 8006c3c:	8afa      	ldrh	r2, [r7, #22]
 8006c3e:	493e      	ldr	r1, [pc, #248]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d11e      	bne.n	8006c90 <First_Drive_Data_Cntl+0xb8>

				// 이전 상태가 좌측 곡선이었을 경우
				if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 8006c52:	8afb      	ldrh	r3, [r7, #22]
 8006c54:	1e5a      	subs	r2, r3, #1
 8006c56:	4938      	ldr	r1, [pc, #224]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	3308      	adds	r3, #8
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d103      	bne.n	8006c72 <First_Drive_Data_Cntl+0x9a>
					markCnt_L += 1;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e00e      	b.n	8006c90 <First_Drive_Data_Cntl+0xb8>
				}

				// 이전 상태가 우측 곡선이었을 경우
				else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	1e5a      	subs	r2, r3, #1
 8006c76:	4930      	ldr	r1, [pc, #192]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3308      	adds	r3, #8
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d102      	bne.n	8006c90 <First_Drive_Data_Cntl+0xb8>
					markCnt_R += 1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8006c90:	8afb      	ldrh	r3, [r7, #22]
 8006c92:	3301      	adds	r3, #1
 8006c94:	82fb      	strh	r3, [r7, #22]
 8006c96:	8afa      	ldrh	r2, [r7, #22]
 8006c98:	4927      	ldr	r1, [pc, #156]	; (8006d38 <First_Drive_Data_Cntl+0x160>)
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <First_Drive_Data_Cntl+0xdc>
 8006cac:	8afb      	ldrh	r3, [r7, #22]
 8006cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb2:	d3a5      	bcc.n	8006c00 <First_Drive_Data_Cntl+0x28>
				}
			}
		}

		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	82fb      	strh	r3, [r7, #22]
 8006cb8:	e005      	b.n	8006cc6 <First_Drive_Data_Cntl+0xee>

			crossCnt++;
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	72fb      	strb	r3, [r7, #11]
		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8006cc0:	8afb      	ldrh	r3, [r7, #22]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	82fb      	strh	r3, [r7, #22]
 8006cc6:	8afb      	ldrh	r3, [r7, #22]
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <First_Drive_Data_Cntl+0x164>)
 8006cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <First_Drive_Data_Cntl+0x100>
 8006cd2:	8afb      	ldrh	r3, [r7, #22]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d9f0      	bls.n	8006cba <First_Drive_Data_Cntl+0xe2>
		}

		Custom_OLED_Clear();
 8006cd8:	f7fe f961 	bl	8004f9e <Custom_OLED_Clear>

		// OLED에 exitEcho 변수명 및 마크 개수 출력
		Custom_OLED_Printf("/0end mark");
 8006cdc:	4818      	ldr	r0, [pc, #96]	; (8006d40 <First_Drive_Data_Cntl+0x168>)
 8006cde:	f7fe fa43 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 8006ce2:	6939      	ldr	r1, [r7, #16]
 8006ce4:	4817      	ldr	r0, [pc, #92]	; (8006d44 <First_Drive_Data_Cntl+0x16c>)
 8006ce6:	f7fe fa3f 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	4816      	ldr	r0, [pc, #88]	; (8006d48 <First_Drive_Data_Cntl+0x170>)
 8006cee:	f7fe fa3b 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3cross:    %d", crossCnt);
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4815      	ldr	r0, [pc, #84]	; (8006d4c <First_Drive_Data_Cntl+0x174>)
 8006cf8:	f7fe fa36 	bl	8005168 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 8006cfc:	bf00      	nop
 8006cfe:	f7fe fd63 	bl	80057c8 <Custom_Switch_Read>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d1fa      	bne.n	8006cfe <First_Drive_Data_Cntl+0x126>

		First_Drive_Data_Update_Cntl(exitEcho);
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f822 	bl	8006d54 <First_Drive_Data_Update_Cntl>
 8006d10:	e00b      	b.n	8006d2a <First_Drive_Data_Cntl+0x152>
	}

	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d108      	bne.n	8006d2a <First_Drive_Data_Cntl+0x152>

		Custom_OLED_Printf("/0line out");
 8006d18:	480d      	ldr	r0, [pc, #52]	; (8006d50 <First_Drive_Data_Cntl+0x178>)
 8006d1a:	f7fe fa25 	bl	8005168 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 8006d1e:	bf00      	nop
 8006d20:	f7fe fd52 	bl	80057c8 <Custom_Switch_Read>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d1fa      	bne.n	8006d20 <First_Drive_Data_Cntl+0x148>
	}

	Custom_OLED_Clear();
 8006d2a:	f7fe f938 	bl	8004f9e <Custom_OLED_Clear>
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20002c84 	.word	0x20002c84
 8006d3c:	20004588 	.word	0x20004588
 8006d40:	0800cba8 	.word	0x0800cba8
 8006d44:	0800cbb4 	.word	0x0800cbb4
 8006d48:	0800cbc4 	.word	0x0800cbc4
 8006d4c:	0800cbd4 	.word	0x0800cbd4
 8006d50:	0800cbe4 	.word	0x0800cbe4

08006d54 <First_Drive_Data_Update_Cntl>:



static void First_Drive_Data_Update_Cntl(uint8_t exitEcho) {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	71fb      	strb	r3, [r7, #7]

	uint8_t sw;
	uint8_t isUpdate = CUSTOM_FALSE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

	Custom_OLED_Printf("/5update: NO");
 8006d62:	4846      	ldr	r0, [pc, #280]	; (8006e7c <First_Drive_Data_Update_Cntl+0x128>)
 8006d64:	f7fe fa00 	bl	8005168 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006d68:	e010      	b.n	8006d8c <First_Drive_Data_Update_Cntl+0x38>

		// data 업데이트 함
		if (sw == CUSTOM_SW_1) {
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d105      	bne.n	8006d7c <First_Drive_Data_Update_Cntl+0x28>
			Custom_OLED_Printf("/5update: YES");
 8006d70:	4843      	ldr	r0, [pc, #268]	; (8006e80 <First_Drive_Data_Update_Cntl+0x12c>)
 8006d72:	f7fe f9f9 	bl	8005168 <Custom_OLED_Printf>
			isUpdate = CUSTOM_TRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
 8006d7a:	e007      	b.n	8006d8c <First_Drive_Data_Update_Cntl+0x38>
		}

		// data 업데이트 안함
		else if (sw == CUSTOM_SW_2) {
 8006d7c:	7afb      	ldrb	r3, [r7, #11]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d104      	bne.n	8006d8c <First_Drive_Data_Update_Cntl+0x38>
			Custom_OLED_Printf("/5update: NO ");
 8006d82:	4840      	ldr	r0, [pc, #256]	; (8006e84 <First_Drive_Data_Update_Cntl+0x130>)
 8006d84:	f7fe f9f0 	bl	8005168 <Custom_OLED_Printf>
			isUpdate = CUSTOM_FALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75fb      	strb	r3, [r7, #23]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006d8c:	f7fe fd1c 	bl	80057c8 <Custom_Switch_Read>
 8006d90:	4603      	mov	r3, r0
 8006d92:	72fb      	strb	r3, [r7, #11]
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d1e7      	bne.n	8006d6a <First_Drive_Data_Update_Cntl+0x16>
		}
	}
	Custom_OLED_Clear();
 8006d9a:	f7fe f900 	bl	8004f9e <Custom_OLED_Clear>

	if (driveData[0].markState == MARK_NONE || isUpdate == CUSTOM_TRUE) {
 8006d9e:	4b3a      	ldr	r3, [pc, #232]	; (8006e88 <First_Drive_Data_Update_Cntl+0x134>)
 8006da0:	7a1b      	ldrb	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <First_Drive_Data_Update_Cntl+0x58>
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d162      	bne.n	8006e72 <First_Drive_Data_Update_Cntl+0x11e>

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006dac:	2300      	movs	r3, #0
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	e04a      	b.n	8006e48 <First_Drive_Data_Update_Cntl+0xf4>
			driveData[i].tickCnt_L = driveDataBuffer[i].tickCnt_L;
 8006db2:	4936      	ldr	r1, [pc, #216]	; (8006e8c <First_Drive_Data_Update_Cntl+0x138>)
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	4831      	ldr	r0, [pc, #196]	; (8006e88 <First_Drive_Data_Update_Cntl+0x134>)
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4403      	add	r3, r0
 8006dd0:	6019      	str	r1, [r3, #0]
			driveData[i].tickCnt_R = driveDataBuffer[i].tickCnt_R;
 8006dd2:	492e      	ldr	r1, [pc, #184]	; (8006e8c <First_Drive_Data_Update_Cntl+0x138>)
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	3304      	adds	r3, #4
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	4828      	ldr	r0, [pc, #160]	; (8006e88 <First_Drive_Data_Update_Cntl+0x134>)
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4403      	add	r3, r0
 8006df2:	3304      	adds	r3, #4
 8006df4:	6019      	str	r1, [r3, #0]
			driveData[i].markState = driveDataBuffer[i].markState;
 8006df6:	4925      	ldr	r1, [pc, #148]	; (8006e8c <First_Drive_Data_Update_Cntl+0x138>)
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	3308      	adds	r3, #8
 8006e06:	7818      	ldrb	r0, [r3, #0]
 8006e08:	491f      	ldr	r1, [pc, #124]	; (8006e88 <First_Drive_Data_Update_Cntl+0x134>)
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	3308      	adds	r3, #8
 8006e18:	4602      	mov	r2, r0
 8006e1a:	701a      	strb	r2, [r3, #0]
			driveData[i].crossCnt = driveDataBuffer[i].crossCnt;
 8006e1c:	491b      	ldr	r1, [pc, #108]	; (8006e8c <First_Drive_Data_Update_Cntl+0x138>)
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3309      	adds	r3, #9
 8006e2c:	7818      	ldrb	r0, [r3, #0]
 8006e2e:	4916      	ldr	r1, [pc, #88]	; (8006e88 <First_Drive_Data_Update_Cntl+0x134>)
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4613      	mov	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3309      	adds	r3, #9
 8006e3e:	4602      	mov	r2, r0
 8006e40:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4e:	d3b0      	bcc.n	8006db2 <First_Drive_Data_Update_Cntl+0x5e>
		}

		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e00a      	b.n	8006e6c <First_Drive_Data_Update_Cntl+0x118>

			crossCntTable[i] = crossCntTableBuffer[i];
 8006e56:	4a0e      	ldr	r2, [pc, #56]	; (8006e90 <First_Drive_Data_Update_Cntl+0x13c>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006e5e:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <First_Drive_Data_Update_Cntl+0x140>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d9f1      	bls.n	8006e56 <First_Drive_Data_Update_Cntl+0x102>
		}
	}
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	0800cbf0 	.word	0x0800cbf0
 8006e80:	0800cc00 	.word	0x0800cc00
 8006e84:	0800cc10 	.word	0x0800cc10
 8006e88:	20001484 	.word	0x20001484
 8006e8c:	20002c84 	.word	0x20002c84
 8006e90:	20004588 	.word	0x20004588
 8006e94:	20004488 	.word	0x20004488

08006e98 <LL_USART_Enable>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec8:	2b80      	cmp	r3, #128	; 0x80
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006f2e:	bf00      	nop
 8006f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d1f8      	bne.n	8006f30 <Custom_Delay_us+0x34>
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f5a:	fb02 f303 	mul.w	r3, r2, r3
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff ffcc 	bl	8006efc <Custom_Delay_us>
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <Custom_Delay_Init_SysTick+0x20>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <Custom_Delay_Init_SysTick+0x24>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <Custom_Delay_Init_SysTick+0x24>)
 8006f7c:	f043 0307 	orr.w	r3, r3, #7
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	bf00      	nop
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	200002a4 	.word	0x200002a4
 8006f90:	e000e010 	.word	0xe000e010

08006f94 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8006f9c:	bf00      	nop
 8006f9e:	4808      	ldr	r0, [pc, #32]	; (8006fc0 <__io_putchar+0x2c>)
 8006fa0:	f7ff ff8a 	bl	8006eb8 <LL_USART_IsActiveFlag_TXE>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f9      	beq.n	8006f9e <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4803      	ldr	r0, [pc, #12]	; (8006fc0 <__io_putchar+0x2c>)
 8006fb2:	f7ff ff94 	bl	8006ede <LL_USART_TransmitData8>
	return ch;
 8006fb6:	687b      	ldr	r3, [r7, #4]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40004400 	.word	0x40004400

08006fc4 <Init>:



void Init() {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b0cc      	sub	sp, #304	; 0x130
 8006fc8:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006fca:	4b42      	ldr	r3, [pc, #264]	; (80070d4 <Init+0x110>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	4a41      	ldr	r2, [pc, #260]	; (80070d4 <Init+0x110>)
 8006fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006fd6:	4b40      	ldr	r3, [pc, #256]	; (80070d8 <Init+0x114>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3f      	ldr	r2, [pc, #252]	; (80070d8 <Init+0x114>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6013      	str	r3, [r2, #0]
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8006fe2:	483e      	ldr	r0, [pc, #248]	; (80070dc <Init+0x118>)
 8006fe4:	f7ff ff58 	bl	8006e98 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8006fe8:	f7ff ffc0 	bl	8006f6c <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8006fec:	f7fd fff6 	bl	8004fdc <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8006ff0:	f7fd fe26 	bl	8004c40 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8006ff4:	f7fd fff2 	bl	8004fdc <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8006ff8:	4839      	ldr	r0, [pc, #228]	; (80070e0 <Init+0x11c>)
 8006ffa:	f7fe f8b5 	bl	8005168 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8006ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007002:	f7ff ffa3 	bl	8006f4c <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <Init+0x120>)
 8007010:	4618      	mov	r0, r3
 8007012:	4611      	mov	r1, r2
 8007014:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007018:	461a      	mov	r2, r3
 800701a:	f003 fb58 	bl	800a6ce <memcpy>
			{ "Drive Data     ", Print_Drive_Data },
//			{ "Test Velocity  ", Motor_Test_Velocity },
//			{ "Switch Test    ", Switch_Test },
	};

	uint8_t sw = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	uint8_t count = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 800702a:	230f      	movs	r3, #15
 800702c:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d

	Custom_OLED_Clear();
 8007030:	f7fd ffb5 	bl	8004f9e <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8007034:	f7fd ffb3 	bl	8004f9e <Custom_OLED_Clear>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007038:	e033      	b.n	80070a2 <Init+0xde>
			Custom_OLED_Printf("%s", menus[count].menuName);
 800703a:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800703e:	4639      	mov	r1, r7
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	4619      	mov	r1, r3
 800704c:	4826      	ldr	r0, [pc, #152]	; (80070e8 <Init+0x124>)
 800704e:	f7fe f88b 	bl	8005168 <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8007052:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10f      	bne.n	800707a <Init+0xb6>
				if (count == 0)
 800705a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <Init+0xaa>
					count = menuCnt - 1;
 8007062:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8007066:	3b01      	subs	r3, #1
 8007068:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800706c:	e019      	b.n	80070a2 <Init+0xde>
				else
					count--;
 800706e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8007072:	3b01      	subs	r3, #1
 8007074:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8007078:	e013      	b.n	80070a2 <Init+0xde>
			}
			else if (sw == CUSTOM_SW_2) {
 800707a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800707e:	2b02      	cmp	r3, #2
 8007080:	d10f      	bne.n	80070a2 <Init+0xde>
				if (count == menuCnt - 1)
 8007082:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8007086:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800708a:	3b01      	subs	r3, #1
 800708c:	429a      	cmp	r2, r3
 800708e:	d103      	bne.n	8007098 <Init+0xd4>
					count = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8007096:	e004      	b.n	80070a2 <Init+0xde>
				else
					count++;
 8007098:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800709c:	3301      	adds	r3, #1
 800709e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80070a2:	f7fe fb91 	bl	80057c8 <Custom_Switch_Read>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80070ac:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d1c2      	bne.n	800703a <Init+0x76>
			}
		}
		menus[count].func();
 80070b4:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3310      	adds	r3, #16
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4798      	blx	r3
		Custom_OLED_Clear();
 80070d0:	e7b0      	b.n	8007034 <Init+0x70>
 80070d2:	bf00      	nop
 80070d4:	e000edf0 	.word	0xe000edf0
 80070d8:	e0001000 	.word	0xe0001000
 80070dc:	40004400 	.word	0x40004400
 80070e0:	0800cc20 	.word	0x0800cc20
 80070e4:	0800cc38 	.word	0x0800cc38
 80070e8:	0800cc34 	.word	0x0800cc34

080070ec <LL_TIM_EnableCounter>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f043 0201 	orr.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <LL_TIM_DisableCounter>:
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f023 0201 	bic.w	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <LL_TIM_CC_EnableChannel>:
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <LL_TIM_CC_DisableChannel>:
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1a      	ldr	r2, [r3, #32]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	43db      	mvns	r3, r3
 8007160:	401a      	ands	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <LL_TIM_OC_SetCompareCH2>:
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <Custom_GPIO_Set>:
		uint32_t value) {
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <Custom_GPIO_Set+0x22>
 80071aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80071ae:	e000      	b.n	80071b2 <Custom_GPIO_Set+0x24>
 80071b0:	2100      	movs	r1, #0
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	400b      	ands	r3, r1
 80071b6:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	615a      	str	r2, [r3, #20]
}
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <Position_Windowing>:
__STATIC_INLINE void	Position_Windowing() {
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
	int32_t	window = (positionVal + 30000) / 4000;
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <Position_Windowing+0x50>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80071d6:	3330      	adds	r3, #48	; 0x30
 80071d8:	4a10      	ldr	r2, [pc, #64]	; (800721c <Position_Windowing+0x54>)
 80071da:	fb82 1203 	smull	r1, r2, r2, r3
 80071de:	1212      	asrs	r2, r2, #8
 80071e0:	17db      	asrs	r3, r3, #31
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	607b      	str	r3, [r7, #4]
	positionIdxMax = GET_MIN(window + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b0d      	cmp	r3, #13
 80071ea:	bfa8      	it	ge
 80071ec:	230d      	movge	r3, #13
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	3302      	adds	r3, #2
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <Position_Windowing+0x58>)
 80071f6:	701a      	strb	r2, [r3, #0]
	positionIdxMin = GET_MAX(window - WINDOW_SIZE_HALF + 1, 0);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	bfb8      	it	lt
 80071fe:	2301      	movlt	r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <Position_Windowing+0x5c>)
 8007208:	701a      	strb	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20001460 	.word	0x20001460
 800721c:	10624dd3 	.word	0x10624dd3
 8007220:	2000001c 	.word	0x2000001c
 8007224:	2000001d 	.word	0x2000001d

08007228 <Sum_Position_Val>:
__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 8007232:	4b15      	ldr	r3, [pc, #84]	; (8007288 <Sum_Position_Val+0x60>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	79fa      	ldrb	r2, [r7, #7]
 800723a:	429a      	cmp	r2, r3
 800723c:	d31e      	bcc.n	800727c <Sum_Position_Val+0x54>
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <Sum_Position_Val+0x64>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	79fa      	ldrb	r2, [r7, #7]
 8007246:	429a      	cmp	r2, r3
 8007248:	d818      	bhi.n	800727c <Sum_Position_Val+0x54>
		positionSum += positionTable[idx] * sensorNormVals[idx];
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	4a10      	ldr	r2, [pc, #64]	; (8007290 <Sum_Position_Val+0x68>)
 800724e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007252:	79fa      	ldrb	r2, [r7, #7]
 8007254:	490f      	ldr	r1, [pc, #60]	; (8007294 <Sum_Position_Val+0x6c>)
 8007256:	5c8a      	ldrb	r2, [r1, r2]
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	fb03 f202 	mul.w	r2, r3, r2
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <Sum_Position_Val+0x70>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4413      	add	r3, r2
 8007264:	4a0c      	ldr	r2, [pc, #48]	; (8007298 <Sum_Position_Val+0x70>)
 8007266:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <Sum_Position_Val+0x6c>)
 800726c:	5cd3      	ldrb	r3, [r2, r3]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	4b0a      	ldr	r3, [pc, #40]	; (800729c <Sum_Position_Val+0x74>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4413      	add	r3, r2
 8007278:	4a08      	ldr	r2, [pc, #32]	; (800729c <Sum_Position_Val+0x74>)
 800727a:	6013      	str	r3, [r2, #0]
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	2000001d 	.word	0x2000001d
 800728c:	2000001c 	.word	0x2000001c
 8007290:	20000080 	.word	0x20000080
 8007294:	200046d0 	.word	0x200046d0
 8007298:	20001468 	.word	0x20001468
 800729c:	2000146c 	.word	0x2000146c

080072a0 <Make_Position_Val>:
__STATIC_INLINE void	Make_Position_Val() {
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
		positionVal = positionSum / (sensorNormValsSum + 1);
 80072a4:	4b09      	ldr	r3, [pc, #36]	; (80072cc <Make_Position_Val+0x2c>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <Make_Position_Val+0x30>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80072b2:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <Make_Position_Val+0x34>)
 80072b4:	6013      	str	r3, [r2, #0]
		positionSum = 0;
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <Make_Position_Val+0x2c>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <Make_Position_Val+0x30>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20001468 	.word	0x20001468
 80072d0:	2000146c 	.word	0x2000146c
 80072d4:	20001460 	.word	0x20001460

080072d8 <Positioning>:
__STATIC_INLINE void	Positioning(uint8_t *idx) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	switch(*idx) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b07      	cmp	r3, #7
 80072e6:	dc02      	bgt.n	80072ee <Positioning+0x16>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da03      	bge.n	80072f4 <Positioning+0x1c>
}
 80072ec:	e01d      	b.n	800732a <Positioning+0x52>
	switch(*idx) {
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d013      	beq.n	800731a <Positioning+0x42>
}
 80072f2:	e01a      	b.n	800732a <Positioning+0x52>
				Sum_Position_Val(*idx);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff95 	bl	8007228 <Sum_Position_Val>
				Sum_Position_Val(*idx + 8);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	3308      	adds	r3, #8
 8007304:	b2db      	uxtb	r3, r3
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff ff8e 	bl	8007228 <Sum_Position_Val>
				*idx += 1;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	b2da      	uxtb	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	701a      	strb	r2, [r3, #0]
				break;
 8007318:	e007      	b.n	800732a <Positioning+0x52>
				Make_Position_Val();
 800731a:	f7ff ffc1 	bl	80072a0 <Make_Position_Val>
				Position_Windowing();
 800731e:	f7ff ff53 	bl	80071c8 <Position_Windowing>
				*idx = 0;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
				break;
 8007328:	bf00      	nop
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <Mark_Masking>:
__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid > IR_SENSOR_MID) {
 800733e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007342:	2b07      	cmp	r3, #7
 8007344:	dd26      	ble.n	8007394 <Mark_Masking+0x60>
		int8_t moveLen = curIrSensorMid - IR_SENSOR_MID;
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	3b07      	subs	r3, #7
 800734a:	b2db      	uxtb	r3, r3
 800734c:	73bb      	strb	r3, [r7, #14]
		lineMasking = LINE_MASKING_INIT >> moveLen;
 800734e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007352:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8007356:	fa42 f303 	asr.w	r3, r2, r3
 800735a:	b29a      	uxth	r2, r3
 800735c:	4b2c      	ldr	r3, [pc, #176]	; (8007410 <Mark_Masking+0xdc>)
 800735e:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT >> moveLen;
 8007360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007364:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8007368:	fa42 f303 	asr.w	r3, r2, r3
 800736c:	b29a      	uxth	r2, r3
 800736e:	4b29      	ldr	r3, [pc, #164]	; (8007414 <Mark_Masking+0xe0>)
 8007370:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT >> moveLen;
 8007372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007376:	220e      	movs	r2, #14
 8007378:	fa42 f303 	asr.w	r3, r2, r3
 800737c:	b29a      	uxth	r2, r3
 800737e:	4b26      	ldr	r3, [pc, #152]	; (8007418 <Mark_Masking+0xe4>)
 8007380:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <Mark_Masking+0xe0>)
 8007384:	881a      	ldrh	r2, [r3, #0]
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <Mark_Masking+0xe4>)
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4313      	orrs	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	4b23      	ldr	r3, [pc, #140]	; (800741c <Mark_Masking+0xe8>)
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	e026      	b.n	80073e2 <Mark_Masking+0xae>
		int8_t moveLen = IR_SENSOR_MID - curIrSensorMid;
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	f1c3 0307 	rsb	r3, r3, #7
 800739a:	b2db      	uxtb	r3, r3
 800739c:	73fb      	strb	r3, [r7, #15]
		lineMasking = LINE_MASKING_INIT << moveLen;
 800739e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <Mark_Masking+0xdc>)
 80073ae:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT << moveLen;
 80073b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	b29a      	uxth	r2, r3
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <Mark_Masking+0xe0>)
 80073c0:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT << moveLen;
 80073c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c6:	220e      	movs	r2, #14
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <Mark_Masking+0xe4>)
 80073d0:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <Mark_Masking+0xe0>)
 80073d4:	881a      	ldrh	r2, [r3, #0]
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <Mark_Masking+0xe4>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	4313      	orrs	r3, r2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	4b0f      	ldr	r3, [pc, #60]	; (800741c <Mark_Masking+0xe8>)
 80073e0:	801a      	strh	r2, [r3, #0]
	markAreaMasking = ~(lineMasking << 1 | lineMasking >> 1);
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <Mark_Masking+0xdc>)
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	b21a      	sxth	r2, r3
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <Mark_Masking+0xdc>)
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	b21b      	sxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b21b      	sxth	r3, r3
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	43db      	mvns	r3, r3
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	4b08      	ldr	r3, [pc, #32]	; (8007420 <Mark_Masking+0xec>)
 8007400:	801a      	strh	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	2000003e 	.word	0x2000003e
 8007414:	20000042 	.word	0x20000042
 8007418:	20000040 	.word	0x20000040
 800741c:	20000044 	.word	0x20000044
 8007420:	20000046 	.word	0x20000046

08007424 <Mark_Accumming>:
__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid < 11) {
 800742e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007432:	2b0a      	cmp	r3, #10
 8007434:	dc17      	bgt.n	8007466 <Mark_Accumming+0x42>
		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 8007436:	4b2a      	ldr	r3, [pc, #168]	; (80074e0 <Mark_Accumming+0xbc>)
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <Mark_Accumming+0xc0>)
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	b29b      	uxth	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744a:	f1c3 030b 	rsb	r3, r3, #11
 800744e:	fa42 f303 	asr.w	r3, r2, r3
 8007452:	b25a      	sxtb	r2, r3
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <Mark_Accumming+0xc4>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b25b      	sxtb	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b25b      	sxtb	r3, r3
 800745e:	b2da      	uxtb	r2, r3
 8007460:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <Mark_Accumming+0xc4>)
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	e015      	b.n	8007492 <Mark_Accumming+0x6e>
		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <Mark_Accumming+0xbc>)
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <Mark_Accumming+0xc0>)
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	4013      	ands	r3, r2
 8007472:	b29b      	uxth	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747a:	3b0b      	subs	r3, #11
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	b25a      	sxtb	r2, r3
 8007482:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <Mark_Accumming+0xc4>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	b25b      	sxtb	r3, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	b25b      	sxtb	r3, r3
 800748c:	b2da      	uxtb	r2, r3
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <Mark_Accumming+0xc4>)
 8007490:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <Mark_Accumming+0xbc>)
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29a      	uxth	r2, r3
 8007498:	4b14      	ldr	r3, [pc, #80]	; (80074ec <Mark_Accumming+0xc8>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	4013      	ands	r3, r2
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <Mark_Accumming+0x8e>
		irSensorStateSum |= 0x80;
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <Mark_Accumming+0xc4>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <Mark_Accumming+0xc4>)
 80074b0:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <Mark_Accumming+0xbc>)
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <Mark_Accumming+0xcc>)
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	4013      	ands	r3, r2
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d006      	beq.n	80074d2 <Mark_Accumming+0xae>
		irSensorStateSum |= 0x01;
 80074c4:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <Mark_Accumming+0xc4>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <Mark_Accumming+0xc4>)
 80074d0:	701a      	strb	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	200046f0 	.word	0x200046f0
 80074e4:	2000003e 	.word	0x2000003e
 80074e8:	2000468c 	.word	0x2000468c
 80074ec:	20000042 	.word	0x20000042
 80074f0:	20000040 	.word	0x20000040

080074f4 <Mark_Accumming_Reset>:
__STATIC_INLINE void	Mark_Accumming_Reset() {
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
	irSensorStateSum = 0x00;
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <Mark_Accumming_Reset+0x14>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
}
 80074fe:	bf00      	nop
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	2000468c 	.word	0x2000468c

0800750c <Is_Line_Out>:
__STATIC_INLINE uint8_t	Is_Line_Out() {
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
	if (irSensorState == 0x00) {
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <Is_Line_Out+0x20>)
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <Is_Line_Out+0x14>
	return CUSTOM_FALSE;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	200046f0 	.word	0x200046f0

08007530 <Is_Passed_Marker>:
__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <Is_Passed_Marker+0x28>)
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <Is_Passed_Marker+0x2c>)
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	4013      	ands	r3, r2
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <Is_Passed_Marker+0x1c>
	return CUSTOM_FALSE;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	200046f0 	.word	0x200046f0
 800755c:	20000046 	.word	0x20000046

08007560 <Decision>:
__STATIC_INLINE void	Decision() {
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	if (irSensorStateSum == 0xff) {
 8007564:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <Decision+0x84>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2bff      	cmp	r3, #255	; 0xff
 800756a:	d103      	bne.n	8007574 <Decision+0x14>
		markState = MARK_CROSS;
 800756c:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <Decision+0x88>)
 800756e:	2205      	movs	r2, #5
 8007570:	701a      	strb	r2, [r3, #0]
}
 8007572:	e031      	b.n	80075d8 <Decision+0x78>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 8007574:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <Decision+0x84>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 0381 	and.w	r3, r3, #129	; 0x81
 800757c:	2b81      	cmp	r3, #129	; 0x81
 800757e:	d109      	bne.n	8007594 <Decision+0x34>
		markState = MARK_END;
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <Decision+0x88>)
 8007582:	2204      	movs	r2, #4
 8007584:	701a      	strb	r2, [r3, #0]
		endMarkCnt++;
 8007586:	4b19      	ldr	r3, [pc, #100]	; (80075ec <Decision+0x8c>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	b2da      	uxtb	r2, r3
 800758e:	4b17      	ldr	r3, [pc, #92]	; (80075ec <Decision+0x8c>)
 8007590:	701a      	strb	r2, [r3, #0]
}
 8007592:	e021      	b.n	80075d8 <Decision+0x78>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 8007594:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <Decision+0x84>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	b25b      	sxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	da0b      	bge.n	80075b6 <Decision+0x56>
		if (markState == MARK_CURVE_L) {
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <Decision+0x88>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d103      	bne.n	80075ae <Decision+0x4e>
			markState = MARK_STRAIGHT;
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <Decision+0x88>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
}
 80075ac:	e014      	b.n	80075d8 <Decision+0x78>
			markState = MARK_CURVE_L;
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <Decision+0x88>)
 80075b0:	2203      	movs	r2, #3
 80075b2:	701a      	strb	r2, [r3, #0]
}
 80075b4:	e010      	b.n	80075d8 <Decision+0x78>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 80075b6:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <Decision+0x84>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <Decision+0x78>
		if (markState == MARK_CURVE_R) {
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <Decision+0x88>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d103      	bne.n	80075d2 <Decision+0x72>
			markState = MARK_STRAIGHT;
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <Decision+0x88>)
 80075cc:	2201      	movs	r2, #1
 80075ce:	701a      	strb	r2, [r3, #0]
}
 80075d0:	e002      	b.n	80075d8 <Decision+0x78>
			markState = MARK_CURVE_R;
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <Decision+0x88>)
 80075d4:	2202      	movs	r2, #2
 80075d6:	701a      	strb	r2, [r3, #0]
}
 80075d8:	bf00      	nop
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000468c 	.word	0x2000468c
 80075e8:	2000003c 	.word	0x2000003c
 80075ec:	2000468b 	.word	0x2000468b

080075f0 <Drive_State_Machine>:
__STATIC_INLINE void	Drive_State_Machine() {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
	int8_t	curIrSensorMid = positionIdxMax - WINDOW_SIZE_HALF;
 80075f6:	4b4e      	ldr	r3, [pc, #312]	; (8007730 <Drive_State_Machine+0x140>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	3b02      	subs	r3, #2
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	71fb      	strb	r3, [r7, #7]
	Mark_Masking(curIrSensorMid);
 8007602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff fe94 	bl	8007334 <Mark_Masking>
	switch (driveState) {
 800760c:	4b49      	ldr	r3, [pc, #292]	; (8007734 <Drive_State_Machine+0x144>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b04      	cmp	r3, #4
 8007612:	f200 8089 	bhi.w	8007728 <Drive_State_Machine+0x138>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <Drive_State_Machine+0x2c>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007631 	.word	0x08007631
 8007620:	0800768f 	.word	0x0800768f
 8007624:	080076bd 	.word	0x080076bd
 8007628:	080076e3 	.word	0x080076e3
 800762c:	080076ef 	.word	0x080076ef
				if (__builtin_popcount(irSensorState & lineMasking) >= 4) {
 8007630:	4b41      	ldr	r3, [pc, #260]	; (8007738 <Drive_State_Machine+0x148>)
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29a      	uxth	r2, r3
 8007636:	4b41      	ldr	r3, [pc, #260]	; (800773c <Drive_State_Machine+0x14c>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	4013      	ands	r3, r2
 800763c:	b29b      	uxth	r3, r3
 800763e:	4618      	mov	r0, r3
 8007640:	f7f9 fad2 	bl	8000be8 <__popcountsi2>
 8007644:	4603      	mov	r3, r0
 8007646:	2b03      	cmp	r3, #3
 8007648:	dd05      	ble.n	8007656 <Drive_State_Machine+0x66>
					Mark_Accumming_Reset();
 800764a:	f7ff ff53 	bl	80074f4 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_CROSS;
 800764e:	4b39      	ldr	r3, [pc, #228]	; (8007734 <Drive_State_Machine+0x144>)
 8007650:	2201      	movs	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]
				break;
 8007654:	e061      	b.n	800771a <Drive_State_Machine+0x12a>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 8007656:	4b38      	ldr	r3, [pc, #224]	; (8007738 <Drive_State_Machine+0x148>)
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	4b38      	ldr	r3, [pc, #224]	; (8007740 <Drive_State_Machine+0x150>)
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	4013      	ands	r3, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <Drive_State_Machine+0x84>
					Mark_Accumming_Reset();
 8007668:	f7ff ff44 	bl	80074f4 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_MARKER;
 800766c:	4b31      	ldr	r3, [pc, #196]	; (8007734 <Drive_State_Machine+0x144>)
 800766e:	2202      	movs	r2, #2
 8007670:	701a      	strb	r2, [r3, #0]
				break;
 8007672:	e052      	b.n	800771a <Drive_State_Machine+0x12a>
				else if (Is_Line_Out()) {
 8007674:	f7ff ff4a 	bl	800750c <Is_Line_Out>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04d      	beq.n	800771a <Drive_State_Machine+0x12a>
					lineOutStartTime = uwTick;
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <Drive_State_Machine+0x154>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a31      	ldr	r2, [pc, #196]	; (8007748 <Drive_State_Machine+0x158>)
 8007684:	6013      	str	r3, [r2, #0]
					driveState = DRIVE_DECISION_LINE_OUT;
 8007686:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <Drive_State_Machine+0x144>)
 8007688:	2204      	movs	r2, #4
 800768a:	701a      	strb	r2, [r3, #0]
				break;
 800768c:	e045      	b.n	800771a <Drive_State_Machine+0x12a>
				Mark_Accumming(curIrSensorMid);
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fec6 	bl	8007424 <Mark_Accumming>
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 8007698:	4b2c      	ldr	r3, [pc, #176]	; (800774c <Drive_State_Machine+0x15c>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2bff      	cmp	r3, #255	; 0xff
 800769e:	d104      	bne.n	80076aa <Drive_State_Machine+0xba>
 80076a0:	f7ff ff46 	bl	8007530 <Is_Passed_Marker>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <Drive_State_Machine+0xc4>
					|| Is_Line_Out() ) {
 80076aa:	f7ff ff2f 	bl	800750c <Is_Line_Out>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d034      	beq.n	800771e <Drive_State_Machine+0x12e>
					driveState = DRIVE_STATE_DECISION;
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <Drive_State_Machine+0x144>)
 80076b6:	2203      	movs	r2, #3
 80076b8:	701a      	strb	r2, [r3, #0]
				break;
 80076ba:	e030      	b.n	800771e <Drive_State_Machine+0x12e>
				Mark_Accumming(curIrSensorMid);
 80076bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff feaf 	bl	8007424 <Mark_Accumming>
				if (Is_Passed_Marker() || Is_Line_Out()) {
 80076c6:	f7ff ff33 	bl	8007530 <Is_Passed_Marker>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <Drive_State_Machine+0xea>
 80076d0:	f7ff ff1c 	bl	800750c <Is_Line_Out>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d023      	beq.n	8007722 <Drive_State_Machine+0x132>
					driveState = DRIVE_STATE_DECISION;
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <Drive_State_Machine+0x144>)
 80076dc:	2203      	movs	r2, #3
 80076de:	701a      	strb	r2, [r3, #0]
				break;
 80076e0:	e01f      	b.n	8007722 <Drive_State_Machine+0x132>
				Decision();
 80076e2:	f7ff ff3d 	bl	8007560 <Decision>
				driveState = DRIVE_STATE_IDLE;
 80076e6:	4b13      	ldr	r3, [pc, #76]	; (8007734 <Drive_State_Machine+0x144>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
				break;
 80076ec:	e01c      	b.n	8007728 <Drive_State_Machine+0x138>
				markState = MARK_LINE_OUT;
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <Drive_State_Machine+0x160>)
 80076f0:	2206      	movs	r2, #6
 80076f2:	701a      	strb	r2, [r3, #0]
				if (!Is_Line_Out()) {
 80076f4:	f7ff ff0a 	bl	800750c <Is_Line_Out>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <Drive_State_Machine+0x116>
					driveState = DRIVE_STATE_IDLE;
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <Drive_State_Machine+0x144>)
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
				break ;
 8007704:	e00f      	b.n	8007726 <Drive_State_Machine+0x136>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <Drive_State_Machine+0x154>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <Drive_State_Machine+0x158>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d909      	bls.n	8007726 <Drive_State_Machine+0x136>
					markState = MARK_LINE_OUT;
 8007712:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <Drive_State_Machine+0x160>)
 8007714:	2206      	movs	r2, #6
 8007716:	701a      	strb	r2, [r3, #0]
				break ;
 8007718:	e005      	b.n	8007726 <Drive_State_Machine+0x136>
				break;
 800771a:	bf00      	nop
 800771c:	e004      	b.n	8007728 <Drive_State_Machine+0x138>
				break;
 800771e:	bf00      	nop
 8007720:	e002      	b.n	8007728 <Drive_State_Machine+0x138>
				break;
 8007722:	bf00      	nop
 8007724:	e000      	b.n	8007728 <Drive_State_Machine+0x138>
				break ;
 8007726:	bf00      	nop
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	2000001c 	.word	0x2000001c
 8007734:	20001480 	.word	0x20001480
 8007738:	200046f0 	.word	0x200046f0
 800773c:	2000003e 	.word	0x2000003e
 8007740:	20000044 	.word	0x20000044
 8007744:	200002a4 	.word	0x200002a4
 8007748:	20004694 	.word	0x20004694
 800774c:	2000468c 	.word	0x2000468c
 8007750:	2000003c 	.word	0x2000003c

08007754 <Sensor_Test_Raw>:
}




void Sensor_Test_Raw() {
 8007754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007756:	b087      	sub	sp, #28
 8007758:	af06      	add	r7, sp, #24
	Sensor_Start();
 800775a:	f002 f8cf 	bl	80098fc <Sensor_Start>
	Custom_OLED_Clear();
 800775e:	f7fd fc1e 	bl	8004f9e <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007762:	e053      	b.n	800780c <Sensor_Test_Raw+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8007764:	4b30      	ldr	r3, [pc, #192]	; (8007828 <Sensor_Test_Raw+0xd4>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800776a:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 800776c:	4b2e      	ldr	r3, [pc, #184]	; (8007828 <Sensor_Test_Raw+0xd4>)
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007772:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <Sensor_Test_Raw+0xd4>)
 8007776:	789b      	ldrb	r3, [r3, #2]
 8007778:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800777a:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 800777c:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <Sensor_Test_Raw+0xd4>)
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007782:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8007784:	4b28      	ldr	r3, [pc, #160]	; (8007828 <Sensor_Test_Raw+0xd4>)
 8007786:	791b      	ldrb	r3, [r3, #4]
 8007788:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800778a:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 800778c:	4b26      	ldr	r3, [pc, #152]	; (8007828 <Sensor_Test_Raw+0xd4>)
 800778e:	795b      	ldrb	r3, [r3, #5]
 8007790:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007792:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <Sensor_Test_Raw+0xd4>)
 8007796:	799b      	ldrb	r3, [r3, #6]
 8007798:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800779a:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 800779c:	4b22      	ldr	r3, [pc, #136]	; (8007828 <Sensor_Test_Raw+0xd4>)
 800779e:	79db      	ldrb	r3, [r3, #7]
 80077a0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077a2:	9304      	str	r3, [sp, #16]
 80077a4:	9403      	str	r4, [sp, #12]
 80077a6:	9002      	str	r0, [sp, #8]
 80077a8:	9101      	str	r1, [sp, #4]
 80077aa:	9200      	str	r2, [sp, #0]
 80077ac:	4663      	mov	r3, ip
 80077ae:	4632      	mov	r2, r6
 80077b0:	4629      	mov	r1, r5
 80077b2:	481e      	ldr	r0, [pc, #120]	; (800782c <Sensor_Test_Raw+0xd8>)
 80077b4:	f7fd fcd8 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077ba:	7a1b      	ldrb	r3, [r3, #8]
 80077bc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077be:	461d      	mov	r5, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80077c0:	4b19      	ldr	r3, [pc, #100]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077c2:	7a5b      	ldrb	r3, [r3, #9]
 80077c4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077c6:	461e      	mov	r6, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80077c8:	4b17      	ldr	r3, [pc, #92]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077ca:	7a9b      	ldrb	r3, [r3, #10]
 80077cc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077ce:	469c      	mov	ip, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80077d0:	4b15      	ldr	r3, [pc, #84]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077d2:	7adb      	ldrb	r3, [r3, #11]
 80077d4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077d6:	461a      	mov	r2, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 80077d8:	4b13      	ldr	r3, [pc, #76]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077da:	7b1b      	ldrb	r3, [r3, #12]
 80077dc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077de:	4619      	mov	r1, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077e2:	7b5b      	ldrb	r3, [r3, #13]
 80077e4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077e6:	4618      	mov	r0, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 80077e8:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077ea:	7b9b      	ldrb	r3, [r3, #14]
 80077ec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077ee:	461c      	mov	r4, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <Sensor_Test_Raw+0xd4>)
 80077f2:	7bdb      	ldrb	r3, [r3, #15]
 80077f4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	9403      	str	r4, [sp, #12]
 80077fa:	9002      	str	r0, [sp, #8]
 80077fc:	9101      	str	r1, [sp, #4]
 80077fe:	9200      	str	r2, [sp, #0]
 8007800:	4663      	mov	r3, ip
 8007802:	4632      	mov	r2, r6
 8007804:	4629      	mov	r1, r5
 8007806:	480a      	ldr	r0, [pc, #40]	; (8007830 <Sensor_Test_Raw+0xdc>)
 8007808:	f7fd fcae 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800780c:	f7fd ffdc 	bl	80057c8 <Custom_Switch_Read>
 8007810:	4603      	mov	r3, r0
 8007812:	2b04      	cmp	r3, #4
 8007814:	d1a6      	bne.n	8007764 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8007816:	f7fd fbc2 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Stop();
 800781a:	f002 f887 	bl	800992c <Sensor_Stop>
}
 800781e:	bf00      	nop
 8007820:	3704      	adds	r7, #4
 8007822:	46bd      	mov	sp, r7
 8007824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007826:	bf00      	nop
 8007828:	200046c0 	.word	0x200046c0
 800782c:	0800ce00 	.word	0x0800ce00
 8007830:	0800ce2c 	.word	0x0800ce2c

08007834 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	b087      	sub	sp, #28
 8007838:	af06      	add	r7, sp, #24
	Sensor_Start();
 800783a:	f002 f85f 	bl	80098fc <Sensor_Start>
	Custom_OLED_Clear();
 800783e:	f7fd fbae 	bl	8004f9e <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007842:	e053      	b.n	80078ec <Sensor_Test_Normalized+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8007844:	4b30      	ldr	r3, [pc, #192]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800784a:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 800784c:	4b2e      	ldr	r3, [pc, #184]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007852:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8007854:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 8007856:	789b      	ldrb	r3, [r3, #2]
 8007858:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800785a:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 800785c:	4b2a      	ldr	r3, [pc, #168]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007862:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8007864:	4b28      	ldr	r3, [pc, #160]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800786a:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 800786c:	4b26      	ldr	r3, [pc, #152]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 800786e:	795b      	ldrb	r3, [r3, #5]
 8007870:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007872:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 8007876:	799b      	ldrb	r3, [r3, #6]
 8007878:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800787a:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 800787c:	4b22      	ldr	r3, [pc, #136]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 800787e:	79db      	ldrb	r3, [r3, #7]
 8007880:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	9403      	str	r4, [sp, #12]
 8007886:	9002      	str	r0, [sp, #8]
 8007888:	9101      	str	r1, [sp, #4]
 800788a:	9200      	str	r2, [sp, #0]
 800788c:	4663      	mov	r3, ip
 800788e:	4632      	mov	r2, r6
 8007890:	4629      	mov	r1, r5
 8007892:	481e      	ldr	r0, [pc, #120]	; (800790c <Sensor_Test_Normalized+0xd8>)
 8007894:	f7fd fc68 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 800789a:	7a1b      	ldrb	r3, [r3, #8]
 800789c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800789e:	461d      	mov	r5, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80078a0:	4b19      	ldr	r3, [pc, #100]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078a2:	7a5b      	ldrb	r3, [r3, #9]
 80078a4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078a6:	461e      	mov	r6, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80078a8:	4b17      	ldr	r3, [pc, #92]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078aa:	7a9b      	ldrb	r3, [r3, #10]
 80078ac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078ae:	469c      	mov	ip, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078b2:	7adb      	ldrb	r3, [r3, #11]
 80078b4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078b6:	461a      	mov	r2, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80078b8:	4b13      	ldr	r3, [pc, #76]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078ba:	7b1b      	ldrb	r3, [r3, #12]
 80078bc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078be:	4619      	mov	r1, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078c2:	7b5b      	ldrb	r3, [r3, #13]
 80078c4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078c6:	4618      	mov	r0, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078ca:	7b9b      	ldrb	r3, [r3, #14]
 80078cc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078ce:	461c      	mov	r4, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80078d0:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <Sensor_Test_Normalized+0xd4>)
 80078d2:	7bdb      	ldrb	r3, [r3, #15]
 80078d4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	9403      	str	r4, [sp, #12]
 80078da:	9002      	str	r0, [sp, #8]
 80078dc:	9101      	str	r1, [sp, #4]
 80078de:	9200      	str	r2, [sp, #0]
 80078e0:	4663      	mov	r3, ip
 80078e2:	4632      	mov	r2, r6
 80078e4:	4629      	mov	r1, r5
 80078e6:	480a      	ldr	r0, [pc, #40]	; (8007910 <Sensor_Test_Normalized+0xdc>)
 80078e8:	f7fd fc3e 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 80078ec:	f7fd ff6c 	bl	80057c8 <Custom_Switch_Read>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d1a6      	bne.n	8007844 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 80078f6:	f7fd fb52 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Stop();
 80078fa:	f002 f817 	bl	800992c <Sensor_Stop>
}
 80078fe:	bf00      	nop
 8007900:	3704      	adds	r7, #4
 8007902:	46bd      	mov	sp, r7
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007906:	bf00      	nop
 8007908:	200046d0 	.word	0x200046d0
 800790c:	0800ce00 	.word	0x0800ce00
 8007910:	0800ce2c 	.word	0x0800ce2c

08007914 <Sensor_Test_State>:





void Sensor_Test_State() {
 8007914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007916:	b089      	sub	sp, #36	; 0x24
 8007918:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 800791e:	f001 ffed 	bl	80098fc <Sensor_Start>
	Custom_OLED_Clear();
 8007922:	f7fd fb3c 	bl	8004f9e <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007926:	e0a9      	b.n	8007a7c <Sensor_Test_State+0x168>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8007928:	4b5c      	ldr	r3, [pc, #368]	; (8007a9c <Sensor_Test_State+0x188>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4619      	mov	r1, r3
 8007930:	485b      	ldr	r0, [pc, #364]	; (8007aa0 <Sensor_Test_State+0x18c>)
 8007932:	f7fd fc19 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007936:	4b5b      	ldr	r3, [pc, #364]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	0bdb      	lsrs	r3, r3, #15
 800793e:	b29b      	uxth	r3, r3
 8007940:	f003 0501 	and.w	r5, r3, #1
 8007944:	4b57      	ldr	r3, [pc, #348]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	0b9b      	lsrs	r3, r3, #14
 800794c:	b29b      	uxth	r3, r3
 800794e:	f003 0601 	and.w	r6, r3, #1
 8007952:	4b54      	ldr	r3, [pc, #336]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	0b5b      	lsrs	r3, r3, #13
 800795a:	b29b      	uxth	r3, r3
 800795c:	f003 0c01 	and.w	ip, r3, #1
 8007960:	4b50      	ldr	r3, [pc, #320]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	0b1b      	lsrs	r3, r3, #12
 8007968:	b29b      	uxth	r3, r3
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	4a4d      	ldr	r2, [pc, #308]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007970:	8812      	ldrh	r2, [r2, #0]
 8007972:	b292      	uxth	r2, r2
 8007974:	0ad2      	lsrs	r2, r2, #11
 8007976:	b292      	uxth	r2, r2
 8007978:	f002 0201 	and.w	r2, r2, #1
 800797c:	4949      	ldr	r1, [pc, #292]	; (8007aa4 <Sensor_Test_State+0x190>)
 800797e:	8809      	ldrh	r1, [r1, #0]
 8007980:	b289      	uxth	r1, r1
 8007982:	0a89      	lsrs	r1, r1, #10
 8007984:	b289      	uxth	r1, r1
 8007986:	f001 0101 	and.w	r1, r1, #1
 800798a:	4846      	ldr	r0, [pc, #280]	; (8007aa4 <Sensor_Test_State+0x190>)
 800798c:	8800      	ldrh	r0, [r0, #0]
 800798e:	b280      	uxth	r0, r0
 8007990:	0a40      	lsrs	r0, r0, #9
 8007992:	b280      	uxth	r0, r0
 8007994:	f000 0001 	and.w	r0, r0, #1
 8007998:	4c42      	ldr	r4, [pc, #264]	; (8007aa4 <Sensor_Test_State+0x190>)
 800799a:	8824      	ldrh	r4, [r4, #0]
 800799c:	b2a4      	uxth	r4, r4
 800799e:	0a24      	lsrs	r4, r4, #8
 80079a0:	b2a4      	uxth	r4, r4
 80079a2:	f004 0401 	and.w	r4, r4, #1
 80079a6:	9404      	str	r4, [sp, #16]
 80079a8:	9003      	str	r0, [sp, #12]
 80079aa:	9102      	str	r1, [sp, #8]
 80079ac:	9201      	str	r2, [sp, #4]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4663      	mov	r3, ip
 80079b2:	4632      	mov	r2, r6
 80079b4:	4629      	mov	r1, r5
 80079b6:	483c      	ldr	r0, [pc, #240]	; (8007aa8 <Sensor_Test_State+0x194>)
 80079b8:	f7fd fbd6 	bl	8005168 <Custom_OLED_Printf>
			(irSensorState >> 15) & 1, (irSensorState >> 14) & 1, (irSensorState >> 13) & 1, (irSensorState >> 12) & 1, \
			(irSensorState >> 11) & 1, (irSensorState >> 10) & 1, (irSensorState >> 9) & 1, (irSensorState >> 8) & 1);

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80079bc:	4b39      	ldr	r3, [pc, #228]	; (8007aa4 <Sensor_Test_State+0x190>)
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	09db      	lsrs	r3, r3, #7
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f003 0501 	and.w	r5, r3, #1
 80079ca:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <Sensor_Test_State+0x190>)
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	099b      	lsrs	r3, r3, #6
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f003 0601 	and.w	r6, r3, #1
 80079d8:	4b32      	ldr	r3, [pc, #200]	; (8007aa4 <Sensor_Test_State+0x190>)
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f003 0c01 	and.w	ip, r3, #1
 80079e6:	4b2f      	ldr	r3, [pc, #188]	; (8007aa4 <Sensor_Test_State+0x190>)
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	4a2b      	ldr	r2, [pc, #172]	; (8007aa4 <Sensor_Test_State+0x190>)
 80079f6:	8812      	ldrh	r2, [r2, #0]
 80079f8:	b292      	uxth	r2, r2
 80079fa:	08d2      	lsrs	r2, r2, #3
 80079fc:	b292      	uxth	r2, r2
 80079fe:	f002 0201 	and.w	r2, r2, #1
 8007a02:	4928      	ldr	r1, [pc, #160]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007a04:	8809      	ldrh	r1, [r1, #0]
 8007a06:	b289      	uxth	r1, r1
 8007a08:	0889      	lsrs	r1, r1, #2
 8007a0a:	b289      	uxth	r1, r1
 8007a0c:	f001 0101 	and.w	r1, r1, #1
 8007a10:	4824      	ldr	r0, [pc, #144]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007a12:	8800      	ldrh	r0, [r0, #0]
 8007a14:	b280      	uxth	r0, r0
 8007a16:	0840      	lsrs	r0, r0, #1
 8007a18:	b280      	uxth	r0, r0
 8007a1a:	f000 0001 	and.w	r0, r0, #1
			(irSensorState >> 7) & 1, (irSensorState >> 6) & 1, (irSensorState >> 5) & 1, (irSensorState >> 4) & 1, \
			(irSensorState >> 3) & 1, (irSensorState >> 2) & 1, (irSensorState >> 1) & 1, (irSensorState >> 0) & 1);
 8007a1e:	4c21      	ldr	r4, [pc, #132]	; (8007aa4 <Sensor_Test_State+0x190>)
 8007a20:	8824      	ldrh	r4, [r4, #0]
 8007a22:	b2a4      	uxth	r4, r4
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007a24:	f004 0401 	and.w	r4, r4, #1
 8007a28:	9404      	str	r4, [sp, #16]
 8007a2a:	9003      	str	r0, [sp, #12]
 8007a2c:	9102      	str	r1, [sp, #8]
 8007a2e:	9201      	str	r2, [sp, #4]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4663      	mov	r3, ip
 8007a34:	4632      	mov	r2, r6
 8007a36:	4629      	mov	r1, r5
 8007a38:	481c      	ldr	r0, [pc, #112]	; (8007aac <Sensor_Test_State+0x198>)
 8007a3a:	f7fd fb95 	bl	8005168 <Custom_OLED_Printf>


		if (sw == CUSTOM_SW_1) {
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10c      	bne.n	8007a5e <Sensor_Test_State+0x14a>
			if (threshold > THRESHOLD_MIN) {
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b14      	cmp	r3, #20
 8007a4c:	d916      	bls.n	8007a7c <Sensor_Test_State+0x168>
				threshold -= THRESHOLD_CHANGE_VAL;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	3b05      	subs	r3, #5
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e00e      	b.n	8007a7c <Sensor_Test_State+0x168>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d10b      	bne.n	8007a7c <Sensor_Test_State+0x168>
			if (threshold < THRESHOLD_MAX) {
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2bf9      	cmp	r3, #249	; 0xf9
 8007a6c:	d806      	bhi.n	8007a7c <Sensor_Test_State+0x168>
				threshold += THRESHOLD_CHANGE_VAL;
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	3305      	adds	r3, #5
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <Sensor_Test_State+0x188>)
 8007a7a:	701a      	strb	r2, [r3, #0]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007a7c:	f7fd fea4 	bl	80057c8 <Custom_Switch_Read>
 8007a80:	4603      	mov	r3, r0
 8007a82:	71fb      	strb	r3, [r7, #7]
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	f47f af4e 	bne.w	8007928 <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 8007a8c:	f7fd fa87 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Stop();
 8007a90:	f001 ff4c 	bl	800992c <Sensor_Stop>
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9c:	2000007c 	.word	0x2000007c
 8007aa0:	0800ce58 	.word	0x0800ce58
 8007aa4:	200046f0 	.word	0x200046f0
 8007aa8:	0800ce00 	.word	0x0800ce00
 8007aac:	0800ce2c 	.word	0x0800ce2c

08007ab0 <Battery_Test_Voltage>:


void Battery_Test_Voltage() {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
	Sensor_Start();
 8007ab4:	f001 ff22 	bl	80098fc <Sensor_Start>
	Custom_OLED_Clear();
 8007ab8:	f7fd fa71 	bl	8004f9e <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007abc:	e009      	b.n	8007ad2 <Battery_Test_Voltage+0x22>

		Custom_OLED_Printf("/A%5f", sensingVoltage);
 8007abe:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <Battery_Test_Voltage+0x38>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7f8 fd48 	bl	8000558 <__aeabi_f2d>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4807      	ldr	r0, [pc, #28]	; (8007aec <Battery_Test_Voltage+0x3c>)
 8007ace:	f7fd fb4b 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8007ad2:	f7fd fe79 	bl	80057c8 <Custom_Switch_Read>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d1f0      	bne.n	8007abe <Battery_Test_Voltage+0xe>
	}

	Custom_OLED_Clear();
 8007adc:	f7fd fa5f 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Stop();
 8007ae0:	f001 ff24 	bl	800992c <Sensor_Stop>
}
 8007ae4:	bf00      	nop
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	200046f4 	.word	0x200046f4
 8007aec:	0800ce6c 	.word	0x0800ce6c

08007af0 <MotorR_Test_Duty>:





void MotorR_Test_Duty() {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM11);
 8007af6:	4859      	ldr	r0, [pc, #356]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007af8:	f7ff faf8 	bl	80070ec <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8007afc:	2101      	movs	r1, #1
 8007afe:	4857      	ldr	r0, [pc, #348]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007b00:	f7ff fb14 	bl	800712c <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 8007b04:	2100      	movs	r1, #0
 8007b06:	4855      	ldr	r0, [pc, #340]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007b08:	f7ff fb33 	bl	8007172 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM3);
 8007b0c:	4854      	ldr	r0, [pc, #336]	; (8007c60 <MotorR_Test_Duty+0x170>)
 8007b0e:	f7ff faed 	bl	80070ec <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM11->ARR + 1;
 8007b12:	4b52      	ldr	r3, [pc, #328]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3301      	adds	r3, #1
 8007b1a:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007b22:	f7fd fe51 	bl	80057c8 <Custom_Switch_Read>
 8007b26:	4603      	mov	r3, r0
 8007b28:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 8007b2a:	797b      	ldrb	r3, [r7, #5]
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	f000 8082 	beq.w	8007c36 <MotorR_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007b32:	797b      	ldrb	r3, [r7, #5]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d108      	bne.n	8007b4a <MotorR_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 8007b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b3c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007c64 <MotorR_Test_Duty+0x174>
 8007b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b44:	edc7 7a03 	vstr	s15, [r7, #12]
 8007b48:	e00a      	b.n	8007b60 <MotorR_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 8007b4a:	797b      	ldrb	r3, [r7, #5]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d107      	bne.n	8007b60 <MotorR_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8007b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b54:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007c64 <MotorR_Test_Duty+0x174>
 8007b58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b5c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7a:	d50d      	bpl.n	8007b98 <MotorR_Test_Duty+0xa8>
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	eef1 7a67 	vneg.f32	s15, s15
 8007b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b96:	e00a      	b.n	8007bae <MotorR_Test_Duty+0xbe>
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bae:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	dd02      	ble.n	8007bc0 <MotorR_Test_Duty+0xd0>
		 level = level_max;
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	e004      	b.n	8007bca <MotorR_Test_Duty+0xda>
		} else if (level < 0) {
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da01      	bge.n	8007bca <MotorR_Test_Duty+0xda>
		 level = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM11->CCR1 = level;
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOC, 1 << 4, duty_ratio < 0 ? 1 : 0); // PC4
 8007bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bdc:	bf4c      	ite	mi
 8007bde:	2301      	movmi	r3, #1
 8007be0:	2300      	movpl	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	2110      	movs	r1, #16
 8007be8:	481f      	ldr	r0, [pc, #124]	; (8007c68 <MotorR_Test_Duty+0x178>)
 8007bea:	f7ff fad0 	bl	800718e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOC, 1 << 5, duty_ratio > 0 ? 1 : 0); // PC5
 8007bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	bfcc      	ite	gt
 8007bfc:	2301      	movgt	r3, #1
 8007bfe:	2300      	movle	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	2120      	movs	r1, #32
 8007c06:	4818      	ldr	r0, [pc, #96]	; (8007c68 <MotorR_Test_Duty+0x178>)
 8007c08:	f7ff fac1 	bl	800718e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7f8 fca3 	bl	8000558 <__aeabi_f2d>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4815      	ldr	r0, [pc, #84]	; (8007c6c <MotorR_Test_Duty+0x17c>)
 8007c18:	f7fd faa6 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM11->CCR1);
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	4619      	mov	r1, r3
 8007c22:	4813      	ldr	r0, [pc, #76]	; (8007c70 <MotorR_Test_Duty+0x180>)
 8007c24:	f7fd faa0 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM3->CNT);
 8007c28:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <MotorR_Test_Duty+0x170>)
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4811      	ldr	r0, [pc, #68]	; (8007c74 <MotorR_Test_Duty+0x184>)
 8007c30:	f7fd fa9a 	bl	8005168 <Custom_OLED_Printf>
	for (;;) {
 8007c34:	e775      	b.n	8007b22 <MotorR_Test_Duty+0x32>
		 break;
 8007c36:	bf00      	nop
	}

	TIM11->CCR1 = 0;
 8007c38:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM11);
 8007c3e:	4807      	ldr	r0, [pc, #28]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007c40:	f7ff fa64 	bl	800710c <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8007c44:	2101      	movs	r1, #1
 8007c46:	4805      	ldr	r0, [pc, #20]	; (8007c5c <MotorR_Test_Duty+0x16c>)
 8007c48:	f7ff fa81 	bl	800714e <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM3);
 8007c4c:	4804      	ldr	r0, [pc, #16]	; (8007c60 <MotorR_Test_Duty+0x170>)
 8007c4e:	f7ff fa5d 	bl	800710c <LL_TIM_DisableCounter>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40014800 	.word	0x40014800
 8007c60:	40000400 	.word	0x40000400
 8007c64:	3dcccccd 	.word	0x3dcccccd
 8007c68:	40020800 	.word	0x40020800
 8007c6c:	0800ce74 	.word	0x0800ce74
 8007c70:	0800ce84 	.word	0x0800ce84
 8007c74:	0800ce94 	.word	0x0800ce94

08007c78 <MotorL_Test_Duty>:


void MotorL_Test_Duty() {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM10);
 8007c7e:	4859      	ldr	r0, [pc, #356]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007c80:	f7ff fa34 	bl	80070ec <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007c84:	2101      	movs	r1, #1
 8007c86:	4857      	ldr	r0, [pc, #348]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007c88:	f7ff fa50 	bl	800712c <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4855      	ldr	r0, [pc, #340]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007c90:	f7ff fa6f 	bl	8007172 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM4);
 8007c94:	4854      	ldr	r0, [pc, #336]	; (8007de8 <MotorL_Test_Duty+0x170>)
 8007c96:	f7ff fa29 	bl	80070ec <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM10->ARR + 1;
 8007c9a:	4b52      	ldr	r3, [pc, #328]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]


	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007caa:	f7fd fd8d 	bl	80057c8 <Custom_Switch_Read>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 8007cb2:	797b      	ldrb	r3, [r7, #5]
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	f000 8082 	beq.w	8007dbe <MotorL_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007cba:	797b      	ldrb	r3, [r7, #5]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d108      	bne.n	8007cd2 <MotorL_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 8007cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cc4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007dec <MotorL_Test_Duty+0x174>
 8007cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ccc:	edc7 7a03 	vstr	s15, [r7, #12]
 8007cd0:	e00a      	b.n	8007ce8 <MotorL_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 8007cd2:	797b      	ldrb	r3, [r7, #5]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d107      	bne.n	8007ce8 <MotorL_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8007cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cdc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007dec <MotorL_Test_Duty+0x174>
 8007ce0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ce4:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d02:	d50d      	bpl.n	8007d20 <MotorL_Test_Duty+0xa8>
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d16:	eef1 7a67 	vneg.f32	s15, s15
 8007d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d1e:	e00a      	b.n	8007d36 <MotorL_Test_Duty+0xbe>
 8007d20:	88fb      	ldrh	r3, [r7, #6]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d36:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	dd02      	ble.n	8007d48 <MotorL_Test_Duty+0xd0>
		 level = level_max;
 8007d42:	88fb      	ldrh	r3, [r7, #6]
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	e004      	b.n	8007d52 <MotorL_Test_Duty+0xda>
		} else if (level < 0) {
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da01      	bge.n	8007d52 <MotorL_Test_Duty+0xda>
		 level = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM10->CCR1 = level;
 8007d52:	4a24      	ldr	r2, [pc, #144]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOB, 1 << 4, duty_ratio > 0 ? 1 : 0); // PB4
 8007d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	bfcc      	ite	gt
 8007d66:	2301      	movgt	r3, #1
 8007d68:	2300      	movle	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2110      	movs	r1, #16
 8007d70:	481f      	ldr	r0, [pc, #124]	; (8007df0 <MotorL_Test_Duty+0x178>)
 8007d72:	f7ff fa0c 	bl	800718e <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOB, 1 << 5, duty_ratio < 0 ? 1 : 0); // PB5
 8007d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d82:	bf4c      	ite	mi
 8007d84:	2301      	movmi	r3, #1
 8007d86:	2300      	movpl	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	2120      	movs	r1, #32
 8007d8e:	4818      	ldr	r0, [pc, #96]	; (8007df0 <MotorL_Test_Duty+0x178>)
 8007d90:	f7ff f9fd 	bl	800718e <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7f8 fbdf 	bl	8000558 <__aeabi_f2d>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4815      	ldr	r0, [pc, #84]	; (8007df4 <MotorL_Test_Duty+0x17c>)
 8007da0:	f7fd f9e2 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM10->CCR1);
 8007da4:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	4619      	mov	r1, r3
 8007daa:	4813      	ldr	r0, [pc, #76]	; (8007df8 <MotorL_Test_Duty+0x180>)
 8007dac:	f7fd f9dc 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM4->CNT);
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <MotorL_Test_Duty+0x170>)
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	4619      	mov	r1, r3
 8007db6:	4811      	ldr	r0, [pc, #68]	; (8007dfc <MotorL_Test_Duty+0x184>)
 8007db8:	f7fd f9d6 	bl	8005168 <Custom_OLED_Printf>
	for (;;) {
 8007dbc:	e775      	b.n	8007caa <MotorL_Test_Duty+0x32>
		 break;
 8007dbe:	bf00      	nop
	}

	TIM10->CCR1 = 0;
 8007dc0:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM10);
 8007dc6:	4807      	ldr	r0, [pc, #28]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007dc8:	f7ff f9a0 	bl	800710c <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007dcc:	2101      	movs	r1, #1
 8007dce:	4805      	ldr	r0, [pc, #20]	; (8007de4 <MotorL_Test_Duty+0x16c>)
 8007dd0:	f7ff f9bd 	bl	800714e <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM4);
 8007dd4:	4804      	ldr	r0, [pc, #16]	; (8007de8 <MotorL_Test_Duty+0x170>)
 8007dd6:	f7ff f999 	bl	800710c <LL_TIM_DisableCounter>
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40014400 	.word	0x40014400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	3dcccccd 	.word	0x3dcccccd
 8007df0:	40020400 	.word	0x40020400
 8007df4:	0800ce74 	.word	0x0800ce74
 8007df8:	0800ce84 	.word	0x0800ce84
 8007dfc:	0800ce94 	.word	0x0800ce94

08007e00 <MotorL_Test_PD>:




void MotorL_Test_PD() {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0

	float coefChangeVal = 0.05;
 8007e06:	4b4b      	ldr	r3, [pc, #300]	; (8007f34 <MotorL_Test_PD+0x134>)
 8007e08:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 400;
 8007e0a:	4b4b      	ldr	r3, [pc, #300]	; (8007f38 <MotorL_Test_PD+0x138>)
 8007e0c:	60bb      	str	r3, [r7, #8]

	Pre_Drive_Var_Init();
 8007e0e:	f7fe f911 	bl	8006034 <Pre_Drive_Var_Init>

	targetSpeed = 0;
 8007e12:	4b4a      	ldr	r3, [pc, #296]	; (8007f3c <MotorL_Test_PD+0x13c>)
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]

	Sensor_Start();
 8007e1a:	f001 fd6f 	bl	80098fc <Sensor_Start>
	Speed_Control_Start();
 8007e1e:	f000 fcc5 	bl	80087ac <Speed_Control_Start>
	MotorL_Start();
 8007e22:	f000 fc3f 	bl	80086a4 <MotorL_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007e26:	f7fd fccf 	bl	80057c8 <Custom_Switch_Read>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b07      	cmp	r3, #7
 8007e32:	d074      	beq.n	8007f1e <MotorL_Test_PD+0x11e>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10a      	bne.n	8007e50 <MotorL_Test_PD+0x50>
			pCoef -= coefChangeVal;
 8007e3a:	4b41      	ldr	r3, [pc, #260]	; (8007f40 <MotorL_Test_PD+0x140>)
 8007e3c:	ed93 7a00 	vldr	s14, [r3]
 8007e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e48:	4b3d      	ldr	r3, [pc, #244]	; (8007f40 <MotorL_Test_PD+0x140>)
 8007e4a:	edc3 7a00 	vstr	s15, [r3]
 8007e4e:	e03e      	b.n	8007ece <MotorL_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_2) {
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d10a      	bne.n	8007e6c <MotorL_Test_PD+0x6c>
			pCoef += coefChangeVal;
 8007e56:	4b3a      	ldr	r3, [pc, #232]	; (8007f40 <MotorL_Test_PD+0x140>)
 8007e58:	ed93 7a00 	vldr	s14, [r3]
 8007e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e64:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <MotorL_Test_PD+0x140>)
 8007e66:	edc3 7a00 	vstr	s15, [r3]
 8007e6a:	e030      	b.n	8007ece <MotorL_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_1_2) {
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d10a      	bne.n	8007e88 <MotorL_Test_PD+0x88>
			dCoef -= coefChangeVal;
 8007e72:	4b34      	ldr	r3, [pc, #208]	; (8007f44 <MotorL_Test_PD+0x144>)
 8007e74:	ed93 7a00 	vldr	s14, [r3]
 8007e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e80:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <MotorL_Test_PD+0x144>)
 8007e82:	edc3 7a00 	vstr	s15, [r3]
 8007e86:	e022      	b.n	8007ece <MotorL_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_2_3) {
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d10a      	bne.n	8007ea4 <MotorL_Test_PD+0xa4>
			dCoef += coefChangeVal;
 8007e8e:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <MotorL_Test_PD+0x144>)
 8007e90:	ed93 7a00 	vldr	s14, [r3]
 8007e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e9c:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <MotorL_Test_PD+0x144>)
 8007e9e:	edc3 7a00 	vstr	s15, [r3]
 8007ea2:	e014      	b.n	8007ece <MotorL_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_3) {
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d111      	bne.n	8007ece <MotorL_Test_PD+0xce>
			targetEncoderValueL_cntl += targetChangeVal;
 8007eaa:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <MotorL_Test_PD+0x148>)
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec4:	ee17 3a90 	vmov	r3, s15
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <MotorL_Test_PD+0x148>)
 8007ecc:	801a      	strh	r2, [r3, #0]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM10->CCR1);
 8007ece:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <MotorL_Test_PD+0x14c>)
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	481e      	ldr	r0, [pc, #120]	; (8007f50 <MotorL_Test_PD+0x150>)
 8007ed6:	f7fd f947 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM4->CNT);
 8007eda:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <MotorL_Test_PD+0x154>)
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	4619      	mov	r1, r3
 8007ee0:	481d      	ldr	r0, [pc, #116]	; (8007f58 <MotorL_Test_PD+0x158>)
 8007ee2:	f7fd f941 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5u", targetEncoderValueL_cntl);
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <MotorL_Test_PD+0x148>)
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	4619      	mov	r1, r3
 8007eee:	481b      	ldr	r0, [pc, #108]	; (8007f5c <MotorL_Test_PD+0x15c>)
 8007ef0:	f7fd f93a 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 8007ef4:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <MotorL_Test_PD+0x140>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f8 fb2d 	bl	8000558 <__aeabi_f2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4817      	ldr	r0, [pc, #92]	; (8007f60 <MotorL_Test_PD+0x160>)
 8007f04:	f7fd f930 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 8007f08:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <MotorL_Test_PD+0x144>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7f8 fb23 	bl	8000558 <__aeabi_f2d>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4813      	ldr	r0, [pc, #76]	; (8007f64 <MotorL_Test_PD+0x164>)
 8007f18:	f7fd f926 	bl	8005168 <Custom_OLED_Printf>
	for (;;) {
 8007f1c:	e783      	b.n	8007e26 <MotorL_Test_PD+0x26>
		 break;
 8007f1e:	bf00      	nop

	}

	MotorL_Stop();
 8007f20:	f000 fc14 	bl	800874c <MotorL_Stop>
	Speed_Control_Stop();
 8007f24:	f000 fc4e 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 8007f28:	f001 fd00 	bl	800992c <Sensor_Stop>
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	3d4ccccd 	.word	0x3d4ccccd
 8007f38:	43c80000 	.word	0x43c80000
 8007f3c:	2000002c 	.word	0x2000002c
 8007f40:	20000004 	.word	0x20000004
 8007f44:	20000008 	.word	0x20000008
 8007f48:	20001458 	.word	0x20001458
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	0800cea4 	.word	0x0800cea4
 8007f54:	40000800 	.word	0x40000800
 8007f58:	0800ceb4 	.word	0x0800ceb4
 8007f5c:	0800cec4 	.word	0x0800cec4
 8007f60:	0800ced4 	.word	0x0800ced4
 8007f64:	0800cee4 	.word	0x0800cee4

08007f68 <MotorR_Test_PD>:





void MotorR_Test_PD() {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0

	float coefChangeVal = 0.05;
 8007f6e:	4b4b      	ldr	r3, [pc, #300]	; (800809c <MotorR_Test_PD+0x134>)
 8007f70:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 50;
 8007f72:	4b4b      	ldr	r3, [pc, #300]	; (80080a0 <MotorR_Test_PD+0x138>)
 8007f74:	60bb      	str	r3, [r7, #8]

	Pre_Drive_Var_Init();
 8007f76:	f7fe f85d 	bl	8006034 <Pre_Drive_Var_Init>

	targetSpeed = 0;
 8007f7a:	4b4a      	ldr	r3, [pc, #296]	; (80080a4 <MotorR_Test_PD+0x13c>)
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

	Sensor_Start();
 8007f82:	f001 fcbb 	bl	80098fc <Sensor_Start>
	Speed_Control_Start();
 8007f86:	f000 fc11 	bl	80087ac <Speed_Control_Start>
	MotorR_Start();
 8007f8a:	f000 fba1 	bl	80086d0 <MotorR_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007f8e:	f7fd fc1b 	bl	80057c8 <Custom_Switch_Read>
 8007f92:	4603      	mov	r3, r0
 8007f94:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	2b07      	cmp	r3, #7
 8007f9a:	d074      	beq.n	8008086 <MotorR_Test_PD+0x11e>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d10a      	bne.n	8007fb8 <MotorR_Test_PD+0x50>
			pCoef -= coefChangeVal;
 8007fa2:	4b41      	ldr	r3, [pc, #260]	; (80080a8 <MotorR_Test_PD+0x140>)
 8007fa4:	ed93 7a00 	vldr	s14, [r3]
 8007fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb0:	4b3d      	ldr	r3, [pc, #244]	; (80080a8 <MotorR_Test_PD+0x140>)
 8007fb2:	edc3 7a00 	vstr	s15, [r3]
 8007fb6:	e03e      	b.n	8008036 <MotorR_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_2) {
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d10a      	bne.n	8007fd4 <MotorR_Test_PD+0x6c>
			pCoef += coefChangeVal;
 8007fbe:	4b3a      	ldr	r3, [pc, #232]	; (80080a8 <MotorR_Test_PD+0x140>)
 8007fc0:	ed93 7a00 	vldr	s14, [r3]
 8007fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <MotorR_Test_PD+0x140>)
 8007fce:	edc3 7a00 	vstr	s15, [r3]
 8007fd2:	e030      	b.n	8008036 <MotorR_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_1_2) {
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d10a      	bne.n	8007ff0 <MotorR_Test_PD+0x88>
			dCoef -= coefChangeVal;
 8007fda:	4b34      	ldr	r3, [pc, #208]	; (80080ac <MotorR_Test_PD+0x144>)
 8007fdc:	ed93 7a00 	vldr	s14, [r3]
 8007fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fe8:	4b30      	ldr	r3, [pc, #192]	; (80080ac <MotorR_Test_PD+0x144>)
 8007fea:	edc3 7a00 	vstr	s15, [r3]
 8007fee:	e022      	b.n	8008036 <MotorR_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_2_3) {
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	2b06      	cmp	r3, #6
 8007ff4:	d10a      	bne.n	800800c <MotorR_Test_PD+0xa4>
			dCoef += coefChangeVal;
 8007ff6:	4b2d      	ldr	r3, [pc, #180]	; (80080ac <MotorR_Test_PD+0x144>)
 8007ff8:	ed93 7a00 	vldr	s14, [r3]
 8007ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8008000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008004:	4b29      	ldr	r3, [pc, #164]	; (80080ac <MotorR_Test_PD+0x144>)
 8008006:	edc3 7a00 	vstr	s15, [r3]
 800800a:	e014      	b.n	8008036 <MotorR_Test_PD+0xce>
		} else if (sw == CUSTOM_SW_3) {
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b04      	cmp	r3, #4
 8008010:	d111      	bne.n	8008036 <MotorR_Test_PD+0xce>
			targetEncoderValueR_cntl += targetChangeVal;
 8008012:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <MotorR_Test_PD+0x148>)
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008020:	edd7 7a02 	vldr	s15, [r7, #8]
 8008024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802c:	ee17 3a90 	vmov	r3, s15
 8008030:	b29a      	uxth	r2, r3
 8008032:	4b1f      	ldr	r3, [pc, #124]	; (80080b0 <MotorR_Test_PD+0x148>)
 8008034:	801a      	strh	r2, [r3, #0]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM11->CCR1);
 8008036:	4b1f      	ldr	r3, [pc, #124]	; (80080b4 <MotorR_Test_PD+0x14c>)
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	4619      	mov	r1, r3
 800803c:	481e      	ldr	r0, [pc, #120]	; (80080b8 <MotorR_Test_PD+0x150>)
 800803e:	f7fd f893 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM3->CNT);
 8008042:	4b1e      	ldr	r3, [pc, #120]	; (80080bc <MotorR_Test_PD+0x154>)
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	4619      	mov	r1, r3
 8008048:	481d      	ldr	r0, [pc, #116]	; (80080c0 <MotorR_Test_PD+0x158>)
 800804a:	f7fd f88d 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5d", targetEncoderValueR_cntl);
 800804e:	4b18      	ldr	r3, [pc, #96]	; (80080b0 <MotorR_Test_PD+0x148>)
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	481b      	ldr	r0, [pc, #108]	; (80080c4 <MotorR_Test_PD+0x15c>)
 8008058:	f7fd f886 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 800805c:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <MotorR_Test_PD+0x140>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa79 	bl	8000558 <__aeabi_f2d>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4817      	ldr	r0, [pc, #92]	; (80080c8 <MotorR_Test_PD+0x160>)
 800806c:	f7fd f87c 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 8008070:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <MotorR_Test_PD+0x144>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4618      	mov	r0, r3
 8008076:	f7f8 fa6f 	bl	8000558 <__aeabi_f2d>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4813      	ldr	r0, [pc, #76]	; (80080cc <MotorR_Test_PD+0x164>)
 8008080:	f7fd f872 	bl	8005168 <Custom_OLED_Printf>
	for (;;) {
 8008084:	e783      	b.n	8007f8e <MotorR_Test_PD+0x26>
		 break;
 8008086:	bf00      	nop

	}
	MotorR_Stop();
 8008088:	f000 fb74 	bl	8008774 <MotorR_Stop>
	Speed_Control_Stop();
 800808c:	f000 fb9a 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 8008090:	f001 fc4c 	bl	800992c <Sensor_Stop>
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	3d4ccccd 	.word	0x3d4ccccd
 80080a0:	42480000 	.word	0x42480000
 80080a4:	2000002c 	.word	0x2000002c
 80080a8:	20000004 	.word	0x20000004
 80080ac:	20000008 	.word	0x20000008
 80080b0:	2000145a 	.word	0x2000145a
 80080b4:	40014800 	.word	0x40014800
 80080b8:	0800cea4 	.word	0x0800cea4
 80080bc:	40000400 	.word	0x40000400
 80080c0:	0800ceb4 	.word	0x0800ceb4
 80080c4:	0800cef4 	.word	0x0800cef4
 80080c8:	0800ced4 	.word	0x0800ced4
 80080cc:	0800cee4 	.word	0x0800cee4

080080d0 <Motor_Test_Speed>:





void Motor_Test_Speed() {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0

	Pre_Drive_Var_Init();
 80080d6:	f7fd ffad 	bl	8006034 <Pre_Drive_Var_Init>


	// 가속도 변수 초기화
	targetAccele = 1;
 80080da:	4b32      	ldr	r3, [pc, #200]	; (80081a4 <Motor_Test_Speed+0xd4>)
 80080dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080e0:	601a      	str	r2, [r3, #0]
	curAccele = 0;
 80080e2:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <Motor_Test_Speed+0xd8>)
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = 0;
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <Motor_Test_Speed+0xdc>)
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
	decele = 1;
 80080f2:	4b2f      	ldr	r3, [pc, #188]	; (80081b0 <Motor_Test_Speed+0xe0>)
 80080f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80080f8:	601a      	str	r2, [r3, #0]
	curSpeed = 0;
 80080fa:	4b2e      	ldr	r3, [pc, #184]	; (80081b4 <Motor_Test_Speed+0xe4>)
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	601a      	str	r2, [r3, #0]


	Motor_Start();
 8008102:	f000 fafb 	bl	80086fc <Motor_Start>
	Sensor_Start();
 8008106:	f001 fbf9 	bl	80098fc <Sensor_Start>
	Speed_Control_Start();
 800810a:	f000 fb4f 	bl	80087ac <Speed_Control_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 800810e:	f7fd fb5b 	bl	80057c8 <Custom_Switch_Read>
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_3) {
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	2b04      	cmp	r3, #4
 800811a:	d038      	beq.n	800818e <Motor_Test_Speed+0xbe>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d10a      	bne.n	8008138 <Motor_Test_Speed+0x68>
			targetSpeed -= 0.1f;
 8008122:	4b22      	ldr	r3, [pc, #136]	; (80081ac <Motor_Test_Speed+0xdc>)
 8008124:	edd3 7a00 	vldr	s15, [r3]
 8008128:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80081b8 <Motor_Test_Speed+0xe8>
 800812c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008130:	4b1e      	ldr	r3, [pc, #120]	; (80081ac <Motor_Test_Speed+0xdc>)
 8008132:	edc3 7a00 	vstr	s15, [r3]
 8008136:	e00c      	b.n	8008152 <Motor_Test_Speed+0x82>
		} else if (sw == CUSTOM_SW_2) {
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d109      	bne.n	8008152 <Motor_Test_Speed+0x82>
			targetSpeed += 0.1f;
 800813e:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <Motor_Test_Speed+0xdc>)
 8008140:	edd3 7a00 	vldr	s15, [r3]
 8008144:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80081b8 <Motor_Test_Speed+0xe8>
 8008148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800814c:	4b17      	ldr	r3, [pc, #92]	; (80081ac <Motor_Test_Speed+0xdc>)
 800814e:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0speed  : %3.2f", curSpeed);
 8008152:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <Motor_Test_Speed+0xe4>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4618      	mov	r0, r3
 8008158:	f7f8 f9fe 	bl	8000558 <__aeabi_f2d>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4816      	ldr	r0, [pc, #88]	; (80081bc <Motor_Test_Speed+0xec>)
 8008162:	f7fd f801 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR    : %5d", TIM10->CCR1);
 8008166:	4b16      	ldr	r3, [pc, #88]	; (80081c0 <Motor_Test_Speed+0xf0>)
 8008168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816a:	4619      	mov	r1, r3
 800816c:	4815      	ldr	r0, [pc, #84]	; (80081c4 <Motor_Test_Speed+0xf4>)
 800816e:	f7fc fffb 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2curECOD: %5d", TIM4->CNT);
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <Motor_Test_Speed+0xf8>)
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	4619      	mov	r1, r3
 8008178:	4814      	ldr	r0, [pc, #80]	; (80081cc <Motor_Test_Speed+0xfc>)
 800817a:	f7fc fff5 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3tarECOD: %5f", targetEncoderValueL_cntl);
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <Motor_Test_Speed+0x100>)
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	4619      	mov	r1, r3
 8008186:	4813      	ldr	r0, [pc, #76]	; (80081d4 <Motor_Test_Speed+0x104>)
 8008188:	f7fc ffee 	bl	8005168 <Custom_OLED_Printf>
	for (;;) {
 800818c:	e7bf      	b.n	800810e <Motor_Test_Speed+0x3e>
		 break;
 800818e:	bf00      	nop

	}

	Speed_Control_Stop();
 8008190:	f000 fb18 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 8008194:	f001 fbca 	bl	800992c <Sensor_Stop>
	Motor_Stop();
 8008198:	f000 fb00 	bl	800879c <Motor_Stop>


}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000020 	.word	0x20000020
 80081a8:	20000024 	.word	0x20000024
 80081ac:	2000002c 	.word	0x2000002c
 80081b0:	20000028 	.word	0x20000028
 80081b4:	20000030 	.word	0x20000030
 80081b8:	3dcccccd 	.word	0x3dcccccd
 80081bc:	0800cf04 	.word	0x0800cf04
 80081c0:	40014400 	.word	0x40014400
 80081c4:	0800cf18 	.word	0x0800cf18
 80081c8:	40000800 	.word	0x40000800
 80081cc:	0800cf28 	.word	0x0800cf28
 80081d0:	20001458 	.word	0x20001458
 80081d4:	0800cf38 	.word	0x0800cf38

080081d8 <Drive_Test_Position>:





void Drive_Test_Position() {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	71fb      	strb	r3, [r7, #7]

	uint8_t positioningIdx = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	71bb      	strb	r3, [r7, #6]

	Custom_OLED_Clear();
 80081e6:	f7fc feda 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Start();
 80081ea:	f001 fb87 	bl	80098fc <Sensor_Start>
	Speed_Control_Start();
 80081ee:	f000 fadd 	bl	80087ac <Speed_Control_Start>

	// 좌우 모터 포지션에 관한 변수
	positionVal = 0;
 80081f2:	4b2c      	ldr	r3, [pc, #176]	; (80082a4 <Drive_Test_Position+0xcc>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
	positionCoef = POSITION_COEF_INIT;
 80081f8:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <Drive_Test_Position+0xd0>)
 80081fa:	4a2c      	ldr	r2, [pc, #176]	; (80082ac <Drive_Test_Position+0xd4>)
 80081fc:	601a      	str	r2, [r3, #0]

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80081fe:	e03f      	b.n	8008280 <Drive_Test_Position+0xa8>

		Positioning(&positioningIdx);
 8008200:	1dbb      	adds	r3, r7, #6
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff f868 	bl	80072d8 <Positioning>

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 8008208:	4b26      	ldr	r3, [pc, #152]	; (80082a4 <Drive_Test_Position+0xcc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	4828      	ldr	r0, [pc, #160]	; (80082b0 <Drive_Test_Position+0xd8>)
 8008210:	f7fc ffaa 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL:  %f", (1 + positionVal * positionCoef));
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <Drive_Test_Position+0xcc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008220:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <Drive_Test_Position+0xd0>)
 8008222:	edd3 7a00 	vldr	s15, [r3]
 8008226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008232:	ee17 0a90 	vmov	r0, s15
 8008236:	f7f8 f98f 	bl	8000558 <__aeabi_f2d>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	481d      	ldr	r0, [pc, #116]	; (80082b4 <Drive_Test_Position+0xdc>)
 8008240:	f7fc ff92 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR:  %f", (1 - positionVal * positionCoef));
 8008244:	4b17      	ldr	r3, [pc, #92]	; (80082a4 <Drive_Test_Position+0xcc>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008250:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <Drive_Test_Position+0xd0>)
 8008252:	edd3 7a00 	vldr	s15, [r3]
 8008256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008262:	ee17 0a90 	vmov	r0, s15
 8008266:	f7f8 f977 	bl	8000558 <__aeabi_f2d>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4812      	ldr	r0, [pc, #72]	; (80082b8 <Drive_Test_Position+0xe0>)
 8008270:	f7fc ff7a 	bl	8005168 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4pos:     %7d", limitedPositionVal);
 8008274:	4b11      	ldr	r3, [pc, #68]	; (80082bc <Drive_Test_Position+0xe4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4619      	mov	r1, r3
 800827a:	4811      	ldr	r0, [pc, #68]	; (80082c0 <Drive_Test_Position+0xe8>)
 800827c:	f7fc ff74 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008280:	f7fd faa2 	bl	80057c8 <Custom_Switch_Read>
 8008284:	4603      	mov	r3, r0
 8008286:	71fb      	strb	r3, [r7, #7]
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d1b8      	bne.n	8008200 <Drive_Test_Position+0x28>
	}
	Speed_Control_Stop();
 800828e:	f000 fa99 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 8008292:	f001 fb4b 	bl	800992c <Sensor_Stop>
	Custom_OLED_Clear();
 8008296:	f7fc fe82 	bl	8004f9e <Custom_OLED_Clear>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001460 	.word	0x20001460
 80082a8:	20000018 	.word	0x20000018
 80082ac:	387ba882 	.word	0x387ba882
 80082b0:	0800cf48 	.word	0x0800cf48
 80082b4:	0800cf58 	.word	0x0800cf58
 80082b8:	0800cf68 	.word	0x0800cf68
 80082bc:	20001464 	.word	0x20001464
 80082c0:	0800cf78 	.word	0x0800cf78

080082c4 <Mark_Live_Test>:





void Mark_Live_Test() {
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	b089      	sub	sp, #36	; 0x24
 80082c8:	af06      	add	r7, sp, #24
	uint8_t	sw = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	71fb      	strb	r3, [r7, #7]

	uint8_t positioningIdx = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	70fb      	strb	r3, [r7, #3]

	Sensor_Start();
 80082d2:	f001 fb13 	bl	80098fc <Sensor_Start>

    Custom_OLED_Clear();
 80082d6:	f7fc fe62 	bl	8004f9e <Custom_OLED_Clear>

    Pre_Drive_Var_Init();
 80082da:	f7fd feab 	bl	8006034 <Pre_Drive_Var_Init>

	positionIdxMax = 9;
 80082de:	4ba1      	ldr	r3, [pc, #644]	; (8008564 <Mark_Live_Test+0x2a0>)
 80082e0:	2209      	movs	r2, #9
 80082e2:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 6;
 80082e4:	4ba0      	ldr	r3, [pc, #640]	; (8008568 <Mark_Live_Test+0x2a4>)
 80082e6:	2206      	movs	r2, #6
 80082e8:	701a      	strb	r2, [r3, #0]

    while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80082ea:	e12d      	b.n	8008548 <Mark_Live_Test+0x284>

    	Drive_State_Machine();
 80082ec:	f7ff f980 	bl	80075f0 <Drive_State_Machine>

    	Positioning(&positioningIdx);
 80082f0:	1cfb      	adds	r3, r7, #3
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fff0 	bl	80072d8 <Positioning>

        switch (driveState) {
 80082f8:	4b9c      	ldr	r3, [pc, #624]	; (800856c <Mark_Live_Test+0x2a8>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d81b      	bhi.n	8008338 <Mark_Live_Test+0x74>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <Mark_Live_Test+0x44>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008319 	.word	0x08008319
 800830c:	08008321 	.word	0x08008321
 8008310:	08008329 	.word	0x08008329
 8008314:	08008331 	.word	0x08008331
        case DRIVE_STATE_IDLE:
        	Custom_OLED_Printf("/0STATE: IDLE     ");
 8008318:	4895      	ldr	r0, [pc, #596]	; (8008570 <Mark_Live_Test+0x2ac>)
 800831a:	f7fc ff25 	bl	8005168 <Custom_OLED_Printf>
            break;
 800831e:	e00f      	b.n	8008340 <Mark_Live_Test+0x7c>
        case DRIVE_STATE_CROSS:
        	Custom_OLED_Printf("/0STATE: CROSS    ");
 8008320:	4894      	ldr	r0, [pc, #592]	; (8008574 <Mark_Live_Test+0x2b0>)
 8008322:	f7fc ff21 	bl	8005168 <Custom_OLED_Printf>
            break;
 8008326:	e00b      	b.n	8008340 <Mark_Live_Test+0x7c>
        case DRIVE_STATE_MARKER:
        	Custom_OLED_Printf("/0STATE: MARK     ");
 8008328:	4893      	ldr	r0, [pc, #588]	; (8008578 <Mark_Live_Test+0x2b4>)
 800832a:	f7fc ff1d 	bl	8005168 <Custom_OLED_Printf>
            break;
 800832e:	e007      	b.n	8008340 <Mark_Live_Test+0x7c>
        case DRIVE_STATE_DECISION:
        	Custom_OLED_Printf("/0STATE: DECISION ");
 8008330:	4892      	ldr	r0, [pc, #584]	; (800857c <Mark_Live_Test+0x2b8>)
 8008332:	f7fc ff19 	bl	8005168 <Custom_OLED_Printf>
        	break;
 8008336:	e003      	b.n	8008340 <Mark_Live_Test+0x7c>
        default:
        	Custom_OLED_Printf("/0STATE: ------   ");
 8008338:	4891      	ldr	r0, [pc, #580]	; (8008580 <Mark_Live_Test+0x2bc>)
 800833a:	f7fc ff15 	bl	8005168 <Custom_OLED_Printf>
            break;
 800833e:	bf00      	nop
        }

        switch (markState) {
 8008340:	4b90      	ldr	r3, [pc, #576]	; (8008584 <Mark_Live_Test+0x2c0>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b06      	cmp	r3, #6
 8008346:	d82d      	bhi.n	80083a4 <Mark_Live_Test+0xe0>
 8008348:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <Mark_Live_Test+0x8c>)
 800834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834e:	bf00      	nop
 8008350:	0800836d 	.word	0x0800836d
 8008354:	08008375 	.word	0x08008375
 8008358:	08008385 	.word	0x08008385
 800835c:	0800837d 	.word	0x0800837d
 8008360:	0800838d 	.word	0x0800838d
 8008364:	08008395 	.word	0x08008395
 8008368:	0800839d 	.word	0x0800839d
		case MARK_NONE:
			Custom_OLED_Printf("/1MARK: NONE      ");
 800836c:	4886      	ldr	r0, [pc, #536]	; (8008588 <Mark_Live_Test+0x2c4>)
 800836e:	f7fc fefb 	bl	8005168 <Custom_OLED_Printf>
			break;
 8008372:	e01b      	b.n	80083ac <Mark_Live_Test+0xe8>
		case MARK_STRAIGHT:
			Custom_OLED_Printf("/1MARK: STRAIGHT  ");
 8008374:	4885      	ldr	r0, [pc, #532]	; (800858c <Mark_Live_Test+0x2c8>)
 8008376:	f7fc fef7 	bl	8005168 <Custom_OLED_Printf>
			break;
 800837a:	e017      	b.n	80083ac <Mark_Live_Test+0xe8>
        case MARK_CURVE_L:
        	Custom_OLED_Printf("/1MARK: LEFT      ");
 800837c:	4884      	ldr	r0, [pc, #528]	; (8008590 <Mark_Live_Test+0x2cc>)
 800837e:	f7fc fef3 	bl	8005168 <Custom_OLED_Printf>
            break;
 8008382:	e013      	b.n	80083ac <Mark_Live_Test+0xe8>
        case MARK_CURVE_R:
        	Custom_OLED_Printf("/1MARK: RIGHT     ");
 8008384:	4883      	ldr	r0, [pc, #524]	; (8008594 <Mark_Live_Test+0x2d0>)
 8008386:	f7fc feef 	bl	8005168 <Custom_OLED_Printf>
            break;
 800838a:	e00f      	b.n	80083ac <Mark_Live_Test+0xe8>
        case MARK_END:
        	Custom_OLED_Printf("/1MARK: END       ");
 800838c:	4882      	ldr	r0, [pc, #520]	; (8008598 <Mark_Live_Test+0x2d4>)
 800838e:	f7fc feeb 	bl	8005168 <Custom_OLED_Printf>
            break;
 8008392:	e00b      	b.n	80083ac <Mark_Live_Test+0xe8>
        case MARK_CROSS:
        	Custom_OLED_Printf("/1MARK: CROSS     ");
 8008394:	4881      	ldr	r0, [pc, #516]	; (800859c <Mark_Live_Test+0x2d8>)
 8008396:	f7fc fee7 	bl	8005168 <Custom_OLED_Printf>
            break;
 800839a:	e007      	b.n	80083ac <Mark_Live_Test+0xe8>
        case MARK_LINE_OUT:
            Custom_OLED_Printf("/1MARK: LINE OUT  ");
 800839c:	4880      	ldr	r0, [pc, #512]	; (80085a0 <Mark_Live_Test+0x2dc>)
 800839e:	f7fc fee3 	bl	8005168 <Custom_OLED_Printf>
            break;
 80083a2:	e003      	b.n	80083ac <Mark_Live_Test+0xe8>
        default:
        	Custom_OLED_Printf("/1MARK: ------    ");
 80083a4:	487f      	ldr	r0, [pc, #508]	; (80085a4 <Mark_Live_Test+0x2e0>)
 80083a6:	f7fc fedf 	bl	8005168 <Custom_OLED_Printf>
        	break;
 80083aa:	bf00      	nop
        }

    	uint16_t masking = lineMasking;
 80083ac:	4b7e      	ldr	r3, [pc, #504]	; (80085a8 <Mark_Live_Test+0x2e4>)
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	80bb      	strh	r3, [r7, #4]

    	Custom_OLED_Printf("/2%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w",  \
 80083b2:	88bb      	ldrh	r3, [r7, #4]
 80083b4:	0bdb      	lsrs	r3, r3, #15
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f003 0501 	and.w	r5, r3, #1
 80083bc:	88bb      	ldrh	r3, [r7, #4]
 80083be:	0b9b      	lsrs	r3, r3, #14
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f003 0601 	and.w	r6, r3, #1
 80083c6:	88bb      	ldrh	r3, [r7, #4]
 80083c8:	0b5b      	lsrs	r3, r3, #13
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f003 0c01 	and.w	ip, r3, #1
 80083d0:	88bb      	ldrh	r3, [r7, #4]
 80083d2:	0b1b      	lsrs	r3, r3, #12
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	88ba      	ldrh	r2, [r7, #4]
 80083dc:	0ad2      	lsrs	r2, r2, #11
 80083de:	b292      	uxth	r2, r2
 80083e0:	f002 0201 	and.w	r2, r2, #1
 80083e4:	88b9      	ldrh	r1, [r7, #4]
 80083e6:	0a89      	lsrs	r1, r1, #10
 80083e8:	b289      	uxth	r1, r1
 80083ea:	f001 0101 	and.w	r1, r1, #1
 80083ee:	88b8      	ldrh	r0, [r7, #4]
 80083f0:	0a40      	lsrs	r0, r0, #9
 80083f2:	b280      	uxth	r0, r0
 80083f4:	f000 0001 	and.w	r0, r0, #1
 80083f8:	88bc      	ldrh	r4, [r7, #4]
 80083fa:	0a24      	lsrs	r4, r4, #8
 80083fc:	b2a4      	uxth	r4, r4
 80083fe:	f004 0401 	and.w	r4, r4, #1
 8008402:	9404      	str	r4, [sp, #16]
 8008404:	9003      	str	r0, [sp, #12]
 8008406:	9102      	str	r1, [sp, #8]
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4663      	mov	r3, ip
 800840e:	4632      	mov	r2, r6
 8008410:	4629      	mov	r1, r5
 8008412:	4866      	ldr	r0, [pc, #408]	; (80085ac <Mark_Live_Test+0x2e8>)
 8008414:	f7fc fea8 	bl	8005168 <Custom_OLED_Printf>
    				(masking >> 15) & 1, (masking >> 14) & 1, (masking >> 13) & 1, (masking >> 12) & 1, \
    				(masking >> 11) & 1, (masking >> 10) & 1, (masking >> 9) & 1, (masking >> 8) & 1);

    	Custom_OLED_Printf("/3%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008418:	88bb      	ldrh	r3, [r7, #4]
 800841a:	09db      	lsrs	r3, r3, #7
 800841c:	b29b      	uxth	r3, r3
 800841e:	f003 0501 	and.w	r5, r3, #1
 8008422:	88bb      	ldrh	r3, [r7, #4]
 8008424:	099b      	lsrs	r3, r3, #6
 8008426:	b29b      	uxth	r3, r3
 8008428:	f003 0601 	and.w	r6, r3, #1
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	b29b      	uxth	r3, r3
 8008432:	f003 0c01 	and.w	ip, r3, #1
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	091b      	lsrs	r3, r3, #4
 800843a:	b29b      	uxth	r3, r3
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	88ba      	ldrh	r2, [r7, #4]
 8008442:	08d2      	lsrs	r2, r2, #3
 8008444:	b292      	uxth	r2, r2
 8008446:	f002 0201 	and.w	r2, r2, #1
 800844a:	88b9      	ldrh	r1, [r7, #4]
 800844c:	0889      	lsrs	r1, r1, #2
 800844e:	b289      	uxth	r1, r1
 8008450:	f001 0101 	and.w	r1, r1, #1
 8008454:	88b8      	ldrh	r0, [r7, #4]
 8008456:	0840      	lsrs	r0, r0, #1
 8008458:	b280      	uxth	r0, r0
 800845a:	f000 0001 	and.w	r0, r0, #1
    				(masking >> 7) & 1, (masking >> 6) & 1, (masking >> 5) & 1, (masking >> 4) & 1, \
    				(masking >> 3) & 1, (masking >> 2) & 1, (masking >> 1) & 1, (masking >> 0) & 1);
 800845e:	88bc      	ldrh	r4, [r7, #4]
    	Custom_OLED_Printf("/3%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008460:	f004 0401 	and.w	r4, r4, #1
 8008464:	9404      	str	r4, [sp, #16]
 8008466:	9003      	str	r0, [sp, #12]
 8008468:	9102      	str	r1, [sp, #8]
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4663      	mov	r3, ip
 8008470:	4632      	mov	r2, r6
 8008472:	4629      	mov	r1, r5
 8008474:	484e      	ldr	r0, [pc, #312]	; (80085b0 <Mark_Live_Test+0x2ec>)
 8008476:	f7fc fe77 	bl	8005168 <Custom_OLED_Printf>



    	masking = markAreaMasking;
 800847a:	4b4e      	ldr	r3, [pc, #312]	; (80085b4 <Mark_Live_Test+0x2f0>)
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	80bb      	strh	r3, [r7, #4]

    	Custom_OLED_Printf("/4%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w",  \
 8008480:	88bb      	ldrh	r3, [r7, #4]
 8008482:	0bdb      	lsrs	r3, r3, #15
 8008484:	b29b      	uxth	r3, r3
 8008486:	f003 0501 	and.w	r5, r3, #1
 800848a:	88bb      	ldrh	r3, [r7, #4]
 800848c:	0b9b      	lsrs	r3, r3, #14
 800848e:	b29b      	uxth	r3, r3
 8008490:	f003 0601 	and.w	r6, r3, #1
 8008494:	88bb      	ldrh	r3, [r7, #4]
 8008496:	0b5b      	lsrs	r3, r3, #13
 8008498:	b29b      	uxth	r3, r3
 800849a:	f003 0c01 	and.w	ip, r3, #1
 800849e:	88bb      	ldrh	r3, [r7, #4]
 80084a0:	0b1b      	lsrs	r3, r3, #12
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	88ba      	ldrh	r2, [r7, #4]
 80084aa:	0ad2      	lsrs	r2, r2, #11
 80084ac:	b292      	uxth	r2, r2
 80084ae:	f002 0201 	and.w	r2, r2, #1
 80084b2:	88b9      	ldrh	r1, [r7, #4]
 80084b4:	0a89      	lsrs	r1, r1, #10
 80084b6:	b289      	uxth	r1, r1
 80084b8:	f001 0101 	and.w	r1, r1, #1
 80084bc:	88b8      	ldrh	r0, [r7, #4]
 80084be:	0a40      	lsrs	r0, r0, #9
 80084c0:	b280      	uxth	r0, r0
 80084c2:	f000 0001 	and.w	r0, r0, #1
 80084c6:	88bc      	ldrh	r4, [r7, #4]
 80084c8:	0a24      	lsrs	r4, r4, #8
 80084ca:	b2a4      	uxth	r4, r4
 80084cc:	f004 0401 	and.w	r4, r4, #1
 80084d0:	9404      	str	r4, [sp, #16]
 80084d2:	9003      	str	r0, [sp, #12]
 80084d4:	9102      	str	r1, [sp, #8]
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4663      	mov	r3, ip
 80084dc:	4632      	mov	r2, r6
 80084de:	4629      	mov	r1, r5
 80084e0:	4835      	ldr	r0, [pc, #212]	; (80085b8 <Mark_Live_Test+0x2f4>)
 80084e2:	f7fc fe41 	bl	8005168 <Custom_OLED_Printf>
    				(masking >> 15) & 1, (masking >> 14) & 1, (masking >> 13) & 1, (masking >> 12) & 1, \
    				(masking >> 11) & 1, (masking >> 10) & 1, (masking >> 9) & 1, (masking >> 8) & 1);

    	Custom_OLED_Printf("/5%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 80084e6:	88bb      	ldrh	r3, [r7, #4]
 80084e8:	09db      	lsrs	r3, r3, #7
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f003 0501 	and.w	r5, r3, #1
 80084f0:	88bb      	ldrh	r3, [r7, #4]
 80084f2:	099b      	lsrs	r3, r3, #6
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f003 0601 	and.w	r6, r3, #1
 80084fa:	88bb      	ldrh	r3, [r7, #4]
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f003 0c01 	and.w	ip, r3, #1
 8008504:	88bb      	ldrh	r3, [r7, #4]
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	88ba      	ldrh	r2, [r7, #4]
 8008510:	08d2      	lsrs	r2, r2, #3
 8008512:	b292      	uxth	r2, r2
 8008514:	f002 0201 	and.w	r2, r2, #1
 8008518:	88b9      	ldrh	r1, [r7, #4]
 800851a:	0889      	lsrs	r1, r1, #2
 800851c:	b289      	uxth	r1, r1
 800851e:	f001 0101 	and.w	r1, r1, #1
 8008522:	88b8      	ldrh	r0, [r7, #4]
 8008524:	0840      	lsrs	r0, r0, #1
 8008526:	b280      	uxth	r0, r0
 8008528:	f000 0001 	and.w	r0, r0, #1
    				(masking >> 7) & 1, (masking >> 6) & 1, (masking >> 5) & 1, (masking >> 4) & 1, \
    				(masking >> 3) & 1, (masking >> 2) & 1, (masking >> 1) & 1, (masking >> 0) & 1);
 800852c:	88bc      	ldrh	r4, [r7, #4]
    	Custom_OLED_Printf("/5%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 800852e:	f004 0401 	and.w	r4, r4, #1
 8008532:	9404      	str	r4, [sp, #16]
 8008534:	9003      	str	r0, [sp, #12]
 8008536:	9102      	str	r1, [sp, #8]
 8008538:	9201      	str	r2, [sp, #4]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4663      	mov	r3, ip
 800853e:	4632      	mov	r2, r6
 8008540:	4629      	mov	r1, r5
 8008542:	481e      	ldr	r0, [pc, #120]	; (80085bc <Mark_Live_Test+0x2f8>)
 8008544:	f7fc fe10 	bl	8005168 <Custom_OLED_Printf>
    while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008548:	f7fd f93e 	bl	80057c8 <Custom_Switch_Read>
 800854c:	4603      	mov	r3, r0
 800854e:	71fb      	strb	r3, [r7, #7]
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b04      	cmp	r3, #4
 8008554:	f47f aeca 	bne.w	80082ec <Mark_Live_Test+0x28>
    }

    Sensor_Stop();
 8008558:	f001 f9e8 	bl	800992c <Sensor_Stop>
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008564:	2000001c 	.word	0x2000001c
 8008568:	2000001d 	.word	0x2000001d
 800856c:	20001480 	.word	0x20001480
 8008570:	0800cf88 	.word	0x0800cf88
 8008574:	0800cf9c 	.word	0x0800cf9c
 8008578:	0800cfb0 	.word	0x0800cfb0
 800857c:	0800cfc4 	.word	0x0800cfc4
 8008580:	0800cfd8 	.word	0x0800cfd8
 8008584:	2000003c 	.word	0x2000003c
 8008588:	0800cfec 	.word	0x0800cfec
 800858c:	0800d000 	.word	0x0800d000
 8008590:	0800d014 	.word	0x0800d014
 8008594:	0800d028 	.word	0x0800d028
 8008598:	0800d03c 	.word	0x0800d03c
 800859c:	0800d050 	.word	0x0800d050
 80085a0:	0800d064 	.word	0x0800d064
 80085a4:	0800d078 	.word	0x0800d078
 80085a8:	2000003e 	.word	0x2000003e
 80085ac:	0800d08c 	.word	0x0800d08c
 80085b0:	0800d0b0 	.word	0x0800d0b0
 80085b4:	20000046 	.word	0x20000046
 80085b8:	0800d0d4 	.word	0x0800d0d4
 80085bc:	0800d0f8 	.word	0x0800d0f8

080085c0 <LL_TIM_EnableCounter>:
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f043 0201 	orr.w	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <LL_TIM_DisableCounter>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f023 0201 	bic.w	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <LL_TIM_CC_EnableChannel>:
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	621a      	str	r2, [r3, #32]
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_TIM_CC_DisableChannel>:
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	43db      	mvns	r3, r3
 8008634:	401a      	ands	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_TIM_OC_SetCompareCH2>:
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <LL_TIM_EnableIT_UPDATE>:
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f043 0201 	orr.w	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60da      	str	r2, [r3, #12]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_TIM_DisableIT_UPDATE>:
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <MotorL_Start>:





void MotorL_Start() {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0

	// motorL pwm start
	LL_TIM_EnableCounter(TIM10);
 80086a8:	4807      	ldr	r0, [pc, #28]	; (80086c8 <MotorL_Start+0x24>)
 80086aa:	f7ff ff89 	bl	80085c0 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 80086ae:	2101      	movs	r1, #1
 80086b0:	4805      	ldr	r0, [pc, #20]	; (80086c8 <MotorL_Start+0x24>)
 80086b2:	f7ff ffa5 	bl	8008600 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 80086b6:	2100      	movs	r1, #0
 80086b8:	4803      	ldr	r0, [pc, #12]	; (80086c8 <MotorL_Start+0x24>)
 80086ba:	f7ff ffc4 	bl	8008646 <LL_TIM_OC_SetCompareCH2>

	// motorL encoder start
	LL_TIM_EnableCounter(TIM4);
 80086be:	4803      	ldr	r0, [pc, #12]	; (80086cc <MotorL_Start+0x28>)
 80086c0:	f7ff ff7e 	bl	80085c0 <LL_TIM_EnableCounter>
}
 80086c4:	bf00      	nop
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40014400 	.word	0x40014400
 80086cc:	40000800 	.word	0x40000800

080086d0 <MotorR_Start>:



void MotorR_Start() {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0

	// motorR pwm start
	LL_TIM_EnableCounter(TIM11);
 80086d4:	4807      	ldr	r0, [pc, #28]	; (80086f4 <MotorR_Start+0x24>)
 80086d6:	f7ff ff73 	bl	80085c0 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 80086da:	2101      	movs	r1, #1
 80086dc:	4805      	ldr	r0, [pc, #20]	; (80086f4 <MotorR_Start+0x24>)
 80086de:	f7ff ff8f 	bl	8008600 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 80086e2:	2100      	movs	r1, #0
 80086e4:	4803      	ldr	r0, [pc, #12]	; (80086f4 <MotorR_Start+0x24>)
 80086e6:	f7ff ffae 	bl	8008646 <LL_TIM_OC_SetCompareCH2>

	// motorR encoder start
	LL_TIM_EnableCounter(TIM3);
 80086ea:	4803      	ldr	r0, [pc, #12]	; (80086f8 <MotorR_Start+0x28>)
 80086ec:	f7ff ff68 	bl	80085c0 <LL_TIM_EnableCounter>
}
 80086f0:	bf00      	nop
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	40014800 	.word	0x40014800
 80086f8:	40000400 	.word	0x40000400

080086fc <Motor_Start>:




void Motor_Start() {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0

	MotorL_Start();
 8008700:	f7ff ffd0 	bl	80086a4 <MotorL_Start>
	MotorR_Start();
 8008704:	f7ff ffe4 	bl	80086d0 <MotorR_Start>
}
 8008708:	bf00      	nop
 800870a:	bd80      	pop	{r7, pc}

0800870c <MotorL_Power_Off>:





void MotorL_Power_Off() {
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0

	TIM10->CCR1 = 0;
 8008710:	4b03      	ldr	r3, [pc, #12]	; (8008720 <MotorL_Power_Off+0x14>)
 8008712:	2200      	movs	r2, #0
 8008714:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008716:	bf00      	nop
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	40014400 	.word	0x40014400

08008724 <MotorR_Power_Off>:


void MotorR_Power_Off() {
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0

	TIM11->CCR1 = 0;
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <MotorR_Power_Off+0x14>)
 800872a:	2200      	movs	r2, #0
 800872c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800872e:	bf00      	nop
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40014800 	.word	0x40014800

0800873c <Motor_Power_Off>:



void Motor_Power_Off() {
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 8008740:	f7ff ffe4 	bl	800870c <MotorL_Power_Off>
	MotorR_Power_Off();
 8008744:	f7ff ffee 	bl	8008724 <MotorR_Power_Off>
}
 8008748:	bf00      	nop
 800874a:	bd80      	pop	{r7, pc}

0800874c <MotorL_Stop>:





void MotorL_Stop() {
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 8008750:	f7ff ffdc 	bl	800870c <MotorL_Power_Off>

	// motorL pwm end
	LL_TIM_DisableCounter(TIM10);
 8008754:	4805      	ldr	r0, [pc, #20]	; (800876c <MotorL_Stop+0x20>)
 8008756:	f7ff ff43 	bl	80085e0 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 800875a:	2101      	movs	r1, #1
 800875c:	4803      	ldr	r0, [pc, #12]	; (800876c <MotorL_Stop+0x20>)
 800875e:	f7ff ff60 	bl	8008622 <LL_TIM_CC_DisableChannel>

	// motorL encoder end
	LL_TIM_DisableCounter(TIM4);
 8008762:	4803      	ldr	r0, [pc, #12]	; (8008770 <MotorL_Stop+0x24>)
 8008764:	f7ff ff3c 	bl	80085e0 <LL_TIM_DisableCounter>
}
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40014400 	.word	0x40014400
 8008770:	40000800 	.word	0x40000800

08008774 <MotorR_Stop>:



void MotorR_Stop() {
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0

	MotorR_Power_Off();
 8008778:	f7ff ffd4 	bl	8008724 <MotorR_Power_Off>

	// motorR pwm end
	LL_TIM_DisableCounter(TIM11);
 800877c:	4805      	ldr	r0, [pc, #20]	; (8008794 <MotorR_Stop+0x20>)
 800877e:	f7ff ff2f 	bl	80085e0 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8008782:	2101      	movs	r1, #1
 8008784:	4803      	ldr	r0, [pc, #12]	; (8008794 <MotorR_Stop+0x20>)
 8008786:	f7ff ff4c 	bl	8008622 <LL_TIM_CC_DisableChannel>

	// motorR encoder end
	LL_TIM_DisableCounter(TIM3);
 800878a:	4803      	ldr	r0, [pc, #12]	; (8008798 <MotorR_Stop+0x24>)
 800878c:	f7ff ff28 	bl	80085e0 <LL_TIM_DisableCounter>
}
 8008790:	bf00      	nop
 8008792:	bd80      	pop	{r7, pc}
 8008794:	40014800 	.word	0x40014800
 8008798:	40000400 	.word	0x40000400

0800879c <Motor_Stop>:



void Motor_Stop() {
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0

	MotorL_Stop();
 80087a0:	f7ff ffd4 	bl	800874c <MotorL_Stop>
	MotorR_Stop();
 80087a4:	f7ff ffe6 	bl	8008774 <MotorR_Stop>
}
 80087a8:	bf00      	nop
 80087aa:	bd80      	pop	{r7, pc}

080087ac <Speed_Control_Start>:





void Speed_Control_Start(){
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 80087b0:	4803      	ldr	r0, [pc, #12]	; (80087c0 <Speed_Control_Start+0x14>)
 80087b2:	f7ff ff05 	bl	80085c0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 80087b6:	4802      	ldr	r0, [pc, #8]	; (80087c0 <Speed_Control_Start+0x14>)
 80087b8:	f7ff ff53 	bl	8008662 <LL_TIM_EnableIT_UPDATE>
}
 80087bc:	bf00      	nop
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40014000 	.word	0x40014000

080087c4 <Speed_Control_Stop>:




void Speed_Control_Stop(){
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 80087c8:	4803      	ldr	r0, [pc, #12]	; (80087d8 <Speed_Control_Stop+0x14>)
 80087ca:	f7ff ff5a 	bl	8008682 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 80087ce:	4802      	ldr	r0, [pc, #8]	; (80087d8 <Speed_Control_Stop+0x14>)
 80087d0:	f7ff ff06 	bl	80085e0 <LL_TIM_DisableCounter>
}
 80087d4:	bf00      	nop
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	40014000 	.word	0x40014000

080087dc <Position_Windowing>:
__STATIC_INLINE void	Position_Windowing() {
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
	int32_t	window = (positionVal + 30000) / 4000;
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <Position_Windowing+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80087ea:	3330      	adds	r3, #48	; 0x30
 80087ec:	4a10      	ldr	r2, [pc, #64]	; (8008830 <Position_Windowing+0x54>)
 80087ee:	fb82 1203 	smull	r1, r2, r2, r3
 80087f2:	1212      	asrs	r2, r2, #8
 80087f4:	17db      	asrs	r3, r3, #31
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	607b      	str	r3, [r7, #4]
	positionIdxMax = GET_MIN(window + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b0d      	cmp	r3, #13
 80087fe:	bfa8      	it	ge
 8008800:	230d      	movge	r3, #13
 8008802:	b2db      	uxtb	r3, r3
 8008804:	3302      	adds	r3, #2
 8008806:	b2da      	uxtb	r2, r3
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <Position_Windowing+0x58>)
 800880a:	701a      	strb	r2, [r3, #0]
	positionIdxMin = GET_MAX(window - WINDOW_SIZE_HALF + 1, 0);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b01      	cmp	r3, #1
 8008810:	bfb8      	it	lt
 8008812:	2301      	movlt	r3, #1
 8008814:	b2db      	uxtb	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b2da      	uxtb	r2, r3
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <Position_Windowing+0x5c>)
 800881c:	701a      	strb	r2, [r3, #0]
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20001460 	.word	0x20001460
 8008830:	10624dd3 	.word	0x10624dd3
 8008834:	2000001c 	.word	0x2000001c
 8008838:	2000001d 	.word	0x2000001d

0800883c <Sum_Position_Val>:
__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	71fb      	strb	r3, [r7, #7]
	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 8008846:	4b15      	ldr	r3, [pc, #84]	; (800889c <Sum_Position_Val+0x60>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	79fa      	ldrb	r2, [r7, #7]
 800884e:	429a      	cmp	r2, r3
 8008850:	d31e      	bcc.n	8008890 <Sum_Position_Val+0x54>
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <Sum_Position_Val+0x64>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	79fa      	ldrb	r2, [r7, #7]
 800885a:	429a      	cmp	r2, r3
 800885c:	d818      	bhi.n	8008890 <Sum_Position_Val+0x54>
		positionSum += positionTable[idx] * sensorNormVals[idx];
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	4a10      	ldr	r2, [pc, #64]	; (80088a4 <Sum_Position_Val+0x68>)
 8008862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008866:	79fa      	ldrb	r2, [r7, #7]
 8008868:	490f      	ldr	r1, [pc, #60]	; (80088a8 <Sum_Position_Val+0x6c>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	fb03 f202 	mul.w	r2, r3, r2
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <Sum_Position_Val+0x70>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4413      	add	r3, r2
 8008878:	4a0c      	ldr	r2, [pc, #48]	; (80088ac <Sum_Position_Val+0x70>)
 800887a:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	4a0a      	ldr	r2, [pc, #40]	; (80088a8 <Sum_Position_Val+0x6c>)
 8008880:	5cd3      	ldrb	r3, [r2, r3]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <Sum_Position_Val+0x74>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4413      	add	r3, r2
 800888c:	4a08      	ldr	r2, [pc, #32]	; (80088b0 <Sum_Position_Val+0x74>)
 800888e:	6013      	str	r3, [r2, #0]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	2000001d 	.word	0x2000001d
 80088a0:	2000001c 	.word	0x2000001c
 80088a4:	20000080 	.word	0x20000080
 80088a8:	200046d0 	.word	0x200046d0
 80088ac:	20001468 	.word	0x20001468
 80088b0:	2000146c 	.word	0x2000146c

080088b4 <Make_Position_Val>:
__STATIC_INLINE void	Make_Position_Val() {
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
		positionVal = positionSum / (sensorNormValsSum + 1);
 80088b8:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <Make_Position_Val+0x2c>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <Make_Position_Val+0x30>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3301      	adds	r3, #1
 80088c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80088c6:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <Make_Position_Val+0x34>)
 80088c8:	6013      	str	r3, [r2, #0]
		positionSum = 0;
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <Make_Position_Val+0x2c>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 80088d0:	4b04      	ldr	r3, [pc, #16]	; (80088e4 <Make_Position_Val+0x30>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
}
 80088d6:	bf00      	nop
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	20001468 	.word	0x20001468
 80088e4:	2000146c 	.word	0x2000146c
 80088e8:	20001460 	.word	0x20001460

080088ec <Positioning>:
__STATIC_INLINE void	Positioning(uint8_t *idx) {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	switch(*idx) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b07      	cmp	r3, #7
 80088fa:	dc02      	bgt.n	8008902 <Positioning+0x16>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da03      	bge.n	8008908 <Positioning+0x1c>
}
 8008900:	e01d      	b.n	800893e <Positioning+0x52>
	switch(*idx) {
 8008902:	2b08      	cmp	r3, #8
 8008904:	d013      	beq.n	800892e <Positioning+0x42>
}
 8008906:	e01a      	b.n	800893e <Positioning+0x52>
				Sum_Position_Val(*idx);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff ff95 	bl	800883c <Sum_Position_Val>
				Sum_Position_Val(*idx + 8);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff ff8e 	bl	800883c <Sum_Position_Val>
				*idx += 1;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	701a      	strb	r2, [r3, #0]
				break;
 800892c:	e007      	b.n	800893e <Positioning+0x52>
				Make_Position_Val();
 800892e:	f7ff ffc1 	bl	80088b4 <Make_Position_Val>
				Position_Windowing();
 8008932:	f7ff ff53 	bl	80087dc <Position_Windowing>
				*idx = 0;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
				break;
 800893c:	bf00      	nop
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800894e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8008958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8008968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8008978:	bf00      	nop
 800897a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b01      	cmp	r3, #1
 8008986:	d1f8      	bne.n	800897a <Custom_Delay_us+0x34>
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ffcc 	bl	8008946 <Custom_Delay_us>
}
 80089ae:	bf00      	nop
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <Drive_Fit_In>:
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	ed87 0a01 	vstr	s0, [r7, #4]
 80089c2:	edc7 0a00 	vstr	s1, [r7]
	targetSpeed = pinSpeed;
 80089c6:	4a25      	ldr	r2, [pc, #148]	; (8008a5c <Drive_Fit_In+0xa4>)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2.f * s);
 80089cc:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <Drive_Fit_In+0xa8>)
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	ed97 7a00 	vldr	s14, [r7]
 80089d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089da:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <Drive_Fit_In+0xa8>)
 80089dc:	edd3 6a00 	vldr	s13, [r3]
 80089e0:	edd7 7a00 	vldr	s15, [r7]
 80089e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	d512      	bpl.n	8008a1c <Drive_Fit_In+0x64>
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <Drive_Fit_In+0xa8>)
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	ed97 7a00 	vldr	s14, [r7]
 8008a00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a04:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <Drive_Fit_In+0xa8>)
 8008a06:	edd3 6a00 	vldr	s13, [r3]
 8008a0a:	edd7 7a00 	vldr	s15, [r7]
 8008a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	eef1 7a67 	vneg.f32	s15, s15
 8008a1a:	e00f      	b.n	8008a3c <Drive_Fit_In+0x84>
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <Drive_Fit_In+0xa8>)
 8008a1e:	edd3 7a00 	vldr	s15, [r3]
 8008a22:	ed97 7a00 	vldr	s14, [r7]
 8008a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <Drive_Fit_In+0xa8>)
 8008a2c:	edd3 6a00 	vldr	s13, [r3]
 8008a30:	edd7 7a00 	vldr	s15, [r7]
 8008a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008a40:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008a44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <Drive_Fit_In+0xac>)
 8008a4a:	ed83 7a00 	vstr	s14, [r3]
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	2000002c 	.word	0x2000002c
 8008a60:	20000030 	.word	0x20000030
 8008a64:	20000028 	.word	0x20000028

08008a68 <Is_Drive_End>:
__STATIC_INLINE uint8_t	Is_Drive_End() {
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
	if (endMarkCnt >= 2) {
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <Is_Drive_End+0x34>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d907      	bls.n	8008a84 <Is_Drive_End+0x1c>
		optimizeLevel++;
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <Is_Drive_End+0x38>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	4b08      	ldr	r3, [pc, #32]	; (8008aa0 <Is_Drive_End+0x38>)
 8008a7e:	701a      	strb	r2, [r3, #0]
		return EXIT_ECHO_END_MARK;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e006      	b.n	8008a92 <Is_Drive_End+0x2a>
	if (markState == MARK_LINE_OUT) {
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <Is_Drive_End+0x3c>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b06      	cmp	r3, #6
 8008a8a:	d101      	bne.n	8008a90 <Is_Drive_End+0x28>
		return EXIT_ECHO_LINE_OUT;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e000      	b.n	8008a92 <Is_Drive_End+0x2a>
	return EXIT_ECHO_IDLE;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	2000468b 	.word	0x2000468b
 8008aa0:	2000468a 	.word	0x2000468a
 8008aa4:	2000003c 	.word	0x2000003c

08008aa8 <Mark_Masking>:
__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid > IR_SENSOR_MID) {
 8008ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab6:	2b07      	cmp	r3, #7
 8008ab8:	dd26      	ble.n	8008b08 <Mark_Masking+0x60>
		int8_t moveLen = curIrSensorMid - IR_SENSOR_MID;
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	3b07      	subs	r3, #7
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	73bb      	strb	r3, [r7, #14]
		lineMasking = LINE_MASKING_INIT >> moveLen;
 8008ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008aca:	fa42 f303 	asr.w	r3, r2, r3
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	4b2c      	ldr	r3, [pc, #176]	; (8008b84 <Mark_Masking+0xdc>)
 8008ad2:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT >> moveLen;
 8008ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008adc:	fa42 f303 	asr.w	r3, r2, r3
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <Mark_Masking+0xe0>)
 8008ae4:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT >> moveLen;
 8008ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aea:	220e      	movs	r2, #14
 8008aec:	fa42 f303 	asr.w	r3, r2, r3
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <Mark_Masking+0xe4>)
 8008af4:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8008af6:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <Mark_Masking+0xe0>)
 8008af8:	881a      	ldrh	r2, [r3, #0]
 8008afa:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <Mark_Masking+0xe4>)
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	4b23      	ldr	r3, [pc, #140]	; (8008b90 <Mark_Masking+0xe8>)
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	e026      	b.n	8008b56 <Mark_Masking+0xae>
		int8_t moveLen = IR_SENSOR_MID - curIrSensorMid;
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	f1c3 0307 	rsb	r3, r3, #7
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	73fb      	strb	r3, [r7, #15]
		lineMasking = LINE_MASKING_INIT << moveLen;
 8008b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <Mark_Masking+0xdc>)
 8008b22:	801a      	strh	r2, [r3, #0]
		leftMarkMasking = LEFT_MARK_MASKING_INIT << moveLen;
 8008b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b28:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <Mark_Masking+0xe0>)
 8008b34:	801a      	strh	r2, [r3, #0]
		rightMarkMasking = RIGHT_MARK_MASKING_INIT << moveLen;
 8008b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b3a:	220e      	movs	r2, #14
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <Mark_Masking+0xe4>)
 8008b44:	801a      	strh	r2, [r3, #0]
		bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8008b46:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <Mark_Masking+0xe0>)
 8008b48:	881a      	ldrh	r2, [r3, #0]
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <Mark_Masking+0xe4>)
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <Mark_Masking+0xe8>)
 8008b54:	801a      	strh	r2, [r3, #0]
	markAreaMasking = ~(lineMasking << 1 | lineMasking >> 1);
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <Mark_Masking+0xdc>)
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	b21a      	sxth	r2, r3
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <Mark_Masking+0xdc>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	b21b      	sxth	r3, r3
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	b21b      	sxth	r3, r3
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <Mark_Masking+0xec>)
 8008b74:	801a      	strh	r2, [r3, #0]
}
 8008b76:	bf00      	nop
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	2000003e 	.word	0x2000003e
 8008b88:	20000042 	.word	0x20000042
 8008b8c:	20000040 	.word	0x20000040
 8008b90:	20000044 	.word	0x20000044
 8008b94:	20000046 	.word	0x20000046

08008b98 <Mark_Accumming>:
__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid < 11) {
 8008ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba6:	2b0a      	cmp	r3, #10
 8008ba8:	dc17      	bgt.n	8008bda <Mark_Accumming+0x42>
		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 8008baa:	4b2a      	ldr	r3, [pc, #168]	; (8008c54 <Mark_Accumming+0xbc>)
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	4b29      	ldr	r3, [pc, #164]	; (8008c58 <Mark_Accumming+0xc0>)
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bbe:	f1c3 030b 	rsb	r3, r3, #11
 8008bc2:	fa42 f303 	asr.w	r3, r2, r3
 8008bc6:	b25a      	sxtb	r2, r3
 8008bc8:	4b24      	ldr	r3, [pc, #144]	; (8008c5c <Mark_Accumming+0xc4>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b25b      	sxtb	r3, r3
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <Mark_Accumming+0xc4>)
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e015      	b.n	8008c06 <Mark_Accumming+0x6e>
		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 8008bda:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <Mark_Accumming+0xbc>)
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <Mark_Accumming+0xc0>)
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	4013      	ands	r3, r2
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	461a      	mov	r2, r3
 8008bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bee:	3b0b      	subs	r3, #11
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	b25a      	sxtb	r2, r3
 8008bf6:	4b19      	ldr	r3, [pc, #100]	; (8008c5c <Mark_Accumming+0xc4>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b25b      	sxtb	r3, r3
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <Mark_Accumming+0xc4>)
 8008c04:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <Mark_Accumming+0xbc>)
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <Mark_Accumming+0xc8>)
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <Mark_Accumming+0x8e>
		irSensorStateSum |= 0x80;
 8008c18:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <Mark_Accumming+0xc4>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <Mark_Accumming+0xc4>)
 8008c24:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <Mark_Accumming+0xbc>)
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <Mark_Accumming+0xcc>)
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	4013      	ands	r3, r2
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <Mark_Accumming+0xae>
		irSensorStateSum |= 0x01;
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <Mark_Accumming+0xc4>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <Mark_Accumming+0xc4>)
 8008c44:	701a      	strb	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200046f0 	.word	0x200046f0
 8008c58:	2000003e 	.word	0x2000003e
 8008c5c:	2000468c 	.word	0x2000468c
 8008c60:	20000042 	.word	0x20000042
 8008c64:	20000040 	.word	0x20000040

08008c68 <Mark_Accumming_Reset>:
__STATIC_INLINE void	Mark_Accumming_Reset() {
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
	irSensorStateSum = 0x00;
 8008c6c:	4b03      	ldr	r3, [pc, #12]	; (8008c7c <Mark_Accumming_Reset+0x14>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	2000468c 	.word	0x2000468c

08008c80 <Is_Line_Out>:
__STATIC_INLINE uint8_t	Is_Line_Out() {
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
	if (irSensorState == 0x00) {
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <Is_Line_Out+0x20>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <Is_Line_Out+0x14>
	return CUSTOM_FALSE;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	200046f0 	.word	0x200046f0

08008ca4 <Is_Passed_Marker>:
__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 8008ca8:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <Is_Passed_Marker+0x28>)
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <Is_Passed_Marker+0x2c>)
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <Is_Passed_Marker+0x1c>
	return CUSTOM_FALSE;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	200046f0 	.word	0x200046f0
 8008cd0:	20000046 	.word	0x20000046

08008cd4 <Decision>:
__STATIC_INLINE void	Decision() {
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
	if (irSensorStateSum == 0xff) {
 8008cd8:	4b1f      	ldr	r3, [pc, #124]	; (8008d58 <Decision+0x84>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2bff      	cmp	r3, #255	; 0xff
 8008cde:	d103      	bne.n	8008ce8 <Decision+0x14>
		markState = MARK_CROSS;
 8008ce0:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <Decision+0x88>)
 8008ce2:	2205      	movs	r2, #5
 8008ce4:	701a      	strb	r2, [r3, #0]
}
 8008ce6:	e031      	b.n	8008d4c <Decision+0x78>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <Decision+0x84>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8008cf0:	2b81      	cmp	r3, #129	; 0x81
 8008cf2:	d109      	bne.n	8008d08 <Decision+0x34>
		markState = MARK_END;
 8008cf4:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <Decision+0x88>)
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	701a      	strb	r2, [r3, #0]
		endMarkCnt++;
 8008cfa:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <Decision+0x8c>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <Decision+0x8c>)
 8008d04:	701a      	strb	r2, [r3, #0]
}
 8008d06:	e021      	b.n	8008d4c <Decision+0x78>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 8008d08:	4b13      	ldr	r3, [pc, #76]	; (8008d58 <Decision+0x84>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da0b      	bge.n	8008d2a <Decision+0x56>
		if (markState == MARK_CURVE_L) {
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <Decision+0x88>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d103      	bne.n	8008d22 <Decision+0x4e>
			markState = MARK_STRAIGHT;
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <Decision+0x88>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
}
 8008d20:	e014      	b.n	8008d4c <Decision+0x78>
			markState = MARK_CURVE_L;
 8008d22:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <Decision+0x88>)
 8008d24:	2203      	movs	r2, #3
 8008d26:	701a      	strb	r2, [r3, #0]
}
 8008d28:	e010      	b.n	8008d4c <Decision+0x78>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 8008d2a:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <Decision+0x84>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <Decision+0x78>
		if (markState == MARK_CURVE_R) {
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <Decision+0x88>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d103      	bne.n	8008d46 <Decision+0x72>
			markState = MARK_STRAIGHT;
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <Decision+0x88>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
}
 8008d44:	e002      	b.n	8008d4c <Decision+0x78>
			markState = MARK_CURVE_R;
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <Decision+0x88>)
 8008d48:	2202      	movs	r2, #2
 8008d4a:	701a      	strb	r2, [r3, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	2000468c 	.word	0x2000468c
 8008d5c:	2000003c 	.word	0x2000003c
 8008d60:	2000468b 	.word	0x2000468b

08008d64 <Drive_State_Machine>:
__STATIC_INLINE void	Drive_State_Machine() {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
	int8_t	curIrSensorMid = positionIdxMax - WINDOW_SIZE_HALF;
 8008d6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <Drive_State_Machine+0x140>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	3b02      	subs	r3, #2
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	71fb      	strb	r3, [r7, #7]
	Mark_Masking(curIrSensorMid);
 8008d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fe94 	bl	8008aa8 <Mark_Masking>
	switch (driveState) {
 8008d80:	4b49      	ldr	r3, [pc, #292]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	f200 8089 	bhi.w	8008e9c <Drive_State_Machine+0x138>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <Drive_State_Machine+0x2c>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008da5 	.word	0x08008da5
 8008d94:	08008e03 	.word	0x08008e03
 8008d98:	08008e31 	.word	0x08008e31
 8008d9c:	08008e57 	.word	0x08008e57
 8008da0:	08008e63 	.word	0x08008e63
				if (__builtin_popcount(irSensorState & lineMasking) >= 4) {
 8008da4:	4b41      	ldr	r3, [pc, #260]	; (8008eac <Drive_State_Machine+0x148>)
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	4b41      	ldr	r3, [pc, #260]	; (8008eb0 <Drive_State_Machine+0x14c>)
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	4013      	ands	r3, r2
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f7 ff18 	bl	8000be8 <__popcountsi2>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	dd05      	ble.n	8008dca <Drive_State_Machine+0x66>
					Mark_Accumming_Reset();
 8008dbe:	f7ff ff53 	bl	8008c68 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_CROSS;
 8008dc2:	4b39      	ldr	r3, [pc, #228]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	701a      	strb	r2, [r3, #0]
				break;
 8008dc8:	e061      	b.n	8008e8e <Drive_State_Machine+0x12a>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 8008dca:	4b38      	ldr	r3, [pc, #224]	; (8008eac <Drive_State_Machine+0x148>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	4b38      	ldr	r3, [pc, #224]	; (8008eb4 <Drive_State_Machine+0x150>)
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <Drive_State_Machine+0x84>
					Mark_Accumming_Reset();
 8008ddc:	f7ff ff44 	bl	8008c68 <Mark_Accumming_Reset>
					driveState = DRIVE_STATE_MARKER;
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008de2:	2202      	movs	r2, #2
 8008de4:	701a      	strb	r2, [r3, #0]
				break;
 8008de6:	e052      	b.n	8008e8e <Drive_State_Machine+0x12a>
				else if (Is_Line_Out()) {
 8008de8:	f7ff ff4a 	bl	8008c80 <Is_Line_Out>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d04d      	beq.n	8008e8e <Drive_State_Machine+0x12a>
					lineOutStartTime = uwTick;
 8008df2:	4b31      	ldr	r3, [pc, #196]	; (8008eb8 <Drive_State_Machine+0x154>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a31      	ldr	r2, [pc, #196]	; (8008ebc <Drive_State_Machine+0x158>)
 8008df8:	6013      	str	r3, [r2, #0]
					driveState = DRIVE_DECISION_LINE_OUT;
 8008dfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	701a      	strb	r2, [r3, #0]
				break;
 8008e00:	e045      	b.n	8008e8e <Drive_State_Machine+0x12a>
				Mark_Accumming(curIrSensorMid);
 8008e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fec6 	bl	8008b98 <Mark_Accumming>
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 8008e0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ec0 <Drive_State_Machine+0x15c>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2bff      	cmp	r3, #255	; 0xff
 8008e12:	d104      	bne.n	8008e1e <Drive_State_Machine+0xba>
 8008e14:	f7ff ff46 	bl	8008ca4 <Is_Passed_Marker>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <Drive_State_Machine+0xc4>
					|| Is_Line_Out() ) {
 8008e1e:	f7ff ff2f 	bl	8008c80 <Is_Line_Out>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d034      	beq.n	8008e92 <Drive_State_Machine+0x12e>
					driveState = DRIVE_STATE_DECISION;
 8008e28:	4b1f      	ldr	r3, [pc, #124]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	701a      	strb	r2, [r3, #0]
				break;
 8008e2e:	e030      	b.n	8008e92 <Drive_State_Machine+0x12e>
				Mark_Accumming(curIrSensorMid);
 8008e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff feaf 	bl	8008b98 <Mark_Accumming>
				if (Is_Passed_Marker() || Is_Line_Out()) {
 8008e3a:	f7ff ff33 	bl	8008ca4 <Is_Passed_Marker>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <Drive_State_Machine+0xea>
 8008e44:	f7ff ff1c 	bl	8008c80 <Is_Line_Out>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d023      	beq.n	8008e96 <Drive_State_Machine+0x132>
					driveState = DRIVE_STATE_DECISION;
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008e50:	2203      	movs	r2, #3
 8008e52:	701a      	strb	r2, [r3, #0]
				break;
 8008e54:	e01f      	b.n	8008e96 <Drive_State_Machine+0x132>
				Decision();
 8008e56:	f7ff ff3d 	bl	8008cd4 <Decision>
				driveState = DRIVE_STATE_IDLE;
 8008e5a:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
				break;
 8008e60:	e01c      	b.n	8008e9c <Drive_State_Machine+0x138>
				markState = MARK_LINE_OUT;
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <Drive_State_Machine+0x160>)
 8008e64:	2206      	movs	r2, #6
 8008e66:	701a      	strb	r2, [r3, #0]
				if (!Is_Line_Out()) {
 8008e68:	f7ff ff0a 	bl	8008c80 <Is_Line_Out>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <Drive_State_Machine+0x116>
					driveState = DRIVE_STATE_IDLE;
 8008e72:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <Drive_State_Machine+0x144>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
				break ;
 8008e78:	e00f      	b.n	8008e9a <Drive_State_Machine+0x136>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <Drive_State_Machine+0x154>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <Drive_State_Machine+0x158>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d909      	bls.n	8008e9a <Drive_State_Machine+0x136>
					markState = MARK_LINE_OUT;
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <Drive_State_Machine+0x160>)
 8008e88:	2206      	movs	r2, #6
 8008e8a:	701a      	strb	r2, [r3, #0]
				break ;
 8008e8c:	e005      	b.n	8008e9a <Drive_State_Machine+0x136>
				break;
 8008e8e:	bf00      	nop
 8008e90:	e004      	b.n	8008e9c <Drive_State_Machine+0x138>
				break;
 8008e92:	bf00      	nop
 8008e94:	e002      	b.n	8008e9c <Drive_State_Machine+0x138>
				break;
 8008e96:	bf00      	nop
 8008e98:	e000      	b.n	8008e9c <Drive_State_Machine+0x138>
				break ;
 8008e9a:	bf00      	nop
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000001c 	.word	0x2000001c
 8008ea8:	20001480 	.word	0x20001480
 8008eac:	200046f0 	.word	0x200046f0
 8008eb0:	2000003e 	.word	0x2000003e
 8008eb4:	20000044 	.word	0x20000044
 8008eb8:	200002a4 	.word	0x200002a4
 8008ebc:	20004698 	.word	0x20004698
 8008ec0:	2000468c 	.word	0x2000468c
 8008ec4:	2000003c 	.word	0x2000003c

08008ec8 <Second_Drive>:




//1차 주행
void Second_Drive() {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0

	uint8_t	exitEcho = EXIT_ECHO_IDLE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

	uint32_t startTime = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60bb      	str	r3, [r7, #8]
	uint32_t endTime = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]

	uint8_t positioningIdx = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	70fb      	strb	r3, [r7, #3]


	Custom_OLED_Clear();
 8008ede:	f7fc f85e 	bl	8004f9e <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting();
 8008ee2:	f7fc fe6f 	bl	8005bc4 <Pre_Drive_Setting>

	Sensor_Start();
 8008ee6:	f000 fd09 	bl	80098fc <Sensor_Start>
	Motor_Start();
 8008eea:	f7ff fc07 	bl	80086fc <Motor_Start>
	Speed_Control_Start();
 8008eee:	f7ff fc5d 	bl	80087ac <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Positioning(&positioningIdx);
 8008ef2:	1cfb      	adds	r3, r7, #3
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fcf9 	bl	80088ec <Positioning>

		Drive_State_Machine();
 8008efa:	f7ff ff33 	bl	8008d64 <Drive_State_Machine>
		Second_Drive_Cntl();
 8008efe:	f000 f863 	bl	8008fc8 <Second_Drive_Cntl>

		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 8008f02:	f7ff fdb1 	bl	8008a68 <Is_Drive_End>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0f0      	beq.n	8008ef2 <Second_Drive+0x2a>

			Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 8008f10:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <Second_Drive+0xd8>)
 8008f12:	edd3 7a00 	vldr	s15, [r3]
 8008f16:	eddf 0a23 	vldr	s1, [pc, #140]	; 8008fa4 <Second_Drive+0xdc>
 8008f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f1e:	f7ff fd4b 	bl	80089b8 <Drive_Fit_In>

			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 8008f22:	bf00      	nop
 8008f24:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <Second_Drive+0xe0>)
 8008f26:	edd3 7a00 	vldr	s15, [r3]
 8008f2a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008fac <Second_Drive+0xe4>
 8008f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f36:	dcf5      	bgt.n	8008f24 <Second_Drive+0x5c>
				//Drive_Speed_Cntl();
			}

			Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 8008f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f3c:	f7ff fd2b 	bl	8008996 <Custom_Delay_ms>

			endTime = uwTick;
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <Second_Drive+0xe8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	607b      	str	r3, [r7, #4]
			break;
 8008f46:	bf00      	nop
		}
	}

	Motor_Stop();
 8008f48:	f7ff fc28 	bl	800879c <Motor_Stop>
	Speed_Control_Stop();
 8008f4c:	f7ff fc3a 	bl	80087c4 <Speed_Control_Stop>
	Sensor_Stop();
 8008f50:	f000 fcec 	bl	800992c <Sensor_Stop>



	Custom_OLED_Clear();
 8008f54:	f7fc f823 	bl	8004f9e <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d103      	bne.n	8008f66 <Second_Drive+0x9e>
		Custom_OLED_Printf("/0end mark");
 8008f5e:	4815      	ldr	r0, [pc, #84]	; (8008fb4 <Second_Drive+0xec>)
 8008f60:	f7fc f902 	bl	8005168 <Custom_OLED_Printf>
 8008f64:	e002      	b.n	8008f6c <Second_Drive+0xa4>
	}
	else {
		Custom_OLED_Printf("/0line out");
 8008f66:	4814      	ldr	r0, [pc, #80]	; (8008fb8 <Second_Drive+0xf0>)
 8008f68:	f7fc f8fe 	bl	8005168 <Custom_OLED_Printf>
	}

	Custom_OLED_Printf("/1cross: %u", crossCnt);
 8008f6c:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <Second_Drive+0xf4>)
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	4813      	ldr	r0, [pc, #76]	; (8008fc0 <Second_Drive+0xf8>)
 8008f74:	f7fc f8f8 	bl	8005168 <Custom_OLED_Printf>

	Custom_OLED_Printf("%u", endTime - startTime);
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4810      	ldr	r0, [pc, #64]	; (8008fc4 <Second_Drive+0xfc>)
 8008f82:	f7fc f8f1 	bl	8005168 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 8008f86:	bf00      	nop
 8008f88:	f7fc fc1e 	bl	80057c8 <Custom_Switch_Read>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d1fa      	bne.n	8008f88 <Second_Drive+0xc0>
	Custom_OLED_Clear();
 8008f92:	f7fc f804 	bl	8004f9e <Custom_OLED_Clear>
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	2000004c 	.word	0x2000004c
 8008fa4:	3c23d70a 	.word	0x3c23d70a
 8008fa8:	20000030 	.word	0x20000030
 8008fac:	3e4ccccd 	.word	0x3e4ccccd
 8008fb0:	200002a4 	.word	0x200002a4
 8008fb4:	0800d11c 	.word	0x0800d11c
 8008fb8:	0800d128 	.word	0x0800d128
 8008fbc:	20004688 	.word	0x20004688
 8008fc0:	0800d134 	.word	0x0800d134
 8008fc4:	0800d140 	.word	0x0800d140

08008fc8 <Second_Drive_Cntl>:


__STATIC_INLINE void Second_Drive_Cntl() {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0




	switch (markState) {
 8008fcc:	4b36      	ldr	r3, [pc, #216]	; (80090a8 <Second_Drive_Cntl+0xe0>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	d866      	bhi.n	80090a4 <Second_Drive_Cntl+0xdc>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <Second_Drive_Cntl+0x14>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009077 	.word	0x08009077
 8008fe0:	08009089 	.word	0x08009089
 8008fe4:	08009089 	.word	0x08009089
 8008fe8:	0800905b 	.word	0x0800905b
 8008fec:	08008ff5 	.word	0x08008ff5
 8008ff0:	0800909b 	.word	0x0800909b


		case MARK_CROSS:

			// 마크 복구
			if (isReadAllMark == CUSTOM_FALSE) {
 8008ff4:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <Second_Drive_Cntl+0xe4>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11a      	bne.n	8009032 <Second_Drive_Cntl+0x6a>

				// crossCntTable의 crossCnt 번째의 인덱스가 비어있지 않음 경우
				if (crossCntTable[crossCnt] != 0) {
 8008ffc:	4b2c      	ldr	r3, [pc, #176]	; (80090b0 <Second_Drive_Cntl+0xe8>)
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	4b2c      	ldr	r3, [pc, #176]	; (80090b4 <Second_Drive_Cntl+0xec>)
 8009004:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <Second_Drive_Cntl+0x6a>
					 *    n번째 크로스(crossCnt)		0		1		...		50
					 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
					 *
					 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
					 */
					driveDataIdx = crossCntTable[crossCnt] - 1;
 800900c:	4b28      	ldr	r3, [pc, #160]	; (80090b0 <Second_Drive_Cntl+0xe8>)
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	4b28      	ldr	r3, [pc, #160]	; (80090b4 <Second_Drive_Cntl+0xec>)
 8009014:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	4b26      	ldr	r3, [pc, #152]	; (80090b8 <Second_Drive_Cntl+0xf0>)
 800901e:	801a      	strh	r2, [r3, #0]

					// 부스트, 인라인 주행 컨트롤 변수 초기화
					starightBoostCntl = BOOST_CNTL_IDLE;
 8009020:	4b26      	ldr	r3, [pc, #152]	; (80090bc <Second_Drive_Cntl+0xf4>)
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
					curveInlineCntl = INLINE_CNTL_IDLE;
 8009026:	4b26      	ldr	r3, [pc, #152]	; (80090c0 <Second_Drive_Cntl+0xf8>)
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]

					// isReadAllMark update
					isReadAllMark = CUSTOM_TRUE;
 800902c:	4b1f      	ldr	r3, [pc, #124]	; (80090ac <Second_Drive_Cntl+0xe4>)
 800902e:	2201      	movs	r2, #1
 8009030:	701a      	strb	r2, [r3, #0]
				}
			}

			crossCnt += 1;
 8009032:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <Second_Drive_Cntl+0xe8>)
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	3301      	adds	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <Second_Drive_Cntl+0xe8>)
 800903c:	801a      	strh	r2, [r3, #0]

			// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
			markState = driveData[driveDataIdx].markState;
 800903e:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <Second_Drive_Cntl+0xf0>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	4619      	mov	r1, r3
 8009044:	4a1f      	ldr	r2, [pc, #124]	; (80090c4 <Second_Drive_Cntl+0xfc>)
 8009046:	460b      	mov	r3, r1
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	440b      	add	r3, r1
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	3308      	adds	r3, #8
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <Second_Drive_Cntl+0xe0>)
 8009056:	701a      	strb	r2, [r3, #0]

			break;
 8009058:	e024      	b.n	80090a4 <Second_Drive_Cntl+0xdc>


		case MARK_END:

			// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
			markState = driveData[driveDataIdx].markState;
 800905a:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <Second_Drive_Cntl+0xf0>)
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	4619      	mov	r1, r3
 8009060:	4a18      	ldr	r2, [pc, #96]	; (80090c4 <Second_Drive_Cntl+0xfc>)
 8009062:	460b      	mov	r3, r1
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	440b      	add	r3, r1
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	3308      	adds	r3, #8
 800906e:	781a      	ldrb	r2, [r3, #0]
 8009070:	4b0d      	ldr	r3, [pc, #52]	; (80090a8 <Second_Drive_Cntl+0xe0>)
 8009072:	701a      	strb	r2, [r3, #0]

			break;
 8009074:	e016      	b.n	80090a4 <Second_Drive_Cntl+0xdc>



		case MARK_STRAIGHT:

			Set_Second_Drive_Data();
 8009076:	f000 f827 	bl	80090c8 <Set_Second_Drive_Data>

			if (isReadAllMark == CUSTOM_TRUE) {
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <Second_Drive_Cntl+0xe4>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10d      	bne.n	800909e <Second_Drive_Cntl+0xd6>

				// 직선가속
				Second_Drive_Straight_Boost_Cntl();
 8009082:	f000 f87d 	bl	8009180 <Second_Drive_Straight_Boost_Cntl>
			}

			break;
 8009086:	e00a      	b.n	800909e <Second_Drive_Cntl+0xd6>


		case MARK_CURVE_L:
		case MARK_CURVE_R:

			Set_Second_Drive_Data();
 8009088:	f000 f81e 	bl	80090c8 <Set_Second_Drive_Data>

			if (isReadAllMark == CUSTOM_TRUE) {
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <Second_Drive_Cntl+0xe4>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d106      	bne.n	80090a2 <Second_Drive_Cntl+0xda>

				// 곡선 인라인
				Second_Drive_Curve_Inline_Cntl();
 8009094:	f000 fa78 	bl	8009588 <Second_Drive_Curve_Inline_Cntl>
			}
			break;
 8009098:	e003      	b.n	80090a2 <Second_Drive_Cntl+0xda>
			break;
 800909a:	bf00      	nop
 800909c:	e002      	b.n	80090a4 <Second_Drive_Cntl+0xdc>
			break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <Second_Drive_Cntl+0xdc>
			break;
 80090a2:	bf00      	nop
	}
}
 80090a4:	bf00      	nop
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	2000003c 	.word	0x2000003c
 80090ac:	20000048 	.word	0x20000048
 80090b0:	20004688 	.word	0x20004688
 80090b4:	20004488 	.word	0x20004488
 80090b8:	20004484 	.word	0x20004484
 80090bc:	20001481 	.word	0x20001481
 80090c0:	20001482 	.word	0x20001482
 80090c4:	20001484 	.word	0x20001484

080090c8 <Set_Second_Drive_Data>:




__STATIC_INLINE void Set_Second_Drive_Data() {
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataBuffer[driveDataIdx].markState) {
 80090cc:	4b1f      	ldr	r3, [pc, #124]	; (800914c <Set_Second_Drive_Data+0x84>)
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	4619      	mov	r1, r3
 80090d2:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <Set_Second_Drive_Data+0x88>)
 80090d4:	460b      	mov	r3, r1
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	440b      	add	r3, r1
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	3308      	adds	r3, #8
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	4b1c      	ldr	r3, [pc, #112]	; (8009154 <Set_Second_Drive_Data+0x8c>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d02a      	beq.n	8009140 <Set_Second_Drive_Data+0x78>

		// 현재 마크가 시작된 틱값 변경
		curTick_L = 0;
 80090ea:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <Set_Second_Drive_Data+0x90>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
		curTick_R = 0;
 80090f0:	4b1a      	ldr	r3, [pc, #104]	; (800915c <Set_Second_Drive_Data+0x94>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 80090f6:	4b15      	ldr	r3, [pc, #84]	; (800914c <Set_Second_Drive_Data+0x84>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <Set_Second_Drive_Data+0x84>)
 8009100:	801a      	strh	r2, [r3, #0]


		// 주행중 markState와 1차 주행에서 저장된 markState가 동일하지 않다면 비정상적으로 읽었다고 판단
		if (markState != driveData[driveDataIdx].markState) {
 8009102:	4b12      	ldr	r3, [pc, #72]	; (800914c <Set_Second_Drive_Data+0x84>)
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	4619      	mov	r1, r3
 8009108:	4a15      	ldr	r2, [pc, #84]	; (8009160 <Set_Second_Drive_Data+0x98>)
 800910a:	460b      	mov	r3, r1
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	440b      	add	r3, r1
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	3308      	adds	r3, #8
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <Set_Second_Drive_Data+0x8c>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d00f      	beq.n	8009140 <Set_Second_Drive_Data+0x78>

			// 마크 인식 정상 여부를 업데이트
			isReadAllMark = CUSTOM_FALSE;
 8009120:	4b10      	ldr	r3, [pc, #64]	; (8009164 <Set_Second_Drive_Data+0x9c>)
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]

			starightBoostCntl = BOOST_CNTL_IDLE;
 8009126:	4b10      	ldr	r3, [pc, #64]	; (8009168 <Set_Second_Drive_Data+0xa0>)
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]

			targetSpeed = targetSpeed_init;
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <Set_Second_Drive_Data+0xa4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <Set_Second_Drive_Data+0xa8>)
 8009132:	6013      	str	r3, [r2, #0]

			curveInlineCntl = INLINE_CNTL_IDLE;
 8009134:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <Set_Second_Drive_Data+0xac>)
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]

			targetInlineVal = 0;
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <Set_Second_Drive_Data+0xb0>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8009140:	bf00      	nop
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20004484 	.word	0x20004484
 8009150:	20002c84 	.word	0x20002c84
 8009154:	2000003c 	.word	0x2000003c
 8009158:	20001470 	.word	0x20001470
 800915c:	20001474 	.word	0x20001474
 8009160:	20001484 	.word	0x20001484
 8009164:	20000048 	.word	0x20000048
 8009168:	20001481 	.word	0x20001481
 800916c:	2000000c 	.word	0x2000000c
 8009170:	2000002c 	.word	0x2000002c
 8009174:	20001482 	.word	0x20001482
 8009178:	20001478 	.word	0x20001478
 800917c:	00000000 	.word	0x00000000

08009180 <Second_Drive_Straight_Boost_Cntl>:





__STATIC_INLINE void Second_Drive_Straight_Boost_Cntl() {
 8009180:	b5b0      	push	{r4, r5, r7, lr}
 8009182:	af00      	add	r7, sp, #0
	static float	finalDeceleEndTick_L;
	static float	finalDeceleEndTick_R;


	// 직선 가속
	switch (starightBoostCntl) {
 8009184:	4bb6      	ldr	r3, [pc, #728]	; (8009460 <Second_Drive_Straight_Boost_Cntl+0x2e0>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b03      	cmp	r3, #3
 800918a:	f200 81ea 	bhi.w	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
 800918e:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <Second_Drive_Straight_Boost_Cntl+0x14>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091a5 	.word	0x080091a5
 8009198:	0800938d 	.word	0x0800938d
 800919c:	080093d9 	.word	0x080093d9
 80091a0:	080094b1 	.word	0x080094b1

			// 초기 상태
			case BOOST_CNTL_IDLE :

					// 최적화 레벨이 직선 가속 이상 일 때
					if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 80091a4:	4baf      	ldr	r3, [pc, #700]	; (8009464 <Second_Drive_Straight_Boost_Cntl+0x2e4>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 81d9 	beq.w	8009560 <Second_Drive_Straight_Boost_Cntl+0x3e0>


						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 80091ae:	4bae      	ldr	r3, [pc, #696]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	4aad      	ldr	r2, [pc, #692]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 80091b6:	460b      	mov	r3, r1
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	440b      	add	r3, r1
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_L);
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091ca:	4ba7      	ldr	r3, [pc, #668]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	4aa6      	ldr	r2, [pc, #664]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 80091d2:	460b      	mov	r3, r1
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	440b      	add	r3, r1
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80091e6:	4ba2      	ldr	r3, [pc, #648]	; (8009470 <Second_Drive_Straight_Boost_Cntl+0x2f0>)
 80091e8:	edd3 7a00 	vldr	s15, [r3]
 80091ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80091f0:	4ba0      	ldr	r3, [pc, #640]	; (8009474 <Second_Drive_Straight_Boost_Cntl+0x2f4>)
 80091f2:	edd3 7a00 	vldr	s15, [r3]
 80091f6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80091fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fe:	dd03      	ble.n	8009208 <Second_Drive_Straight_Boost_Cntl+0x88>
 8009200:	4b9c      	ldr	r3, [pc, #624]	; (8009474 <Second_Drive_Straight_Boost_Cntl+0x2f4>)
 8009202:	edd3 7a00 	vldr	s15, [r3]
 8009206:	e012      	b.n	800922e <Second_Drive_Straight_Boost_Cntl+0xae>
 8009208:	4b97      	ldr	r3, [pc, #604]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	4619      	mov	r1, r3
 800920e:	4a97      	ldr	r2, [pc, #604]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 8009210:	460b      	mov	r3, r1
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	440b      	add	r3, r1
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009224:	4b92      	ldr	r3, [pc, #584]	; (8009470 <Second_Drive_Straight_Boost_Cntl+0x2f0>)
 8009226:	edd3 7a00 	vldr	s15, [r3]
 800922a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800922e:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 8009232:	4b91      	ldr	r3, [pc, #580]	; (8009478 <Second_Drive_Straight_Boost_Cntl+0x2f8>)
 8009234:	edc3 7a00 	vstr	s15, [r3]

						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 8009238:	4b8b      	ldr	r3, [pc, #556]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	4619      	mov	r1, r3
 800923e:	4a8b      	ldr	r2, [pc, #556]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 8009240:	460b      	mov	r3, r1
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	440b      	add	r3, r1
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_R);
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009256:	4b84      	ldr	r3, [pc, #528]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	4619      	mov	r1, r3
 800925c:	4a83      	ldr	r2, [pc, #524]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 800925e:	460b      	mov	r3, r1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	440b      	add	r3, r1
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009274:	4b7e      	ldr	r3, [pc, #504]	; (8009470 <Second_Drive_Straight_Boost_Cntl+0x2f0>)
 8009276:	edd3 7a00 	vldr	s15, [r3]
 800927a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800927e:	4b7d      	ldr	r3, [pc, #500]	; (8009474 <Second_Drive_Straight_Boost_Cntl+0x2f4>)
 8009280:	edd3 7a00 	vldr	s15, [r3]
 8009284:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928c:	dd03      	ble.n	8009296 <Second_Drive_Straight_Boost_Cntl+0x116>
 800928e:	4b79      	ldr	r3, [pc, #484]	; (8009474 <Second_Drive_Straight_Boost_Cntl+0x2f4>)
 8009290:	edd3 7a00 	vldr	s15, [r3]
 8009294:	e013      	b.n	80092be <Second_Drive_Straight_Boost_Cntl+0x13e>
 8009296:	4b74      	ldr	r3, [pc, #464]	; (8009468 <Second_Drive_Straight_Boost_Cntl+0x2e8>)
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	4619      	mov	r1, r3
 800929c:	4a73      	ldr	r2, [pc, #460]	; (800946c <Second_Drive_Straight_Boost_Cntl+0x2ec>)
 800929e:	460b      	mov	r3, r1
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	440b      	add	r3, r1
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	3304      	adds	r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092b4:	4b6e      	ldr	r3, [pc, #440]	; (8009470 <Second_Drive_Straight_Boost_Cntl+0x2f0>)
 80092b6:	edd3 7a00 	vldr	s15, [r3]
 80092ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092be:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 80092c2:	4b6e      	ldr	r3, [pc, #440]	; (800947c <Second_Drive_Straight_Boost_Cntl+0x2fc>)
 80092c4:	edc3 7a00 	vstr	s15, [r3]

						// 최소 부스트 거리 이상일 때
						if (curTick_L < finalDeceleEndTick_L - acceleStartTick \
 80092c8:	4b6d      	ldr	r3, [pc, #436]	; (8009480 <Second_Drive_Straight_Boost_Cntl+0x300>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092d4:	4b68      	ldr	r3, [pc, #416]	; (8009478 <Second_Drive_Straight_Boost_Cntl+0x2f8>)
 80092d6:	edd3 6a00 	vldr	s13, [r3]
 80092da:	4b6a      	ldr	r3, [pc, #424]	; (8009484 <Second_Drive_Straight_Boost_Cntl+0x304>)
 80092dc:	edd3 7a00 	vldr	s15, [r3]
 80092e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80092e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ec:	d400      	bmi.n	80092f0 <Second_Drive_Straight_Boost_Cntl+0x170>

							starightBoostCntl = BOOST_CNTL_ACCELE;
						}
					}

					break ;
 80092ee:	e137      	b.n	8009560 <Second_Drive_Straight_Boost_Cntl+0x3e0>
						 && curTick_R < finalDeceleEndTick_R - acceleStartTick) {
 80092f0:	4b65      	ldr	r3, [pc, #404]	; (8009488 <Second_Drive_Straight_Boost_Cntl+0x308>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092fc:	4b5f      	ldr	r3, [pc, #380]	; (800947c <Second_Drive_Straight_Boost_Cntl+0x2fc>)
 80092fe:	edd3 6a00 	vldr	s13, [r3]
 8009302:	4b60      	ldr	r3, [pc, #384]	; (8009484 <Second_Drive_Straight_Boost_Cntl+0x304>)
 8009304:	edd3 7a00 	vldr	s15, [r3]
 8009308:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800930c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009314:	d400      	bmi.n	8009318 <Second_Drive_Straight_Boost_Cntl+0x198>
					break ;
 8009316:	e123      	b.n	8009560 <Second_Drive_Straight_Boost_Cntl+0x3e0>
							deceleEndTickCoef = 2 * decele / TICK_PER_M;
 8009318:	4b5c      	ldr	r3, [pc, #368]	; (800948c <Second_Drive_Straight_Boost_Cntl+0x30c>)
 800931a:	edd3 7a00 	vldr	s15, [r3]
 800931e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009322:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8009490 <Second_Drive_Straight_Boost_Cntl+0x310>
 8009326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800932a:	4b5a      	ldr	r3, [pc, #360]	; (8009494 <Second_Drive_Straight_Boost_Cntl+0x314>)
 800932c:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009330:	4b58      	ldr	r3, [pc, #352]	; (8009494 <Second_Drive_Straight_Boost_Cntl+0x314>)
 8009332:	ed93 7a00 	vldr	s14, [r3]
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <Second_Drive_Straight_Boost_Cntl+0x2f8>)
 8009338:	edd3 7a00 	vldr	s15, [r3]
 800933c:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 8009340:	4b55      	ldr	r3, [pc, #340]	; (8009498 <Second_Drive_Straight_Boost_Cntl+0x318>)
 8009342:	edd3 6a00 	vldr	s13, [r3]
 8009346:	4b54      	ldr	r3, [pc, #336]	; (8009498 <Second_Drive_Straight_Boost_Cntl+0x318>)
 8009348:	edd3 7a00 	vldr	s15, [r3]
 800934c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009350:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009354:	4b51      	ldr	r3, [pc, #324]	; (800949c <Second_Drive_Straight_Boost_Cntl+0x31c>)
 8009356:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 800935a:	4b4e      	ldr	r3, [pc, #312]	; (8009494 <Second_Drive_Straight_Boost_Cntl+0x314>)
 800935c:	ed93 7a00 	vldr	s14, [r3]
 8009360:	4b46      	ldr	r3, [pc, #280]	; (800947c <Second_Drive_Straight_Boost_Cntl+0x2fc>)
 8009362:	edd3 7a00 	vldr	s15, [r3]
 8009366:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 800936a:	4b4b      	ldr	r3, [pc, #300]	; (8009498 <Second_Drive_Straight_Boost_Cntl+0x318>)
 800936c:	edd3 6a00 	vldr	s13, [r3]
 8009370:	4b49      	ldr	r3, [pc, #292]	; (8009498 <Second_Drive_Straight_Boost_Cntl+0x318>)
 8009372:	edd3 7a00 	vldr	s15, [r3]
 8009376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800937a:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 800937e:	4b48      	ldr	r3, [pc, #288]	; (80094a0 <Second_Drive_Straight_Boost_Cntl+0x320>)
 8009380:	edc3 7a00 	vstr	s15, [r3]
							starightBoostCntl = BOOST_CNTL_ACCELE;
 8009384:	4b36      	ldr	r3, [pc, #216]	; (8009460 <Second_Drive_Straight_Boost_Cntl+0x2e0>)
 8009386:	2201      	movs	r2, #1
 8009388:	701a      	strb	r2, [r3, #0]
					break ;
 800938a:	e0e9      	b.n	8009560 <Second_Drive_Straight_Boost_Cntl+0x3e0>

			// 부스트 가속 컨드롤
			case BOOST_CNTL_ACCELE :

					// 직선 구간 진입 후 ACCELE_START_TICK만큼 지났을 때 부스트
					if (curTick_L > acceleStartTick \
 800938c:	4b3c      	ldr	r3, [pc, #240]	; (8009480 <Second_Drive_Straight_Boost_Cntl+0x300>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009398:	4b3a      	ldr	r3, [pc, #232]	; (8009484 <Second_Drive_Straight_Boost_Cntl+0x304>)
 800939a:	edd3 7a00 	vldr	s15, [r3]
 800939e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a6:	dc00      	bgt.n	80093aa <Second_Drive_Straight_Boost_Cntl+0x22a>
						targetSpeed = boostSpeed;

						starightBoostCntl = BOOST_CNTL_DECELE;
					}

					break;
 80093a8:	e0db      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
					 && curTick_R > acceleStartTick) {
 80093aa:	4b37      	ldr	r3, [pc, #220]	; (8009488 <Second_Drive_Straight_Boost_Cntl+0x308>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093b6:	4b33      	ldr	r3, [pc, #204]	; (8009484 <Second_Drive_Straight_Boost_Cntl+0x304>)
 80093b8:	edd3 7a00 	vldr	s15, [r3]
 80093bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c4:	dc00      	bgt.n	80093c8 <Second_Drive_Straight_Boost_Cntl+0x248>
					break;
 80093c6:	e0cc      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
						targetSpeed = boostSpeed;
 80093c8:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <Second_Drive_Straight_Boost_Cntl+0x324>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a36      	ldr	r2, [pc, #216]	; (80094a8 <Second_Drive_Straight_Boost_Cntl+0x328>)
 80093ce:	6013      	str	r3, [r2, #0]
						starightBoostCntl = BOOST_CNTL_DECELE;
 80093d0:	4b23      	ldr	r3, [pc, #140]	; (8009460 <Second_Drive_Straight_Boost_Cntl+0x2e0>)
 80093d2:	2202      	movs	r2, #2
 80093d4:	701a      	strb	r2, [r3, #0]
					break;
 80093d6:	e0c4      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
					 * 	 <= (curSpeed * curSpeed - targetSpeed_init * targetSpeed_init) / (2 * decele) (감속도를 토대로 감속하는데에 필요한 감속거리)
					 *
					 * 위의 원본 식에서 고정된 값을 상수로 만든 뒤, 나눗셈을 없애면 식이 밑의 식이 도출됨
					 */

					if (deceleEndTickCoef_L < curSpeed * curSpeed + curTick_L * deceleEndTickCoef \
 80093d8:	4b34      	ldr	r3, [pc, #208]	; (80094ac <Second_Drive_Straight_Boost_Cntl+0x32c>)
 80093da:	ed93 7a00 	vldr	s14, [r3]
 80093de:	4b33      	ldr	r3, [pc, #204]	; (80094ac <Second_Drive_Straight_Boost_Cntl+0x32c>)
 80093e0:	edd3 7a00 	vldr	s15, [r3]
 80093e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <Second_Drive_Straight_Boost_Cntl+0x300>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80093f4:	4b27      	ldr	r3, [pc, #156]	; (8009494 <Second_Drive_Straight_Boost_Cntl+0x314>)
 80093f6:	edd3 7a00 	vldr	s15, [r3]
 80093fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009402:	4b26      	ldr	r3, [pc, #152]	; (800949c <Second_Drive_Straight_Boost_Cntl+0x31c>)
 8009404:	edd3 7a00 	vldr	s15, [r3]
 8009408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800940c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009410:	dc1d      	bgt.n	800944e <Second_Drive_Straight_Boost_Cntl+0x2ce>
					 || deceleEndTickCoef_R < curSpeed * curSpeed + curTick_R * deceleEndTickCoef) {
 8009412:	4b26      	ldr	r3, [pc, #152]	; (80094ac <Second_Drive_Straight_Boost_Cntl+0x32c>)
 8009414:	ed93 7a00 	vldr	s14, [r3]
 8009418:	4b24      	ldr	r3, [pc, #144]	; (80094ac <Second_Drive_Straight_Boost_Cntl+0x32c>)
 800941a:	edd3 7a00 	vldr	s15, [r3]
 800941e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009422:	4b19      	ldr	r3, [pc, #100]	; (8009488 <Second_Drive_Straight_Boost_Cntl+0x308>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800942e:	4b19      	ldr	r3, [pc, #100]	; (8009494 <Second_Drive_Straight_Boost_Cntl+0x314>)
 8009430:	edd3 7a00 	vldr	s15, [r3]
 8009434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800943c:	4b18      	ldr	r3, [pc, #96]	; (80094a0 <Second_Drive_Straight_Boost_Cntl+0x320>)
 800943e:	edd3 7a00 	vldr	s15, [r3]
 8009442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	dc00      	bgt.n	800944e <Second_Drive_Straight_Boost_Cntl+0x2ce>
						targetSpeed = targetSpeed_init;

						starightBoostCntl = BOOST_CNTL_END;
					}

					break ;
 800944c:	e089      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
						targetSpeed = targetSpeed_init;
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <Second_Drive_Straight_Boost_Cntl+0x318>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <Second_Drive_Straight_Boost_Cntl+0x328>)
 8009454:	6013      	str	r3, [r2, #0]
						starightBoostCntl = BOOST_CNTL_END;
 8009456:	4b02      	ldr	r3, [pc, #8]	; (8009460 <Second_Drive_Straight_Boost_Cntl+0x2e0>)
 8009458:	2203      	movs	r2, #3
 800945a:	701a      	strb	r2, [r3, #0]
					break ;
 800945c:	e081      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
 800945e:	bf00      	nop
 8009460:	20001481 	.word	0x20001481
 8009464:	2000468a 	.word	0x2000468a
 8009468:	20004484 	.word	0x20004484
 800946c:	20001484 	.word	0x20001484
 8009470:	20000058 	.word	0x20000058
 8009474:	20000054 	.word	0x20000054
 8009478:	2000469c 	.word	0x2000469c
 800947c:	200046a0 	.word	0x200046a0
 8009480:	20001470 	.word	0x20001470
 8009484:	20000050 	.word	0x20000050
 8009488:	20001474 	.word	0x20001474
 800948c:	20000028 	.word	0x20000028
 8009490:	478f8d33 	.word	0x478f8d33
 8009494:	200046a4 	.word	0x200046a4
 8009498:	2000000c 	.word	0x2000000c
 800949c:	200046a8 	.word	0x200046a8
 80094a0:	200046ac 	.word	0x200046ac
 80094a4:	20000034 	.word	0x20000034
 80094a8:	2000002c 	.word	0x2000002c
 80094ac:	20000030 	.word	0x20000030

			// 부스트가 종료되었을 때
			case BOOST_CNTL_END :

					// 직선이 10cm 남았을 경우
					if (curTick_L > driveData[driveDataIdx].tickCnt_L - 0.1 * TICK_PER_M \
 80094b0:	4b2f      	ldr	r3, [pc, #188]	; (8009570 <Second_Drive_Straight_Boost_Cntl+0x3f0>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7f7 f83d 	bl	8000534 <__aeabi_i2d>
 80094ba:	4604      	mov	r4, r0
 80094bc:	460d      	mov	r5, r1
 80094be:	4b2d      	ldr	r3, [pc, #180]	; (8009574 <Second_Drive_Straight_Boost_Cntl+0x3f4>)
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	4619      	mov	r1, r3
 80094c4:	4a2c      	ldr	r2, [pc, #176]	; (8009578 <Second_Drive_Straight_Boost_Cntl+0x3f8>)
 80094c6:	460b      	mov	r3, r1
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	440b      	add	r3, r1
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f7 f82e 	bl	8000534 <__aeabi_i2d>
 80094d8:	a323      	add	r3, pc, #140	; (adr r3, 8009568 <Second_Drive_Straight_Boost_Cntl+0x3e8>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f7 fb1d 	bl	8000b28 <__aeabi_dcmpgt>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d123      	bne.n	800953c <Second_Drive_Straight_Boost_Cntl+0x3bc>
					 || curTick_R > driveData[driveDataIdx].tickCnt_R - 0.1 * TICK_PER_M) {
 80094f4:	4b21      	ldr	r3, [pc, #132]	; (800957c <Second_Drive_Straight_Boost_Cntl+0x3fc>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f7 f81b 	bl	8000534 <__aeabi_i2d>
 80094fe:	4604      	mov	r4, r0
 8009500:	460d      	mov	r5, r1
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <Second_Drive_Straight_Boost_Cntl+0x3f4>)
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	4619      	mov	r1, r3
 8009508:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <Second_Drive_Straight_Boost_Cntl+0x3f8>)
 800950a:	460b      	mov	r3, r1
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	440b      	add	r3, r1
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	3304      	adds	r3, #4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f7f7 f80b 	bl	8000534 <__aeabi_i2d>
 800951e:	a312      	add	r3, pc, #72	; (adr r3, 8009568 <Second_Drive_Straight_Boost_Cntl+0x3e8>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f7f6 feb8 	bl	8000298 <__aeabi_dsub>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f7 fafa 	bl	8000b28 <__aeabi_dcmpgt>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d100      	bne.n	800953c <Second_Drive_Straight_Boost_Cntl+0x3bc>
						crossCnt = driveData[driveDataIdx].crossCnt;

						starightBoostCntl = BOOST_CNTL_IDLE;
					}

					break ;
 800953a:	e012      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
						crossCnt = driveData[driveDataIdx].crossCnt;
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <Second_Drive_Straight_Boost_Cntl+0x3f4>)
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	4619      	mov	r1, r3
 8009542:	4a0d      	ldr	r2, [pc, #52]	; (8009578 <Second_Drive_Straight_Boost_Cntl+0x3f8>)
 8009544:	460b      	mov	r3, r1
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	440b      	add	r3, r1
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	3309      	adds	r3, #9
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	b29a      	uxth	r2, r3
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <Second_Drive_Straight_Boost_Cntl+0x400>)
 8009556:	801a      	strh	r2, [r3, #0]
						starightBoostCntl = BOOST_CNTL_IDLE;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <Second_Drive_Straight_Boost_Cntl+0x404>)
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
					break ;
 800955e:	e000      	b.n	8009562 <Second_Drive_Straight_Boost_Cntl+0x3e2>
					break ;
 8009560:	bf00      	nop
	}
}
 8009562:	bf00      	nop
 8009564:	bdb0      	pop	{r4, r5, r7, pc}
 8009566:	bf00      	nop
 8009568:	00000000 	.word	0x00000000
 800956c:	40bcb5d7 	.word	0x40bcb5d7
 8009570:	20001470 	.word	0x20001470
 8009574:	20004484 	.word	0x20004484
 8009578:	20001484 	.word	0x20001484
 800957c:	20001474 	.word	0x20001474
 8009580:	20004688 	.word	0x20004688
 8009584:	20001481 	.word	0x20001481

08009588 <Second_Drive_Curve_Inline_Cntl>:





__STATIC_INLINE void Second_Drive_Curve_Inline_Cntl() {
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
	static float inlineEndTick_L;
	static float inlineEndTick_R;


	// 곡선 인라인
	switch (curveInlineCntl) {
 800958c:	4b80      	ldr	r3, [pc, #512]	; (8009790 <Second_Drive_Curve_Inline_Cntl+0x208>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b03      	cmp	r3, #3
 8009592:	f200 80f7 	bhi.w	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <Second_Drive_Curve_Inline_Cntl+0x14>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095ad 	.word	0x080095ad
 80095a0:	08009671 	.word	0x08009671
 80095a4:	080096e1 	.word	0x080096e1
 80095a8:	0800973d 	.word	0x0800973d

			// 초기 상태
			case INLINE_CNTL_IDLE :

				// 최적화 레벨이 곡선 가속 이상 일 때
				if (optimizeLevel >= OPTIMIZE_LEVEL_CURVE) {
 80095ac:	4b79      	ldr	r3, [pc, #484]	; (8009794 <Second_Drive_Curve_Inline_Cntl+0x20c>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	f240 80e4 	bls.w	800977e <Second_Drive_Curve_Inline_Cntl+0x1f6>

						// 곡선이 36cm 미만일 때 (90도 곡선 미만일 경우)
						//if (driveData[driveDataIdx].tickCnt_L + driveData[driveDataIdx].tickCnt_R < 2 * 0.36 * TICK_PER_M) {

							inlineEndTick_L = (1 - INLINE_END_RATIO) * driveData[driveDataIdx].tickCnt_L;
 80095b6:	4b78      	ldr	r3, [pc, #480]	; (8009798 <Second_Drive_Curve_Inline_Cntl+0x210>)
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4a77      	ldr	r2, [pc, #476]	; (800979c <Second_Drive_Curve_Inline_Cntl+0x214>)
 80095be:	460b      	mov	r3, r1
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	440b      	add	r3, r1
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	ee07 3a90 	vmov	s15, r3
 80095ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095d2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80097a0 <Second_Drive_Curve_Inline_Cntl+0x218>
 80095d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095da:	4b72      	ldr	r3, [pc, #456]	; (80097a4 <Second_Drive_Curve_Inline_Cntl+0x21c>)
 80095dc:	edc3 7a00 	vstr	s15, [r3]
							inlineEndTick_R = (1 - INLINE_END_RATIO) * driveData[driveDataIdx].tickCnt_R;
 80095e0:	4b6d      	ldr	r3, [pc, #436]	; (8009798 <Second_Drive_Curve_Inline_Cntl+0x210>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	4619      	mov	r1, r3
 80095e6:	4a6d      	ldr	r2, [pc, #436]	; (800979c <Second_Drive_Curve_Inline_Cntl+0x214>)
 80095e8:	460b      	mov	r3, r1
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	440b      	add	r3, r1
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	3304      	adds	r3, #4
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095fe:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80097a0 <Second_Drive_Curve_Inline_Cntl+0x218>
 8009602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009606:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <Second_Drive_Curve_Inline_Cntl+0x220>)
 8009608:	edc3 7a00 	vstr	s15, [r3]

							// 곡선 막판에 인라인 재진입 방지
							if (curTick_L < inlineEndTick_L \
 800960c:	4b67      	ldr	r3, [pc, #412]	; (80097ac <Second_Drive_Curve_Inline_Cntl+0x224>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009618:	4b62      	ldr	r3, [pc, #392]	; (80097a4 <Second_Drive_Curve_Inline_Cntl+0x21c>)
 800961a:	edd3 7a00 	vldr	s15, [r3]
 800961e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009626:	d400      	bmi.n	800962a <Second_Drive_Curve_Inline_Cntl+0xa2>
							}
						//}
					}


					break ;
 8009628:	e0a9      	b.n	800977e <Second_Drive_Curve_Inline_Cntl+0x1f6>
							 && curTick_R < inlineEndTick_R) {
 800962a:	4b61      	ldr	r3, [pc, #388]	; (80097b0 <Second_Drive_Curve_Inline_Cntl+0x228>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009636:	4b5c      	ldr	r3, [pc, #368]	; (80097a8 <Second_Drive_Curve_Inline_Cntl+0x220>)
 8009638:	edd3 7a00 	vldr	s15, [r3]
 800963c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009644:	d400      	bmi.n	8009648 <Second_Drive_Curve_Inline_Cntl+0xc0>
					break ;
 8009646:	e09a      	b.n	800977e <Second_Drive_Curve_Inline_Cntl+0x1f6>
								if (markState == MARK_CURVE_R) {
 8009648:	4b5a      	ldr	r3, [pc, #360]	; (80097b4 <Second_Drive_Curve_Inline_Cntl+0x22c>)
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d103      	bne.n	8009658 <Second_Drive_Curve_Inline_Cntl+0xd0>
									targetInlineVal = -1 * ABS_INLINE_TARGET_POSITION;
 8009650:	4b59      	ldr	r3, [pc, #356]	; (80097b8 <Second_Drive_Curve_Inline_Cntl+0x230>)
 8009652:	4a5a      	ldr	r2, [pc, #360]	; (80097bc <Second_Drive_Curve_Inline_Cntl+0x234>)
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	e007      	b.n	8009668 <Second_Drive_Curve_Inline_Cntl+0xe0>
								else if (markState == MARK_CURVE_L) {
 8009658:	4b56      	ldr	r3, [pc, #344]	; (80097b4 <Second_Drive_Curve_Inline_Cntl+0x22c>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d103      	bne.n	8009668 <Second_Drive_Curve_Inline_Cntl+0xe0>
									targetInlineVal = ABS_INLINE_TARGET_POSITION;
 8009660:	4b55      	ldr	r3, [pc, #340]	; (80097b8 <Second_Drive_Curve_Inline_Cntl+0x230>)
 8009662:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8009666:	601a      	str	r2, [r3, #0]
								curveInlineCntl = INLINE_CNTL_CURVE_IN;
 8009668:	4b49      	ldr	r3, [pc, #292]	; (8009790 <Second_Drive_Curve_Inline_Cntl+0x208>)
 800966a:	2201      	movs	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
					break ;
 800966e:	e086      	b.n	800977e <Second_Drive_Curve_Inline_Cntl+0x1f6>

			// 곡선 진입
			case INLINE_CNTL_CURVE_IN :

					// 곡선이 안전거리 미만 남았거나 curInlineVal == targetInlineVal일 경우 곡선 진입 종료
					if (curTick_L > inlineEndTick_L \
 8009670:	4b4e      	ldr	r3, [pc, #312]	; (80097ac <Second_Drive_Curve_Inline_Cntl+0x224>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800967c:	4b49      	ldr	r3, [pc, #292]	; (80097a4 <Second_Drive_Curve_Inline_Cntl+0x21c>)
 800967e:	edd3 7a00 	vldr	s15, [r3]
 8009682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968a:	dc13      	bgt.n	80096b4 <Second_Drive_Curve_Inline_Cntl+0x12c>
					 || curTick_R > inlineEndTick_R \
 800968c:	4b48      	ldr	r3, [pc, #288]	; (80097b0 <Second_Drive_Curve_Inline_Cntl+0x228>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009698:	4b43      	ldr	r3, [pc, #268]	; (80097a8 <Second_Drive_Curve_Inline_Cntl+0x220>)
 800969a:	edd3 7a00 	vldr	s15, [r3]
 800969e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a6:	dc05      	bgt.n	80096b4 <Second_Drive_Curve_Inline_Cntl+0x12c>
					 || curInlineVal == targetInlineVal) {
 80096a8:	4b45      	ldr	r3, [pc, #276]	; (80097c0 <Second_Drive_Curve_Inline_Cntl+0x238>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b42      	ldr	r3, [pc, #264]	; (80097b8 <Second_Drive_Curve_Inline_Cntl+0x230>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d166      	bne.n	8009782 <Second_Drive_Curve_Inline_Cntl+0x1fa>

						inlinePositioningTick_L = curTick_L;
 80096b4:	4b3d      	ldr	r3, [pc, #244]	; (80097ac <Second_Drive_Curve_Inline_Cntl+0x224>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096c0:	4b40      	ldr	r3, [pc, #256]	; (80097c4 <Second_Drive_Curve_Inline_Cntl+0x23c>)
 80096c2:	edc3 7a00 	vstr	s15, [r3]
						inlinePositioningTick_R = curTick_R;
 80096c6:	4b3a      	ldr	r3, [pc, #232]	; (80097b0 <Second_Drive_Curve_Inline_Cntl+0x228>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096d2:	4b3d      	ldr	r3, [pc, #244]	; (80097c8 <Second_Drive_Curve_Inline_Cntl+0x240>)
 80096d4:	edc3 7a00 	vstr	s15, [r3]

						curveInlineCntl = INLINE_CNTL_CURVE_OUT;
 80096d8:	4b2d      	ldr	r3, [pc, #180]	; (8009790 <Second_Drive_Curve_Inline_Cntl+0x208>)
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
					}

					break;
 80096de:	e050      	b.n	8009782 <Second_Drive_Curve_Inline_Cntl+0x1fa>

			// 곡선 탈출
			case INLINE_CNTL_CURVE_OUT :

					// 곡선이 (curveOutPointTick + 안전거리) 미만 남았을 경우
					if (curTick_L > inlineEndTick_L - inlinePositioningTick_L \
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <Second_Drive_Curve_Inline_Cntl+0x224>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ec:	4b2d      	ldr	r3, [pc, #180]	; (80097a4 <Second_Drive_Curve_Inline_Cntl+0x21c>)
 80096ee:	edd3 6a00 	vldr	s13, [r3]
 80096f2:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <Second_Drive_Curve_Inline_Cntl+0x23c>)
 80096f4:	edd3 7a00 	vldr	s15, [r3]
 80096f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80096fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009704:	dc13      	bgt.n	800972e <Second_Drive_Curve_Inline_Cntl+0x1a6>
					 || curTick_R > inlineEndTick_R - inlinePositioningTick_R) {
 8009706:	4b2a      	ldr	r3, [pc, #168]	; (80097b0 <Second_Drive_Curve_Inline_Cntl+0x228>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009712:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <Second_Drive_Curve_Inline_Cntl+0x220>)
 8009714:	edd3 6a00 	vldr	s13, [r3]
 8009718:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <Second_Drive_Curve_Inline_Cntl+0x240>)
 800971a:	edd3 7a00 	vldr	s15, [r3]
 800971e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972a:	dc00      	bgt.n	800972e <Second_Drive_Curve_Inline_Cntl+0x1a6>
						targetInlineVal = 0;

						curveInlineCntl = INLINE_CNTL_END;
					}

					break ;
 800972c:	e02a      	b.n	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>
						targetInlineVal = 0;
 800972e:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <Second_Drive_Curve_Inline_Cntl+0x230>)
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
						curveInlineCntl = INLINE_CNTL_END;
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <Second_Drive_Curve_Inline_Cntl+0x208>)
 8009736:	2203      	movs	r2, #3
 8009738:	701a      	strb	r2, [r3, #0]
					break ;
 800973a:	e023      	b.n	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>

			// 곡선 종료
			case INLINE_CNTL_END :

					// 곡선이 안전거리 미만 남았을 경우
					if (curTick_L > inlineEndTick_L \
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <Second_Drive_Curve_Inline_Cntl+0x224>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <Second_Drive_Curve_Inline_Cntl+0x21c>)
 800974a:	edd3 7a00 	vldr	s15, [r3]
 800974e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009756:	dc0e      	bgt.n	8009776 <Second_Drive_Curve_Inline_Cntl+0x1ee>
					 || curTick_R > inlineEndTick_R) {
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <Second_Drive_Curve_Inline_Cntl+0x228>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009764:	4b10      	ldr	r3, [pc, #64]	; (80097a8 <Second_Drive_Curve_Inline_Cntl+0x220>)
 8009766:	edd3 7a00 	vldr	s15, [r3]
 800976a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	dc00      	bgt.n	8009776 <Second_Drive_Curve_Inline_Cntl+0x1ee>

						curveInlineCntl = INLINE_CNTL_IDLE;
					}

					break ;
 8009774:	e006      	b.n	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>
						curveInlineCntl = INLINE_CNTL_IDLE;
 8009776:	4b06      	ldr	r3, [pc, #24]	; (8009790 <Second_Drive_Curve_Inline_Cntl+0x208>)
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
					break ;
 800977c:	e002      	b.n	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>
					break ;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <Second_Drive_Curve_Inline_Cntl+0x1fc>
					break;
 8009782:	bf00      	nop
	}
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20001482 	.word	0x20001482
 8009794:	2000468a 	.word	0x2000468a
 8009798:	20004484 	.word	0x20004484
 800979c:	20001484 	.word	0x20001484
 80097a0:	3f4ccccd 	.word	0x3f4ccccd
 80097a4:	200046b0 	.word	0x200046b0
 80097a8:	200046b4 	.word	0x200046b4
 80097ac:	20001470 	.word	0x20001470
 80097b0:	20001474 	.word	0x20001474
 80097b4:	2000003c 	.word	0x2000003c
 80097b8:	20001478 	.word	0x20001478
 80097bc:	fffff060 	.word	0xfffff060
 80097c0:	2000147c 	.word	0x2000147c
 80097c4:	200046b8 	.word	0x200046b8
 80097c8:	200046bc 	.word	0x200046bc

080097cc <LL_ADC_Enable>:
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f043 0201 	orr.w	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	609a      	str	r2, [r3, #8]
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <LL_ADC_Disable>:
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f023 0201 	bic.w	r2, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	609a      	str	r2, [r3, #8]
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <LL_TIM_EnableCounter>:
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f043 0201 	orr.w	r2, r3, #1
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	601a      	str	r2, [r3, #0]
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <LL_TIM_DisableCounter>:
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f023 0201 	bic.w	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	601a      	str	r2, [r3, #0]
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <LL_TIM_EnableIT_UPDATE>:
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f043 0201 	orr.w	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <LL_TIM_DisableIT_UPDATE>:
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f023 0201 	bic.w	r2, r3, #1
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60da      	str	r2, [r3, #12]
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8009894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3b01      	subs	r3, #1
 800989c:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800989e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80098ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098b8:	f043 0301 	orr.w	r3, r3, #1
 80098bc:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80098be:	bf00      	nop
 80098c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d1f8      	bne.n	80098c0 <Custom_Delay_us+0x34>
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff ffcc 	bl	800988c <Custom_Delay_us>
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <Sensor_Start>:





void Sensor_Start() {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0

	LL_ADC_Enable(ADC1);
 8009900:	4808      	ldr	r0, [pc, #32]	; (8009924 <Sensor_Start+0x28>)
 8009902:	f7ff ff63 	bl	80097cc <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 8009906:	200a      	movs	r0, #10
 8009908:	f7ff ffe8 	bl	80098dc <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 800990c:	4806      	ldr	r0, [pc, #24]	; (8009928 <Sensor_Start+0x2c>)
 800990e:	f7ff ff7d 	bl	800980c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 8009912:	4805      	ldr	r0, [pc, #20]	; (8009928 <Sensor_Start+0x2c>)
 8009914:	f7ff ff9a 	bl	800984c <LL_TIM_EnableIT_UPDATE>
	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 8009918:	200a      	movs	r0, #10
 800991a:	f7ff ffdf 	bl	80098dc <Custom_Delay_ms>
}
 800991e:	bf00      	nop
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40012000 	.word	0x40012000
 8009928:	40000c00 	.word	0x40000c00

0800992c <Sensor_Stop>:




void Sensor_Stop() {
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 8009930:	4805      	ldr	r0, [pc, #20]	; (8009948 <Sensor_Stop+0x1c>)
 8009932:	f7ff ff5b 	bl	80097ec <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 8009936:	4805      	ldr	r0, [pc, #20]	; (800994c <Sensor_Stop+0x20>)
 8009938:	f7ff ff78 	bl	800982c <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 800993c:	4803      	ldr	r0, [pc, #12]	; (800994c <Sensor_Stop+0x20>)
 800993e:	f7ff ff95 	bl	800986c <LL_TIM_DisableIT_UPDATE>
}
 8009942:	bf00      	nop
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	40012000 	.word	0x40012000
 800994c:	40000c00 	.word	0x40000c00

08009950 <Sensor_Calibration>:





void Sensor_Calibration() {
 8009950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009952:	b089      	sub	sp, #36	; 0x24
 8009954:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800995a:	2300      	movs	r3, #0
 800995c:	71fb      	strb	r3, [r7, #7]
 800995e:	e00a      	b.n	8009976 <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	4a92      	ldr	r2, [pc, #584]	; (8009bac <Sensor_Calibration+0x25c>)
 8009964:	2100      	movs	r1, #0
 8009966:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	4a91      	ldr	r2, [pc, #580]	; (8009bb0 <Sensor_Calibration+0x260>)
 800996c:	2100      	movs	r1, #0
 800996e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	3301      	adds	r3, #1
 8009974:	71fb      	strb	r3, [r7, #7]
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b0f      	cmp	r3, #15
 800997a:	d9f1      	bls.n	8009960 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 800997c:	f7ff ffbe 	bl	80098fc <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 8009980:	f7fb fb0d 	bl	8004f9e <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8009984:	e06e      	b.n	8009a64 <Sensor_Calibration+0x114>
		Custom_OLED_Printf("/0Black Max");
 8009986:	488b      	ldr	r0, [pc, #556]	; (8009bb4 <Sensor_Calibration+0x264>)
 8009988:	f7fb fbee 	bl	8005168 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800998c:	2300      	movs	r3, #0
 800998e:	71bb      	strb	r3, [r7, #6]
 8009990:	e011      	b.n	80099b6 <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 8009992:	79bb      	ldrb	r3, [r7, #6]
 8009994:	4a86      	ldr	r2, [pc, #536]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009996:	5cd3      	ldrb	r3, [r2, r3]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	79ba      	ldrb	r2, [r7, #6]
 800999c:	4986      	ldr	r1, [pc, #536]	; (8009bb8 <Sensor_Calibration+0x268>)
 800999e:	5c8a      	ldrb	r2, [r1, r2]
 80099a0:	70fa      	strb	r2, [r7, #3]
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d903      	bls.n	80099b0 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 80099a8:	79bb      	ldrb	r3, [r7, #6]
 80099aa:	4981      	ldr	r1, [pc, #516]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 80099b0:	79bb      	ldrb	r3, [r7, #6]
 80099b2:	3301      	adds	r3, #1
 80099b4:	71bb      	strb	r3, [r7, #6]
 80099b6:	79bb      	ldrb	r3, [r7, #6]
 80099b8:	2b0f      	cmp	r3, #15
 80099ba:	d9ea      	bls.n	8009992 <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80099bc:	4b7c      	ldr	r3, [pc, #496]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099c2:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80099c4:	4b7a      	ldr	r3, [pc, #488]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099ca:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80099cc:	4b78      	ldr	r3, [pc, #480]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099ce:	789b      	ldrb	r3, [r3, #2]
 80099d0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099d2:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 80099d4:	4b76      	ldr	r3, [pc, #472]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099da:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80099dc:	4b74      	ldr	r3, [pc, #464]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099e2:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80099e4:	4b72      	ldr	r3, [pc, #456]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099e6:	795b      	ldrb	r3, [r3, #5]
 80099e8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099ea:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80099ec:	4b70      	ldr	r3, [pc, #448]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099ee:	799b      	ldrb	r3, [r3, #6]
 80099f0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099f2:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80099f4:	4b6e      	ldr	r3, [pc, #440]	; (8009bb0 <Sensor_Calibration+0x260>)
 80099f6:	79db      	ldrb	r3, [r3, #7]
 80099f8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	9403      	str	r4, [sp, #12]
 80099fe:	9002      	str	r0, [sp, #8]
 8009a00:	9101      	str	r1, [sp, #4]
 8009a02:	9200      	str	r2, [sp, #0]
 8009a04:	4663      	mov	r3, ip
 8009a06:	4632      	mov	r2, r6
 8009a08:	4629      	mov	r1, r5
 8009a0a:	486c      	ldr	r0, [pc, #432]	; (8009bbc <Sensor_Calibration+0x26c>)
 8009a0c:	f7fb fbac 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8009a10:	4b67      	ldr	r3, [pc, #412]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a12:	7a1b      	ldrb	r3, [r3, #8]
 8009a14:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a16:	461d      	mov	r5, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8009a18:	4b65      	ldr	r3, [pc, #404]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a1a:	7a5b      	ldrb	r3, [r3, #9]
 8009a1c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a1e:	461e      	mov	r6, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8009a20:	4b63      	ldr	r3, [pc, #396]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a22:	7a9b      	ldrb	r3, [r3, #10]
 8009a24:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a26:	469c      	mov	ip, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 8009a28:	4b61      	ldr	r3, [pc, #388]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a2a:	7adb      	ldrb	r3, [r3, #11]
 8009a2c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a2e:	461a      	mov	r2, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8009a30:	4b5f      	ldr	r3, [pc, #380]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a32:	7b1b      	ldrb	r3, [r3, #12]
 8009a34:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a36:	4619      	mov	r1, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8009a38:	4b5d      	ldr	r3, [pc, #372]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a3a:	7b5b      	ldrb	r3, [r3, #13]
 8009a3c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a3e:	4618      	mov	r0, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8009a40:	4b5b      	ldr	r3, [pc, #364]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a42:	7b9b      	ldrb	r3, [r3, #14]
 8009a44:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a46:	461c      	mov	r4, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8009a48:	4b59      	ldr	r3, [pc, #356]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009a4a:	7bdb      	ldrb	r3, [r3, #15]
 8009a4c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	9403      	str	r4, [sp, #12]
 8009a52:	9002      	str	r0, [sp, #8]
 8009a54:	9101      	str	r1, [sp, #4]
 8009a56:	9200      	str	r2, [sp, #0]
 8009a58:	4663      	mov	r3, ip
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4858      	ldr	r0, [pc, #352]	; (8009bc0 <Sensor_Calibration+0x270>)
 8009a60:	f7fb fb82 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8009a64:	f7fb feb0 	bl	80057c8 <Custom_Switch_Read>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d18b      	bne.n	8009986 <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 8009a6e:	f7fb fa96 	bl	8004f9e <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8009a72:	e06e      	b.n	8009b52 <Sensor_Calibration+0x202>
		Custom_OLED_Printf("/0White Max");
 8009a74:	4853      	ldr	r0, [pc, #332]	; (8009bc4 <Sensor_Calibration+0x274>)
 8009a76:	f7fb fb77 	bl	8005168 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	717b      	strb	r3, [r7, #5]
 8009a7e:	e011      	b.n	8009aa4 <Sensor_Calibration+0x154>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8009a80:	797b      	ldrb	r3, [r7, #5]
 8009a82:	4a4a      	ldr	r2, [pc, #296]	; (8009bac <Sensor_Calibration+0x25c>)
 8009a84:	5cd3      	ldrb	r3, [r2, r3]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	797a      	ldrb	r2, [r7, #5]
 8009a8a:	494b      	ldr	r1, [pc, #300]	; (8009bb8 <Sensor_Calibration+0x268>)
 8009a8c:	5c8a      	ldrb	r2, [r1, r2]
 8009a8e:	70fa      	strb	r2, [r7, #3]
 8009a90:	78fa      	ldrb	r2, [r7, #3]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d903      	bls.n	8009a9e <Sensor_Calibration+0x14e>
				whiteMaxs[i] = tmp;
 8009a96:	797b      	ldrb	r3, [r7, #5]
 8009a98:	4944      	ldr	r1, [pc, #272]	; (8009bac <Sensor_Calibration+0x25c>)
 8009a9a:	78fa      	ldrb	r2, [r7, #3]
 8009a9c:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8009a9e:	797b      	ldrb	r3, [r7, #5]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	717b      	strb	r3, [r7, #5]
 8009aa4:	797b      	ldrb	r3, [r7, #5]
 8009aa6:	2b0f      	cmp	r3, #15
 8009aa8:	d9ea      	bls.n	8009a80 <Sensor_Calibration+0x130>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8009aaa:	4b40      	ldr	r3, [pc, #256]	; (8009bac <Sensor_Calibration+0x25c>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ab0:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8009ab2:	4b3e      	ldr	r3, [pc, #248]	; (8009bac <Sensor_Calibration+0x25c>)
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ab8:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8009aba:	4b3c      	ldr	r3, [pc, #240]	; (8009bac <Sensor_Calibration+0x25c>)
 8009abc:	789b      	ldrb	r3, [r3, #2]
 8009abe:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ac0:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8009ac2:	4b3a      	ldr	r3, [pc, #232]	; (8009bac <Sensor_Calibration+0x25c>)
 8009ac4:	78db      	ldrb	r3, [r3, #3]
 8009ac6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ac8:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8009aca:	4b38      	ldr	r3, [pc, #224]	; (8009bac <Sensor_Calibration+0x25c>)
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ad0:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8009ad2:	4b36      	ldr	r3, [pc, #216]	; (8009bac <Sensor_Calibration+0x25c>)
 8009ad4:	795b      	ldrb	r3, [r3, #5]
 8009ad6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ad8:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8009ada:	4b34      	ldr	r3, [pc, #208]	; (8009bac <Sensor_Calibration+0x25c>)
 8009adc:	799b      	ldrb	r3, [r3, #6]
 8009ade:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ae0:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8009ae2:	4b32      	ldr	r3, [pc, #200]	; (8009bac <Sensor_Calibration+0x25c>)
 8009ae4:	79db      	ldrb	r3, [r3, #7]
 8009ae6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	9403      	str	r4, [sp, #12]
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	9101      	str	r1, [sp, #4]
 8009af0:	9200      	str	r2, [sp, #0]
 8009af2:	4663      	mov	r3, ip
 8009af4:	4632      	mov	r2, r6
 8009af6:	4629      	mov	r1, r5
 8009af8:	4830      	ldr	r0, [pc, #192]	; (8009bbc <Sensor_Calibration+0x26c>)
 8009afa:	f7fb fb35 	bl	8005168 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8009afe:	4b2b      	ldr	r3, [pc, #172]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b00:	7a1b      	ldrb	r3, [r3, #8]
 8009b02:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b04:	461d      	mov	r5, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8009b06:	4b29      	ldr	r3, [pc, #164]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b08:	7a5b      	ldrb	r3, [r3, #9]
 8009b0a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b0c:	461e      	mov	r6, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8009b0e:	4b27      	ldr	r3, [pc, #156]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b10:	7a9b      	ldrb	r3, [r3, #10]
 8009b12:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b14:	469c      	mov	ip, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 8009b16:	4b25      	ldr	r3, [pc, #148]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b18:	7adb      	ldrb	r3, [r3, #11]
 8009b1a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b1c:	461a      	mov	r2, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8009b1e:	4b23      	ldr	r3, [pc, #140]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b20:	7b1b      	ldrb	r3, [r3, #12]
 8009b22:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b24:	4619      	mov	r1, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8009b26:	4b21      	ldr	r3, [pc, #132]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b28:	7b5b      	ldrb	r3, [r3, #13]
 8009b2a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b2c:	4618      	mov	r0, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b30:	7b9b      	ldrb	r3, [r3, #14]
 8009b32:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b34:	461c      	mov	r4, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 8009b36:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b38:	7bdb      	ldrb	r3, [r3, #15]
 8009b3a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	9403      	str	r4, [sp, #12]
 8009b40:	9002      	str	r0, [sp, #8]
 8009b42:	9101      	str	r1, [sp, #4]
 8009b44:	9200      	str	r2, [sp, #0]
 8009b46:	4663      	mov	r3, ip
 8009b48:	4632      	mov	r2, r6
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	481c      	ldr	r0, [pc, #112]	; (8009bc0 <Sensor_Calibration+0x270>)
 8009b4e:	f7fb fb0b 	bl	8005168 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8009b52:	f7fb fe39 	bl	80057c8 <Custom_Switch_Read>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b04      	cmp	r3, #4
 8009b5a:	d18b      	bne.n	8009a74 <Sensor_Calibration+0x124>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	713b      	strb	r3, [r7, #4]
 8009b60:	e019      	b.n	8009b96 <Sensor_Calibration+0x246>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 8009b62:	793b      	ldrb	r3, [r7, #4]
 8009b64:	4a11      	ldr	r2, [pc, #68]	; (8009bac <Sensor_Calibration+0x25c>)
 8009b66:	5cd3      	ldrb	r3, [r2, r3]
 8009b68:	b2d9      	uxtb	r1, r3
 8009b6a:	793b      	ldrb	r3, [r7, #4]
 8009b6c:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <Sensor_Calibration+0x260>)
 8009b6e:	5cd3      	ldrb	r3, [r2, r3]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	793b      	ldrb	r3, [r7, #4]
 8009b74:	1a8a      	subs	r2, r1, r2
 8009b76:	b2d1      	uxtb	r1, r2
 8009b78:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <Sensor_Calibration+0x278>)
 8009b7a:	54d1      	strb	r1, [r2, r3]
		if (normalizeCoef[i] == 0) {
 8009b7c:	793b      	ldrb	r3, [r7, #4]
 8009b7e:	4a12      	ldr	r2, [pc, #72]	; (8009bc8 <Sensor_Calibration+0x278>)
 8009b80:	5cd3      	ldrb	r3, [r2, r3]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <Sensor_Calibration+0x240>
			normalizeCoef[i] = 1;
 8009b88:	793b      	ldrb	r3, [r7, #4]
 8009b8a:	4a0f      	ldr	r2, [pc, #60]	; (8009bc8 <Sensor_Calibration+0x278>)
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 8009b90:	793b      	ldrb	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	713b      	strb	r3, [r7, #4]
 8009b96:	793b      	ldrb	r3, [r7, #4]
 8009b98:	2b0f      	cmp	r3, #15
 8009b9a:	d9e2      	bls.n	8009b62 <Sensor_Calibration+0x212>
		}
	}

	Custom_OLED_Clear();
 8009b9c:	f7fb f9ff 	bl	8004f9e <Custom_OLED_Clear>
	Sensor_Stop();
 8009ba0:	f7ff fec4 	bl	800992c <Sensor_Stop>
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bac:	2000005c 	.word	0x2000005c
 8009bb0:	2000006c 	.word	0x2000006c
 8009bb4:	0800d144 	.word	0x0800d144
 8009bb8:	200046c0 	.word	0x200046c0
 8009bbc:	0800d150 	.word	0x0800d150
 8009bc0:	0800d17c 	.word	0x0800d17c
 8009bc4:	0800d1a8 	.word	0x0800d1a8
 8009bc8:	200046e0 	.word	0x200046e0

08009bcc <__cvt>:
 8009bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	ec55 4b10 	vmov	r4, r5, d0
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	460e      	mov	r6, r1
 8009bd8:	4619      	mov	r1, r3
 8009bda:	462b      	mov	r3, r5
 8009bdc:	bfbb      	ittet	lt
 8009bde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009be2:	461d      	movlt	r5, r3
 8009be4:	2300      	movge	r3, #0
 8009be6:	232d      	movlt	r3, #45	; 0x2d
 8009be8:	700b      	strb	r3, [r1, #0]
 8009bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	f023 0820 	bic.w	r8, r3, #32
 8009bf6:	bfbc      	itt	lt
 8009bf8:	4622      	movlt	r2, r4
 8009bfa:	4614      	movlt	r4, r2
 8009bfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c00:	d005      	beq.n	8009c0e <__cvt+0x42>
 8009c02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c06:	d100      	bne.n	8009c0a <__cvt+0x3e>
 8009c08:	3601      	adds	r6, #1
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	e000      	b.n	8009c10 <__cvt+0x44>
 8009c0e:	2103      	movs	r1, #3
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	ab02      	add	r3, sp, #8
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	ec45 4b10 	vmov	d0, r4, r5
 8009c1c:	4653      	mov	r3, sl
 8009c1e:	4632      	mov	r2, r6
 8009c20:	f000 fdee 	bl	800a800 <_dtoa_r>
 8009c24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c28:	4607      	mov	r7, r0
 8009c2a:	d102      	bne.n	8009c32 <__cvt+0x66>
 8009c2c:	f019 0f01 	tst.w	r9, #1
 8009c30:	d022      	beq.n	8009c78 <__cvt+0xac>
 8009c32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c36:	eb07 0906 	add.w	r9, r7, r6
 8009c3a:	d110      	bne.n	8009c5e <__cvt+0x92>
 8009c3c:	783b      	ldrb	r3, [r7, #0]
 8009c3e:	2b30      	cmp	r3, #48	; 0x30
 8009c40:	d10a      	bne.n	8009c58 <__cvt+0x8c>
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c4e:	b918      	cbnz	r0, 8009c58 <__cvt+0x8c>
 8009c50:	f1c6 0601 	rsb	r6, r6, #1
 8009c54:	f8ca 6000 	str.w	r6, [sl]
 8009c58:	f8da 3000 	ldr.w	r3, [sl]
 8009c5c:	4499      	add	r9, r3
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	4620      	mov	r0, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7f6 ff37 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c6a:	b108      	cbz	r0, 8009c70 <__cvt+0xa4>
 8009c6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c70:	2230      	movs	r2, #48	; 0x30
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	454b      	cmp	r3, r9
 8009c76:	d307      	bcc.n	8009c88 <__cvt+0xbc>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c7c:	1bdb      	subs	r3, r3, r7
 8009c7e:	4638      	mov	r0, r7
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	b004      	add	sp, #16
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	1c59      	adds	r1, r3, #1
 8009c8a:	9103      	str	r1, [sp, #12]
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	e7f0      	b.n	8009c72 <__cvt+0xa6>

08009c90 <__exponent>:
 8009c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c92:	4603      	mov	r3, r0
 8009c94:	2900      	cmp	r1, #0
 8009c96:	bfb8      	it	lt
 8009c98:	4249      	neglt	r1, r1
 8009c9a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c9e:	bfb4      	ite	lt
 8009ca0:	222d      	movlt	r2, #45	; 0x2d
 8009ca2:	222b      	movge	r2, #43	; 0x2b
 8009ca4:	2909      	cmp	r1, #9
 8009ca6:	7042      	strb	r2, [r0, #1]
 8009ca8:	dd2a      	ble.n	8009d00 <__exponent+0x70>
 8009caa:	f10d 0207 	add.w	r2, sp, #7
 8009cae:	4617      	mov	r7, r2
 8009cb0:	260a      	movs	r6, #10
 8009cb2:	4694      	mov	ip, r2
 8009cb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009cb8:	fb06 1415 	mls	r4, r6, r5, r1
 8009cbc:	3430      	adds	r4, #48	; 0x30
 8009cbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	2c63      	cmp	r4, #99	; 0x63
 8009cc6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009cca:	4629      	mov	r1, r5
 8009ccc:	dcf1      	bgt.n	8009cb2 <__exponent+0x22>
 8009cce:	3130      	adds	r1, #48	; 0x30
 8009cd0:	f1ac 0402 	sub.w	r4, ip, #2
 8009cd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cd8:	1c41      	adds	r1, r0, #1
 8009cda:	4622      	mov	r2, r4
 8009cdc:	42ba      	cmp	r2, r7
 8009cde:	d30a      	bcc.n	8009cf6 <__exponent+0x66>
 8009ce0:	f10d 0209 	add.w	r2, sp, #9
 8009ce4:	eba2 020c 	sub.w	r2, r2, ip
 8009ce8:	42bc      	cmp	r4, r7
 8009cea:	bf88      	it	hi
 8009cec:	2200      	movhi	r2, #0
 8009cee:	4413      	add	r3, r2
 8009cf0:	1a18      	subs	r0, r3, r0
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009cfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009cfe:	e7ed      	b.n	8009cdc <__exponent+0x4c>
 8009d00:	2330      	movs	r3, #48	; 0x30
 8009d02:	3130      	adds	r1, #48	; 0x30
 8009d04:	7083      	strb	r3, [r0, #2]
 8009d06:	70c1      	strb	r1, [r0, #3]
 8009d08:	1d03      	adds	r3, r0, #4
 8009d0a:	e7f1      	b.n	8009cf0 <__exponent+0x60>

08009d0c <_printf_float>:
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	ed2d 8b02 	vpush	{d8}
 8009d14:	b08d      	sub	sp, #52	; 0x34
 8009d16:	460c      	mov	r4, r1
 8009d18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	461f      	mov	r7, r3
 8009d20:	4605      	mov	r5, r0
 8009d22:	f000 fca3 	bl	800a66c <_localeconv_r>
 8009d26:	f8d0 a000 	ldr.w	sl, [r0]
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 faa8 	bl	8000280 <strlen>
 8009d30:	2300      	movs	r3, #0
 8009d32:	930a      	str	r3, [sp, #40]	; 0x28
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	9305      	str	r3, [sp, #20]
 8009d38:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d40:	3307      	adds	r3, #7
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	f103 0208 	add.w	r2, r3, #8
 8009d4a:	f8c8 2000 	str.w	r2, [r8]
 8009d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d5c:	ee08 0a10 	vmov	s16, r0
 8009d60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d68:	4b9e      	ldr	r3, [pc, #632]	; (8009fe4 <_printf_float+0x2d8>)
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d6e:	f7f6 fee5 	bl	8000b3c <__aeabi_dcmpun>
 8009d72:	bb88      	cbnz	r0, 8009dd8 <_printf_float+0xcc>
 8009d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d78:	4b9a      	ldr	r3, [pc, #616]	; (8009fe4 <_printf_float+0x2d8>)
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d7e:	f7f6 febf 	bl	8000b00 <__aeabi_dcmple>
 8009d82:	bb48      	cbnz	r0, 8009dd8 <_printf_float+0xcc>
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 feae 	bl	8000aec <__aeabi_dcmplt>
 8009d90:	b110      	cbz	r0, 8009d98 <_printf_float+0x8c>
 8009d92:	232d      	movs	r3, #45	; 0x2d
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	4a93      	ldr	r2, [pc, #588]	; (8009fe8 <_printf_float+0x2dc>)
 8009d9a:	4b94      	ldr	r3, [pc, #592]	; (8009fec <_printf_float+0x2e0>)
 8009d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009da0:	bf94      	ite	ls
 8009da2:	4690      	movls	r8, r2
 8009da4:	4698      	movhi	r8, r3
 8009da6:	2303      	movs	r3, #3
 8009da8:	6123      	str	r3, [r4, #16]
 8009daa:	9b05      	ldr	r3, [sp, #20]
 8009dac:	f023 0304 	bic.w	r3, r3, #4
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	f04f 0900 	mov.w	r9, #0
 8009db6:	9700      	str	r7, [sp, #0]
 8009db8:	4633      	mov	r3, r6
 8009dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 f9da 	bl	800a178 <_printf_common>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f040 8090 	bne.w	8009eea <_printf_float+0x1de>
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dce:	b00d      	add	sp, #52	; 0x34
 8009dd0:	ecbd 8b02 	vpop	{d8}
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 feac 	bl	8000b3c <__aeabi_dcmpun>
 8009de4:	b140      	cbz	r0, 8009df8 <_printf_float+0xec>
 8009de6:	464b      	mov	r3, r9
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfbc      	itt	lt
 8009dec:	232d      	movlt	r3, #45	; 0x2d
 8009dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009df2:	4a7f      	ldr	r2, [pc, #508]	; (8009ff0 <_printf_float+0x2e4>)
 8009df4:	4b7f      	ldr	r3, [pc, #508]	; (8009ff4 <_printf_float+0x2e8>)
 8009df6:	e7d1      	b.n	8009d9c <_printf_float+0x90>
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dfe:	9206      	str	r2, [sp, #24]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	d13f      	bne.n	8009e84 <_printf_float+0x178>
 8009e04:	2306      	movs	r3, #6
 8009e06:	6063      	str	r3, [r4, #4]
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	6861      	ldr	r1, [r4, #4]
 8009e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e10:	2300      	movs	r3, #0
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	ab0a      	add	r3, sp, #40	; 0x28
 8009e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e1a:	ab09      	add	r3, sp, #36	; 0x24
 8009e1c:	ec49 8b10 	vmov	d0, r8, r9
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	6022      	str	r2, [r4, #0]
 8009e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7ff fecf 	bl	8009bcc <__cvt>
 8009e2e:	9b06      	ldr	r3, [sp, #24]
 8009e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e32:	2b47      	cmp	r3, #71	; 0x47
 8009e34:	4680      	mov	r8, r0
 8009e36:	d108      	bne.n	8009e4a <_printf_float+0x13e>
 8009e38:	1cc8      	adds	r0, r1, #3
 8009e3a:	db02      	blt.n	8009e42 <_printf_float+0x136>
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	dd41      	ble.n	8009ec6 <_printf_float+0x1ba>
 8009e42:	f1ab 0302 	sub.w	r3, fp, #2
 8009e46:	fa5f fb83 	uxtb.w	fp, r3
 8009e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e4e:	d820      	bhi.n	8009e92 <_printf_float+0x186>
 8009e50:	3901      	subs	r1, #1
 8009e52:	465a      	mov	r2, fp
 8009e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e58:	9109      	str	r1, [sp, #36]	; 0x24
 8009e5a:	f7ff ff19 	bl	8009c90 <__exponent>
 8009e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e60:	1813      	adds	r3, r2, r0
 8009e62:	2a01      	cmp	r2, #1
 8009e64:	4681      	mov	r9, r0
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	dc02      	bgt.n	8009e70 <_printf_float+0x164>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	07d2      	lsls	r2, r2, #31
 8009e6e:	d501      	bpl.n	8009e74 <_printf_float+0x168>
 8009e70:	3301      	adds	r3, #1
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d09c      	beq.n	8009db6 <_printf_float+0xaa>
 8009e7c:	232d      	movs	r3, #45	; 0x2d
 8009e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e82:	e798      	b.n	8009db6 <_printf_float+0xaa>
 8009e84:	9a06      	ldr	r2, [sp, #24]
 8009e86:	2a47      	cmp	r2, #71	; 0x47
 8009e88:	d1be      	bne.n	8009e08 <_printf_float+0xfc>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1bc      	bne.n	8009e08 <_printf_float+0xfc>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e7b9      	b.n	8009e06 <_printf_float+0xfa>
 8009e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e96:	d118      	bne.n	8009eca <_printf_float+0x1be>
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	6863      	ldr	r3, [r4, #4]
 8009e9c:	dd0b      	ble.n	8009eb6 <_printf_float+0x1aa>
 8009e9e:	6121      	str	r1, [r4, #16]
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_printf_float+0x19c>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	07d0      	lsls	r0, r2, #31
 8009ea6:	d502      	bpl.n	8009eae <_printf_float+0x1a2>
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	440b      	add	r3, r1
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8009eb0:	f04f 0900 	mov.w	r9, #0
 8009eb4:	e7de      	b.n	8009e74 <_printf_float+0x168>
 8009eb6:	b913      	cbnz	r3, 8009ebe <_printf_float+0x1b2>
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	07d2      	lsls	r2, r2, #31
 8009ebc:	d501      	bpl.n	8009ec2 <_printf_float+0x1b6>
 8009ebe:	3302      	adds	r3, #2
 8009ec0:	e7f4      	b.n	8009eac <_printf_float+0x1a0>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f2      	b.n	8009eac <_printf_float+0x1a0>
 8009ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	db05      	blt.n	8009edc <_printf_float+0x1d0>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	6121      	str	r1, [r4, #16]
 8009ed4:	07d8      	lsls	r0, r3, #31
 8009ed6:	d5ea      	bpl.n	8009eae <_printf_float+0x1a2>
 8009ed8:	1c4b      	adds	r3, r1, #1
 8009eda:	e7e7      	b.n	8009eac <_printf_float+0x1a0>
 8009edc:	2900      	cmp	r1, #0
 8009ede:	bfd4      	ite	le
 8009ee0:	f1c1 0202 	rsble	r2, r1, #2
 8009ee4:	2201      	movgt	r2, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	e7e0      	b.n	8009eac <_printf_float+0x1a0>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	055a      	lsls	r2, r3, #21
 8009eee:	d407      	bmi.n	8009f00 <_printf_float+0x1f4>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	d12c      	bne.n	8009f58 <_printf_float+0x24c>
 8009efe:	e764      	b.n	8009dca <_printf_float+0xbe>
 8009f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f04:	f240 80e0 	bls.w	800a0c8 <_printf_float+0x3bc>
 8009f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f7f6 fde2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d034      	beq.n	8009f82 <_printf_float+0x276>
 8009f18:	4a37      	ldr	r2, [pc, #220]	; (8009ff8 <_printf_float+0x2ec>)
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4628      	mov	r0, r5
 8009f20:	47b8      	blx	r7
 8009f22:	3001      	adds	r0, #1
 8009f24:	f43f af51 	beq.w	8009dca <_printf_float+0xbe>
 8009f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	db02      	blt.n	8009f36 <_printf_float+0x22a>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	07d8      	lsls	r0, r3, #31
 8009f34:	d510      	bpl.n	8009f58 <_printf_float+0x24c>
 8009f36:	ee18 3a10 	vmov	r3, s16
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	f43f af41 	beq.w	8009dca <_printf_float+0xbe>
 8009f48:	f04f 0800 	mov.w	r8, #0
 8009f4c:	f104 091a 	add.w	r9, r4, #26
 8009f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f52:	3b01      	subs	r3, #1
 8009f54:	4543      	cmp	r3, r8
 8009f56:	dc09      	bgt.n	8009f6c <_printf_float+0x260>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	079b      	lsls	r3, r3, #30
 8009f5c:	f100 8107 	bmi.w	800a16e <_printf_float+0x462>
 8009f60:	68e0      	ldr	r0, [r4, #12]
 8009f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f64:	4298      	cmp	r0, r3
 8009f66:	bfb8      	it	lt
 8009f68:	4618      	movlt	r0, r3
 8009f6a:	e730      	b.n	8009dce <_printf_float+0xc2>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	464a      	mov	r2, r9
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f af27 	beq.w	8009dca <_printf_float+0xbe>
 8009f7c:	f108 0801 	add.w	r8, r8, #1
 8009f80:	e7e6      	b.n	8009f50 <_printf_float+0x244>
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dc39      	bgt.n	8009ffc <_printf_float+0x2f0>
 8009f88:	4a1b      	ldr	r2, [pc, #108]	; (8009ff8 <_printf_float+0x2ec>)
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4628      	mov	r0, r5
 8009f90:	47b8      	blx	r7
 8009f92:	3001      	adds	r0, #1
 8009f94:	f43f af19 	beq.w	8009dca <_printf_float+0xbe>
 8009f98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	d102      	bne.n	8009fa6 <_printf_float+0x29a>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	07d9      	lsls	r1, r3, #31
 8009fa4:	d5d8      	bpl.n	8009f58 <_printf_float+0x24c>
 8009fa6:	ee18 3a10 	vmov	r3, s16
 8009faa:	4652      	mov	r2, sl
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af09 	beq.w	8009dca <_printf_float+0xbe>
 8009fb8:	f04f 0900 	mov.w	r9, #0
 8009fbc:	f104 0a1a 	add.w	sl, r4, #26
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	425b      	negs	r3, r3
 8009fc4:	454b      	cmp	r3, r9
 8009fc6:	dc01      	bgt.n	8009fcc <_printf_float+0x2c0>
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	e792      	b.n	8009ef2 <_printf_float+0x1e6>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f aef7 	beq.w	8009dca <_printf_float+0xbe>
 8009fdc:	f109 0901 	add.w	r9, r9, #1
 8009fe0:	e7ee      	b.n	8009fc0 <_printf_float+0x2b4>
 8009fe2:	bf00      	nop
 8009fe4:	7fefffff 	.word	0x7fefffff
 8009fe8:	0800d46c 	.word	0x0800d46c
 8009fec:	0800d470 	.word	0x0800d470
 8009ff0:	0800d474 	.word	0x0800d474
 8009ff4:	0800d478 	.word	0x0800d478
 8009ff8:	0800d47c 	.word	0x0800d47c
 8009ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a000:	429a      	cmp	r2, r3
 800a002:	bfa8      	it	ge
 800a004:	461a      	movge	r2, r3
 800a006:	2a00      	cmp	r2, #0
 800a008:	4691      	mov	r9, r2
 800a00a:	dc37      	bgt.n	800a07c <_printf_float+0x370>
 800a00c:	f04f 0b00 	mov.w	fp, #0
 800a010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a014:	f104 021a 	add.w	r2, r4, #26
 800a018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	eba3 0309 	sub.w	r3, r3, r9
 800a020:	455b      	cmp	r3, fp
 800a022:	dc33      	bgt.n	800a08c <_printf_float+0x380>
 800a024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	db3b      	blt.n	800a0a4 <_printf_float+0x398>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	07da      	lsls	r2, r3, #31
 800a030:	d438      	bmi.n	800a0a4 <_printf_float+0x398>
 800a032:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a036:	eba2 0903 	sub.w	r9, r2, r3
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	1ad2      	subs	r2, r2, r3
 800a03e:	4591      	cmp	r9, r2
 800a040:	bfa8      	it	ge
 800a042:	4691      	movge	r9, r2
 800a044:	f1b9 0f00 	cmp.w	r9, #0
 800a048:	dc35      	bgt.n	800a0b6 <_printf_float+0x3aa>
 800a04a:	f04f 0800 	mov.w	r8, #0
 800a04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a052:	f104 0a1a 	add.w	sl, r4, #26
 800a056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	eba3 0309 	sub.w	r3, r3, r9
 800a060:	4543      	cmp	r3, r8
 800a062:	f77f af79 	ble.w	8009f58 <_printf_float+0x24c>
 800a066:	2301      	movs	r3, #1
 800a068:	4652      	mov	r2, sl
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	f43f aeaa 	beq.w	8009dca <_printf_float+0xbe>
 800a076:	f108 0801 	add.w	r8, r8, #1
 800a07a:	e7ec      	b.n	800a056 <_printf_float+0x34a>
 800a07c:	4613      	mov	r3, r2
 800a07e:	4631      	mov	r1, r6
 800a080:	4642      	mov	r2, r8
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	d1c0      	bne.n	800a00c <_printf_float+0x300>
 800a08a:	e69e      	b.n	8009dca <_printf_float+0xbe>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	9205      	str	r2, [sp, #20]
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	f43f ae97 	beq.w	8009dca <_printf_float+0xbe>
 800a09c:	9a05      	ldr	r2, [sp, #20]
 800a09e:	f10b 0b01 	add.w	fp, fp, #1
 800a0a2:	e7b9      	b.n	800a018 <_printf_float+0x30c>
 800a0a4:	ee18 3a10 	vmov	r3, s16
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d1be      	bne.n	800a032 <_printf_float+0x326>
 800a0b4:	e689      	b.n	8009dca <_printf_float+0xbe>
 800a0b6:	9a05      	ldr	r2, [sp, #20]
 800a0b8:	464b      	mov	r3, r9
 800a0ba:	4442      	add	r2, r8
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d1c1      	bne.n	800a04a <_printf_float+0x33e>
 800a0c6:	e680      	b.n	8009dca <_printf_float+0xbe>
 800a0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ca:	2a01      	cmp	r2, #1
 800a0cc:	dc01      	bgt.n	800a0d2 <_printf_float+0x3c6>
 800a0ce:	07db      	lsls	r3, r3, #31
 800a0d0:	d53a      	bpl.n	800a148 <_printf_float+0x43c>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f ae74 	beq.w	8009dca <_printf_float+0xbe>
 800a0e2:	ee18 3a10 	vmov	r3, s16
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f ae6b 	beq.w	8009dca <_printf_float+0xbe>
 800a0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a100:	f7f6 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 800a104:	b9d8      	cbnz	r0, 800a13e <_printf_float+0x432>
 800a106:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a10a:	f108 0201 	add.w	r2, r8, #1
 800a10e:	4631      	mov	r1, r6
 800a110:	4628      	mov	r0, r5
 800a112:	47b8      	blx	r7
 800a114:	3001      	adds	r0, #1
 800a116:	d10e      	bne.n	800a136 <_printf_float+0x42a>
 800a118:	e657      	b.n	8009dca <_printf_float+0xbe>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4652      	mov	r2, sl
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	f43f ae50 	beq.w	8009dca <_printf_float+0xbe>
 800a12a:	f108 0801 	add.w	r8, r8, #1
 800a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a130:	3b01      	subs	r3, #1
 800a132:	4543      	cmp	r3, r8
 800a134:	dcf1      	bgt.n	800a11a <_printf_float+0x40e>
 800a136:	464b      	mov	r3, r9
 800a138:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a13c:	e6da      	b.n	8009ef4 <_printf_float+0x1e8>
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	f104 0a1a 	add.w	sl, r4, #26
 800a146:	e7f2      	b.n	800a12e <_printf_float+0x422>
 800a148:	2301      	movs	r3, #1
 800a14a:	4642      	mov	r2, r8
 800a14c:	e7df      	b.n	800a10e <_printf_float+0x402>
 800a14e:	2301      	movs	r3, #1
 800a150:	464a      	mov	r2, r9
 800a152:	4631      	mov	r1, r6
 800a154:	4628      	mov	r0, r5
 800a156:	47b8      	blx	r7
 800a158:	3001      	adds	r0, #1
 800a15a:	f43f ae36 	beq.w	8009dca <_printf_float+0xbe>
 800a15e:	f108 0801 	add.w	r8, r8, #1
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a166:	1a5b      	subs	r3, r3, r1
 800a168:	4543      	cmp	r3, r8
 800a16a:	dcf0      	bgt.n	800a14e <_printf_float+0x442>
 800a16c:	e6f8      	b.n	8009f60 <_printf_float+0x254>
 800a16e:	f04f 0800 	mov.w	r8, #0
 800a172:	f104 0919 	add.w	r9, r4, #25
 800a176:	e7f4      	b.n	800a162 <_printf_float+0x456>

0800a178 <_printf_common>:
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	4616      	mov	r6, r2
 800a17e:	4699      	mov	r9, r3
 800a180:	688a      	ldr	r2, [r1, #8]
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a188:	4293      	cmp	r3, r2
 800a18a:	bfb8      	it	lt
 800a18c:	4613      	movlt	r3, r2
 800a18e:	6033      	str	r3, [r6, #0]
 800a190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a194:	4607      	mov	r7, r0
 800a196:	460c      	mov	r4, r1
 800a198:	b10a      	cbz	r2, 800a19e <_printf_common+0x26>
 800a19a:	3301      	adds	r3, #1
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	0699      	lsls	r1, r3, #26
 800a1a2:	bf42      	ittt	mi
 800a1a4:	6833      	ldrmi	r3, [r6, #0]
 800a1a6:	3302      	addmi	r3, #2
 800a1a8:	6033      	strmi	r3, [r6, #0]
 800a1aa:	6825      	ldr	r5, [r4, #0]
 800a1ac:	f015 0506 	ands.w	r5, r5, #6
 800a1b0:	d106      	bne.n	800a1c0 <_printf_common+0x48>
 800a1b2:	f104 0a19 	add.w	sl, r4, #25
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	6832      	ldr	r2, [r6, #0]
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	dc26      	bgt.n	800a20e <_printf_common+0x96>
 800a1c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c4:	1e13      	subs	r3, r2, #0
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	2301      	movne	r3, #1
 800a1cc:	0692      	lsls	r2, r2, #26
 800a1ce:	d42b      	bmi.n	800a228 <_printf_common+0xb0>
 800a1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	47c0      	blx	r8
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d01e      	beq.n	800a21c <_printf_common+0xa4>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	6922      	ldr	r2, [r4, #16]
 800a1e2:	f003 0306 	and.w	r3, r3, #6
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	bf02      	ittt	eq
 800a1ea:	68e5      	ldreq	r5, [r4, #12]
 800a1ec:	6833      	ldreq	r3, [r6, #0]
 800a1ee:	1aed      	subeq	r5, r5, r3
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	bf0c      	ite	eq
 800a1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1f8:	2500      	movne	r5, #0
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bfc4      	itt	gt
 800a1fe:	1a9b      	subgt	r3, r3, r2
 800a200:	18ed      	addgt	r5, r5, r3
 800a202:	2600      	movs	r6, #0
 800a204:	341a      	adds	r4, #26
 800a206:	42b5      	cmp	r5, r6
 800a208:	d11a      	bne.n	800a240 <_printf_common+0xc8>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e008      	b.n	800a220 <_printf_common+0xa8>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4649      	mov	r1, r9
 800a214:	4638      	mov	r0, r7
 800a216:	47c0      	blx	r8
 800a218:	3001      	adds	r0, #1
 800a21a:	d103      	bne.n	800a224 <_printf_common+0xac>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	3501      	adds	r5, #1
 800a226:	e7c6      	b.n	800a1b6 <_printf_common+0x3e>
 800a228:	18e1      	adds	r1, r4, r3
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	2030      	movs	r0, #48	; 0x30
 800a22e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a232:	4422      	add	r2, r4
 800a234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a23c:	3302      	adds	r3, #2
 800a23e:	e7c7      	b.n	800a1d0 <_printf_common+0x58>
 800a240:	2301      	movs	r3, #1
 800a242:	4622      	mov	r2, r4
 800a244:	4649      	mov	r1, r9
 800a246:	4638      	mov	r0, r7
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d0e6      	beq.n	800a21c <_printf_common+0xa4>
 800a24e:	3601      	adds	r6, #1
 800a250:	e7d9      	b.n	800a206 <_printf_common+0x8e>
	...

0800a254 <_printf_i>:
 800a254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	7e0f      	ldrb	r7, [r1, #24]
 800a25a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a25c:	2f78      	cmp	r7, #120	; 0x78
 800a25e:	4691      	mov	r9, r2
 800a260:	4680      	mov	r8, r0
 800a262:	460c      	mov	r4, r1
 800a264:	469a      	mov	sl, r3
 800a266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a26a:	d807      	bhi.n	800a27c <_printf_i+0x28>
 800a26c:	2f62      	cmp	r7, #98	; 0x62
 800a26e:	d80a      	bhi.n	800a286 <_printf_i+0x32>
 800a270:	2f00      	cmp	r7, #0
 800a272:	f000 80d4 	beq.w	800a41e <_printf_i+0x1ca>
 800a276:	2f58      	cmp	r7, #88	; 0x58
 800a278:	f000 80c0 	beq.w	800a3fc <_printf_i+0x1a8>
 800a27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a284:	e03a      	b.n	800a2fc <_printf_i+0xa8>
 800a286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28a:	2b15      	cmp	r3, #21
 800a28c:	d8f6      	bhi.n	800a27c <_printf_i+0x28>
 800a28e:	a101      	add	r1, pc, #4	; (adr r1, 800a294 <_printf_i+0x40>)
 800a290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a294:	0800a2ed 	.word	0x0800a2ed
 800a298:	0800a301 	.word	0x0800a301
 800a29c:	0800a27d 	.word	0x0800a27d
 800a2a0:	0800a27d 	.word	0x0800a27d
 800a2a4:	0800a27d 	.word	0x0800a27d
 800a2a8:	0800a27d 	.word	0x0800a27d
 800a2ac:	0800a301 	.word	0x0800a301
 800a2b0:	0800a27d 	.word	0x0800a27d
 800a2b4:	0800a27d 	.word	0x0800a27d
 800a2b8:	0800a27d 	.word	0x0800a27d
 800a2bc:	0800a27d 	.word	0x0800a27d
 800a2c0:	0800a405 	.word	0x0800a405
 800a2c4:	0800a32d 	.word	0x0800a32d
 800a2c8:	0800a3bf 	.word	0x0800a3bf
 800a2cc:	0800a27d 	.word	0x0800a27d
 800a2d0:	0800a27d 	.word	0x0800a27d
 800a2d4:	0800a427 	.word	0x0800a427
 800a2d8:	0800a27d 	.word	0x0800a27d
 800a2dc:	0800a32d 	.word	0x0800a32d
 800a2e0:	0800a27d 	.word	0x0800a27d
 800a2e4:	0800a27d 	.word	0x0800a27d
 800a2e8:	0800a3c7 	.word	0x0800a3c7
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	1d1a      	adds	r2, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	602a      	str	r2, [r5, #0]
 800a2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e09f      	b.n	800a440 <_printf_i+0x1ec>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	0607      	lsls	r7, r0, #24
 800a306:	f103 0104 	add.w	r1, r3, #4
 800a30a:	6029      	str	r1, [r5, #0]
 800a30c:	d501      	bpl.n	800a312 <_printf_i+0xbe>
 800a30e:	681e      	ldr	r6, [r3, #0]
 800a310:	e003      	b.n	800a31a <_printf_i+0xc6>
 800a312:	0646      	lsls	r6, r0, #25
 800a314:	d5fb      	bpl.n	800a30e <_printf_i+0xba>
 800a316:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	da03      	bge.n	800a326 <_printf_i+0xd2>
 800a31e:	232d      	movs	r3, #45	; 0x2d
 800a320:	4276      	negs	r6, r6
 800a322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a326:	485a      	ldr	r0, [pc, #360]	; (800a490 <_printf_i+0x23c>)
 800a328:	230a      	movs	r3, #10
 800a32a:	e012      	b.n	800a352 <_printf_i+0xfe>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	6820      	ldr	r0, [r4, #0]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	6029      	str	r1, [r5, #0]
 800a334:	0605      	lsls	r5, r0, #24
 800a336:	d501      	bpl.n	800a33c <_printf_i+0xe8>
 800a338:	681e      	ldr	r6, [r3, #0]
 800a33a:	e002      	b.n	800a342 <_printf_i+0xee>
 800a33c:	0641      	lsls	r1, r0, #25
 800a33e:	d5fb      	bpl.n	800a338 <_printf_i+0xe4>
 800a340:	881e      	ldrh	r6, [r3, #0]
 800a342:	4853      	ldr	r0, [pc, #332]	; (800a490 <_printf_i+0x23c>)
 800a344:	2f6f      	cmp	r7, #111	; 0x6f
 800a346:	bf0c      	ite	eq
 800a348:	2308      	moveq	r3, #8
 800a34a:	230a      	movne	r3, #10
 800a34c:	2100      	movs	r1, #0
 800a34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a352:	6865      	ldr	r5, [r4, #4]
 800a354:	60a5      	str	r5, [r4, #8]
 800a356:	2d00      	cmp	r5, #0
 800a358:	bfa2      	ittt	ge
 800a35a:	6821      	ldrge	r1, [r4, #0]
 800a35c:	f021 0104 	bicge.w	r1, r1, #4
 800a360:	6021      	strge	r1, [r4, #0]
 800a362:	b90e      	cbnz	r6, 800a368 <_printf_i+0x114>
 800a364:	2d00      	cmp	r5, #0
 800a366:	d04b      	beq.n	800a400 <_printf_i+0x1ac>
 800a368:	4615      	mov	r5, r2
 800a36a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a36e:	fb03 6711 	mls	r7, r3, r1, r6
 800a372:	5dc7      	ldrb	r7, [r0, r7]
 800a374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a378:	4637      	mov	r7, r6
 800a37a:	42bb      	cmp	r3, r7
 800a37c:	460e      	mov	r6, r1
 800a37e:	d9f4      	bls.n	800a36a <_printf_i+0x116>
 800a380:	2b08      	cmp	r3, #8
 800a382:	d10b      	bne.n	800a39c <_printf_i+0x148>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	07de      	lsls	r6, r3, #31
 800a388:	d508      	bpl.n	800a39c <_printf_i+0x148>
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	6861      	ldr	r1, [r4, #4]
 800a38e:	4299      	cmp	r1, r3
 800a390:	bfde      	ittt	le
 800a392:	2330      	movle	r3, #48	; 0x30
 800a394:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a39c:	1b52      	subs	r2, r2, r5
 800a39e:	6122      	str	r2, [r4, #16]
 800a3a0:	f8cd a000 	str.w	sl, [sp]
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	aa03      	add	r2, sp, #12
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7ff fee4 	bl	800a178 <_printf_common>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d14a      	bne.n	800a44a <_printf_i+0x1f6>
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b8:	b004      	add	sp, #16
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f043 0320 	orr.w	r3, r3, #32
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	4833      	ldr	r0, [pc, #204]	; (800a494 <_printf_i+0x240>)
 800a3c8:	2778      	movs	r7, #120	; 0x78
 800a3ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	6829      	ldr	r1, [r5, #0]
 800a3d2:	061f      	lsls	r7, r3, #24
 800a3d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d8:	d402      	bmi.n	800a3e0 <_printf_i+0x18c>
 800a3da:	065f      	lsls	r7, r3, #25
 800a3dc:	bf48      	it	mi
 800a3de:	b2b6      	uxthmi	r6, r6
 800a3e0:	07df      	lsls	r7, r3, #31
 800a3e2:	bf48      	it	mi
 800a3e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e8:	6029      	str	r1, [r5, #0]
 800a3ea:	bf48      	it	mi
 800a3ec:	6023      	strmi	r3, [r4, #0]
 800a3ee:	b91e      	cbnz	r6, 800a3f8 <_printf_i+0x1a4>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	f023 0320 	bic.w	r3, r3, #32
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	e7a7      	b.n	800a34c <_printf_i+0xf8>
 800a3fc:	4824      	ldr	r0, [pc, #144]	; (800a490 <_printf_i+0x23c>)
 800a3fe:	e7e4      	b.n	800a3ca <_printf_i+0x176>
 800a400:	4615      	mov	r5, r2
 800a402:	e7bd      	b.n	800a380 <_printf_i+0x12c>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	6826      	ldr	r6, [r4, #0]
 800a408:	6961      	ldr	r1, [r4, #20]
 800a40a:	1d18      	adds	r0, r3, #4
 800a40c:	6028      	str	r0, [r5, #0]
 800a40e:	0635      	lsls	r5, r6, #24
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	d501      	bpl.n	800a418 <_printf_i+0x1c4>
 800a414:	6019      	str	r1, [r3, #0]
 800a416:	e002      	b.n	800a41e <_printf_i+0x1ca>
 800a418:	0670      	lsls	r0, r6, #25
 800a41a:	d5fb      	bpl.n	800a414 <_printf_i+0x1c0>
 800a41c:	8019      	strh	r1, [r3, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	4615      	mov	r5, r2
 800a424:	e7bc      	b.n	800a3a0 <_printf_i+0x14c>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	602a      	str	r2, [r5, #0]
 800a42c:	681d      	ldr	r5, [r3, #0]
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	2100      	movs	r1, #0
 800a432:	4628      	mov	r0, r5
 800a434:	f7f5 fed4 	bl	80001e0 <memchr>
 800a438:	b108      	cbz	r0, 800a43e <_printf_i+0x1ea>
 800a43a:	1b40      	subs	r0, r0, r5
 800a43c:	6060      	str	r0, [r4, #4]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a448:	e7aa      	b.n	800a3a0 <_printf_i+0x14c>
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	462a      	mov	r2, r5
 800a44e:	4649      	mov	r1, r9
 800a450:	4640      	mov	r0, r8
 800a452:	47d0      	blx	sl
 800a454:	3001      	adds	r0, #1
 800a456:	d0ad      	beq.n	800a3b4 <_printf_i+0x160>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	079b      	lsls	r3, r3, #30
 800a45c:	d413      	bmi.n	800a486 <_printf_i+0x232>
 800a45e:	68e0      	ldr	r0, [r4, #12]
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	4298      	cmp	r0, r3
 800a464:	bfb8      	it	lt
 800a466:	4618      	movlt	r0, r3
 800a468:	e7a6      	b.n	800a3b8 <_printf_i+0x164>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4632      	mov	r2, r6
 800a46e:	4649      	mov	r1, r9
 800a470:	4640      	mov	r0, r8
 800a472:	47d0      	blx	sl
 800a474:	3001      	adds	r0, #1
 800a476:	d09d      	beq.n	800a3b4 <_printf_i+0x160>
 800a478:	3501      	adds	r5, #1
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	9903      	ldr	r1, [sp, #12]
 800a47e:	1a5b      	subs	r3, r3, r1
 800a480:	42ab      	cmp	r3, r5
 800a482:	dcf2      	bgt.n	800a46a <_printf_i+0x216>
 800a484:	e7eb      	b.n	800a45e <_printf_i+0x20a>
 800a486:	2500      	movs	r5, #0
 800a488:	f104 0619 	add.w	r6, r4, #25
 800a48c:	e7f5      	b.n	800a47a <_printf_i+0x226>
 800a48e:	bf00      	nop
 800a490:	0800d47e 	.word	0x0800d47e
 800a494:	0800d48f 	.word	0x0800d48f

0800a498 <std>:
 800a498:	2300      	movs	r3, #0
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	e9c0 3300 	strd	r3, r3, [r0]
 800a4a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4a6:	6083      	str	r3, [r0, #8]
 800a4a8:	8181      	strh	r1, [r0, #12]
 800a4aa:	6643      	str	r3, [r0, #100]	; 0x64
 800a4ac:	81c2      	strh	r2, [r0, #14]
 800a4ae:	6183      	str	r3, [r0, #24]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	305c      	adds	r0, #92	; 0x5c
 800a4b6:	f000 f8d1 	bl	800a65c <memset>
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <std+0x58>)
 800a4bc:	6263      	str	r3, [r4, #36]	; 0x24
 800a4be:	4b0d      	ldr	r3, [pc, #52]	; (800a4f4 <std+0x5c>)
 800a4c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <std+0x60>)
 800a4c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <std+0x64>)
 800a4c8:	6323      	str	r3, [r4, #48]	; 0x30
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <std+0x68>)
 800a4cc:	6224      	str	r4, [r4, #32]
 800a4ce:	429c      	cmp	r4, r3
 800a4d0:	d006      	beq.n	800a4e0 <std+0x48>
 800a4d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a4d6:	4294      	cmp	r4, r2
 800a4d8:	d002      	beq.n	800a4e0 <std+0x48>
 800a4da:	33d0      	adds	r3, #208	; 0xd0
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	d105      	bne.n	800a4ec <std+0x54>
 800a4e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e8:	f000 b8ee 	b.w	800a6c8 <__retarget_lock_init_recursive>
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800c051 	.word	0x0800c051
 800a4f4:	0800c073 	.word	0x0800c073
 800a4f8:	0800c0ab 	.word	0x0800c0ab
 800a4fc:	0800c0cf 	.word	0x0800c0cf
 800a500:	200046f8 	.word	0x200046f8

0800a504 <stdio_exit_handler>:
 800a504:	4a02      	ldr	r2, [pc, #8]	; (800a510 <stdio_exit_handler+0xc>)
 800a506:	4903      	ldr	r1, [pc, #12]	; (800a514 <stdio_exit_handler+0x10>)
 800a508:	4803      	ldr	r0, [pc, #12]	; (800a518 <stdio_exit_handler+0x14>)
 800a50a:	f000 b869 	b.w	800a5e0 <_fwalk_sglue>
 800a50e:	bf00      	nop
 800a510:	200000c0 	.word	0x200000c0
 800a514:	0800b8f1 	.word	0x0800b8f1
 800a518:	200000cc 	.word	0x200000cc

0800a51c <cleanup_stdio>:
 800a51c:	6841      	ldr	r1, [r0, #4]
 800a51e:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <cleanup_stdio+0x34>)
 800a520:	4299      	cmp	r1, r3
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	d001      	beq.n	800a52c <cleanup_stdio+0x10>
 800a528:	f001 f9e2 	bl	800b8f0 <_fflush_r>
 800a52c:	68a1      	ldr	r1, [r4, #8]
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <cleanup_stdio+0x38>)
 800a530:	4299      	cmp	r1, r3
 800a532:	d002      	beq.n	800a53a <cleanup_stdio+0x1e>
 800a534:	4620      	mov	r0, r4
 800a536:	f001 f9db 	bl	800b8f0 <_fflush_r>
 800a53a:	68e1      	ldr	r1, [r4, #12]
 800a53c:	4b06      	ldr	r3, [pc, #24]	; (800a558 <cleanup_stdio+0x3c>)
 800a53e:	4299      	cmp	r1, r3
 800a540:	d004      	beq.n	800a54c <cleanup_stdio+0x30>
 800a542:	4620      	mov	r0, r4
 800a544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a548:	f001 b9d2 	b.w	800b8f0 <_fflush_r>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	bf00      	nop
 800a550:	200046f8 	.word	0x200046f8
 800a554:	20004760 	.word	0x20004760
 800a558:	200047c8 	.word	0x200047c8

0800a55c <global_stdio_init.part.0>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <global_stdio_init.part.0+0x30>)
 800a560:	4c0b      	ldr	r4, [pc, #44]	; (800a590 <global_stdio_init.part.0+0x34>)
 800a562:	4a0c      	ldr	r2, [pc, #48]	; (800a594 <global_stdio_init.part.0+0x38>)
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	4620      	mov	r0, r4
 800a568:	2200      	movs	r2, #0
 800a56a:	2104      	movs	r1, #4
 800a56c:	f7ff ff94 	bl	800a498 <std>
 800a570:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a574:	2201      	movs	r2, #1
 800a576:	2109      	movs	r1, #9
 800a578:	f7ff ff8e 	bl	800a498 <std>
 800a57c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a580:	2202      	movs	r2, #2
 800a582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a586:	2112      	movs	r1, #18
 800a588:	f7ff bf86 	b.w	800a498 <std>
 800a58c:	20004830 	.word	0x20004830
 800a590:	200046f8 	.word	0x200046f8
 800a594:	0800a505 	.word	0x0800a505

0800a598 <__sfp_lock_acquire>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__sfp_lock_acquire+0x8>)
 800a59a:	f000 b896 	b.w	800a6ca <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	20004835 	.word	0x20004835

0800a5a4 <__sfp_lock_release>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__sfp_lock_release+0x8>)
 800a5a6:	f000 b891 	b.w	800a6cc <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	20004835 	.word	0x20004835

0800a5b0 <__sinit>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	f7ff fff0 	bl	800a598 <__sfp_lock_acquire>
 800a5b8:	6a23      	ldr	r3, [r4, #32]
 800a5ba:	b11b      	cbz	r3, 800a5c4 <__sinit+0x14>
 800a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c0:	f7ff bff0 	b.w	800a5a4 <__sfp_lock_release>
 800a5c4:	4b04      	ldr	r3, [pc, #16]	; (800a5d8 <__sinit+0x28>)
 800a5c6:	6223      	str	r3, [r4, #32]
 800a5c8:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <__sinit+0x2c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1f5      	bne.n	800a5bc <__sinit+0xc>
 800a5d0:	f7ff ffc4 	bl	800a55c <global_stdio_init.part.0>
 800a5d4:	e7f2      	b.n	800a5bc <__sinit+0xc>
 800a5d6:	bf00      	nop
 800a5d8:	0800a51d 	.word	0x0800a51d
 800a5dc:	20004830 	.word	0x20004830

0800a5e0 <_fwalk_sglue>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4688      	mov	r8, r1
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f4:	d505      	bpl.n	800a602 <_fwalk_sglue+0x22>
 800a5f6:	6824      	ldr	r4, [r4, #0]
 800a5f8:	2c00      	cmp	r4, #0
 800a5fa:	d1f7      	bne.n	800a5ec <_fwalk_sglue+0xc>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a602:	89ab      	ldrh	r3, [r5, #12]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d907      	bls.n	800a618 <_fwalk_sglue+0x38>
 800a608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a60c:	3301      	adds	r3, #1
 800a60e:	d003      	beq.n	800a618 <_fwalk_sglue+0x38>
 800a610:	4629      	mov	r1, r5
 800a612:	4638      	mov	r0, r7
 800a614:	47c0      	blx	r8
 800a616:	4306      	orrs	r6, r0
 800a618:	3568      	adds	r5, #104	; 0x68
 800a61a:	e7e9      	b.n	800a5f0 <_fwalk_sglue+0x10>

0800a61c <_vsiprintf_r>:
 800a61c:	b500      	push	{lr}
 800a61e:	b09b      	sub	sp, #108	; 0x6c
 800a620:	9100      	str	r1, [sp, #0]
 800a622:	9104      	str	r1, [sp, #16]
 800a624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a628:	9105      	str	r1, [sp, #20]
 800a62a:	9102      	str	r1, [sp, #8]
 800a62c:	4905      	ldr	r1, [pc, #20]	; (800a644 <_vsiprintf_r+0x28>)
 800a62e:	9103      	str	r1, [sp, #12]
 800a630:	4669      	mov	r1, sp
 800a632:	f000 ff31 	bl	800b498 <_svfiprintf_r>
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	b01b      	add	sp, #108	; 0x6c
 800a63e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a642:	bf00      	nop
 800a644:	ffff0208 	.word	0xffff0208

0800a648 <vsiprintf>:
 800a648:	4613      	mov	r3, r2
 800a64a:	460a      	mov	r2, r1
 800a64c:	4601      	mov	r1, r0
 800a64e:	4802      	ldr	r0, [pc, #8]	; (800a658 <vsiprintf+0x10>)
 800a650:	6800      	ldr	r0, [r0, #0]
 800a652:	f7ff bfe3 	b.w	800a61c <_vsiprintf_r>
 800a656:	bf00      	nop
 800a658:	20000118 	.word	0x20000118

0800a65c <memset>:
 800a65c:	4402      	add	r2, r0
 800a65e:	4603      	mov	r3, r0
 800a660:	4293      	cmp	r3, r2
 800a662:	d100      	bne.n	800a666 <memset+0xa>
 800a664:	4770      	bx	lr
 800a666:	f803 1b01 	strb.w	r1, [r3], #1
 800a66a:	e7f9      	b.n	800a660 <memset+0x4>

0800a66c <_localeconv_r>:
 800a66c:	4800      	ldr	r0, [pc, #0]	; (800a670 <_localeconv_r+0x4>)
 800a66e:	4770      	bx	lr
 800a670:	2000020c 	.word	0x2000020c

0800a674 <__errno>:
 800a674:	4b01      	ldr	r3, [pc, #4]	; (800a67c <__errno+0x8>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	20000118 	.word	0x20000118

0800a680 <__libc_init_array>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4d0d      	ldr	r5, [pc, #52]	; (800a6b8 <__libc_init_array+0x38>)
 800a684:	4c0d      	ldr	r4, [pc, #52]	; (800a6bc <__libc_init_array+0x3c>)
 800a686:	1b64      	subs	r4, r4, r5
 800a688:	10a4      	asrs	r4, r4, #2
 800a68a:	2600      	movs	r6, #0
 800a68c:	42a6      	cmp	r6, r4
 800a68e:	d109      	bne.n	800a6a4 <__libc_init_array+0x24>
 800a690:	4d0b      	ldr	r5, [pc, #44]	; (800a6c0 <__libc_init_array+0x40>)
 800a692:	4c0c      	ldr	r4, [pc, #48]	; (800a6c4 <__libc_init_array+0x44>)
 800a694:	f002 f920 	bl	800c8d8 <_init>
 800a698:	1b64      	subs	r4, r4, r5
 800a69a:	10a4      	asrs	r4, r4, #2
 800a69c:	2600      	movs	r6, #0
 800a69e:	42a6      	cmp	r6, r4
 800a6a0:	d105      	bne.n	800a6ae <__libc_init_array+0x2e>
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a8:	4798      	blx	r3
 800a6aa:	3601      	adds	r6, #1
 800a6ac:	e7ee      	b.n	800a68c <__libc_init_array+0xc>
 800a6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b2:	4798      	blx	r3
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	e7f2      	b.n	800a69e <__libc_init_array+0x1e>
 800a6b8:	0800d7e4 	.word	0x0800d7e4
 800a6bc:	0800d7e4 	.word	0x0800d7e4
 800a6c0:	0800d7e4 	.word	0x0800d7e4
 800a6c4:	0800d7e8 	.word	0x0800d7e8

0800a6c8 <__retarget_lock_init_recursive>:
 800a6c8:	4770      	bx	lr

0800a6ca <__retarget_lock_acquire_recursive>:
 800a6ca:	4770      	bx	lr

0800a6cc <__retarget_lock_release_recursive>:
 800a6cc:	4770      	bx	lr

0800a6ce <memcpy>:
 800a6ce:	440a      	add	r2, r1
 800a6d0:	4291      	cmp	r1, r2
 800a6d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6d6:	d100      	bne.n	800a6da <memcpy+0xc>
 800a6d8:	4770      	bx	lr
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e4:	4291      	cmp	r1, r2
 800a6e6:	d1f9      	bne.n	800a6dc <memcpy+0xe>
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <quorem>:
 800a6ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ee:	6903      	ldr	r3, [r0, #16]
 800a6f0:	690c      	ldr	r4, [r1, #16]
 800a6f2:	42a3      	cmp	r3, r4
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	db7e      	blt.n	800a7f6 <quorem+0x10c>
 800a6f8:	3c01      	subs	r4, #1
 800a6fa:	f101 0814 	add.w	r8, r1, #20
 800a6fe:	f100 0514 	add.w	r5, r0, #20
 800a702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a70c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a710:	3301      	adds	r3, #1
 800a712:	429a      	cmp	r2, r3
 800a714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a71c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a720:	d331      	bcc.n	800a786 <quorem+0x9c>
 800a722:	f04f 0e00 	mov.w	lr, #0
 800a726:	4640      	mov	r0, r8
 800a728:	46ac      	mov	ip, r5
 800a72a:	46f2      	mov	sl, lr
 800a72c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a730:	b293      	uxth	r3, r2
 800a732:	fb06 e303 	mla	r3, r6, r3, lr
 800a736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a73a:	0c1a      	lsrs	r2, r3, #16
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	ebaa 0303 	sub.w	r3, sl, r3
 800a742:	f8dc a000 	ldr.w	sl, [ip]
 800a746:	fa13 f38a 	uxtah	r3, r3, sl
 800a74a:	fb06 220e 	mla	r2, r6, lr, r2
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	9b00      	ldr	r3, [sp, #0]
 800a752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a756:	b292      	uxth	r2, r2
 800a758:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a75c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a760:	f8bd 3000 	ldrh.w	r3, [sp]
 800a764:	4581      	cmp	r9, r0
 800a766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a76a:	f84c 3b04 	str.w	r3, [ip], #4
 800a76e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a772:	d2db      	bcs.n	800a72c <quorem+0x42>
 800a774:	f855 300b 	ldr.w	r3, [r5, fp]
 800a778:	b92b      	cbnz	r3, 800a786 <quorem+0x9c>
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	429d      	cmp	r5, r3
 800a780:	461a      	mov	r2, r3
 800a782:	d32c      	bcc.n	800a7de <quorem+0xf4>
 800a784:	613c      	str	r4, [r7, #16]
 800a786:	4638      	mov	r0, r7
 800a788:	f001 fb62 	bl	800be50 <__mcmp>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	db22      	blt.n	800a7d6 <quorem+0xec>
 800a790:	3601      	adds	r6, #1
 800a792:	4629      	mov	r1, r5
 800a794:	2000      	movs	r0, #0
 800a796:	f858 2b04 	ldr.w	r2, [r8], #4
 800a79a:	f8d1 c000 	ldr.w	ip, [r1]
 800a79e:	b293      	uxth	r3, r2
 800a7a0:	1ac3      	subs	r3, r0, r3
 800a7a2:	0c12      	lsrs	r2, r2, #16
 800a7a4:	fa13 f38c 	uxtah	r3, r3, ip
 800a7a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a7ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b6:	45c1      	cmp	r9, r8
 800a7b8:	f841 3b04 	str.w	r3, [r1], #4
 800a7bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7c0:	d2e9      	bcs.n	800a796 <quorem+0xac>
 800a7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ca:	b922      	cbnz	r2, 800a7d6 <quorem+0xec>
 800a7cc:	3b04      	subs	r3, #4
 800a7ce:	429d      	cmp	r5, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	d30a      	bcc.n	800a7ea <quorem+0x100>
 800a7d4:	613c      	str	r4, [r7, #16]
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	b003      	add	sp, #12
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d1ce      	bne.n	800a784 <quorem+0x9a>
 800a7e6:	3c01      	subs	r4, #1
 800a7e8:	e7c9      	b.n	800a77e <quorem+0x94>
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	3b04      	subs	r3, #4
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d1f0      	bne.n	800a7d4 <quorem+0xea>
 800a7f2:	3c01      	subs	r4, #1
 800a7f4:	e7eb      	b.n	800a7ce <quorem+0xe4>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e7ee      	b.n	800a7d8 <quorem+0xee>
 800a7fa:	0000      	movs	r0, r0
 800a7fc:	0000      	movs	r0, r0
	...

0800a800 <_dtoa_r>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	ed2d 8b04 	vpush	{d8-d9}
 800a808:	69c5      	ldr	r5, [r0, #28]
 800a80a:	b093      	sub	sp, #76	; 0x4c
 800a80c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a810:	ec57 6b10 	vmov	r6, r7, d0
 800a814:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a818:	9107      	str	r1, [sp, #28]
 800a81a:	4604      	mov	r4, r0
 800a81c:	920a      	str	r2, [sp, #40]	; 0x28
 800a81e:	930d      	str	r3, [sp, #52]	; 0x34
 800a820:	b975      	cbnz	r5, 800a840 <_dtoa_r+0x40>
 800a822:	2010      	movs	r0, #16
 800a824:	f000 ff36 	bl	800b694 <malloc>
 800a828:	4602      	mov	r2, r0
 800a82a:	61e0      	str	r0, [r4, #28]
 800a82c:	b920      	cbnz	r0, 800a838 <_dtoa_r+0x38>
 800a82e:	4bae      	ldr	r3, [pc, #696]	; (800aae8 <_dtoa_r+0x2e8>)
 800a830:	21ef      	movs	r1, #239	; 0xef
 800a832:	48ae      	ldr	r0, [pc, #696]	; (800aaec <_dtoa_r+0x2ec>)
 800a834:	f001 fcee 	bl	800c214 <__assert_func>
 800a838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a83c:	6005      	str	r5, [r0, #0]
 800a83e:	60c5      	str	r5, [r0, #12]
 800a840:	69e3      	ldr	r3, [r4, #28]
 800a842:	6819      	ldr	r1, [r3, #0]
 800a844:	b151      	cbz	r1, 800a85c <_dtoa_r+0x5c>
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	604a      	str	r2, [r1, #4]
 800a84a:	2301      	movs	r3, #1
 800a84c:	4093      	lsls	r3, r2
 800a84e:	608b      	str	r3, [r1, #8]
 800a850:	4620      	mov	r0, r4
 800a852:	f001 f8c1 	bl	800b9d8 <_Bfree>
 800a856:	69e3      	ldr	r3, [r4, #28]
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	1e3b      	subs	r3, r7, #0
 800a85e:	bfbb      	ittet	lt
 800a860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a864:	9303      	strlt	r3, [sp, #12]
 800a866:	2300      	movge	r3, #0
 800a868:	2201      	movlt	r2, #1
 800a86a:	bfac      	ite	ge
 800a86c:	f8c8 3000 	strge.w	r3, [r8]
 800a870:	f8c8 2000 	strlt.w	r2, [r8]
 800a874:	4b9e      	ldr	r3, [pc, #632]	; (800aaf0 <_dtoa_r+0x2f0>)
 800a876:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a87a:	ea33 0308 	bics.w	r3, r3, r8
 800a87e:	d11b      	bne.n	800a8b8 <_dtoa_r+0xb8>
 800a880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a882:	f242 730f 	movw	r3, #9999	; 0x270f
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a88c:	4333      	orrs	r3, r6
 800a88e:	f000 8593 	beq.w	800b3b8 <_dtoa_r+0xbb8>
 800a892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a894:	b963      	cbnz	r3, 800a8b0 <_dtoa_r+0xb0>
 800a896:	4b97      	ldr	r3, [pc, #604]	; (800aaf4 <_dtoa_r+0x2f4>)
 800a898:	e027      	b.n	800a8ea <_dtoa_r+0xea>
 800a89a:	4b97      	ldr	r3, [pc, #604]	; (800aaf8 <_dtoa_r+0x2f8>)
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	9800      	ldr	r0, [sp, #0]
 800a8a6:	b013      	add	sp, #76	; 0x4c
 800a8a8:	ecbd 8b04 	vpop	{d8-d9}
 800a8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b0:	4b90      	ldr	r3, [pc, #576]	; (800aaf4 <_dtoa_r+0x2f4>)
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	3303      	adds	r3, #3
 800a8b6:	e7f3      	b.n	800a8a0 <_dtoa_r+0xa0>
 800a8b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	ec51 0b17 	vmov	r0, r1, d7
 800a8c2:	eeb0 8a47 	vmov.f32	s16, s14
 800a8c6:	eef0 8a67 	vmov.f32	s17, s15
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f7f6 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	b160      	cbz	r0, 800a8ee <_dtoa_r+0xee>
 800a8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 8568 	beq.w	800b3b2 <_dtoa_r+0xbb2>
 800a8e2:	4b86      	ldr	r3, [pc, #536]	; (800aafc <_dtoa_r+0x2fc>)
 800a8e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	e7da      	b.n	800a8a4 <_dtoa_r+0xa4>
 800a8ee:	aa10      	add	r2, sp, #64	; 0x40
 800a8f0:	a911      	add	r1, sp, #68	; 0x44
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a8f8:	eef0 0a68 	vmov.f32	s1, s17
 800a8fc:	f001 fb4e 	bl	800bf9c <__d2b>
 800a900:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a904:	4682      	mov	sl, r0
 800a906:	2d00      	cmp	r5, #0
 800a908:	d07f      	beq.n	800aa0a <_dtoa_r+0x20a>
 800a90a:	ee18 3a90 	vmov	r3, s17
 800a90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a912:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a916:	ec51 0b18 	vmov	r0, r1, d8
 800a91a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a91e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a922:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a926:	4619      	mov	r1, r3
 800a928:	2200      	movs	r2, #0
 800a92a:	4b75      	ldr	r3, [pc, #468]	; (800ab00 <_dtoa_r+0x300>)
 800a92c:	f7f5 fcb4 	bl	8000298 <__aeabi_dsub>
 800a930:	a367      	add	r3, pc, #412	; (adr r3, 800aad0 <_dtoa_r+0x2d0>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fe67 	bl	8000608 <__aeabi_dmul>
 800a93a:	a367      	add	r3, pc, #412	; (adr r3, 800aad8 <_dtoa_r+0x2d8>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fcac 	bl	800029c <__adddf3>
 800a944:	4606      	mov	r6, r0
 800a946:	4628      	mov	r0, r5
 800a948:	460f      	mov	r7, r1
 800a94a:	f7f5 fdf3 	bl	8000534 <__aeabi_i2d>
 800a94e:	a364      	add	r3, pc, #400	; (adr r3, 800aae0 <_dtoa_r+0x2e0>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	f7f5 fc9c 	bl	800029c <__adddf3>
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	f7f6 f8fe 	bl	8000b68 <__aeabi_d2iz>
 800a96c:	2200      	movs	r2, #0
 800a96e:	4683      	mov	fp, r0
 800a970:	2300      	movs	r3, #0
 800a972:	4630      	mov	r0, r6
 800a974:	4639      	mov	r1, r7
 800a976:	f7f6 f8b9 	bl	8000aec <__aeabi_dcmplt>
 800a97a:	b148      	cbz	r0, 800a990 <_dtoa_r+0x190>
 800a97c:	4658      	mov	r0, fp
 800a97e:	f7f5 fdd9 	bl	8000534 <__aeabi_i2d>
 800a982:	4632      	mov	r2, r6
 800a984:	463b      	mov	r3, r7
 800a986:	f7f6 f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a98a:	b908      	cbnz	r0, 800a990 <_dtoa_r+0x190>
 800a98c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a990:	f1bb 0f16 	cmp.w	fp, #22
 800a994:	d857      	bhi.n	800aa46 <_dtoa_r+0x246>
 800a996:	4b5b      	ldr	r3, [pc, #364]	; (800ab04 <_dtoa_r+0x304>)
 800a998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	ec51 0b18 	vmov	r0, r1, d8
 800a9a4:	f7f6 f8a2 	bl	8000aec <__aeabi_dcmplt>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d04e      	beq.n	800aa4a <_dtoa_r+0x24a>
 800a9ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9b6:	1b5b      	subs	r3, r3, r5
 800a9b8:	1e5a      	subs	r2, r3, #1
 800a9ba:	bf45      	ittet	mi
 800a9bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9c0:	9305      	strmi	r3, [sp, #20]
 800a9c2:	2300      	movpl	r3, #0
 800a9c4:	2300      	movmi	r3, #0
 800a9c6:	9206      	str	r2, [sp, #24]
 800a9c8:	bf54      	ite	pl
 800a9ca:	9305      	strpl	r3, [sp, #20]
 800a9cc:	9306      	strmi	r3, [sp, #24]
 800a9ce:	f1bb 0f00 	cmp.w	fp, #0
 800a9d2:	db3c      	blt.n	800aa4e <_dtoa_r+0x24e>
 800a9d4:	9b06      	ldr	r3, [sp, #24]
 800a9d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a9da:	445b      	add	r3, fp
 800a9dc:	9306      	str	r3, [sp, #24]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9308      	str	r3, [sp, #32]
 800a9e2:	9b07      	ldr	r3, [sp, #28]
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d868      	bhi.n	800aaba <_dtoa_r+0x2ba>
 800a9e8:	2b05      	cmp	r3, #5
 800a9ea:	bfc4      	itt	gt
 800a9ec:	3b04      	subgt	r3, #4
 800a9ee:	9307      	strgt	r3, [sp, #28]
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a9f6:	bfcc      	ite	gt
 800a9f8:	2500      	movgt	r5, #0
 800a9fa:	2501      	movle	r5, #1
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	f200 8085 	bhi.w	800ab0c <_dtoa_r+0x30c>
 800aa02:	e8df f003 	tbb	[pc, r3]
 800aa06:	3b2e      	.short	0x3b2e
 800aa08:	5839      	.short	0x5839
 800aa0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa0e:	441d      	add	r5, r3
 800aa10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	bfc1      	itttt	gt
 800aa18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa28:	bfd6      	itet	le
 800aa2a:	f1c3 0320 	rsble	r3, r3, #32
 800aa2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa32:	fa06 f003 	lslle.w	r0, r6, r3
 800aa36:	f7f5 fd6d 	bl	8000514 <__aeabi_ui2d>
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa40:	3d01      	subs	r5, #1
 800aa42:	920e      	str	r2, [sp, #56]	; 0x38
 800aa44:	e76f      	b.n	800a926 <_dtoa_r+0x126>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e7b3      	b.n	800a9b2 <_dtoa_r+0x1b2>
 800aa4a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa4c:	e7b2      	b.n	800a9b4 <_dtoa_r+0x1b4>
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	eba3 030b 	sub.w	r3, r3, fp
 800aa54:	9305      	str	r3, [sp, #20]
 800aa56:	f1cb 0300 	rsb	r3, fp, #0
 800aa5a:	9308      	str	r3, [sp, #32]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa60:	e7bf      	b.n	800a9e2 <_dtoa_r+0x1e2>
 800aa62:	2300      	movs	r3, #0
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc52      	bgt.n	800ab12 <_dtoa_r+0x312>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	461a      	mov	r2, r3
 800aa74:	920a      	str	r2, [sp, #40]	; 0x28
 800aa76:	e00b      	b.n	800aa90 <_dtoa_r+0x290>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e7f3      	b.n	800aa64 <_dtoa_r+0x264>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa82:	445b      	add	r3, fp
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	3301      	adds	r3, #1
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	bfb8      	it	lt
 800aa8e:	2301      	movlt	r3, #1
 800aa90:	69e0      	ldr	r0, [r4, #28]
 800aa92:	2100      	movs	r1, #0
 800aa94:	2204      	movs	r2, #4
 800aa96:	f102 0614 	add.w	r6, r2, #20
 800aa9a:	429e      	cmp	r6, r3
 800aa9c:	d93d      	bls.n	800ab1a <_dtoa_r+0x31a>
 800aa9e:	6041      	str	r1, [r0, #4]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 ff59 	bl	800b958 <_Balloc>
 800aaa6:	9000      	str	r0, [sp, #0]
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d139      	bne.n	800ab20 <_dtoa_r+0x320>
 800aaac:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <_dtoa_r+0x308>)
 800aaae:	4602      	mov	r2, r0
 800aab0:	f240 11af 	movw	r1, #431	; 0x1af
 800aab4:	e6bd      	b.n	800a832 <_dtoa_r+0x32>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e7e1      	b.n	800aa7e <_dtoa_r+0x27e>
 800aaba:	2501      	movs	r5, #1
 800aabc:	2300      	movs	r3, #0
 800aabe:	9307      	str	r3, [sp, #28]
 800aac0:	9509      	str	r5, [sp, #36]	; 0x24
 800aac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	2200      	movs	r2, #0
 800aacc:	2312      	movs	r3, #18
 800aace:	e7d1      	b.n	800aa74 <_dtoa_r+0x274>
 800aad0:	636f4361 	.word	0x636f4361
 800aad4:	3fd287a7 	.word	0x3fd287a7
 800aad8:	8b60c8b3 	.word	0x8b60c8b3
 800aadc:	3fc68a28 	.word	0x3fc68a28
 800aae0:	509f79fb 	.word	0x509f79fb
 800aae4:	3fd34413 	.word	0x3fd34413
 800aae8:	0800d4ad 	.word	0x0800d4ad
 800aaec:	0800d4c4 	.word	0x0800d4c4
 800aaf0:	7ff00000 	.word	0x7ff00000
 800aaf4:	0800d4a9 	.word	0x0800d4a9
 800aaf8:	0800d4a0 	.word	0x0800d4a0
 800aafc:	0800d47d 	.word	0x0800d47d
 800ab00:	3ff80000 	.word	0x3ff80000
 800ab04:	0800d5c0 	.word	0x0800d5c0
 800ab08:	0800d51c 	.word	0x0800d51c
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab10:	e7d7      	b.n	800aac2 <_dtoa_r+0x2c2>
 800ab12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	9304      	str	r3, [sp, #16]
 800ab18:	e7ba      	b.n	800aa90 <_dtoa_r+0x290>
 800ab1a:	3101      	adds	r1, #1
 800ab1c:	0052      	lsls	r2, r2, #1
 800ab1e:	e7ba      	b.n	800aa96 <_dtoa_r+0x296>
 800ab20:	69e3      	ldr	r3, [r4, #28]
 800ab22:	9a00      	ldr	r2, [sp, #0]
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	2b0e      	cmp	r3, #14
 800ab2a:	f200 80a8 	bhi.w	800ac7e <_dtoa_r+0x47e>
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	f000 80a5 	beq.w	800ac7e <_dtoa_r+0x47e>
 800ab34:	f1bb 0f00 	cmp.w	fp, #0
 800ab38:	dd38      	ble.n	800abac <_dtoa_r+0x3ac>
 800ab3a:	4bc0      	ldr	r3, [pc, #768]	; (800ae3c <_dtoa_r+0x63c>)
 800ab3c:	f00b 020f 	and.w	r2, fp, #15
 800ab40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ab50:	d019      	beq.n	800ab86 <_dtoa_r+0x386>
 800ab52:	4bbb      	ldr	r3, [pc, #748]	; (800ae40 <_dtoa_r+0x640>)
 800ab54:	ec51 0b18 	vmov	r0, r1, d8
 800ab58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab5c:	f7f5 fe7e 	bl	800085c <__aeabi_ddiv>
 800ab60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab64:	f008 080f 	and.w	r8, r8, #15
 800ab68:	2503      	movs	r5, #3
 800ab6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae40 <_dtoa_r+0x640>
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	d10a      	bne.n	800ab8a <_dtoa_r+0x38a>
 800ab74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab78:	4632      	mov	r2, r6
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	f7f5 fe6e 	bl	800085c <__aeabi_ddiv>
 800ab80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab84:	e02b      	b.n	800abde <_dtoa_r+0x3de>
 800ab86:	2502      	movs	r5, #2
 800ab88:	e7ef      	b.n	800ab6a <_dtoa_r+0x36a>
 800ab8a:	f018 0f01 	tst.w	r8, #1
 800ab8e:	d008      	beq.n	800aba2 <_dtoa_r+0x3a2>
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab98:	f7f5 fd36 	bl	8000608 <__aeabi_dmul>
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460f      	mov	r7, r1
 800aba2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aba6:	f109 0908 	add.w	r9, r9, #8
 800abaa:	e7e0      	b.n	800ab6e <_dtoa_r+0x36e>
 800abac:	f000 809f 	beq.w	800acee <_dtoa_r+0x4ee>
 800abb0:	f1cb 0600 	rsb	r6, fp, #0
 800abb4:	4ba1      	ldr	r3, [pc, #644]	; (800ae3c <_dtoa_r+0x63c>)
 800abb6:	4fa2      	ldr	r7, [pc, #648]	; (800ae40 <_dtoa_r+0x640>)
 800abb8:	f006 020f 	and.w	r2, r6, #15
 800abbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	ec51 0b18 	vmov	r0, r1, d8
 800abc8:	f7f5 fd1e 	bl	8000608 <__aeabi_dmul>
 800abcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd0:	1136      	asrs	r6, r6, #4
 800abd2:	2300      	movs	r3, #0
 800abd4:	2502      	movs	r5, #2
 800abd6:	2e00      	cmp	r6, #0
 800abd8:	d17e      	bne.n	800acd8 <_dtoa_r+0x4d8>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1d0      	bne.n	800ab80 <_dtoa_r+0x380>
 800abde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8084 	beq.w	800acf2 <_dtoa_r+0x4f2>
 800abea:	4b96      	ldr	r3, [pc, #600]	; (800ae44 <_dtoa_r+0x644>)
 800abec:	2200      	movs	r2, #0
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f7f5 ff7b 	bl	8000aec <__aeabi_dcmplt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d07b      	beq.n	800acf2 <_dtoa_r+0x4f2>
 800abfa:	9b04      	ldr	r3, [sp, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d078      	beq.n	800acf2 <_dtoa_r+0x4f2>
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dd39      	ble.n	800ac7a <_dtoa_r+0x47a>
 800ac06:	4b90      	ldr	r3, [pc, #576]	; (800ae48 <_dtoa_r+0x648>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	f7f5 fcfb 	bl	8000608 <__aeabi_dmul>
 800ac12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac16:	9e01      	ldr	r6, [sp, #4]
 800ac18:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7f5 fc86 	bl	8000534 <__aeabi_i2d>
 800ac28:	4642      	mov	r2, r8
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	4b86      	ldr	r3, [pc, #536]	; (800ae4c <_dtoa_r+0x64c>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	f7f5 fb32 	bl	800029c <__adddf3>
 800ac38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac40:	9303      	str	r3, [sp, #12]
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d158      	bne.n	800acf8 <_dtoa_r+0x4f8>
 800ac46:	4b82      	ldr	r3, [pc, #520]	; (800ae50 <_dtoa_r+0x650>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	f7f5 fb23 	bl	8000298 <__aeabi_dsub>
 800ac52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac56:	4680      	mov	r8, r0
 800ac58:	4689      	mov	r9, r1
 800ac5a:	f7f5 ff65 	bl	8000b28 <__aeabi_dcmpgt>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f040 8296 	bne.w	800b190 <_dtoa_r+0x990>
 800ac64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac68:	4640      	mov	r0, r8
 800ac6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7f5 ff3c 	bl	8000aec <__aeabi_dcmplt>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f040 8289 	bne.w	800b18c <_dtoa_r+0x98c>
 800ac7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f2c0 814e 	blt.w	800af22 <_dtoa_r+0x722>
 800ac86:	f1bb 0f0e 	cmp.w	fp, #14
 800ac8a:	f300 814a 	bgt.w	800af22 <_dtoa_r+0x722>
 800ac8e:	4b6b      	ldr	r3, [pc, #428]	; (800ae3c <_dtoa_r+0x63c>)
 800ac90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f280 80dc 	bge.w	800ae58 <_dtoa_r+0x658>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f300 80d8 	bgt.w	800ae58 <_dtoa_r+0x658>
 800aca8:	f040 826f 	bne.w	800b18a <_dtoa_r+0x98a>
 800acac:	4b68      	ldr	r3, [pc, #416]	; (800ae50 <_dtoa_r+0x650>)
 800acae:	2200      	movs	r2, #0
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 fca8 	bl	8000608 <__aeabi_dmul>
 800acb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acbc:	f7f5 ff2a 	bl	8000b14 <__aeabi_dcmpge>
 800acc0:	9e04      	ldr	r6, [sp, #16]
 800acc2:	4637      	mov	r7, r6
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f040 8245 	bne.w	800b154 <_dtoa_r+0x954>
 800acca:	9d00      	ldr	r5, [sp, #0]
 800accc:	2331      	movs	r3, #49	; 0x31
 800acce:	f805 3b01 	strb.w	r3, [r5], #1
 800acd2:	f10b 0b01 	add.w	fp, fp, #1
 800acd6:	e241      	b.n	800b15c <_dtoa_r+0x95c>
 800acd8:	07f2      	lsls	r2, r6, #31
 800acda:	d505      	bpl.n	800ace8 <_dtoa_r+0x4e8>
 800acdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace0:	f7f5 fc92 	bl	8000608 <__aeabi_dmul>
 800ace4:	3501      	adds	r5, #1
 800ace6:	2301      	movs	r3, #1
 800ace8:	1076      	asrs	r6, r6, #1
 800acea:	3708      	adds	r7, #8
 800acec:	e773      	b.n	800abd6 <_dtoa_r+0x3d6>
 800acee:	2502      	movs	r5, #2
 800acf0:	e775      	b.n	800abde <_dtoa_r+0x3de>
 800acf2:	9e04      	ldr	r6, [sp, #16]
 800acf4:	465f      	mov	r7, fp
 800acf6:	e792      	b.n	800ac1e <_dtoa_r+0x41e>
 800acf8:	9900      	ldr	r1, [sp, #0]
 800acfa:	4b50      	ldr	r3, [pc, #320]	; (800ae3c <_dtoa_r+0x63c>)
 800acfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad00:	4431      	add	r1, r6
 800ad02:	9102      	str	r1, [sp, #8]
 800ad04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad06:	eeb0 9a47 	vmov.f32	s18, s14
 800ad0a:	eef0 9a67 	vmov.f32	s19, s15
 800ad0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad16:	2900      	cmp	r1, #0
 800ad18:	d044      	beq.n	800ada4 <_dtoa_r+0x5a4>
 800ad1a:	494e      	ldr	r1, [pc, #312]	; (800ae54 <_dtoa_r+0x654>)
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f7f5 fd9d 	bl	800085c <__aeabi_ddiv>
 800ad22:	ec53 2b19 	vmov	r2, r3, d9
 800ad26:	f7f5 fab7 	bl	8000298 <__aeabi_dsub>
 800ad2a:	9d00      	ldr	r5, [sp, #0]
 800ad2c:	ec41 0b19 	vmov	d9, r0, r1
 800ad30:	4649      	mov	r1, r9
 800ad32:	4640      	mov	r0, r8
 800ad34:	f7f5 ff18 	bl	8000b68 <__aeabi_d2iz>
 800ad38:	4606      	mov	r6, r0
 800ad3a:	f7f5 fbfb 	bl	8000534 <__aeabi_i2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4640      	mov	r0, r8
 800ad44:	4649      	mov	r1, r9
 800ad46:	f7f5 faa7 	bl	8000298 <__aeabi_dsub>
 800ad4a:	3630      	adds	r6, #48	; 0x30
 800ad4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad50:	ec53 2b19 	vmov	r2, r3, d9
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	f7f5 fec8 	bl	8000aec <__aeabi_dcmplt>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d164      	bne.n	800ae2a <_dtoa_r+0x62a>
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	4937      	ldr	r1, [pc, #220]	; (800ae44 <_dtoa_r+0x644>)
 800ad66:	2000      	movs	r0, #0
 800ad68:	f7f5 fa96 	bl	8000298 <__aeabi_dsub>
 800ad6c:	ec53 2b19 	vmov	r2, r3, d9
 800ad70:	f7f5 febc 	bl	8000aec <__aeabi_dcmplt>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f040 80b6 	bne.w	800aee6 <_dtoa_r+0x6e6>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	429d      	cmp	r5, r3
 800ad7e:	f43f af7c 	beq.w	800ac7a <_dtoa_r+0x47a>
 800ad82:	4b31      	ldr	r3, [pc, #196]	; (800ae48 <_dtoa_r+0x648>)
 800ad84:	ec51 0b19 	vmov	r0, r1, d9
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f7f5 fc3d 	bl	8000608 <__aeabi_dmul>
 800ad8e:	4b2e      	ldr	r3, [pc, #184]	; (800ae48 <_dtoa_r+0x648>)
 800ad90:	ec41 0b19 	vmov	d9, r0, r1
 800ad94:	2200      	movs	r2, #0
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 fc35 	bl	8000608 <__aeabi_dmul>
 800ad9e:	4680      	mov	r8, r0
 800ada0:	4689      	mov	r9, r1
 800ada2:	e7c5      	b.n	800ad30 <_dtoa_r+0x530>
 800ada4:	ec51 0b17 	vmov	r0, r1, d7
 800ada8:	f7f5 fc2e 	bl	8000608 <__aeabi_dmul>
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	9d00      	ldr	r5, [sp, #0]
 800adb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800adb2:	ec41 0b19 	vmov	d9, r0, r1
 800adb6:	4649      	mov	r1, r9
 800adb8:	4640      	mov	r0, r8
 800adba:	f7f5 fed5 	bl	8000b68 <__aeabi_d2iz>
 800adbe:	4606      	mov	r6, r0
 800adc0:	f7f5 fbb8 	bl	8000534 <__aeabi_i2d>
 800adc4:	3630      	adds	r6, #48	; 0x30
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fa63 	bl	8000298 <__aeabi_dsub>
 800add2:	f805 6b01 	strb.w	r6, [r5], #1
 800add6:	9b02      	ldr	r3, [sp, #8]
 800add8:	429d      	cmp	r5, r3
 800adda:	4680      	mov	r8, r0
 800addc:	4689      	mov	r9, r1
 800adde:	f04f 0200 	mov.w	r2, #0
 800ade2:	d124      	bne.n	800ae2e <_dtoa_r+0x62e>
 800ade4:	4b1b      	ldr	r3, [pc, #108]	; (800ae54 <_dtoa_r+0x654>)
 800ade6:	ec51 0b19 	vmov	r0, r1, d9
 800adea:	f7f5 fa57 	bl	800029c <__adddf3>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4640      	mov	r0, r8
 800adf4:	4649      	mov	r1, r9
 800adf6:	f7f5 fe97 	bl	8000b28 <__aeabi_dcmpgt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d173      	bne.n	800aee6 <_dtoa_r+0x6e6>
 800adfe:	ec53 2b19 	vmov	r2, r3, d9
 800ae02:	4914      	ldr	r1, [pc, #80]	; (800ae54 <_dtoa_r+0x654>)
 800ae04:	2000      	movs	r0, #0
 800ae06:	f7f5 fa47 	bl	8000298 <__aeabi_dsub>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4640      	mov	r0, r8
 800ae10:	4649      	mov	r1, r9
 800ae12:	f7f5 fe6b 	bl	8000aec <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f43f af2f 	beq.w	800ac7a <_dtoa_r+0x47a>
 800ae1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae1e:	1e6b      	subs	r3, r5, #1
 800ae20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae26:	2b30      	cmp	r3, #48	; 0x30
 800ae28:	d0f8      	beq.n	800ae1c <_dtoa_r+0x61c>
 800ae2a:	46bb      	mov	fp, r7
 800ae2c:	e04a      	b.n	800aec4 <_dtoa_r+0x6c4>
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <_dtoa_r+0x648>)
 800ae30:	f7f5 fbea 	bl	8000608 <__aeabi_dmul>
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	e7bd      	b.n	800adb6 <_dtoa_r+0x5b6>
 800ae3a:	bf00      	nop
 800ae3c:	0800d5c0 	.word	0x0800d5c0
 800ae40:	0800d598 	.word	0x0800d598
 800ae44:	3ff00000 	.word	0x3ff00000
 800ae48:	40240000 	.word	0x40240000
 800ae4c:	401c0000 	.word	0x401c0000
 800ae50:	40140000 	.word	0x40140000
 800ae54:	3fe00000 	.word	0x3fe00000
 800ae58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae5c:	9d00      	ldr	r5, [sp, #0]
 800ae5e:	4642      	mov	r2, r8
 800ae60:	464b      	mov	r3, r9
 800ae62:	4630      	mov	r0, r6
 800ae64:	4639      	mov	r1, r7
 800ae66:	f7f5 fcf9 	bl	800085c <__aeabi_ddiv>
 800ae6a:	f7f5 fe7d 	bl	8000b68 <__aeabi_d2iz>
 800ae6e:	9001      	str	r0, [sp, #4]
 800ae70:	f7f5 fb60 	bl	8000534 <__aeabi_i2d>
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	f7f5 fbc6 	bl	8000608 <__aeabi_dmul>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fa08 	bl	8000298 <__aeabi_dsub>
 800ae88:	9e01      	ldr	r6, [sp, #4]
 800ae8a:	9f04      	ldr	r7, [sp, #16]
 800ae8c:	3630      	adds	r6, #48	; 0x30
 800ae8e:	f805 6b01 	strb.w	r6, [r5], #1
 800ae92:	9e00      	ldr	r6, [sp, #0]
 800ae94:	1bae      	subs	r6, r5, r6
 800ae96:	42b7      	cmp	r7, r6
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	d134      	bne.n	800af08 <_dtoa_r+0x708>
 800ae9e:	f7f5 f9fd 	bl	800029c <__adddf3>
 800aea2:	4642      	mov	r2, r8
 800aea4:	464b      	mov	r3, r9
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	f7f5 fe3d 	bl	8000b28 <__aeabi_dcmpgt>
 800aeae:	b9c8      	cbnz	r0, 800aee4 <_dtoa_r+0x6e4>
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fe0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800aebc:	b110      	cbz	r0, 800aec4 <_dtoa_r+0x6c4>
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d40f      	bmi.n	800aee4 <_dtoa_r+0x6e4>
 800aec4:	4651      	mov	r1, sl
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fd86 	bl	800b9d8 <_Bfree>
 800aecc:	2300      	movs	r3, #0
 800aece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aed0:	702b      	strb	r3, [r5, #0]
 800aed2:	f10b 0301 	add.w	r3, fp, #1
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f43f ace2 	beq.w	800a8a4 <_dtoa_r+0xa4>
 800aee0:	601d      	str	r5, [r3, #0]
 800aee2:	e4df      	b.n	800a8a4 <_dtoa_r+0xa4>
 800aee4:	465f      	mov	r7, fp
 800aee6:	462b      	mov	r3, r5
 800aee8:	461d      	mov	r5, r3
 800aeea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeee:	2a39      	cmp	r2, #57	; 0x39
 800aef0:	d106      	bne.n	800af00 <_dtoa_r+0x700>
 800aef2:	9a00      	ldr	r2, [sp, #0]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d1f7      	bne.n	800aee8 <_dtoa_r+0x6e8>
 800aef8:	9900      	ldr	r1, [sp, #0]
 800aefa:	2230      	movs	r2, #48	; 0x30
 800aefc:	3701      	adds	r7, #1
 800aefe:	700a      	strb	r2, [r1, #0]
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	3201      	adds	r2, #1
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	e790      	b.n	800ae2a <_dtoa_r+0x62a>
 800af08:	4ba3      	ldr	r3, [pc, #652]	; (800b198 <_dtoa_r+0x998>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	f7f5 fb7c 	bl	8000608 <__aeabi_dmul>
 800af10:	2200      	movs	r2, #0
 800af12:	2300      	movs	r3, #0
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	f7f5 fdde 	bl	8000ad8 <__aeabi_dcmpeq>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d09e      	beq.n	800ae5e <_dtoa_r+0x65e>
 800af20:	e7d0      	b.n	800aec4 <_dtoa_r+0x6c4>
 800af22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af24:	2a00      	cmp	r2, #0
 800af26:	f000 80ca 	beq.w	800b0be <_dtoa_r+0x8be>
 800af2a:	9a07      	ldr	r2, [sp, #28]
 800af2c:	2a01      	cmp	r2, #1
 800af2e:	f300 80ad 	bgt.w	800b08c <_dtoa_r+0x88c>
 800af32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af34:	2a00      	cmp	r2, #0
 800af36:	f000 80a5 	beq.w	800b084 <_dtoa_r+0x884>
 800af3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af3e:	9e08      	ldr	r6, [sp, #32]
 800af40:	9d05      	ldr	r5, [sp, #20]
 800af42:	9a05      	ldr	r2, [sp, #20]
 800af44:	441a      	add	r2, r3
 800af46:	9205      	str	r2, [sp, #20]
 800af48:	9a06      	ldr	r2, [sp, #24]
 800af4a:	2101      	movs	r1, #1
 800af4c:	441a      	add	r2, r3
 800af4e:	4620      	mov	r0, r4
 800af50:	9206      	str	r2, [sp, #24]
 800af52:	f000 fdf7 	bl	800bb44 <__i2b>
 800af56:	4607      	mov	r7, r0
 800af58:	b165      	cbz	r5, 800af74 <_dtoa_r+0x774>
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dd09      	ble.n	800af74 <_dtoa_r+0x774>
 800af60:	42ab      	cmp	r3, r5
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	bfa8      	it	ge
 800af66:	462b      	movge	r3, r5
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	9205      	str	r2, [sp, #20]
 800af6c:	9a06      	ldr	r2, [sp, #24]
 800af6e:	1aed      	subs	r5, r5, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	9306      	str	r3, [sp, #24]
 800af74:	9b08      	ldr	r3, [sp, #32]
 800af76:	b1f3      	cbz	r3, 800afb6 <_dtoa_r+0x7b6>
 800af78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 80a3 	beq.w	800b0c6 <_dtoa_r+0x8c6>
 800af80:	2e00      	cmp	r6, #0
 800af82:	dd10      	ble.n	800afa6 <_dtoa_r+0x7a6>
 800af84:	4639      	mov	r1, r7
 800af86:	4632      	mov	r2, r6
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fe9b 	bl	800bcc4 <__pow5mult>
 800af8e:	4652      	mov	r2, sl
 800af90:	4601      	mov	r1, r0
 800af92:	4607      	mov	r7, r0
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fdeb 	bl	800bb70 <__multiply>
 800af9a:	4651      	mov	r1, sl
 800af9c:	4680      	mov	r8, r0
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 fd1a 	bl	800b9d8 <_Bfree>
 800afa4:	46c2      	mov	sl, r8
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	1b9a      	subs	r2, r3, r6
 800afaa:	d004      	beq.n	800afb6 <_dtoa_r+0x7b6>
 800afac:	4651      	mov	r1, sl
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fe88 	bl	800bcc4 <__pow5mult>
 800afb4:	4682      	mov	sl, r0
 800afb6:	2101      	movs	r1, #1
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fdc3 	bl	800bb44 <__i2b>
 800afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	4606      	mov	r6, r0
 800afc4:	f340 8081 	ble.w	800b0ca <_dtoa_r+0x8ca>
 800afc8:	461a      	mov	r2, r3
 800afca:	4601      	mov	r1, r0
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 fe79 	bl	800bcc4 <__pow5mult>
 800afd2:	9b07      	ldr	r3, [sp, #28]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	4606      	mov	r6, r0
 800afd8:	dd7a      	ble.n	800b0d0 <_dtoa_r+0x8d0>
 800afda:	f04f 0800 	mov.w	r8, #0
 800afde:	6933      	ldr	r3, [r6, #16]
 800afe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800afe4:	6918      	ldr	r0, [r3, #16]
 800afe6:	f000 fd5f 	bl	800baa8 <__hi0bits>
 800afea:	f1c0 0020 	rsb	r0, r0, #32
 800afee:	9b06      	ldr	r3, [sp, #24]
 800aff0:	4418      	add	r0, r3
 800aff2:	f010 001f 	ands.w	r0, r0, #31
 800aff6:	f000 8094 	beq.w	800b122 <_dtoa_r+0x922>
 800affa:	f1c0 0320 	rsb	r3, r0, #32
 800affe:	2b04      	cmp	r3, #4
 800b000:	f340 8085 	ble.w	800b10e <_dtoa_r+0x90e>
 800b004:	9b05      	ldr	r3, [sp, #20]
 800b006:	f1c0 001c 	rsb	r0, r0, #28
 800b00a:	4403      	add	r3, r0
 800b00c:	9305      	str	r3, [sp, #20]
 800b00e:	9b06      	ldr	r3, [sp, #24]
 800b010:	4403      	add	r3, r0
 800b012:	4405      	add	r5, r0
 800b014:	9306      	str	r3, [sp, #24]
 800b016:	9b05      	ldr	r3, [sp, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dd05      	ble.n	800b028 <_dtoa_r+0x828>
 800b01c:	4651      	mov	r1, sl
 800b01e:	461a      	mov	r2, r3
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fea9 	bl	800bd78 <__lshift>
 800b026:	4682      	mov	sl, r0
 800b028:	9b06      	ldr	r3, [sp, #24]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dd05      	ble.n	800b03a <_dtoa_r+0x83a>
 800b02e:	4631      	mov	r1, r6
 800b030:	461a      	mov	r2, r3
 800b032:	4620      	mov	r0, r4
 800b034:	f000 fea0 	bl	800bd78 <__lshift>
 800b038:	4606      	mov	r6, r0
 800b03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d072      	beq.n	800b126 <_dtoa_r+0x926>
 800b040:	4631      	mov	r1, r6
 800b042:	4650      	mov	r0, sl
 800b044:	f000 ff04 	bl	800be50 <__mcmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	da6c      	bge.n	800b126 <_dtoa_r+0x926>
 800b04c:	2300      	movs	r3, #0
 800b04e:	4651      	mov	r1, sl
 800b050:	220a      	movs	r2, #10
 800b052:	4620      	mov	r0, r4
 800b054:	f000 fce2 	bl	800ba1c <__multadd>
 800b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b05e:	4682      	mov	sl, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 81b0 	beq.w	800b3c6 <_dtoa_r+0xbc6>
 800b066:	2300      	movs	r3, #0
 800b068:	4639      	mov	r1, r7
 800b06a:	220a      	movs	r2, #10
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fcd5 	bl	800ba1c <__multadd>
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	4607      	mov	r7, r0
 800b078:	f300 8096 	bgt.w	800b1a8 <_dtoa_r+0x9a8>
 800b07c:	9b07      	ldr	r3, [sp, #28]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	dc59      	bgt.n	800b136 <_dtoa_r+0x936>
 800b082:	e091      	b.n	800b1a8 <_dtoa_r+0x9a8>
 800b084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b08a:	e758      	b.n	800af3e <_dtoa_r+0x73e>
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	1e5e      	subs	r6, r3, #1
 800b090:	9b08      	ldr	r3, [sp, #32]
 800b092:	42b3      	cmp	r3, r6
 800b094:	bfbf      	itttt	lt
 800b096:	9b08      	ldrlt	r3, [sp, #32]
 800b098:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b09a:	9608      	strlt	r6, [sp, #32]
 800b09c:	1af3      	sublt	r3, r6, r3
 800b09e:	bfb4      	ite	lt
 800b0a0:	18d2      	addlt	r2, r2, r3
 800b0a2:	1b9e      	subge	r6, r3, r6
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	bfbc      	itt	lt
 800b0a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b0aa:	2600      	movlt	r6, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bfb7      	itett	lt
 800b0b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b0b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b0b8:	1a9d      	sublt	r5, r3, r2
 800b0ba:	2300      	movlt	r3, #0
 800b0bc:	e741      	b.n	800af42 <_dtoa_r+0x742>
 800b0be:	9e08      	ldr	r6, [sp, #32]
 800b0c0:	9d05      	ldr	r5, [sp, #20]
 800b0c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0c4:	e748      	b.n	800af58 <_dtoa_r+0x758>
 800b0c6:	9a08      	ldr	r2, [sp, #32]
 800b0c8:	e770      	b.n	800afac <_dtoa_r+0x7ac>
 800b0ca:	9b07      	ldr	r3, [sp, #28]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	dc19      	bgt.n	800b104 <_dtoa_r+0x904>
 800b0d0:	9b02      	ldr	r3, [sp, #8]
 800b0d2:	b9bb      	cbnz	r3, 800b104 <_dtoa_r+0x904>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0da:	b99b      	cbnz	r3, 800b104 <_dtoa_r+0x904>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0e2:	0d1b      	lsrs	r3, r3, #20
 800b0e4:	051b      	lsls	r3, r3, #20
 800b0e6:	b183      	cbz	r3, 800b10a <_dtoa_r+0x90a>
 800b0e8:	9b05      	ldr	r3, [sp, #20]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9305      	str	r3, [sp, #20]
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	9306      	str	r3, [sp, #24]
 800b0f4:	f04f 0801 	mov.w	r8, #1
 800b0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f47f af6f 	bne.w	800afde <_dtoa_r+0x7de>
 800b100:	2001      	movs	r0, #1
 800b102:	e774      	b.n	800afee <_dtoa_r+0x7ee>
 800b104:	f04f 0800 	mov.w	r8, #0
 800b108:	e7f6      	b.n	800b0f8 <_dtoa_r+0x8f8>
 800b10a:	4698      	mov	r8, r3
 800b10c:	e7f4      	b.n	800b0f8 <_dtoa_r+0x8f8>
 800b10e:	d082      	beq.n	800b016 <_dtoa_r+0x816>
 800b110:	9a05      	ldr	r2, [sp, #20]
 800b112:	331c      	adds	r3, #28
 800b114:	441a      	add	r2, r3
 800b116:	9205      	str	r2, [sp, #20]
 800b118:	9a06      	ldr	r2, [sp, #24]
 800b11a:	441a      	add	r2, r3
 800b11c:	441d      	add	r5, r3
 800b11e:	9206      	str	r2, [sp, #24]
 800b120:	e779      	b.n	800b016 <_dtoa_r+0x816>
 800b122:	4603      	mov	r3, r0
 800b124:	e7f4      	b.n	800b110 <_dtoa_r+0x910>
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	dc37      	bgt.n	800b19c <_dtoa_r+0x99c>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	dd34      	ble.n	800b19c <_dtoa_r+0x99c>
 800b132:	9b04      	ldr	r3, [sp, #16]
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	9b01      	ldr	r3, [sp, #4]
 800b138:	b963      	cbnz	r3, 800b154 <_dtoa_r+0x954>
 800b13a:	4631      	mov	r1, r6
 800b13c:	2205      	movs	r2, #5
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fc6c 	bl	800ba1c <__multadd>
 800b144:	4601      	mov	r1, r0
 800b146:	4606      	mov	r6, r0
 800b148:	4650      	mov	r0, sl
 800b14a:	f000 fe81 	bl	800be50 <__mcmp>
 800b14e:	2800      	cmp	r0, #0
 800b150:	f73f adbb 	bgt.w	800acca <_dtoa_r+0x4ca>
 800b154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b156:	9d00      	ldr	r5, [sp, #0]
 800b158:	ea6f 0b03 	mvn.w	fp, r3
 800b15c:	f04f 0800 	mov.w	r8, #0
 800b160:	4631      	mov	r1, r6
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fc38 	bl	800b9d8 <_Bfree>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f43f aeab 	beq.w	800aec4 <_dtoa_r+0x6c4>
 800b16e:	f1b8 0f00 	cmp.w	r8, #0
 800b172:	d005      	beq.n	800b180 <_dtoa_r+0x980>
 800b174:	45b8      	cmp	r8, r7
 800b176:	d003      	beq.n	800b180 <_dtoa_r+0x980>
 800b178:	4641      	mov	r1, r8
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fc2c 	bl	800b9d8 <_Bfree>
 800b180:	4639      	mov	r1, r7
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fc28 	bl	800b9d8 <_Bfree>
 800b188:	e69c      	b.n	800aec4 <_dtoa_r+0x6c4>
 800b18a:	2600      	movs	r6, #0
 800b18c:	4637      	mov	r7, r6
 800b18e:	e7e1      	b.n	800b154 <_dtoa_r+0x954>
 800b190:	46bb      	mov	fp, r7
 800b192:	4637      	mov	r7, r6
 800b194:	e599      	b.n	800acca <_dtoa_r+0x4ca>
 800b196:	bf00      	nop
 800b198:	40240000 	.word	0x40240000
 800b19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 80c8 	beq.w	800b334 <_dtoa_r+0xb34>
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	2d00      	cmp	r5, #0
 800b1aa:	dd05      	ble.n	800b1b8 <_dtoa_r+0x9b8>
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fde1 	bl	800bd78 <__lshift>
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	f1b8 0f00 	cmp.w	r8, #0
 800b1bc:	d05b      	beq.n	800b276 <_dtoa_r+0xa76>
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fbc9 	bl	800b958 <_Balloc>
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	b928      	cbnz	r0, 800b1d6 <_dtoa_r+0x9d6>
 800b1ca:	4b83      	ldr	r3, [pc, #524]	; (800b3d8 <_dtoa_r+0xbd8>)
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b1d2:	f7ff bb2e 	b.w	800a832 <_dtoa_r+0x32>
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	3202      	adds	r2, #2
 800b1da:	0092      	lsls	r2, r2, #2
 800b1dc:	f107 010c 	add.w	r1, r7, #12
 800b1e0:	300c      	adds	r0, #12
 800b1e2:	f7ff fa74 	bl	800a6ce <memcpy>
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 fdc4 	bl	800bd78 <__lshift>
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	9304      	str	r3, [sp, #16]
 800b1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	9308      	str	r3, [sp, #32]
 800b1fe:	9b02      	ldr	r3, [sp, #8]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	46b8      	mov	r8, r7
 800b206:	9306      	str	r3, [sp, #24]
 800b208:	4607      	mov	r7, r0
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	4631      	mov	r1, r6
 800b20e:	3b01      	subs	r3, #1
 800b210:	4650      	mov	r0, sl
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	f7ff fa69 	bl	800a6ea <quorem>
 800b218:	4641      	mov	r1, r8
 800b21a:	9002      	str	r0, [sp, #8]
 800b21c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b220:	4650      	mov	r0, sl
 800b222:	f000 fe15 	bl	800be50 <__mcmp>
 800b226:	463a      	mov	r2, r7
 800b228:	9005      	str	r0, [sp, #20]
 800b22a:	4631      	mov	r1, r6
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fe2b 	bl	800be88 <__mdiff>
 800b232:	68c2      	ldr	r2, [r0, #12]
 800b234:	4605      	mov	r5, r0
 800b236:	bb02      	cbnz	r2, 800b27a <_dtoa_r+0xa7a>
 800b238:	4601      	mov	r1, r0
 800b23a:	4650      	mov	r0, sl
 800b23c:	f000 fe08 	bl	800be50 <__mcmp>
 800b240:	4602      	mov	r2, r0
 800b242:	4629      	mov	r1, r5
 800b244:	4620      	mov	r0, r4
 800b246:	9209      	str	r2, [sp, #36]	; 0x24
 800b248:	f000 fbc6 	bl	800b9d8 <_Bfree>
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b250:	9d04      	ldr	r5, [sp, #16]
 800b252:	ea43 0102 	orr.w	r1, r3, r2
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	4319      	orrs	r1, r3
 800b25a:	d110      	bne.n	800b27e <_dtoa_r+0xa7e>
 800b25c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b260:	d029      	beq.n	800b2b6 <_dtoa_r+0xab6>
 800b262:	9b05      	ldr	r3, [sp, #20]
 800b264:	2b00      	cmp	r3, #0
 800b266:	dd02      	ble.n	800b26e <_dtoa_r+0xa6e>
 800b268:	9b02      	ldr	r3, [sp, #8]
 800b26a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	f883 9000 	strb.w	r9, [r3]
 800b274:	e774      	b.n	800b160 <_dtoa_r+0x960>
 800b276:	4638      	mov	r0, r7
 800b278:	e7ba      	b.n	800b1f0 <_dtoa_r+0x9f0>
 800b27a:	2201      	movs	r2, #1
 800b27c:	e7e1      	b.n	800b242 <_dtoa_r+0xa42>
 800b27e:	9b05      	ldr	r3, [sp, #20]
 800b280:	2b00      	cmp	r3, #0
 800b282:	db04      	blt.n	800b28e <_dtoa_r+0xa8e>
 800b284:	9907      	ldr	r1, [sp, #28]
 800b286:	430b      	orrs	r3, r1
 800b288:	9906      	ldr	r1, [sp, #24]
 800b28a:	430b      	orrs	r3, r1
 800b28c:	d120      	bne.n	800b2d0 <_dtoa_r+0xad0>
 800b28e:	2a00      	cmp	r2, #0
 800b290:	dded      	ble.n	800b26e <_dtoa_r+0xa6e>
 800b292:	4651      	mov	r1, sl
 800b294:	2201      	movs	r2, #1
 800b296:	4620      	mov	r0, r4
 800b298:	f000 fd6e 	bl	800bd78 <__lshift>
 800b29c:	4631      	mov	r1, r6
 800b29e:	4682      	mov	sl, r0
 800b2a0:	f000 fdd6 	bl	800be50 <__mcmp>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	dc03      	bgt.n	800b2b0 <_dtoa_r+0xab0>
 800b2a8:	d1e1      	bne.n	800b26e <_dtoa_r+0xa6e>
 800b2aa:	f019 0f01 	tst.w	r9, #1
 800b2ae:	d0de      	beq.n	800b26e <_dtoa_r+0xa6e>
 800b2b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2b4:	d1d8      	bne.n	800b268 <_dtoa_r+0xa68>
 800b2b6:	9a01      	ldr	r2, [sp, #4]
 800b2b8:	2339      	movs	r3, #57	; 0x39
 800b2ba:	7013      	strb	r3, [r2, #0]
 800b2bc:	462b      	mov	r3, r5
 800b2be:	461d      	mov	r5, r3
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b2c6:	2a39      	cmp	r2, #57	; 0x39
 800b2c8:	d06c      	beq.n	800b3a4 <_dtoa_r+0xba4>
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	e747      	b.n	800b160 <_dtoa_r+0x960>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	dd07      	ble.n	800b2e4 <_dtoa_r+0xae4>
 800b2d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2d8:	d0ed      	beq.n	800b2b6 <_dtoa_r+0xab6>
 800b2da:	9a01      	ldr	r2, [sp, #4]
 800b2dc:	f109 0301 	add.w	r3, r9, #1
 800b2e0:	7013      	strb	r3, [r2, #0]
 800b2e2:	e73d      	b.n	800b160 <_dtoa_r+0x960>
 800b2e4:	9b04      	ldr	r3, [sp, #16]
 800b2e6:	9a08      	ldr	r2, [sp, #32]
 800b2e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d043      	beq.n	800b378 <_dtoa_r+0xb78>
 800b2f0:	4651      	mov	r1, sl
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fb90 	bl	800ba1c <__multadd>
 800b2fc:	45b8      	cmp	r8, r7
 800b2fe:	4682      	mov	sl, r0
 800b300:	f04f 0300 	mov.w	r3, #0
 800b304:	f04f 020a 	mov.w	r2, #10
 800b308:	4641      	mov	r1, r8
 800b30a:	4620      	mov	r0, r4
 800b30c:	d107      	bne.n	800b31e <_dtoa_r+0xb1e>
 800b30e:	f000 fb85 	bl	800ba1c <__multadd>
 800b312:	4680      	mov	r8, r0
 800b314:	4607      	mov	r7, r0
 800b316:	9b04      	ldr	r3, [sp, #16]
 800b318:	3301      	adds	r3, #1
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	e775      	b.n	800b20a <_dtoa_r+0xa0a>
 800b31e:	f000 fb7d 	bl	800ba1c <__multadd>
 800b322:	4639      	mov	r1, r7
 800b324:	4680      	mov	r8, r0
 800b326:	2300      	movs	r3, #0
 800b328:	220a      	movs	r2, #10
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 fb76 	bl	800ba1c <__multadd>
 800b330:	4607      	mov	r7, r0
 800b332:	e7f0      	b.n	800b316 <_dtoa_r+0xb16>
 800b334:	9b04      	ldr	r3, [sp, #16]
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	9d00      	ldr	r5, [sp, #0]
 800b33a:	4631      	mov	r1, r6
 800b33c:	4650      	mov	r0, sl
 800b33e:	f7ff f9d4 	bl	800a6ea <quorem>
 800b342:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	f805 9b01 	strb.w	r9, [r5], #1
 800b34c:	1aea      	subs	r2, r5, r3
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	4293      	cmp	r3, r2
 800b352:	dd07      	ble.n	800b364 <_dtoa_r+0xb64>
 800b354:	4651      	mov	r1, sl
 800b356:	2300      	movs	r3, #0
 800b358:	220a      	movs	r2, #10
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fb5e 	bl	800ba1c <__multadd>
 800b360:	4682      	mov	sl, r0
 800b362:	e7ea      	b.n	800b33a <_dtoa_r+0xb3a>
 800b364:	9b01      	ldr	r3, [sp, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfc8      	it	gt
 800b36a:	461d      	movgt	r5, r3
 800b36c:	9b00      	ldr	r3, [sp, #0]
 800b36e:	bfd8      	it	le
 800b370:	2501      	movle	r5, #1
 800b372:	441d      	add	r5, r3
 800b374:	f04f 0800 	mov.w	r8, #0
 800b378:	4651      	mov	r1, sl
 800b37a:	2201      	movs	r2, #1
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fcfb 	bl	800bd78 <__lshift>
 800b382:	4631      	mov	r1, r6
 800b384:	4682      	mov	sl, r0
 800b386:	f000 fd63 	bl	800be50 <__mcmp>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	dc96      	bgt.n	800b2bc <_dtoa_r+0xabc>
 800b38e:	d102      	bne.n	800b396 <_dtoa_r+0xb96>
 800b390:	f019 0f01 	tst.w	r9, #1
 800b394:	d192      	bne.n	800b2bc <_dtoa_r+0xabc>
 800b396:	462b      	mov	r3, r5
 800b398:	461d      	mov	r5, r3
 800b39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b39e:	2a30      	cmp	r2, #48	; 0x30
 800b3a0:	d0fa      	beq.n	800b398 <_dtoa_r+0xb98>
 800b3a2:	e6dd      	b.n	800b160 <_dtoa_r+0x960>
 800b3a4:	9a00      	ldr	r2, [sp, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d189      	bne.n	800b2be <_dtoa_r+0xabe>
 800b3aa:	f10b 0b01 	add.w	fp, fp, #1
 800b3ae:	2331      	movs	r3, #49	; 0x31
 800b3b0:	e796      	b.n	800b2e0 <_dtoa_r+0xae0>
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <_dtoa_r+0xbdc>)
 800b3b4:	f7ff ba99 	b.w	800a8ea <_dtoa_r+0xea>
 800b3b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f47f aa6d 	bne.w	800a89a <_dtoa_r+0x9a>
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <_dtoa_r+0xbe0>)
 800b3c2:	f7ff ba92 	b.w	800a8ea <_dtoa_r+0xea>
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dcb5      	bgt.n	800b338 <_dtoa_r+0xb38>
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	f73f aeb1 	bgt.w	800b136 <_dtoa_r+0x936>
 800b3d4:	e7b0      	b.n	800b338 <_dtoa_r+0xb38>
 800b3d6:	bf00      	nop
 800b3d8:	0800d51c 	.word	0x0800d51c
 800b3dc:	0800d47c 	.word	0x0800d47c
 800b3e0:	0800d4a0 	.word	0x0800d4a0

0800b3e4 <__ssputs_r>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	688e      	ldr	r6, [r1, #8]
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	42be      	cmp	r6, r7
 800b3ee:	680b      	ldr	r3, [r1, #0]
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	4690      	mov	r8, r2
 800b3f6:	d82c      	bhi.n	800b452 <__ssputs_r+0x6e>
 800b3f8:	898a      	ldrh	r2, [r1, #12]
 800b3fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3fe:	d026      	beq.n	800b44e <__ssputs_r+0x6a>
 800b400:	6965      	ldr	r5, [r4, #20]
 800b402:	6909      	ldr	r1, [r1, #16]
 800b404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b408:	eba3 0901 	sub.w	r9, r3, r1
 800b40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b410:	1c7b      	adds	r3, r7, #1
 800b412:	444b      	add	r3, r9
 800b414:	106d      	asrs	r5, r5, #1
 800b416:	429d      	cmp	r5, r3
 800b418:	bf38      	it	cc
 800b41a:	461d      	movcc	r5, r3
 800b41c:	0553      	lsls	r3, r2, #21
 800b41e:	d527      	bpl.n	800b470 <__ssputs_r+0x8c>
 800b420:	4629      	mov	r1, r5
 800b422:	f000 f95f 	bl	800b6e4 <_malloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	b360      	cbz	r0, 800b484 <__ssputs_r+0xa0>
 800b42a:	6921      	ldr	r1, [r4, #16]
 800b42c:	464a      	mov	r2, r9
 800b42e:	f7ff f94e 	bl	800a6ce <memcpy>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	6126      	str	r6, [r4, #16]
 800b440:	6165      	str	r5, [r4, #20]
 800b442:	444e      	add	r6, r9
 800b444:	eba5 0509 	sub.w	r5, r5, r9
 800b448:	6026      	str	r6, [r4, #0]
 800b44a:	60a5      	str	r5, [r4, #8]
 800b44c:	463e      	mov	r6, r7
 800b44e:	42be      	cmp	r6, r7
 800b450:	d900      	bls.n	800b454 <__ssputs_r+0x70>
 800b452:	463e      	mov	r6, r7
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	4632      	mov	r2, r6
 800b458:	4641      	mov	r1, r8
 800b45a:	f000 fe6b 	bl	800c134 <memmove>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	1b9b      	subs	r3, r3, r6
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	4433      	add	r3, r6
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	2000      	movs	r0, #0
 800b46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b470:	462a      	mov	r2, r5
 800b472:	f000 fe30 	bl	800c0d6 <_realloc_r>
 800b476:	4606      	mov	r6, r0
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1e0      	bne.n	800b43e <__ssputs_r+0x5a>
 800b47c:	6921      	ldr	r1, [r4, #16]
 800b47e:	4650      	mov	r0, sl
 800b480:	f000 fefc 	bl	800c27c <_free_r>
 800b484:	230c      	movs	r3, #12
 800b486:	f8ca 3000 	str.w	r3, [sl]
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b496:	e7e9      	b.n	800b46c <__ssputs_r+0x88>

0800b498 <_svfiprintf_r>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4698      	mov	r8, r3
 800b49e:	898b      	ldrh	r3, [r1, #12]
 800b4a0:	061b      	lsls	r3, r3, #24
 800b4a2:	b09d      	sub	sp, #116	; 0x74
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	d50e      	bpl.n	800b4ca <_svfiprintf_r+0x32>
 800b4ac:	690b      	ldr	r3, [r1, #16]
 800b4ae:	b963      	cbnz	r3, 800b4ca <_svfiprintf_r+0x32>
 800b4b0:	2140      	movs	r1, #64	; 0x40
 800b4b2:	f000 f917 	bl	800b6e4 <_malloc_r>
 800b4b6:	6028      	str	r0, [r5, #0]
 800b4b8:	6128      	str	r0, [r5, #16]
 800b4ba:	b920      	cbnz	r0, 800b4c6 <_svfiprintf_r+0x2e>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4c4:	e0d0      	b.n	800b668 <_svfiprintf_r+0x1d0>
 800b4c6:	2340      	movs	r3, #64	; 0x40
 800b4c8:	616b      	str	r3, [r5, #20]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	2320      	movs	r3, #32
 800b4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4d8:	2330      	movs	r3, #48	; 0x30
 800b4da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b680 <_svfiprintf_r+0x1e8>
 800b4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4e2:	f04f 0901 	mov.w	r9, #1
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	469a      	mov	sl, r3
 800b4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ee:	b10a      	cbz	r2, 800b4f4 <_svfiprintf_r+0x5c>
 800b4f0:	2a25      	cmp	r2, #37	; 0x25
 800b4f2:	d1f9      	bne.n	800b4e8 <_svfiprintf_r+0x50>
 800b4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f8:	d00b      	beq.n	800b512 <_svfiprintf_r+0x7a>
 800b4fa:	465b      	mov	r3, fp
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	4638      	mov	r0, r7
 800b502:	f7ff ff6f 	bl	800b3e4 <__ssputs_r>
 800b506:	3001      	adds	r0, #1
 800b508:	f000 80a9 	beq.w	800b65e <_svfiprintf_r+0x1c6>
 800b50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b50e:	445a      	add	r2, fp
 800b510:	9209      	str	r2, [sp, #36]	; 0x24
 800b512:	f89a 3000 	ldrb.w	r3, [sl]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 80a1 	beq.w	800b65e <_svfiprintf_r+0x1c6>
 800b51c:	2300      	movs	r3, #0
 800b51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b526:	f10a 0a01 	add.w	sl, sl, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	9307      	str	r3, [sp, #28]
 800b52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b532:	931a      	str	r3, [sp, #104]	; 0x68
 800b534:	4654      	mov	r4, sl
 800b536:	2205      	movs	r2, #5
 800b538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53c:	4850      	ldr	r0, [pc, #320]	; (800b680 <_svfiprintf_r+0x1e8>)
 800b53e:	f7f4 fe4f 	bl	80001e0 <memchr>
 800b542:	9a04      	ldr	r2, [sp, #16]
 800b544:	b9d8      	cbnz	r0, 800b57e <_svfiprintf_r+0xe6>
 800b546:	06d0      	lsls	r0, r2, #27
 800b548:	bf44      	itt	mi
 800b54a:	2320      	movmi	r3, #32
 800b54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b550:	0711      	lsls	r1, r2, #28
 800b552:	bf44      	itt	mi
 800b554:	232b      	movmi	r3, #43	; 0x2b
 800b556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b55a:	f89a 3000 	ldrb.w	r3, [sl]
 800b55e:	2b2a      	cmp	r3, #42	; 0x2a
 800b560:	d015      	beq.n	800b58e <_svfiprintf_r+0xf6>
 800b562:	9a07      	ldr	r2, [sp, #28]
 800b564:	4654      	mov	r4, sl
 800b566:	2000      	movs	r0, #0
 800b568:	f04f 0c0a 	mov.w	ip, #10
 800b56c:	4621      	mov	r1, r4
 800b56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b572:	3b30      	subs	r3, #48	; 0x30
 800b574:	2b09      	cmp	r3, #9
 800b576:	d94d      	bls.n	800b614 <_svfiprintf_r+0x17c>
 800b578:	b1b0      	cbz	r0, 800b5a8 <_svfiprintf_r+0x110>
 800b57a:	9207      	str	r2, [sp, #28]
 800b57c:	e014      	b.n	800b5a8 <_svfiprintf_r+0x110>
 800b57e:	eba0 0308 	sub.w	r3, r0, r8
 800b582:	fa09 f303 	lsl.w	r3, r9, r3
 800b586:	4313      	orrs	r3, r2
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	46a2      	mov	sl, r4
 800b58c:	e7d2      	b.n	800b534 <_svfiprintf_r+0x9c>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	1d19      	adds	r1, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	9103      	str	r1, [sp, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfbb      	ittet	lt
 800b59a:	425b      	neglt	r3, r3
 800b59c:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a0:	9307      	strge	r3, [sp, #28]
 800b5a2:	9307      	strlt	r3, [sp, #28]
 800b5a4:	bfb8      	it	lt
 800b5a6:	9204      	strlt	r2, [sp, #16]
 800b5a8:	7823      	ldrb	r3, [r4, #0]
 800b5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ac:	d10c      	bne.n	800b5c8 <_svfiprintf_r+0x130>
 800b5ae:	7863      	ldrb	r3, [r4, #1]
 800b5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b2:	d134      	bne.n	800b61e <_svfiprintf_r+0x186>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	1d1a      	adds	r2, r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	9203      	str	r2, [sp, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bfb8      	it	lt
 800b5c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5c4:	3402      	adds	r4, #2
 800b5c6:	9305      	str	r3, [sp, #20]
 800b5c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b690 <_svfiprintf_r+0x1f8>
 800b5cc:	7821      	ldrb	r1, [r4, #0]
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	f7f4 fe05 	bl	80001e0 <memchr>
 800b5d6:	b138      	cbz	r0, 800b5e8 <_svfiprintf_r+0x150>
 800b5d8:	9b04      	ldr	r3, [sp, #16]
 800b5da:	eba0 000a 	sub.w	r0, r0, sl
 800b5de:	2240      	movs	r2, #64	; 0x40
 800b5e0:	4082      	lsls	r2, r0
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	3401      	adds	r4, #1
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ec:	4825      	ldr	r0, [pc, #148]	; (800b684 <_svfiprintf_r+0x1ec>)
 800b5ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5f2:	2206      	movs	r2, #6
 800b5f4:	f7f4 fdf4 	bl	80001e0 <memchr>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d038      	beq.n	800b66e <_svfiprintf_r+0x1d6>
 800b5fc:	4b22      	ldr	r3, [pc, #136]	; (800b688 <_svfiprintf_r+0x1f0>)
 800b5fe:	bb1b      	cbnz	r3, 800b648 <_svfiprintf_r+0x1b0>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	3307      	adds	r3, #7
 800b604:	f023 0307 	bic.w	r3, r3, #7
 800b608:	3308      	adds	r3, #8
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60e:	4433      	add	r3, r6
 800b610:	9309      	str	r3, [sp, #36]	; 0x24
 800b612:	e768      	b.n	800b4e6 <_svfiprintf_r+0x4e>
 800b614:	fb0c 3202 	mla	r2, ip, r2, r3
 800b618:	460c      	mov	r4, r1
 800b61a:	2001      	movs	r0, #1
 800b61c:	e7a6      	b.n	800b56c <_svfiprintf_r+0xd4>
 800b61e:	2300      	movs	r3, #0
 800b620:	3401      	adds	r4, #1
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	4619      	mov	r1, r3
 800b626:	f04f 0c0a 	mov.w	ip, #10
 800b62a:	4620      	mov	r0, r4
 800b62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b630:	3a30      	subs	r2, #48	; 0x30
 800b632:	2a09      	cmp	r2, #9
 800b634:	d903      	bls.n	800b63e <_svfiprintf_r+0x1a6>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0c6      	beq.n	800b5c8 <_svfiprintf_r+0x130>
 800b63a:	9105      	str	r1, [sp, #20]
 800b63c:	e7c4      	b.n	800b5c8 <_svfiprintf_r+0x130>
 800b63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b642:	4604      	mov	r4, r0
 800b644:	2301      	movs	r3, #1
 800b646:	e7f0      	b.n	800b62a <_svfiprintf_r+0x192>
 800b648:	ab03      	add	r3, sp, #12
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	462a      	mov	r2, r5
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <_svfiprintf_r+0x1f4>)
 800b650:	a904      	add	r1, sp, #16
 800b652:	4638      	mov	r0, r7
 800b654:	f7fe fb5a 	bl	8009d0c <_printf_float>
 800b658:	1c42      	adds	r2, r0, #1
 800b65a:	4606      	mov	r6, r0
 800b65c:	d1d6      	bne.n	800b60c <_svfiprintf_r+0x174>
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	065b      	lsls	r3, r3, #25
 800b662:	f53f af2d 	bmi.w	800b4c0 <_svfiprintf_r+0x28>
 800b666:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b668:	b01d      	add	sp, #116	; 0x74
 800b66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	462a      	mov	r2, r5
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <_svfiprintf_r+0x1f4>)
 800b676:	a904      	add	r1, sp, #16
 800b678:	4638      	mov	r0, r7
 800b67a:	f7fe fdeb 	bl	800a254 <_printf_i>
 800b67e:	e7eb      	b.n	800b658 <_svfiprintf_r+0x1c0>
 800b680:	0800d52d 	.word	0x0800d52d
 800b684:	0800d537 	.word	0x0800d537
 800b688:	08009d0d 	.word	0x08009d0d
 800b68c:	0800b3e5 	.word	0x0800b3e5
 800b690:	0800d533 	.word	0x0800d533

0800b694 <malloc>:
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <malloc+0xc>)
 800b696:	4601      	mov	r1, r0
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	f000 b823 	b.w	800b6e4 <_malloc_r>
 800b69e:	bf00      	nop
 800b6a0:	20000118 	.word	0x20000118

0800b6a4 <sbrk_aligned>:
 800b6a4:	b570      	push	{r4, r5, r6, lr}
 800b6a6:	4e0e      	ldr	r6, [pc, #56]	; (800b6e0 <sbrk_aligned+0x3c>)
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	6831      	ldr	r1, [r6, #0]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	b911      	cbnz	r1, 800b6b6 <sbrk_aligned+0x12>
 800b6b0:	f000 fd8e 	bl	800c1d0 <_sbrk_r>
 800b6b4:	6030      	str	r0, [r6, #0]
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 fd89 	bl	800c1d0 <_sbrk_r>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	d00a      	beq.n	800b6d8 <sbrk_aligned+0x34>
 800b6c2:	1cc4      	adds	r4, r0, #3
 800b6c4:	f024 0403 	bic.w	r4, r4, #3
 800b6c8:	42a0      	cmp	r0, r4
 800b6ca:	d007      	beq.n	800b6dc <sbrk_aligned+0x38>
 800b6cc:	1a21      	subs	r1, r4, r0
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 fd7e 	bl	800c1d0 <_sbrk_r>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d101      	bne.n	800b6dc <sbrk_aligned+0x38>
 800b6d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6dc:	4620      	mov	r0, r4
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	2000483c 	.word	0x2000483c

0800b6e4 <_malloc_r>:
 800b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e8:	1ccd      	adds	r5, r1, #3
 800b6ea:	f025 0503 	bic.w	r5, r5, #3
 800b6ee:	3508      	adds	r5, #8
 800b6f0:	2d0c      	cmp	r5, #12
 800b6f2:	bf38      	it	cc
 800b6f4:	250c      	movcc	r5, #12
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	db01      	blt.n	800b700 <_malloc_r+0x1c>
 800b6fc:	42a9      	cmp	r1, r5
 800b6fe:	d905      	bls.n	800b70c <_malloc_r+0x28>
 800b700:	230c      	movs	r3, #12
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	2600      	movs	r6, #0
 800b706:	4630      	mov	r0, r6
 800b708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7e0 <_malloc_r+0xfc>
 800b710:	f000 f916 	bl	800b940 <__malloc_lock>
 800b714:	f8d8 3000 	ldr.w	r3, [r8]
 800b718:	461c      	mov	r4, r3
 800b71a:	bb5c      	cbnz	r4, 800b774 <_malloc_r+0x90>
 800b71c:	4629      	mov	r1, r5
 800b71e:	4638      	mov	r0, r7
 800b720:	f7ff ffc0 	bl	800b6a4 <sbrk_aligned>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	4604      	mov	r4, r0
 800b728:	d155      	bne.n	800b7d6 <_malloc_r+0xf2>
 800b72a:	f8d8 4000 	ldr.w	r4, [r8]
 800b72e:	4626      	mov	r6, r4
 800b730:	2e00      	cmp	r6, #0
 800b732:	d145      	bne.n	800b7c0 <_malloc_r+0xdc>
 800b734:	2c00      	cmp	r4, #0
 800b736:	d048      	beq.n	800b7ca <_malloc_r+0xe6>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	4631      	mov	r1, r6
 800b73c:	4638      	mov	r0, r7
 800b73e:	eb04 0903 	add.w	r9, r4, r3
 800b742:	f000 fd45 	bl	800c1d0 <_sbrk_r>
 800b746:	4581      	cmp	r9, r0
 800b748:	d13f      	bne.n	800b7ca <_malloc_r+0xe6>
 800b74a:	6821      	ldr	r1, [r4, #0]
 800b74c:	1a6d      	subs	r5, r5, r1
 800b74e:	4629      	mov	r1, r5
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff ffa7 	bl	800b6a4 <sbrk_aligned>
 800b756:	3001      	adds	r0, #1
 800b758:	d037      	beq.n	800b7ca <_malloc_r+0xe6>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	442b      	add	r3, r5
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	f8d8 3000 	ldr.w	r3, [r8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d038      	beq.n	800b7da <_malloc_r+0xf6>
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	42a2      	cmp	r2, r4
 800b76c:	d12b      	bne.n	800b7c6 <_malloc_r+0xe2>
 800b76e:	2200      	movs	r2, #0
 800b770:	605a      	str	r2, [r3, #4]
 800b772:	e00f      	b.n	800b794 <_malloc_r+0xb0>
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	1b52      	subs	r2, r2, r5
 800b778:	d41f      	bmi.n	800b7ba <_malloc_r+0xd6>
 800b77a:	2a0b      	cmp	r2, #11
 800b77c:	d917      	bls.n	800b7ae <_malloc_r+0xca>
 800b77e:	1961      	adds	r1, r4, r5
 800b780:	42a3      	cmp	r3, r4
 800b782:	6025      	str	r5, [r4, #0]
 800b784:	bf18      	it	ne
 800b786:	6059      	strne	r1, [r3, #4]
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	bf08      	it	eq
 800b78c:	f8c8 1000 	streq.w	r1, [r8]
 800b790:	5162      	str	r2, [r4, r5]
 800b792:	604b      	str	r3, [r1, #4]
 800b794:	4638      	mov	r0, r7
 800b796:	f104 060b 	add.w	r6, r4, #11
 800b79a:	f000 f8d7 	bl	800b94c <__malloc_unlock>
 800b79e:	f026 0607 	bic.w	r6, r6, #7
 800b7a2:	1d23      	adds	r3, r4, #4
 800b7a4:	1af2      	subs	r2, r6, r3
 800b7a6:	d0ae      	beq.n	800b706 <_malloc_r+0x22>
 800b7a8:	1b9b      	subs	r3, r3, r6
 800b7aa:	50a3      	str	r3, [r4, r2]
 800b7ac:	e7ab      	b.n	800b706 <_malloc_r+0x22>
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	6862      	ldr	r2, [r4, #4]
 800b7b2:	d1dd      	bne.n	800b770 <_malloc_r+0x8c>
 800b7b4:	f8c8 2000 	str.w	r2, [r8]
 800b7b8:	e7ec      	b.n	800b794 <_malloc_r+0xb0>
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	6864      	ldr	r4, [r4, #4]
 800b7be:	e7ac      	b.n	800b71a <_malloc_r+0x36>
 800b7c0:	4634      	mov	r4, r6
 800b7c2:	6876      	ldr	r6, [r6, #4]
 800b7c4:	e7b4      	b.n	800b730 <_malloc_r+0x4c>
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	e7cc      	b.n	800b764 <_malloc_r+0x80>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	603b      	str	r3, [r7, #0]
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f000 f8bc 	bl	800b94c <__malloc_unlock>
 800b7d4:	e797      	b.n	800b706 <_malloc_r+0x22>
 800b7d6:	6025      	str	r5, [r4, #0]
 800b7d8:	e7dc      	b.n	800b794 <_malloc_r+0xb0>
 800b7da:	605b      	str	r3, [r3, #4]
 800b7dc:	deff      	udf	#255	; 0xff
 800b7de:	bf00      	nop
 800b7e0:	20004838 	.word	0x20004838

0800b7e4 <__sflush_r>:
 800b7e4:	898a      	ldrh	r2, [r1, #12]
 800b7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	0710      	lsls	r0, r2, #28
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	d458      	bmi.n	800b8a4 <__sflush_r+0xc0>
 800b7f2:	684b      	ldr	r3, [r1, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dc05      	bgt.n	800b804 <__sflush_r+0x20>
 800b7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dc02      	bgt.n	800b804 <__sflush_r+0x20>
 800b7fe:	2000      	movs	r0, #0
 800b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b806:	2e00      	cmp	r6, #0
 800b808:	d0f9      	beq.n	800b7fe <__sflush_r+0x1a>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b810:	682f      	ldr	r7, [r5, #0]
 800b812:	6a21      	ldr	r1, [r4, #32]
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	d032      	beq.n	800b87e <__sflush_r+0x9a>
 800b818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	075a      	lsls	r2, r3, #29
 800b81e:	d505      	bpl.n	800b82c <__sflush_r+0x48>
 800b820:	6863      	ldr	r3, [r4, #4]
 800b822:	1ac0      	subs	r0, r0, r3
 800b824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b826:	b10b      	cbz	r3, 800b82c <__sflush_r+0x48>
 800b828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b82a:	1ac0      	subs	r0, r0, r3
 800b82c:	2300      	movs	r3, #0
 800b82e:	4602      	mov	r2, r0
 800b830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b832:	6a21      	ldr	r1, [r4, #32]
 800b834:	4628      	mov	r0, r5
 800b836:	47b0      	blx	r6
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	d106      	bne.n	800b84c <__sflush_r+0x68>
 800b83e:	6829      	ldr	r1, [r5, #0]
 800b840:	291d      	cmp	r1, #29
 800b842:	d82b      	bhi.n	800b89c <__sflush_r+0xb8>
 800b844:	4a29      	ldr	r2, [pc, #164]	; (800b8ec <__sflush_r+0x108>)
 800b846:	410a      	asrs	r2, r1
 800b848:	07d6      	lsls	r6, r2, #31
 800b84a:	d427      	bmi.n	800b89c <__sflush_r+0xb8>
 800b84c:	2200      	movs	r2, #0
 800b84e:	6062      	str	r2, [r4, #4]
 800b850:	04d9      	lsls	r1, r3, #19
 800b852:	6922      	ldr	r2, [r4, #16]
 800b854:	6022      	str	r2, [r4, #0]
 800b856:	d504      	bpl.n	800b862 <__sflush_r+0x7e>
 800b858:	1c42      	adds	r2, r0, #1
 800b85a:	d101      	bne.n	800b860 <__sflush_r+0x7c>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b903      	cbnz	r3, 800b862 <__sflush_r+0x7e>
 800b860:	6560      	str	r0, [r4, #84]	; 0x54
 800b862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b864:	602f      	str	r7, [r5, #0]
 800b866:	2900      	cmp	r1, #0
 800b868:	d0c9      	beq.n	800b7fe <__sflush_r+0x1a>
 800b86a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b86e:	4299      	cmp	r1, r3
 800b870:	d002      	beq.n	800b878 <__sflush_r+0x94>
 800b872:	4628      	mov	r0, r5
 800b874:	f000 fd02 	bl	800c27c <_free_r>
 800b878:	2000      	movs	r0, #0
 800b87a:	6360      	str	r0, [r4, #52]	; 0x34
 800b87c:	e7c0      	b.n	800b800 <__sflush_r+0x1c>
 800b87e:	2301      	movs	r3, #1
 800b880:	4628      	mov	r0, r5
 800b882:	47b0      	blx	r6
 800b884:	1c41      	adds	r1, r0, #1
 800b886:	d1c8      	bne.n	800b81a <__sflush_r+0x36>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0c5      	beq.n	800b81a <__sflush_r+0x36>
 800b88e:	2b1d      	cmp	r3, #29
 800b890:	d001      	beq.n	800b896 <__sflush_r+0xb2>
 800b892:	2b16      	cmp	r3, #22
 800b894:	d101      	bne.n	800b89a <__sflush_r+0xb6>
 800b896:	602f      	str	r7, [r5, #0]
 800b898:	e7b1      	b.n	800b7fe <__sflush_r+0x1a>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	e7ad      	b.n	800b800 <__sflush_r+0x1c>
 800b8a4:	690f      	ldr	r7, [r1, #16]
 800b8a6:	2f00      	cmp	r7, #0
 800b8a8:	d0a9      	beq.n	800b7fe <__sflush_r+0x1a>
 800b8aa:	0793      	lsls	r3, r2, #30
 800b8ac:	680e      	ldr	r6, [r1, #0]
 800b8ae:	bf08      	it	eq
 800b8b0:	694b      	ldreq	r3, [r1, #20]
 800b8b2:	600f      	str	r7, [r1, #0]
 800b8b4:	bf18      	it	ne
 800b8b6:	2300      	movne	r3, #0
 800b8b8:	eba6 0807 	sub.w	r8, r6, r7
 800b8bc:	608b      	str	r3, [r1, #8]
 800b8be:	f1b8 0f00 	cmp.w	r8, #0
 800b8c2:	dd9c      	ble.n	800b7fe <__sflush_r+0x1a>
 800b8c4:	6a21      	ldr	r1, [r4, #32]
 800b8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8c8:	4643      	mov	r3, r8
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b0      	blx	r6
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dc06      	bgt.n	800b8e2 <__sflush_r+0xfe>
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e0:	e78e      	b.n	800b800 <__sflush_r+0x1c>
 800b8e2:	4407      	add	r7, r0
 800b8e4:	eba8 0800 	sub.w	r8, r8, r0
 800b8e8:	e7e9      	b.n	800b8be <__sflush_r+0xda>
 800b8ea:	bf00      	nop
 800b8ec:	dfbffffe 	.word	0xdfbffffe

0800b8f0 <_fflush_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	690b      	ldr	r3, [r1, #16]
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b913      	cbnz	r3, 800b900 <_fflush_r+0x10>
 800b8fa:	2500      	movs	r5, #0
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	b118      	cbz	r0, 800b90a <_fflush_r+0x1a>
 800b902:	6a03      	ldr	r3, [r0, #32]
 800b904:	b90b      	cbnz	r3, 800b90a <_fflush_r+0x1a>
 800b906:	f7fe fe53 	bl	800a5b0 <__sinit>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f3      	beq.n	800b8fa <_fflush_r+0xa>
 800b912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b914:	07d0      	lsls	r0, r2, #31
 800b916:	d404      	bmi.n	800b922 <_fflush_r+0x32>
 800b918:	0599      	lsls	r1, r3, #22
 800b91a:	d402      	bmi.n	800b922 <_fflush_r+0x32>
 800b91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b91e:	f7fe fed4 	bl	800a6ca <__retarget_lock_acquire_recursive>
 800b922:	4628      	mov	r0, r5
 800b924:	4621      	mov	r1, r4
 800b926:	f7ff ff5d 	bl	800b7e4 <__sflush_r>
 800b92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92c:	07da      	lsls	r2, r3, #31
 800b92e:	4605      	mov	r5, r0
 800b930:	d4e4      	bmi.n	800b8fc <_fflush_r+0xc>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	059b      	lsls	r3, r3, #22
 800b936:	d4e1      	bmi.n	800b8fc <_fflush_r+0xc>
 800b938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b93a:	f7fe fec7 	bl	800a6cc <__retarget_lock_release_recursive>
 800b93e:	e7dd      	b.n	800b8fc <_fflush_r+0xc>

0800b940 <__malloc_lock>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__malloc_lock+0x8>)
 800b942:	f7fe bec2 	b.w	800a6ca <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	20004834 	.word	0x20004834

0800b94c <__malloc_unlock>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__malloc_unlock+0x8>)
 800b94e:	f7fe bebd 	b.w	800a6cc <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	20004834 	.word	0x20004834

0800b958 <_Balloc>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	69c6      	ldr	r6, [r0, #28]
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	b976      	cbnz	r6, 800b980 <_Balloc+0x28>
 800b962:	2010      	movs	r0, #16
 800b964:	f7ff fe96 	bl	800b694 <malloc>
 800b968:	4602      	mov	r2, r0
 800b96a:	61e0      	str	r0, [r4, #28]
 800b96c:	b920      	cbnz	r0, 800b978 <_Balloc+0x20>
 800b96e:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <_Balloc+0x78>)
 800b970:	4818      	ldr	r0, [pc, #96]	; (800b9d4 <_Balloc+0x7c>)
 800b972:	216b      	movs	r1, #107	; 0x6b
 800b974:	f000 fc4e 	bl	800c214 <__assert_func>
 800b978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b97c:	6006      	str	r6, [r0, #0]
 800b97e:	60c6      	str	r6, [r0, #12]
 800b980:	69e6      	ldr	r6, [r4, #28]
 800b982:	68f3      	ldr	r3, [r6, #12]
 800b984:	b183      	cbz	r3, 800b9a8 <_Balloc+0x50>
 800b986:	69e3      	ldr	r3, [r4, #28]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b98e:	b9b8      	cbnz	r0, 800b9c0 <_Balloc+0x68>
 800b990:	2101      	movs	r1, #1
 800b992:	fa01 f605 	lsl.w	r6, r1, r5
 800b996:	1d72      	adds	r2, r6, #5
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fc58 	bl	800c250 <_calloc_r>
 800b9a0:	b160      	cbz	r0, 800b9bc <_Balloc+0x64>
 800b9a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9a6:	e00e      	b.n	800b9c6 <_Balloc+0x6e>
 800b9a8:	2221      	movs	r2, #33	; 0x21
 800b9aa:	2104      	movs	r1, #4
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 fc4f 	bl	800c250 <_calloc_r>
 800b9b2:	69e3      	ldr	r3, [r4, #28]
 800b9b4:	60f0      	str	r0, [r6, #12]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e4      	bne.n	800b986 <_Balloc+0x2e>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	6802      	ldr	r2, [r0, #0]
 800b9c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9cc:	e7f7      	b.n	800b9be <_Balloc+0x66>
 800b9ce:	bf00      	nop
 800b9d0:	0800d4ad 	.word	0x0800d4ad
 800b9d4:	0800d53e 	.word	0x0800d53e

0800b9d8 <_Bfree>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	69c6      	ldr	r6, [r0, #28]
 800b9dc:	4605      	mov	r5, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	b976      	cbnz	r6, 800ba00 <_Bfree+0x28>
 800b9e2:	2010      	movs	r0, #16
 800b9e4:	f7ff fe56 	bl	800b694 <malloc>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	61e8      	str	r0, [r5, #28]
 800b9ec:	b920      	cbnz	r0, 800b9f8 <_Bfree+0x20>
 800b9ee:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <_Bfree+0x3c>)
 800b9f0:	4809      	ldr	r0, [pc, #36]	; (800ba18 <_Bfree+0x40>)
 800b9f2:	218f      	movs	r1, #143	; 0x8f
 800b9f4:	f000 fc0e 	bl	800c214 <__assert_func>
 800b9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9fc:	6006      	str	r6, [r0, #0]
 800b9fe:	60c6      	str	r6, [r0, #12]
 800ba00:	b13c      	cbz	r4, 800ba12 <_Bfree+0x3a>
 800ba02:	69eb      	ldr	r3, [r5, #28]
 800ba04:	6862      	ldr	r2, [r4, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba0c:	6021      	str	r1, [r4, #0]
 800ba0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	0800d4ad 	.word	0x0800d4ad
 800ba18:	0800d53e 	.word	0x0800d53e

0800ba1c <__multadd>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	690d      	ldr	r5, [r1, #16]
 800ba22:	4607      	mov	r7, r0
 800ba24:	460c      	mov	r4, r1
 800ba26:	461e      	mov	r6, r3
 800ba28:	f101 0c14 	add.w	ip, r1, #20
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ba32:	b299      	uxth	r1, r3
 800ba34:	fb02 6101 	mla	r1, r2, r1, r6
 800ba38:	0c1e      	lsrs	r6, r3, #16
 800ba3a:	0c0b      	lsrs	r3, r1, #16
 800ba3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ba40:	b289      	uxth	r1, r1
 800ba42:	3001      	adds	r0, #1
 800ba44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba48:	4285      	cmp	r5, r0
 800ba4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ba4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba52:	dcec      	bgt.n	800ba2e <__multadd+0x12>
 800ba54:	b30e      	cbz	r6, 800ba9a <__multadd+0x7e>
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	42ab      	cmp	r3, r5
 800ba5a:	dc19      	bgt.n	800ba90 <__multadd+0x74>
 800ba5c:	6861      	ldr	r1, [r4, #4]
 800ba5e:	4638      	mov	r0, r7
 800ba60:	3101      	adds	r1, #1
 800ba62:	f7ff ff79 	bl	800b958 <_Balloc>
 800ba66:	4680      	mov	r8, r0
 800ba68:	b928      	cbnz	r0, 800ba76 <__multadd+0x5a>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <__multadd+0x84>)
 800ba6e:	480d      	ldr	r0, [pc, #52]	; (800baa4 <__multadd+0x88>)
 800ba70:	21ba      	movs	r1, #186	; 0xba
 800ba72:	f000 fbcf 	bl	800c214 <__assert_func>
 800ba76:	6922      	ldr	r2, [r4, #16]
 800ba78:	3202      	adds	r2, #2
 800ba7a:	f104 010c 	add.w	r1, r4, #12
 800ba7e:	0092      	lsls	r2, r2, #2
 800ba80:	300c      	adds	r0, #12
 800ba82:	f7fe fe24 	bl	800a6ce <memcpy>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff ffa5 	bl	800b9d8 <_Bfree>
 800ba8e:	4644      	mov	r4, r8
 800ba90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba94:	3501      	adds	r5, #1
 800ba96:	615e      	str	r6, [r3, #20]
 800ba98:	6125      	str	r5, [r4, #16]
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	0800d51c 	.word	0x0800d51c
 800baa4:	0800d53e 	.word	0x0800d53e

0800baa8 <__hi0bits>:
 800baa8:	0c03      	lsrs	r3, r0, #16
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	b9d3      	cbnz	r3, 800bae4 <__hi0bits+0x3c>
 800baae:	0400      	lsls	r0, r0, #16
 800bab0:	2310      	movs	r3, #16
 800bab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bab6:	bf04      	itt	eq
 800bab8:	0200      	lsleq	r0, r0, #8
 800baba:	3308      	addeq	r3, #8
 800babc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bac0:	bf04      	itt	eq
 800bac2:	0100      	lsleq	r0, r0, #4
 800bac4:	3304      	addeq	r3, #4
 800bac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800baca:	bf04      	itt	eq
 800bacc:	0080      	lsleq	r0, r0, #2
 800bace:	3302      	addeq	r3, #2
 800bad0:	2800      	cmp	r0, #0
 800bad2:	db05      	blt.n	800bae0 <__hi0bits+0x38>
 800bad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bad8:	f103 0301 	add.w	r3, r3, #1
 800badc:	bf08      	it	eq
 800bade:	2320      	moveq	r3, #32
 800bae0:	4618      	mov	r0, r3
 800bae2:	4770      	bx	lr
 800bae4:	2300      	movs	r3, #0
 800bae6:	e7e4      	b.n	800bab2 <__hi0bits+0xa>

0800bae8 <__lo0bits>:
 800bae8:	6803      	ldr	r3, [r0, #0]
 800baea:	f013 0207 	ands.w	r2, r3, #7
 800baee:	d00c      	beq.n	800bb0a <__lo0bits+0x22>
 800baf0:	07d9      	lsls	r1, r3, #31
 800baf2:	d422      	bmi.n	800bb3a <__lo0bits+0x52>
 800baf4:	079a      	lsls	r2, r3, #30
 800baf6:	bf49      	itett	mi
 800baf8:	085b      	lsrmi	r3, r3, #1
 800bafa:	089b      	lsrpl	r3, r3, #2
 800bafc:	6003      	strmi	r3, [r0, #0]
 800bafe:	2201      	movmi	r2, #1
 800bb00:	bf5c      	itt	pl
 800bb02:	6003      	strpl	r3, [r0, #0]
 800bb04:	2202      	movpl	r2, #2
 800bb06:	4610      	mov	r0, r2
 800bb08:	4770      	bx	lr
 800bb0a:	b299      	uxth	r1, r3
 800bb0c:	b909      	cbnz	r1, 800bb12 <__lo0bits+0x2a>
 800bb0e:	0c1b      	lsrs	r3, r3, #16
 800bb10:	2210      	movs	r2, #16
 800bb12:	b2d9      	uxtb	r1, r3
 800bb14:	b909      	cbnz	r1, 800bb1a <__lo0bits+0x32>
 800bb16:	3208      	adds	r2, #8
 800bb18:	0a1b      	lsrs	r3, r3, #8
 800bb1a:	0719      	lsls	r1, r3, #28
 800bb1c:	bf04      	itt	eq
 800bb1e:	091b      	lsreq	r3, r3, #4
 800bb20:	3204      	addeq	r2, #4
 800bb22:	0799      	lsls	r1, r3, #30
 800bb24:	bf04      	itt	eq
 800bb26:	089b      	lsreq	r3, r3, #2
 800bb28:	3202      	addeq	r2, #2
 800bb2a:	07d9      	lsls	r1, r3, #31
 800bb2c:	d403      	bmi.n	800bb36 <__lo0bits+0x4e>
 800bb2e:	085b      	lsrs	r3, r3, #1
 800bb30:	f102 0201 	add.w	r2, r2, #1
 800bb34:	d003      	beq.n	800bb3e <__lo0bits+0x56>
 800bb36:	6003      	str	r3, [r0, #0]
 800bb38:	e7e5      	b.n	800bb06 <__lo0bits+0x1e>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	e7e3      	b.n	800bb06 <__lo0bits+0x1e>
 800bb3e:	2220      	movs	r2, #32
 800bb40:	e7e1      	b.n	800bb06 <__lo0bits+0x1e>
	...

0800bb44 <__i2b>:
 800bb44:	b510      	push	{r4, lr}
 800bb46:	460c      	mov	r4, r1
 800bb48:	2101      	movs	r1, #1
 800bb4a:	f7ff ff05 	bl	800b958 <_Balloc>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	b928      	cbnz	r0, 800bb5e <__i2b+0x1a>
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <__i2b+0x24>)
 800bb54:	4805      	ldr	r0, [pc, #20]	; (800bb6c <__i2b+0x28>)
 800bb56:	f240 1145 	movw	r1, #325	; 0x145
 800bb5a:	f000 fb5b 	bl	800c214 <__assert_func>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	6144      	str	r4, [r0, #20]
 800bb62:	6103      	str	r3, [r0, #16]
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	bf00      	nop
 800bb68:	0800d51c 	.word	0x0800d51c
 800bb6c:	0800d53e 	.word	0x0800d53e

0800bb70 <__multiply>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	4691      	mov	r9, r2
 800bb76:	690a      	ldr	r2, [r1, #16]
 800bb78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	bfb8      	it	lt
 800bb80:	460b      	movlt	r3, r1
 800bb82:	460c      	mov	r4, r1
 800bb84:	bfbc      	itt	lt
 800bb86:	464c      	movlt	r4, r9
 800bb88:	4699      	movlt	r9, r3
 800bb8a:	6927      	ldr	r7, [r4, #16]
 800bb8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb90:	68a3      	ldr	r3, [r4, #8]
 800bb92:	6861      	ldr	r1, [r4, #4]
 800bb94:	eb07 060a 	add.w	r6, r7, sl
 800bb98:	42b3      	cmp	r3, r6
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	bfb8      	it	lt
 800bb9e:	3101      	addlt	r1, #1
 800bba0:	f7ff feda 	bl	800b958 <_Balloc>
 800bba4:	b930      	cbnz	r0, 800bbb4 <__multiply+0x44>
 800bba6:	4602      	mov	r2, r0
 800bba8:	4b44      	ldr	r3, [pc, #272]	; (800bcbc <__multiply+0x14c>)
 800bbaa:	4845      	ldr	r0, [pc, #276]	; (800bcc0 <__multiply+0x150>)
 800bbac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bbb0:	f000 fb30 	bl	800c214 <__assert_func>
 800bbb4:	f100 0514 	add.w	r5, r0, #20
 800bbb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	4543      	cmp	r3, r8
 800bbc2:	d321      	bcc.n	800bc08 <__multiply+0x98>
 800bbc4:	f104 0314 	add.w	r3, r4, #20
 800bbc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbcc:	f109 0314 	add.w	r3, r9, #20
 800bbd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbd4:	9202      	str	r2, [sp, #8]
 800bbd6:	1b3a      	subs	r2, r7, r4
 800bbd8:	3a15      	subs	r2, #21
 800bbda:	f022 0203 	bic.w	r2, r2, #3
 800bbde:	3204      	adds	r2, #4
 800bbe0:	f104 0115 	add.w	r1, r4, #21
 800bbe4:	428f      	cmp	r7, r1
 800bbe6:	bf38      	it	cc
 800bbe8:	2204      	movcc	r2, #4
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	9a02      	ldr	r2, [sp, #8]
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d80c      	bhi.n	800bc0e <__multiply+0x9e>
 800bbf4:	2e00      	cmp	r6, #0
 800bbf6:	dd03      	ble.n	800bc00 <__multiply+0x90>
 800bbf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d05b      	beq.n	800bcb8 <__multiply+0x148>
 800bc00:	6106      	str	r6, [r0, #16]
 800bc02:	b005      	add	sp, #20
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	f843 2b04 	str.w	r2, [r3], #4
 800bc0c:	e7d8      	b.n	800bbc0 <__multiply+0x50>
 800bc0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc12:	f1ba 0f00 	cmp.w	sl, #0
 800bc16:	d024      	beq.n	800bc62 <__multiply+0xf2>
 800bc18:	f104 0e14 	add.w	lr, r4, #20
 800bc1c:	46a9      	mov	r9, r5
 800bc1e:	f04f 0c00 	mov.w	ip, #0
 800bc22:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc26:	f8d9 1000 	ldr.w	r1, [r9]
 800bc2a:	fa1f fb82 	uxth.w	fp, r2
 800bc2e:	b289      	uxth	r1, r1
 800bc30:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc38:	f8d9 2000 	ldr.w	r2, [r9]
 800bc3c:	4461      	add	r1, ip
 800bc3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc42:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc4a:	b289      	uxth	r1, r1
 800bc4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc50:	4577      	cmp	r7, lr
 800bc52:	f849 1b04 	str.w	r1, [r9], #4
 800bc56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc5a:	d8e2      	bhi.n	800bc22 <__multiply+0xb2>
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	f845 c002 	str.w	ip, [r5, r2]
 800bc62:	9a03      	ldr	r2, [sp, #12]
 800bc64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	f1b9 0f00 	cmp.w	r9, #0
 800bc6e:	d021      	beq.n	800bcb4 <__multiply+0x144>
 800bc70:	6829      	ldr	r1, [r5, #0]
 800bc72:	f104 0c14 	add.w	ip, r4, #20
 800bc76:	46ae      	mov	lr, r5
 800bc78:	f04f 0a00 	mov.w	sl, #0
 800bc7c:	f8bc b000 	ldrh.w	fp, [ip]
 800bc80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc84:	fb09 220b 	mla	r2, r9, fp, r2
 800bc88:	4452      	add	r2, sl
 800bc8a:	b289      	uxth	r1, r1
 800bc8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc90:	f84e 1b04 	str.w	r1, [lr], #4
 800bc94:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc9c:	f8be 1000 	ldrh.w	r1, [lr]
 800bca0:	fb09 110a 	mla	r1, r9, sl, r1
 800bca4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bca8:	4567      	cmp	r7, ip
 800bcaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcae:	d8e5      	bhi.n	800bc7c <__multiply+0x10c>
 800bcb0:	9a01      	ldr	r2, [sp, #4]
 800bcb2:	50a9      	str	r1, [r5, r2]
 800bcb4:	3504      	adds	r5, #4
 800bcb6:	e799      	b.n	800bbec <__multiply+0x7c>
 800bcb8:	3e01      	subs	r6, #1
 800bcba:	e79b      	b.n	800bbf4 <__multiply+0x84>
 800bcbc:	0800d51c 	.word	0x0800d51c
 800bcc0:	0800d53e 	.word	0x0800d53e

0800bcc4 <__pow5mult>:
 800bcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc8:	4615      	mov	r5, r2
 800bcca:	f012 0203 	ands.w	r2, r2, #3
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	d007      	beq.n	800bce4 <__pow5mult+0x20>
 800bcd4:	4c25      	ldr	r4, [pc, #148]	; (800bd6c <__pow5mult+0xa8>)
 800bcd6:	3a01      	subs	r2, #1
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcde:	f7ff fe9d 	bl	800ba1c <__multadd>
 800bce2:	4607      	mov	r7, r0
 800bce4:	10ad      	asrs	r5, r5, #2
 800bce6:	d03d      	beq.n	800bd64 <__pow5mult+0xa0>
 800bce8:	69f4      	ldr	r4, [r6, #28]
 800bcea:	b97c      	cbnz	r4, 800bd0c <__pow5mult+0x48>
 800bcec:	2010      	movs	r0, #16
 800bcee:	f7ff fcd1 	bl	800b694 <malloc>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	61f0      	str	r0, [r6, #28]
 800bcf6:	b928      	cbnz	r0, 800bd04 <__pow5mult+0x40>
 800bcf8:	4b1d      	ldr	r3, [pc, #116]	; (800bd70 <__pow5mult+0xac>)
 800bcfa:	481e      	ldr	r0, [pc, #120]	; (800bd74 <__pow5mult+0xb0>)
 800bcfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bd00:	f000 fa88 	bl	800c214 <__assert_func>
 800bd04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd08:	6004      	str	r4, [r0, #0]
 800bd0a:	60c4      	str	r4, [r0, #12]
 800bd0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bd10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd14:	b94c      	cbnz	r4, 800bd2a <__pow5mult+0x66>
 800bd16:	f240 2171 	movw	r1, #625	; 0x271
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f7ff ff12 	bl	800bb44 <__i2b>
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd26:	4604      	mov	r4, r0
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	f04f 0900 	mov.w	r9, #0
 800bd2e:	07eb      	lsls	r3, r5, #31
 800bd30:	d50a      	bpl.n	800bd48 <__pow5mult+0x84>
 800bd32:	4639      	mov	r1, r7
 800bd34:	4622      	mov	r2, r4
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7ff ff1a 	bl	800bb70 <__multiply>
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4680      	mov	r8, r0
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff fe49 	bl	800b9d8 <_Bfree>
 800bd46:	4647      	mov	r7, r8
 800bd48:	106d      	asrs	r5, r5, #1
 800bd4a:	d00b      	beq.n	800bd64 <__pow5mult+0xa0>
 800bd4c:	6820      	ldr	r0, [r4, #0]
 800bd4e:	b938      	cbnz	r0, 800bd60 <__pow5mult+0x9c>
 800bd50:	4622      	mov	r2, r4
 800bd52:	4621      	mov	r1, r4
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff ff0b 	bl	800bb70 <__multiply>
 800bd5a:	6020      	str	r0, [r4, #0]
 800bd5c:	f8c0 9000 	str.w	r9, [r0]
 800bd60:	4604      	mov	r4, r0
 800bd62:	e7e4      	b.n	800bd2e <__pow5mult+0x6a>
 800bd64:	4638      	mov	r0, r7
 800bd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0800d688 	.word	0x0800d688
 800bd70:	0800d4ad 	.word	0x0800d4ad
 800bd74:	0800d53e 	.word	0x0800d53e

0800bd78 <__lshift>:
 800bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	6849      	ldr	r1, [r1, #4]
 800bd80:	6923      	ldr	r3, [r4, #16]
 800bd82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	4607      	mov	r7, r0
 800bd8a:	4691      	mov	r9, r2
 800bd8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd90:	f108 0601 	add.w	r6, r8, #1
 800bd94:	42b3      	cmp	r3, r6
 800bd96:	db0b      	blt.n	800bdb0 <__lshift+0x38>
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7ff fddd 	bl	800b958 <_Balloc>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	b948      	cbnz	r0, 800bdb6 <__lshift+0x3e>
 800bda2:	4602      	mov	r2, r0
 800bda4:	4b28      	ldr	r3, [pc, #160]	; (800be48 <__lshift+0xd0>)
 800bda6:	4829      	ldr	r0, [pc, #164]	; (800be4c <__lshift+0xd4>)
 800bda8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bdac:	f000 fa32 	bl	800c214 <__assert_func>
 800bdb0:	3101      	adds	r1, #1
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	e7ee      	b.n	800bd94 <__lshift+0x1c>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f100 0114 	add.w	r1, r0, #20
 800bdbc:	f100 0210 	add.w	r2, r0, #16
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	4553      	cmp	r3, sl
 800bdc4:	db33      	blt.n	800be2e <__lshift+0xb6>
 800bdc6:	6920      	ldr	r0, [r4, #16]
 800bdc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdcc:	f104 0314 	add.w	r3, r4, #20
 800bdd0:	f019 091f 	ands.w	r9, r9, #31
 800bdd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bddc:	d02b      	beq.n	800be36 <__lshift+0xbe>
 800bdde:	f1c9 0e20 	rsb	lr, r9, #32
 800bde2:	468a      	mov	sl, r1
 800bde4:	2200      	movs	r2, #0
 800bde6:	6818      	ldr	r0, [r3, #0]
 800bde8:	fa00 f009 	lsl.w	r0, r0, r9
 800bdec:	4310      	orrs	r0, r2
 800bdee:	f84a 0b04 	str.w	r0, [sl], #4
 800bdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf6:	459c      	cmp	ip, r3
 800bdf8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdfc:	d8f3      	bhi.n	800bde6 <__lshift+0x6e>
 800bdfe:	ebac 0304 	sub.w	r3, ip, r4
 800be02:	3b15      	subs	r3, #21
 800be04:	f023 0303 	bic.w	r3, r3, #3
 800be08:	3304      	adds	r3, #4
 800be0a:	f104 0015 	add.w	r0, r4, #21
 800be0e:	4584      	cmp	ip, r0
 800be10:	bf38      	it	cc
 800be12:	2304      	movcc	r3, #4
 800be14:	50ca      	str	r2, [r1, r3]
 800be16:	b10a      	cbz	r2, 800be1c <__lshift+0xa4>
 800be18:	f108 0602 	add.w	r6, r8, #2
 800be1c:	3e01      	subs	r6, #1
 800be1e:	4638      	mov	r0, r7
 800be20:	612e      	str	r6, [r5, #16]
 800be22:	4621      	mov	r1, r4
 800be24:	f7ff fdd8 	bl	800b9d8 <_Bfree>
 800be28:	4628      	mov	r0, r5
 800be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be32:	3301      	adds	r3, #1
 800be34:	e7c5      	b.n	800bdc2 <__lshift+0x4a>
 800be36:	3904      	subs	r1, #4
 800be38:	f853 2b04 	ldr.w	r2, [r3], #4
 800be3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be40:	459c      	cmp	ip, r3
 800be42:	d8f9      	bhi.n	800be38 <__lshift+0xc0>
 800be44:	e7ea      	b.n	800be1c <__lshift+0xa4>
 800be46:	bf00      	nop
 800be48:	0800d51c 	.word	0x0800d51c
 800be4c:	0800d53e 	.word	0x0800d53e

0800be50 <__mcmp>:
 800be50:	b530      	push	{r4, r5, lr}
 800be52:	6902      	ldr	r2, [r0, #16]
 800be54:	690c      	ldr	r4, [r1, #16]
 800be56:	1b12      	subs	r2, r2, r4
 800be58:	d10e      	bne.n	800be78 <__mcmp+0x28>
 800be5a:	f100 0314 	add.w	r3, r0, #20
 800be5e:	3114      	adds	r1, #20
 800be60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be70:	42a5      	cmp	r5, r4
 800be72:	d003      	beq.n	800be7c <__mcmp+0x2c>
 800be74:	d305      	bcc.n	800be82 <__mcmp+0x32>
 800be76:	2201      	movs	r2, #1
 800be78:	4610      	mov	r0, r2
 800be7a:	bd30      	pop	{r4, r5, pc}
 800be7c:	4283      	cmp	r3, r0
 800be7e:	d3f3      	bcc.n	800be68 <__mcmp+0x18>
 800be80:	e7fa      	b.n	800be78 <__mcmp+0x28>
 800be82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be86:	e7f7      	b.n	800be78 <__mcmp+0x28>

0800be88 <__mdiff>:
 800be88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	460c      	mov	r4, r1
 800be8e:	4606      	mov	r6, r0
 800be90:	4611      	mov	r1, r2
 800be92:	4620      	mov	r0, r4
 800be94:	4690      	mov	r8, r2
 800be96:	f7ff ffdb 	bl	800be50 <__mcmp>
 800be9a:	1e05      	subs	r5, r0, #0
 800be9c:	d110      	bne.n	800bec0 <__mdiff+0x38>
 800be9e:	4629      	mov	r1, r5
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff fd59 	bl	800b958 <_Balloc>
 800bea6:	b930      	cbnz	r0, 800beb6 <__mdiff+0x2e>
 800bea8:	4b3a      	ldr	r3, [pc, #232]	; (800bf94 <__mdiff+0x10c>)
 800beaa:	4602      	mov	r2, r0
 800beac:	f240 2137 	movw	r1, #567	; 0x237
 800beb0:	4839      	ldr	r0, [pc, #228]	; (800bf98 <__mdiff+0x110>)
 800beb2:	f000 f9af 	bl	800c214 <__assert_func>
 800beb6:	2301      	movs	r3, #1
 800beb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec0:	bfa4      	itt	ge
 800bec2:	4643      	movge	r3, r8
 800bec4:	46a0      	movge	r8, r4
 800bec6:	4630      	mov	r0, r6
 800bec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800becc:	bfa6      	itte	ge
 800bece:	461c      	movge	r4, r3
 800bed0:	2500      	movge	r5, #0
 800bed2:	2501      	movlt	r5, #1
 800bed4:	f7ff fd40 	bl	800b958 <_Balloc>
 800bed8:	b920      	cbnz	r0, 800bee4 <__mdiff+0x5c>
 800beda:	4b2e      	ldr	r3, [pc, #184]	; (800bf94 <__mdiff+0x10c>)
 800bedc:	4602      	mov	r2, r0
 800bede:	f240 2145 	movw	r1, #581	; 0x245
 800bee2:	e7e5      	b.n	800beb0 <__mdiff+0x28>
 800bee4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bee8:	6926      	ldr	r6, [r4, #16]
 800beea:	60c5      	str	r5, [r0, #12]
 800beec:	f104 0914 	add.w	r9, r4, #20
 800bef0:	f108 0514 	add.w	r5, r8, #20
 800bef4:	f100 0e14 	add.w	lr, r0, #20
 800bef8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800befc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf00:	f108 0210 	add.w	r2, r8, #16
 800bf04:	46f2      	mov	sl, lr
 800bf06:	2100      	movs	r1, #0
 800bf08:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf10:	fa11 f88b 	uxtah	r8, r1, fp
 800bf14:	b299      	uxth	r1, r3
 800bf16:	0c1b      	lsrs	r3, r3, #16
 800bf18:	eba8 0801 	sub.w	r8, r8, r1
 800bf1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf24:	fa1f f888 	uxth.w	r8, r8
 800bf28:	1419      	asrs	r1, r3, #16
 800bf2a:	454e      	cmp	r6, r9
 800bf2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf30:	f84a 3b04 	str.w	r3, [sl], #4
 800bf34:	d8e8      	bhi.n	800bf08 <__mdiff+0x80>
 800bf36:	1b33      	subs	r3, r6, r4
 800bf38:	3b15      	subs	r3, #21
 800bf3a:	f023 0303 	bic.w	r3, r3, #3
 800bf3e:	3304      	adds	r3, #4
 800bf40:	3415      	adds	r4, #21
 800bf42:	42a6      	cmp	r6, r4
 800bf44:	bf38      	it	cc
 800bf46:	2304      	movcc	r3, #4
 800bf48:	441d      	add	r5, r3
 800bf4a:	4473      	add	r3, lr
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	462e      	mov	r6, r5
 800bf50:	4566      	cmp	r6, ip
 800bf52:	d30e      	bcc.n	800bf72 <__mdiff+0xea>
 800bf54:	f10c 0203 	add.w	r2, ip, #3
 800bf58:	1b52      	subs	r2, r2, r5
 800bf5a:	f022 0203 	bic.w	r2, r2, #3
 800bf5e:	3d03      	subs	r5, #3
 800bf60:	45ac      	cmp	ip, r5
 800bf62:	bf38      	it	cc
 800bf64:	2200      	movcc	r2, #0
 800bf66:	4413      	add	r3, r2
 800bf68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf6c:	b17a      	cbz	r2, 800bf8e <__mdiff+0x106>
 800bf6e:	6107      	str	r7, [r0, #16]
 800bf70:	e7a4      	b.n	800bebc <__mdiff+0x34>
 800bf72:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf76:	fa11 f288 	uxtah	r2, r1, r8
 800bf7a:	1414      	asrs	r4, r2, #16
 800bf7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf80:	b292      	uxth	r2, r2
 800bf82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf86:	f84e 2b04 	str.w	r2, [lr], #4
 800bf8a:	1421      	asrs	r1, r4, #16
 800bf8c:	e7e0      	b.n	800bf50 <__mdiff+0xc8>
 800bf8e:	3f01      	subs	r7, #1
 800bf90:	e7ea      	b.n	800bf68 <__mdiff+0xe0>
 800bf92:	bf00      	nop
 800bf94:	0800d51c 	.word	0x0800d51c
 800bf98:	0800d53e 	.word	0x0800d53e

0800bf9c <__d2b>:
 800bf9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	ec59 8b10 	vmov	r8, r9, d0
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	f7ff fcd5 	bl	800b958 <_Balloc>
 800bfae:	4604      	mov	r4, r0
 800bfb0:	b930      	cbnz	r0, 800bfc0 <__d2b+0x24>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	4b24      	ldr	r3, [pc, #144]	; (800c048 <__d2b+0xac>)
 800bfb6:	4825      	ldr	r0, [pc, #148]	; (800c04c <__d2b+0xb0>)
 800bfb8:	f240 310f 	movw	r1, #783	; 0x30f
 800bfbc:	f000 f92a 	bl	800c214 <__assert_func>
 800bfc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfc8:	bb2d      	cbnz	r5, 800c016 <__d2b+0x7a>
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	f1b8 0300 	subs.w	r3, r8, #0
 800bfd0:	d026      	beq.n	800c020 <__d2b+0x84>
 800bfd2:	4668      	mov	r0, sp
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	f7ff fd87 	bl	800bae8 <__lo0bits>
 800bfda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfde:	b1e8      	cbz	r0, 800c01c <__d2b+0x80>
 800bfe0:	f1c0 0320 	rsb	r3, r0, #32
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	40c2      	lsrs	r2, r0
 800bfec:	6163      	str	r3, [r4, #20]
 800bfee:	9201      	str	r2, [sp, #4]
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	61a3      	str	r3, [r4, #24]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	bf14      	ite	ne
 800bff8:	2202      	movne	r2, #2
 800bffa:	2201      	moveq	r2, #1
 800bffc:	6122      	str	r2, [r4, #16]
 800bffe:	b1bd      	cbz	r5, 800c030 <__d2b+0x94>
 800c000:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c004:	4405      	add	r5, r0
 800c006:	603d      	str	r5, [r7, #0]
 800c008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c00c:	6030      	str	r0, [r6, #0]
 800c00e:	4620      	mov	r0, r4
 800c010:	b003      	add	sp, #12
 800c012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c01a:	e7d6      	b.n	800bfca <__d2b+0x2e>
 800c01c:	6161      	str	r1, [r4, #20]
 800c01e:	e7e7      	b.n	800bff0 <__d2b+0x54>
 800c020:	a801      	add	r0, sp, #4
 800c022:	f7ff fd61 	bl	800bae8 <__lo0bits>
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	6163      	str	r3, [r4, #20]
 800c02a:	3020      	adds	r0, #32
 800c02c:	2201      	movs	r2, #1
 800c02e:	e7e5      	b.n	800bffc <__d2b+0x60>
 800c030:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c038:	6038      	str	r0, [r7, #0]
 800c03a:	6918      	ldr	r0, [r3, #16]
 800c03c:	f7ff fd34 	bl	800baa8 <__hi0bits>
 800c040:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c044:	e7e2      	b.n	800c00c <__d2b+0x70>
 800c046:	bf00      	nop
 800c048:	0800d51c 	.word	0x0800d51c
 800c04c:	0800d53e 	.word	0x0800d53e

0800c050 <__sread>:
 800c050:	b510      	push	{r4, lr}
 800c052:	460c      	mov	r4, r1
 800c054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c058:	f000 f8a8 	bl	800c1ac <_read_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	bfab      	itete	ge
 800c060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c062:	89a3      	ldrhlt	r3, [r4, #12]
 800c064:	181b      	addge	r3, r3, r0
 800c066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c06a:	bfac      	ite	ge
 800c06c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c06e:	81a3      	strhlt	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__swrite>:
 800c072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c076:	461f      	mov	r7, r3
 800c078:	898b      	ldrh	r3, [r1, #12]
 800c07a:	05db      	lsls	r3, r3, #23
 800c07c:	4605      	mov	r5, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	4616      	mov	r6, r2
 800c082:	d505      	bpl.n	800c090 <__swrite+0x1e>
 800c084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c088:	2302      	movs	r3, #2
 800c08a:	2200      	movs	r2, #0
 800c08c:	f000 f87c 	bl	800c188 <_lseek_r>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	4632      	mov	r2, r6
 800c09e:	463b      	mov	r3, r7
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a6:	f000 b8a3 	b.w	800c1f0 <_write_r>

0800c0aa <__sseek>:
 800c0aa:	b510      	push	{r4, lr}
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b2:	f000 f869 	bl	800c188 <_lseek_r>
 800c0b6:	1c43      	adds	r3, r0, #1
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	bf15      	itete	ne
 800c0bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0c6:	81a3      	strheq	r3, [r4, #12]
 800c0c8:	bf18      	it	ne
 800c0ca:	81a3      	strhne	r3, [r4, #12]
 800c0cc:	bd10      	pop	{r4, pc}

0800c0ce <__sclose>:
 800c0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d2:	f000 b849 	b.w	800c168 <_close_r>

0800c0d6 <_realloc_r>:
 800c0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0da:	4680      	mov	r8, r0
 800c0dc:	4614      	mov	r4, r2
 800c0de:	460e      	mov	r6, r1
 800c0e0:	b921      	cbnz	r1, 800c0ec <_realloc_r+0x16>
 800c0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	f7ff bafc 	b.w	800b6e4 <_malloc_r>
 800c0ec:	b92a      	cbnz	r2, 800c0fa <_realloc_r+0x24>
 800c0ee:	f000 f8c5 	bl	800c27c <_free_r>
 800c0f2:	4625      	mov	r5, r4
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fa:	f000 f91d 	bl	800c338 <_malloc_usable_size_r>
 800c0fe:	4284      	cmp	r4, r0
 800c100:	4607      	mov	r7, r0
 800c102:	d802      	bhi.n	800c10a <_realloc_r+0x34>
 800c104:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c108:	d812      	bhi.n	800c130 <_realloc_r+0x5a>
 800c10a:	4621      	mov	r1, r4
 800c10c:	4640      	mov	r0, r8
 800c10e:	f7ff fae9 	bl	800b6e4 <_malloc_r>
 800c112:	4605      	mov	r5, r0
 800c114:	2800      	cmp	r0, #0
 800c116:	d0ed      	beq.n	800c0f4 <_realloc_r+0x1e>
 800c118:	42bc      	cmp	r4, r7
 800c11a:	4622      	mov	r2, r4
 800c11c:	4631      	mov	r1, r6
 800c11e:	bf28      	it	cs
 800c120:	463a      	movcs	r2, r7
 800c122:	f7fe fad4 	bl	800a6ce <memcpy>
 800c126:	4631      	mov	r1, r6
 800c128:	4640      	mov	r0, r8
 800c12a:	f000 f8a7 	bl	800c27c <_free_r>
 800c12e:	e7e1      	b.n	800c0f4 <_realloc_r+0x1e>
 800c130:	4635      	mov	r5, r6
 800c132:	e7df      	b.n	800c0f4 <_realloc_r+0x1e>

0800c134 <memmove>:
 800c134:	4288      	cmp	r0, r1
 800c136:	b510      	push	{r4, lr}
 800c138:	eb01 0402 	add.w	r4, r1, r2
 800c13c:	d902      	bls.n	800c144 <memmove+0x10>
 800c13e:	4284      	cmp	r4, r0
 800c140:	4623      	mov	r3, r4
 800c142:	d807      	bhi.n	800c154 <memmove+0x20>
 800c144:	1e43      	subs	r3, r0, #1
 800c146:	42a1      	cmp	r1, r4
 800c148:	d008      	beq.n	800c15c <memmove+0x28>
 800c14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c152:	e7f8      	b.n	800c146 <memmove+0x12>
 800c154:	4402      	add	r2, r0
 800c156:	4601      	mov	r1, r0
 800c158:	428a      	cmp	r2, r1
 800c15a:	d100      	bne.n	800c15e <memmove+0x2a>
 800c15c:	bd10      	pop	{r4, pc}
 800c15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c166:	e7f7      	b.n	800c158 <memmove+0x24>

0800c168 <_close_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d06      	ldr	r5, [pc, #24]	; (800c184 <_close_r+0x1c>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	4608      	mov	r0, r1
 800c172:	602b      	str	r3, [r5, #0]
 800c174:	f7f7 f899 	bl	80032aa <_close>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_close_r+0x1a>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_close_r+0x1a>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20004840 	.word	0x20004840

0800c188 <_lseek_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	; (800c1a8 <_lseek_r+0x20>)
 800c18c:	4604      	mov	r4, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	4611      	mov	r1, r2
 800c192:	2200      	movs	r2, #0
 800c194:	602a      	str	r2, [r5, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f7f7 f8ae 	bl	80032f8 <_lseek>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_lseek_r+0x1e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_lseek_r+0x1e>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	20004840 	.word	0x20004840

0800c1ac <_read_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d07      	ldr	r5, [pc, #28]	; (800c1cc <_read_r+0x20>)
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	602a      	str	r2, [r5, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7f7 f83c 	bl	8003238 <_read>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_read_r+0x1e>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_read_r+0x1e>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	20004840 	.word	0x20004840

0800c1d0 <_sbrk_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d06      	ldr	r5, [pc, #24]	; (800c1ec <_sbrk_r+0x1c>)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	f7f7 f89a 	bl	8003314 <_sbrk>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_sbrk_r+0x1a>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_sbrk_r+0x1a>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	20004840 	.word	0x20004840

0800c1f0 <_write_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	; (800c210 <_write_r+0x20>)
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	602a      	str	r2, [r5, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	f7f7 f837 	bl	8003272 <_write>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_write_r+0x1e>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_write_r+0x1e>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	20004840 	.word	0x20004840

0800c214 <__assert_func>:
 800c214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c216:	4614      	mov	r4, r2
 800c218:	461a      	mov	r2, r3
 800c21a:	4b09      	ldr	r3, [pc, #36]	; (800c240 <__assert_func+0x2c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4605      	mov	r5, r0
 800c220:	68d8      	ldr	r0, [r3, #12]
 800c222:	b14c      	cbz	r4, 800c238 <__assert_func+0x24>
 800c224:	4b07      	ldr	r3, [pc, #28]	; (800c244 <__assert_func+0x30>)
 800c226:	9100      	str	r1, [sp, #0]
 800c228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c22c:	4906      	ldr	r1, [pc, #24]	; (800c248 <__assert_func+0x34>)
 800c22e:	462b      	mov	r3, r5
 800c230:	f000 f88a 	bl	800c348 <fiprintf>
 800c234:	f000 f8a7 	bl	800c386 <abort>
 800c238:	4b04      	ldr	r3, [pc, #16]	; (800c24c <__assert_func+0x38>)
 800c23a:	461c      	mov	r4, r3
 800c23c:	e7f3      	b.n	800c226 <__assert_func+0x12>
 800c23e:	bf00      	nop
 800c240:	20000118 	.word	0x20000118
 800c244:	0800d79f 	.word	0x0800d79f
 800c248:	0800d7ac 	.word	0x0800d7ac
 800c24c:	0800d7da 	.word	0x0800d7da

0800c250 <_calloc_r>:
 800c250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c252:	fba1 2402 	umull	r2, r4, r1, r2
 800c256:	b94c      	cbnz	r4, 800c26c <_calloc_r+0x1c>
 800c258:	4611      	mov	r1, r2
 800c25a:	9201      	str	r2, [sp, #4]
 800c25c:	f7ff fa42 	bl	800b6e4 <_malloc_r>
 800c260:	9a01      	ldr	r2, [sp, #4]
 800c262:	4605      	mov	r5, r0
 800c264:	b930      	cbnz	r0, 800c274 <_calloc_r+0x24>
 800c266:	4628      	mov	r0, r5
 800c268:	b003      	add	sp, #12
 800c26a:	bd30      	pop	{r4, r5, pc}
 800c26c:	220c      	movs	r2, #12
 800c26e:	6002      	str	r2, [r0, #0]
 800c270:	2500      	movs	r5, #0
 800c272:	e7f8      	b.n	800c266 <_calloc_r+0x16>
 800c274:	4621      	mov	r1, r4
 800c276:	f7fe f9f1 	bl	800a65c <memset>
 800c27a:	e7f4      	b.n	800c266 <_calloc_r+0x16>

0800c27c <_free_r>:
 800c27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c27e:	2900      	cmp	r1, #0
 800c280:	d044      	beq.n	800c30c <_free_r+0x90>
 800c282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c286:	9001      	str	r0, [sp, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f1a1 0404 	sub.w	r4, r1, #4
 800c28e:	bfb8      	it	lt
 800c290:	18e4      	addlt	r4, r4, r3
 800c292:	f7ff fb55 	bl	800b940 <__malloc_lock>
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <_free_r+0x94>)
 800c298:	9801      	ldr	r0, [sp, #4]
 800c29a:	6813      	ldr	r3, [r2, #0]
 800c29c:	b933      	cbnz	r3, 800c2ac <_free_r+0x30>
 800c29e:	6063      	str	r3, [r4, #4]
 800c2a0:	6014      	str	r4, [r2, #0]
 800c2a2:	b003      	add	sp, #12
 800c2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2a8:	f7ff bb50 	b.w	800b94c <__malloc_unlock>
 800c2ac:	42a3      	cmp	r3, r4
 800c2ae:	d908      	bls.n	800c2c2 <_free_r+0x46>
 800c2b0:	6825      	ldr	r5, [r4, #0]
 800c2b2:	1961      	adds	r1, r4, r5
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf01      	itttt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	1949      	addeq	r1, r1, r5
 800c2be:	6021      	streq	r1, [r4, #0]
 800c2c0:	e7ed      	b.n	800c29e <_free_r+0x22>
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	b10b      	cbz	r3, 800c2cc <_free_r+0x50>
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	d9fa      	bls.n	800c2c2 <_free_r+0x46>
 800c2cc:	6811      	ldr	r1, [r2, #0]
 800c2ce:	1855      	adds	r5, r2, r1
 800c2d0:	42a5      	cmp	r5, r4
 800c2d2:	d10b      	bne.n	800c2ec <_free_r+0x70>
 800c2d4:	6824      	ldr	r4, [r4, #0]
 800c2d6:	4421      	add	r1, r4
 800c2d8:	1854      	adds	r4, r2, r1
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	6011      	str	r1, [r2, #0]
 800c2de:	d1e0      	bne.n	800c2a2 <_free_r+0x26>
 800c2e0:	681c      	ldr	r4, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	6053      	str	r3, [r2, #4]
 800c2e6:	440c      	add	r4, r1
 800c2e8:	6014      	str	r4, [r2, #0]
 800c2ea:	e7da      	b.n	800c2a2 <_free_r+0x26>
 800c2ec:	d902      	bls.n	800c2f4 <_free_r+0x78>
 800c2ee:	230c      	movs	r3, #12
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	e7d6      	b.n	800c2a2 <_free_r+0x26>
 800c2f4:	6825      	ldr	r5, [r4, #0]
 800c2f6:	1961      	adds	r1, r4, r5
 800c2f8:	428b      	cmp	r3, r1
 800c2fa:	bf04      	itt	eq
 800c2fc:	6819      	ldreq	r1, [r3, #0]
 800c2fe:	685b      	ldreq	r3, [r3, #4]
 800c300:	6063      	str	r3, [r4, #4]
 800c302:	bf04      	itt	eq
 800c304:	1949      	addeq	r1, r1, r5
 800c306:	6021      	streq	r1, [r4, #0]
 800c308:	6054      	str	r4, [r2, #4]
 800c30a:	e7ca      	b.n	800c2a2 <_free_r+0x26>
 800c30c:	b003      	add	sp, #12
 800c30e:	bd30      	pop	{r4, r5, pc}
 800c310:	20004838 	.word	0x20004838

0800c314 <__ascii_mbtowc>:
 800c314:	b082      	sub	sp, #8
 800c316:	b901      	cbnz	r1, 800c31a <__ascii_mbtowc+0x6>
 800c318:	a901      	add	r1, sp, #4
 800c31a:	b142      	cbz	r2, 800c32e <__ascii_mbtowc+0x1a>
 800c31c:	b14b      	cbz	r3, 800c332 <__ascii_mbtowc+0x1e>
 800c31e:	7813      	ldrb	r3, [r2, #0]
 800c320:	600b      	str	r3, [r1, #0]
 800c322:	7812      	ldrb	r2, [r2, #0]
 800c324:	1e10      	subs	r0, r2, #0
 800c326:	bf18      	it	ne
 800c328:	2001      	movne	r0, #1
 800c32a:	b002      	add	sp, #8
 800c32c:	4770      	bx	lr
 800c32e:	4610      	mov	r0, r2
 800c330:	e7fb      	b.n	800c32a <__ascii_mbtowc+0x16>
 800c332:	f06f 0001 	mvn.w	r0, #1
 800c336:	e7f8      	b.n	800c32a <__ascii_mbtowc+0x16>

0800c338 <_malloc_usable_size_r>:
 800c338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33c:	1f18      	subs	r0, r3, #4
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bfbc      	itt	lt
 800c342:	580b      	ldrlt	r3, [r1, r0]
 800c344:	18c0      	addlt	r0, r0, r3
 800c346:	4770      	bx	lr

0800c348 <fiprintf>:
 800c348:	b40e      	push	{r1, r2, r3}
 800c34a:	b503      	push	{r0, r1, lr}
 800c34c:	4601      	mov	r1, r0
 800c34e:	ab03      	add	r3, sp, #12
 800c350:	4805      	ldr	r0, [pc, #20]	; (800c368 <fiprintf+0x20>)
 800c352:	f853 2b04 	ldr.w	r2, [r3], #4
 800c356:	6800      	ldr	r0, [r0, #0]
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	f000 f845 	bl	800c3e8 <_vfiprintf_r>
 800c35e:	b002      	add	sp, #8
 800c360:	f85d eb04 	ldr.w	lr, [sp], #4
 800c364:	b003      	add	sp, #12
 800c366:	4770      	bx	lr
 800c368:	20000118 	.word	0x20000118

0800c36c <__ascii_wctomb>:
 800c36c:	b149      	cbz	r1, 800c382 <__ascii_wctomb+0x16>
 800c36e:	2aff      	cmp	r2, #255	; 0xff
 800c370:	bf85      	ittet	hi
 800c372:	238a      	movhi	r3, #138	; 0x8a
 800c374:	6003      	strhi	r3, [r0, #0]
 800c376:	700a      	strbls	r2, [r1, #0]
 800c378:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c37c:	bf98      	it	ls
 800c37e:	2001      	movls	r0, #1
 800c380:	4770      	bx	lr
 800c382:	4608      	mov	r0, r1
 800c384:	4770      	bx	lr

0800c386 <abort>:
 800c386:	b508      	push	{r3, lr}
 800c388:	2006      	movs	r0, #6
 800c38a:	f000 fa89 	bl	800c8a0 <raise>
 800c38e:	2001      	movs	r0, #1
 800c390:	f7f6 ff48 	bl	8003224 <_exit>

0800c394 <__sfputc_r>:
 800c394:	6893      	ldr	r3, [r2, #8]
 800c396:	3b01      	subs	r3, #1
 800c398:	2b00      	cmp	r3, #0
 800c39a:	b410      	push	{r4}
 800c39c:	6093      	str	r3, [r2, #8]
 800c39e:	da08      	bge.n	800c3b2 <__sfputc_r+0x1e>
 800c3a0:	6994      	ldr	r4, [r2, #24]
 800c3a2:	42a3      	cmp	r3, r4
 800c3a4:	db01      	blt.n	800c3aa <__sfputc_r+0x16>
 800c3a6:	290a      	cmp	r1, #10
 800c3a8:	d103      	bne.n	800c3b2 <__sfputc_r+0x1e>
 800c3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ae:	f000 b935 	b.w	800c61c <__swbuf_r>
 800c3b2:	6813      	ldr	r3, [r2, #0]
 800c3b4:	1c58      	adds	r0, r3, #1
 800c3b6:	6010      	str	r0, [r2, #0]
 800c3b8:	7019      	strb	r1, [r3, #0]
 800c3ba:	4608      	mov	r0, r1
 800c3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <__sfputs_r>:
 800c3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	460f      	mov	r7, r1
 800c3c8:	4614      	mov	r4, r2
 800c3ca:	18d5      	adds	r5, r2, r3
 800c3cc:	42ac      	cmp	r4, r5
 800c3ce:	d101      	bne.n	800c3d4 <__sfputs_r+0x12>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e007      	b.n	800c3e4 <__sfputs_r+0x22>
 800c3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d8:	463a      	mov	r2, r7
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7ff ffda 	bl	800c394 <__sfputc_r>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d1f3      	bne.n	800c3cc <__sfputs_r+0xa>
 800c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3e8 <_vfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	b09d      	sub	sp, #116	; 0x74
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	4698      	mov	r8, r3
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	b118      	cbz	r0, 800c400 <_vfiprintf_r+0x18>
 800c3f8:	6a03      	ldr	r3, [r0, #32]
 800c3fa:	b90b      	cbnz	r3, 800c400 <_vfiprintf_r+0x18>
 800c3fc:	f7fe f8d8 	bl	800a5b0 <__sinit>
 800c400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c402:	07d9      	lsls	r1, r3, #31
 800c404:	d405      	bmi.n	800c412 <_vfiprintf_r+0x2a>
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	059a      	lsls	r2, r3, #22
 800c40a:	d402      	bmi.n	800c412 <_vfiprintf_r+0x2a>
 800c40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40e:	f7fe f95c 	bl	800a6ca <__retarget_lock_acquire_recursive>
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	071b      	lsls	r3, r3, #28
 800c416:	d501      	bpl.n	800c41c <_vfiprintf_r+0x34>
 800c418:	692b      	ldr	r3, [r5, #16]
 800c41a:	b99b      	cbnz	r3, 800c444 <_vfiprintf_r+0x5c>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4630      	mov	r0, r6
 800c420:	f000 f93a 	bl	800c698 <__swsetup_r>
 800c424:	b170      	cbz	r0, 800c444 <_vfiprintf_r+0x5c>
 800c426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c428:	07dc      	lsls	r4, r3, #31
 800c42a:	d504      	bpl.n	800c436 <_vfiprintf_r+0x4e>
 800c42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c430:	b01d      	add	sp, #116	; 0x74
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	0598      	lsls	r0, r3, #22
 800c43a:	d4f7      	bmi.n	800c42c <_vfiprintf_r+0x44>
 800c43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c43e:	f7fe f945 	bl	800a6cc <__retarget_lock_release_recursive>
 800c442:	e7f3      	b.n	800c42c <_vfiprintf_r+0x44>
 800c444:	2300      	movs	r3, #0
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	2320      	movs	r3, #32
 800c44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c452:	2330      	movs	r3, #48	; 0x30
 800c454:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c608 <_vfiprintf_r+0x220>
 800c458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c45c:	f04f 0901 	mov.w	r9, #1
 800c460:	4623      	mov	r3, r4
 800c462:	469a      	mov	sl, r3
 800c464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c468:	b10a      	cbz	r2, 800c46e <_vfiprintf_r+0x86>
 800c46a:	2a25      	cmp	r2, #37	; 0x25
 800c46c:	d1f9      	bne.n	800c462 <_vfiprintf_r+0x7a>
 800c46e:	ebba 0b04 	subs.w	fp, sl, r4
 800c472:	d00b      	beq.n	800c48c <_vfiprintf_r+0xa4>
 800c474:	465b      	mov	r3, fp
 800c476:	4622      	mov	r2, r4
 800c478:	4629      	mov	r1, r5
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7ff ffa1 	bl	800c3c2 <__sfputs_r>
 800c480:	3001      	adds	r0, #1
 800c482:	f000 80a9 	beq.w	800c5d8 <_vfiprintf_r+0x1f0>
 800c486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c488:	445a      	add	r2, fp
 800c48a:	9209      	str	r2, [sp, #36]	; 0x24
 800c48c:	f89a 3000 	ldrb.w	r3, [sl]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 80a1 	beq.w	800c5d8 <_vfiprintf_r+0x1f0>
 800c496:	2300      	movs	r3, #0
 800c498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a0:	f10a 0a01 	add.w	sl, sl, #1
 800c4a4:	9304      	str	r3, [sp, #16]
 800c4a6:	9307      	str	r3, [sp, #28]
 800c4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2205      	movs	r2, #5
 800c4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b6:	4854      	ldr	r0, [pc, #336]	; (800c608 <_vfiprintf_r+0x220>)
 800c4b8:	f7f3 fe92 	bl	80001e0 <memchr>
 800c4bc:	9a04      	ldr	r2, [sp, #16]
 800c4be:	b9d8      	cbnz	r0, 800c4f8 <_vfiprintf_r+0x110>
 800c4c0:	06d1      	lsls	r1, r2, #27
 800c4c2:	bf44      	itt	mi
 800c4c4:	2320      	movmi	r3, #32
 800c4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ca:	0713      	lsls	r3, r2, #28
 800c4cc:	bf44      	itt	mi
 800c4ce:	232b      	movmi	r3, #43	; 0x2b
 800c4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4da:	d015      	beq.n	800c508 <_vfiprintf_r+0x120>
 800c4dc:	9a07      	ldr	r2, [sp, #28]
 800c4de:	4654      	mov	r4, sl
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	f04f 0c0a 	mov.w	ip, #10
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ec:	3b30      	subs	r3, #48	; 0x30
 800c4ee:	2b09      	cmp	r3, #9
 800c4f0:	d94d      	bls.n	800c58e <_vfiprintf_r+0x1a6>
 800c4f2:	b1b0      	cbz	r0, 800c522 <_vfiprintf_r+0x13a>
 800c4f4:	9207      	str	r2, [sp, #28]
 800c4f6:	e014      	b.n	800c522 <_vfiprintf_r+0x13a>
 800c4f8:	eba0 0308 	sub.w	r3, r0, r8
 800c4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c500:	4313      	orrs	r3, r2
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	46a2      	mov	sl, r4
 800c506:	e7d2      	b.n	800c4ae <_vfiprintf_r+0xc6>
 800c508:	9b03      	ldr	r3, [sp, #12]
 800c50a:	1d19      	adds	r1, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	9103      	str	r1, [sp, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfbb      	ittet	lt
 800c514:	425b      	neglt	r3, r3
 800c516:	f042 0202 	orrlt.w	r2, r2, #2
 800c51a:	9307      	strge	r3, [sp, #28]
 800c51c:	9307      	strlt	r3, [sp, #28]
 800c51e:	bfb8      	it	lt
 800c520:	9204      	strlt	r2, [sp, #16]
 800c522:	7823      	ldrb	r3, [r4, #0]
 800c524:	2b2e      	cmp	r3, #46	; 0x2e
 800c526:	d10c      	bne.n	800c542 <_vfiprintf_r+0x15a>
 800c528:	7863      	ldrb	r3, [r4, #1]
 800c52a:	2b2a      	cmp	r3, #42	; 0x2a
 800c52c:	d134      	bne.n	800c598 <_vfiprintf_r+0x1b0>
 800c52e:	9b03      	ldr	r3, [sp, #12]
 800c530:	1d1a      	adds	r2, r3, #4
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	9203      	str	r2, [sp, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	bfb8      	it	lt
 800c53a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c53e:	3402      	adds	r4, #2
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c618 <_vfiprintf_r+0x230>
 800c546:	7821      	ldrb	r1, [r4, #0]
 800c548:	2203      	movs	r2, #3
 800c54a:	4650      	mov	r0, sl
 800c54c:	f7f3 fe48 	bl	80001e0 <memchr>
 800c550:	b138      	cbz	r0, 800c562 <_vfiprintf_r+0x17a>
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	eba0 000a 	sub.w	r0, r0, sl
 800c558:	2240      	movs	r2, #64	; 0x40
 800c55a:	4082      	lsls	r2, r0
 800c55c:	4313      	orrs	r3, r2
 800c55e:	3401      	adds	r4, #1
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c566:	4829      	ldr	r0, [pc, #164]	; (800c60c <_vfiprintf_r+0x224>)
 800c568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c56c:	2206      	movs	r2, #6
 800c56e:	f7f3 fe37 	bl	80001e0 <memchr>
 800c572:	2800      	cmp	r0, #0
 800c574:	d03f      	beq.n	800c5f6 <_vfiprintf_r+0x20e>
 800c576:	4b26      	ldr	r3, [pc, #152]	; (800c610 <_vfiprintf_r+0x228>)
 800c578:	bb1b      	cbnz	r3, 800c5c2 <_vfiprintf_r+0x1da>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	3307      	adds	r3, #7
 800c57e:	f023 0307 	bic.w	r3, r3, #7
 800c582:	3308      	adds	r3, #8
 800c584:	9303      	str	r3, [sp, #12]
 800c586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c588:	443b      	add	r3, r7
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	e768      	b.n	800c460 <_vfiprintf_r+0x78>
 800c58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c592:	460c      	mov	r4, r1
 800c594:	2001      	movs	r0, #1
 800c596:	e7a6      	b.n	800c4e6 <_vfiprintf_r+0xfe>
 800c598:	2300      	movs	r3, #0
 800c59a:	3401      	adds	r4, #1
 800c59c:	9305      	str	r3, [sp, #20]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f04f 0c0a 	mov.w	ip, #10
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5aa:	3a30      	subs	r2, #48	; 0x30
 800c5ac:	2a09      	cmp	r2, #9
 800c5ae:	d903      	bls.n	800c5b8 <_vfiprintf_r+0x1d0>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0c6      	beq.n	800c542 <_vfiprintf_r+0x15a>
 800c5b4:	9105      	str	r1, [sp, #20]
 800c5b6:	e7c4      	b.n	800c542 <_vfiprintf_r+0x15a>
 800c5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5bc:	4604      	mov	r4, r0
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e7f0      	b.n	800c5a4 <_vfiprintf_r+0x1bc>
 800c5c2:	ab03      	add	r3, sp, #12
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4b12      	ldr	r3, [pc, #72]	; (800c614 <_vfiprintf_r+0x22c>)
 800c5ca:	a904      	add	r1, sp, #16
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7fd fb9d 	bl	8009d0c <_printf_float>
 800c5d2:	4607      	mov	r7, r0
 800c5d4:	1c78      	adds	r0, r7, #1
 800c5d6:	d1d6      	bne.n	800c586 <_vfiprintf_r+0x19e>
 800c5d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5da:	07d9      	lsls	r1, r3, #31
 800c5dc:	d405      	bmi.n	800c5ea <_vfiprintf_r+0x202>
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	059a      	lsls	r2, r3, #22
 800c5e2:	d402      	bmi.n	800c5ea <_vfiprintf_r+0x202>
 800c5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e6:	f7fe f871 	bl	800a6cc <__retarget_lock_release_recursive>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	065b      	lsls	r3, r3, #25
 800c5ee:	f53f af1d 	bmi.w	800c42c <_vfiprintf_r+0x44>
 800c5f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5f4:	e71c      	b.n	800c430 <_vfiprintf_r+0x48>
 800c5f6:	ab03      	add	r3, sp, #12
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <_vfiprintf_r+0x22c>)
 800c5fe:	a904      	add	r1, sp, #16
 800c600:	4630      	mov	r0, r6
 800c602:	f7fd fe27 	bl	800a254 <_printf_i>
 800c606:	e7e4      	b.n	800c5d2 <_vfiprintf_r+0x1ea>
 800c608:	0800d52d 	.word	0x0800d52d
 800c60c:	0800d537 	.word	0x0800d537
 800c610:	08009d0d 	.word	0x08009d0d
 800c614:	0800c3c3 	.word	0x0800c3c3
 800c618:	0800d533 	.word	0x0800d533

0800c61c <__swbuf_r>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	460e      	mov	r6, r1
 800c620:	4614      	mov	r4, r2
 800c622:	4605      	mov	r5, r0
 800c624:	b118      	cbz	r0, 800c62e <__swbuf_r+0x12>
 800c626:	6a03      	ldr	r3, [r0, #32]
 800c628:	b90b      	cbnz	r3, 800c62e <__swbuf_r+0x12>
 800c62a:	f7fd ffc1 	bl	800a5b0 <__sinit>
 800c62e:	69a3      	ldr	r3, [r4, #24]
 800c630:	60a3      	str	r3, [r4, #8]
 800c632:	89a3      	ldrh	r3, [r4, #12]
 800c634:	071a      	lsls	r2, r3, #28
 800c636:	d525      	bpl.n	800c684 <__swbuf_r+0x68>
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	b31b      	cbz	r3, 800c684 <__swbuf_r+0x68>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	6922      	ldr	r2, [r4, #16]
 800c640:	1a98      	subs	r0, r3, r2
 800c642:	6963      	ldr	r3, [r4, #20]
 800c644:	b2f6      	uxtb	r6, r6
 800c646:	4283      	cmp	r3, r0
 800c648:	4637      	mov	r7, r6
 800c64a:	dc04      	bgt.n	800c656 <__swbuf_r+0x3a>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4628      	mov	r0, r5
 800c650:	f7ff f94e 	bl	800b8f0 <_fflush_r>
 800c654:	b9e0      	cbnz	r0, 800c690 <__swbuf_r+0x74>
 800c656:	68a3      	ldr	r3, [r4, #8]
 800c658:	3b01      	subs	r3, #1
 800c65a:	60a3      	str	r3, [r4, #8]
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	1c5a      	adds	r2, r3, #1
 800c660:	6022      	str	r2, [r4, #0]
 800c662:	701e      	strb	r6, [r3, #0]
 800c664:	6962      	ldr	r2, [r4, #20]
 800c666:	1c43      	adds	r3, r0, #1
 800c668:	429a      	cmp	r2, r3
 800c66a:	d004      	beq.n	800c676 <__swbuf_r+0x5a>
 800c66c:	89a3      	ldrh	r3, [r4, #12]
 800c66e:	07db      	lsls	r3, r3, #31
 800c670:	d506      	bpl.n	800c680 <__swbuf_r+0x64>
 800c672:	2e0a      	cmp	r6, #10
 800c674:	d104      	bne.n	800c680 <__swbuf_r+0x64>
 800c676:	4621      	mov	r1, r4
 800c678:	4628      	mov	r0, r5
 800c67a:	f7ff f939 	bl	800b8f0 <_fflush_r>
 800c67e:	b938      	cbnz	r0, 800c690 <__swbuf_r+0x74>
 800c680:	4638      	mov	r0, r7
 800c682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c684:	4621      	mov	r1, r4
 800c686:	4628      	mov	r0, r5
 800c688:	f000 f806 	bl	800c698 <__swsetup_r>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d0d5      	beq.n	800c63c <__swbuf_r+0x20>
 800c690:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c694:	e7f4      	b.n	800c680 <__swbuf_r+0x64>
	...

0800c698 <__swsetup_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4b2a      	ldr	r3, [pc, #168]	; (800c744 <__swsetup_r+0xac>)
 800c69c:	4605      	mov	r5, r0
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	b118      	cbz	r0, 800c6ac <__swsetup_r+0x14>
 800c6a4:	6a03      	ldr	r3, [r0, #32]
 800c6a6:	b90b      	cbnz	r3, 800c6ac <__swsetup_r+0x14>
 800c6a8:	f7fd ff82 	bl	800a5b0 <__sinit>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6b2:	0718      	lsls	r0, r3, #28
 800c6b4:	d422      	bmi.n	800c6fc <__swsetup_r+0x64>
 800c6b6:	06d9      	lsls	r1, r3, #27
 800c6b8:	d407      	bmi.n	800c6ca <__swsetup_r+0x32>
 800c6ba:	2309      	movs	r3, #9
 800c6bc:	602b      	str	r3, [r5, #0]
 800c6be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6c8:	e034      	b.n	800c734 <__swsetup_r+0x9c>
 800c6ca:	0758      	lsls	r0, r3, #29
 800c6cc:	d512      	bpl.n	800c6f4 <__swsetup_r+0x5c>
 800c6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6d0:	b141      	cbz	r1, 800c6e4 <__swsetup_r+0x4c>
 800c6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6d6:	4299      	cmp	r1, r3
 800c6d8:	d002      	beq.n	800c6e0 <__swsetup_r+0x48>
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f7ff fdce 	bl	800c27c <_free_r>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6063      	str	r3, [r4, #4]
 800c6f0:	6923      	ldr	r3, [r4, #16]
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f043 0308 	orr.w	r3, r3, #8
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	6923      	ldr	r3, [r4, #16]
 800c6fe:	b94b      	cbnz	r3, 800c714 <__swsetup_r+0x7c>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c70a:	d003      	beq.n	800c714 <__swsetup_r+0x7c>
 800c70c:	4621      	mov	r1, r4
 800c70e:	4628      	mov	r0, r5
 800c710:	f000 f840 	bl	800c794 <__smakebuf_r>
 800c714:	89a0      	ldrh	r0, [r4, #12]
 800c716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c71a:	f010 0301 	ands.w	r3, r0, #1
 800c71e:	d00a      	beq.n	800c736 <__swsetup_r+0x9e>
 800c720:	2300      	movs	r3, #0
 800c722:	60a3      	str	r3, [r4, #8]
 800c724:	6963      	ldr	r3, [r4, #20]
 800c726:	425b      	negs	r3, r3
 800c728:	61a3      	str	r3, [r4, #24]
 800c72a:	6923      	ldr	r3, [r4, #16]
 800c72c:	b943      	cbnz	r3, 800c740 <__swsetup_r+0xa8>
 800c72e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c732:	d1c4      	bne.n	800c6be <__swsetup_r+0x26>
 800c734:	bd38      	pop	{r3, r4, r5, pc}
 800c736:	0781      	lsls	r1, r0, #30
 800c738:	bf58      	it	pl
 800c73a:	6963      	ldrpl	r3, [r4, #20]
 800c73c:	60a3      	str	r3, [r4, #8]
 800c73e:	e7f4      	b.n	800c72a <__swsetup_r+0x92>
 800c740:	2000      	movs	r0, #0
 800c742:	e7f7      	b.n	800c734 <__swsetup_r+0x9c>
 800c744:	20000118 	.word	0x20000118

0800c748 <__swhatbuf_r>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	2900      	cmp	r1, #0
 800c752:	b096      	sub	sp, #88	; 0x58
 800c754:	4615      	mov	r5, r2
 800c756:	461e      	mov	r6, r3
 800c758:	da0d      	bge.n	800c776 <__swhatbuf_r+0x2e>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c760:	f04f 0100 	mov.w	r1, #0
 800c764:	bf0c      	ite	eq
 800c766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c76a:	2340      	movne	r3, #64	; 0x40
 800c76c:	2000      	movs	r0, #0
 800c76e:	6031      	str	r1, [r6, #0]
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	b016      	add	sp, #88	; 0x58
 800c774:	bd70      	pop	{r4, r5, r6, pc}
 800c776:	466a      	mov	r2, sp
 800c778:	f000 f848 	bl	800c80c <_fstat_r>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	dbec      	blt.n	800c75a <__swhatbuf_r+0x12>
 800c780:	9901      	ldr	r1, [sp, #4]
 800c782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c78a:	4259      	negs	r1, r3
 800c78c:	4159      	adcs	r1, r3
 800c78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c792:	e7eb      	b.n	800c76c <__swhatbuf_r+0x24>

0800c794 <__smakebuf_r>:
 800c794:	898b      	ldrh	r3, [r1, #12]
 800c796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c798:	079d      	lsls	r5, r3, #30
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	d507      	bpl.n	800c7b0 <__smakebuf_r+0x1c>
 800c7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	6163      	str	r3, [r4, #20]
 800c7ac:	b002      	add	sp, #8
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	ab01      	add	r3, sp, #4
 800c7b2:	466a      	mov	r2, sp
 800c7b4:	f7ff ffc8 	bl	800c748 <__swhatbuf_r>
 800c7b8:	9900      	ldr	r1, [sp, #0]
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7fe ff91 	bl	800b6e4 <_malloc_r>
 800c7c2:	b948      	cbnz	r0, 800c7d8 <__smakebuf_r+0x44>
 800c7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d4ef      	bmi.n	800c7ac <__smakebuf_r+0x18>
 800c7cc:	f023 0303 	bic.w	r3, r3, #3
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	e7e3      	b.n	800c7a0 <__smakebuf_r+0xc>
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	6020      	str	r0, [r4, #0]
 800c7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	9b00      	ldr	r3, [sp, #0]
 800c7e4:	6163      	str	r3, [r4, #20]
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	6120      	str	r0, [r4, #16]
 800c7ea:	b15b      	cbz	r3, 800c804 <__smakebuf_r+0x70>
 800c7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f81d 	bl	800c830 <_isatty_r>
 800c7f6:	b128      	cbz	r0, 800c804 <__smakebuf_r+0x70>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	431d      	orrs	r5, r3
 800c808:	81a5      	strh	r5, [r4, #12]
 800c80a:	e7cf      	b.n	800c7ac <__smakebuf_r+0x18>

0800c80c <_fstat_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	; (800c82c <_fstat_r+0x20>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	4611      	mov	r1, r2
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	f7f6 fd52 	bl	80032c2 <_fstat>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	d102      	bne.n	800c828 <_fstat_r+0x1c>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	b103      	cbz	r3, 800c828 <_fstat_r+0x1c>
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	bf00      	nop
 800c82c:	20004840 	.word	0x20004840

0800c830 <_isatty_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <_isatty_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f6 fd51 	bl	80032e2 <_isatty>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_isatty_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_isatty_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20004840 	.word	0x20004840

0800c850 <_raise_r>:
 800c850:	291f      	cmp	r1, #31
 800c852:	b538      	push	{r3, r4, r5, lr}
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	d904      	bls.n	800c864 <_raise_r+0x14>
 800c85a:	2316      	movs	r3, #22
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c866:	b112      	cbz	r2, 800c86e <_raise_r+0x1e>
 800c868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c86c:	b94b      	cbnz	r3, 800c882 <_raise_r+0x32>
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 f830 	bl	800c8d4 <_getpid_r>
 800c874:	462a      	mov	r2, r5
 800c876:	4601      	mov	r1, r0
 800c878:	4620      	mov	r0, r4
 800c87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c87e:	f000 b817 	b.w	800c8b0 <_kill_r>
 800c882:	2b01      	cmp	r3, #1
 800c884:	d00a      	beq.n	800c89c <_raise_r+0x4c>
 800c886:	1c59      	adds	r1, r3, #1
 800c888:	d103      	bne.n	800c892 <_raise_r+0x42>
 800c88a:	2316      	movs	r3, #22
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	2001      	movs	r0, #1
 800c890:	e7e7      	b.n	800c862 <_raise_r+0x12>
 800c892:	2400      	movs	r4, #0
 800c894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c898:	4628      	mov	r0, r5
 800c89a:	4798      	blx	r3
 800c89c:	2000      	movs	r0, #0
 800c89e:	e7e0      	b.n	800c862 <_raise_r+0x12>

0800c8a0 <raise>:
 800c8a0:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <raise+0xc>)
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	6818      	ldr	r0, [r3, #0]
 800c8a6:	f7ff bfd3 	b.w	800c850 <_raise_r>
 800c8aa:	bf00      	nop
 800c8ac:	20000118 	.word	0x20000118

0800c8b0 <_kill_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	; (800c8d0 <_kill_r+0x20>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f6 fca1 	bl	8003204 <_kill>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_kill_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_kill_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20004840 	.word	0x20004840

0800c8d4 <_getpid_r>:
 800c8d4:	f7f6 bc8e 	b.w	80031f4 <_getpid>

0800c8d8 <_init>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	bf00      	nop
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr

0800c8e4 <_fini>:
 800c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e6:	bf00      	nop
 800c8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ea:	bc08      	pop	{r3}
 800c8ec:	469e      	mov	lr, r3
 800c8ee:	4770      	bx	lr
