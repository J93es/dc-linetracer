
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d770  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  0800d910  0800d910  0001d910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e804  0800e804  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800e804  0800e804  0001e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e80c  0800e80c  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e80c  0800e80c  0001e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800e814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003448  20000288  0800ea9c  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036d0  0800ea9c  000236d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9c8  00000000  00000000  000202fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e4  00000000  00000000  0002ecc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  000323a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd4  00000000  00000000  00033490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001709f  00000000  00000000  00034164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a4f  00000000  00000000  0004b203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000772c8  00000000  00000000  0005dc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000552c  00000000  00000000  000d4f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000da448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8f8 	.word	0x0800d8f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0800d8f8 	.word	0x0800d8f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b984 	b.w	8000f78 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f81a 	bl	8000cb0 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__popcountsi2>:
 8000c88:	0843      	lsrs	r3, r0, #1
 8000c8a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c8e:	1ac0      	subs	r0, r0, r3
 8000c90:	0883      	lsrs	r3, r0, #2
 8000c92:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000c96:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000c9a:	4418      	add	r0, r3
 8000c9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000ca0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000ca4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000ca8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000cac:	0e00      	lsrs	r0, r0, #24
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	9e08      	ldr	r6, [sp, #32]
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	460f      	mov	r7, r1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d14a      	bne.n	8000d56 <__udivmoddi4+0xa6>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4694      	mov	ip, r2
 8000cc4:	d965      	bls.n	8000d92 <__udivmoddi4+0xe2>
 8000cc6:	fab2 f382 	clz	r3, r2
 8000cca:	b143      	cbz	r3, 8000cde <__udivmoddi4+0x2e>
 8000ccc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd0:	f1c3 0220 	rsb	r2, r3, #32
 8000cd4:	409f      	lsls	r7, r3
 8000cd6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cda:	4317      	orrs	r7, r2
 8000cdc:	409c      	lsls	r4, r3
 8000cde:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ce2:	fa1f f58c 	uxth.w	r5, ip
 8000ce6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cea:	0c22      	lsrs	r2, r4, #16
 8000cec:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cf4:	fb01 f005 	mul.w	r0, r1, r5
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x62>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d04:	f080 811c 	bcs.w	8000f40 <__udivmoddi4+0x290>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f240 8119 	bls.w	8000f40 <__udivmoddi4+0x290>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4462      	add	r2, ip
 8000d12:	1a12      	subs	r2, r2, r0
 8000d14:	b2a4      	uxth	r4, r4
 8000d16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d22:	fb00 f505 	mul.w	r5, r0, r5
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x90>
 8000d2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d32:	f080 8107 	bcs.w	8000f44 <__udivmoddi4+0x294>
 8000d36:	42a5      	cmp	r5, r4
 8000d38:	f240 8104 	bls.w	8000f44 <__udivmoddi4+0x294>
 8000d3c:	4464      	add	r4, ip
 8000d3e:	3802      	subs	r0, #2
 8000d40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	2100      	movs	r1, #0
 8000d48:	b11e      	cbz	r6, 8000d52 <__udivmoddi4+0xa2>
 8000d4a:	40dc      	lsrs	r4, r3
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0xbc>
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	f000 80ed 	beq.w	8000f3a <__udivmoddi4+0x28a>
 8000d60:	2100      	movs	r1, #0
 8000d62:	e9c6 0500 	strd	r0, r5, [r6]
 8000d66:	4608      	mov	r0, r1
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	fab3 f183 	clz	r1, r3
 8000d70:	2900      	cmp	r1, #0
 8000d72:	d149      	bne.n	8000e08 <__udivmoddi4+0x158>
 8000d74:	42ab      	cmp	r3, r5
 8000d76:	d302      	bcc.n	8000d7e <__udivmoddi4+0xce>
 8000d78:	4282      	cmp	r2, r0
 8000d7a:	f200 80f8 	bhi.w	8000f6e <__udivmoddi4+0x2be>
 8000d7e:	1a84      	subs	r4, r0, r2
 8000d80:	eb65 0203 	sbc.w	r2, r5, r3
 8000d84:	2001      	movs	r0, #1
 8000d86:	4617      	mov	r7, r2
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d0e2      	beq.n	8000d52 <__udivmoddi4+0xa2>
 8000d8c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d90:	e7df      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000d92:	b902      	cbnz	r2, 8000d96 <__udivmoddi4+0xe6>
 8000d94:	deff      	udf	#255	; 0xff
 8000d96:	fab2 f382 	clz	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8090 	bne.w	8000ec0 <__udivmoddi4+0x210>
 8000da0:	1a8a      	subs	r2, r1, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2101      	movs	r1, #1
 8000dac:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db0:	fb07 2015 	mls	r0, r7, r5, r2
 8000db4:	0c22      	lsrs	r2, r4, #16
 8000db6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dba:	fb0e f005 	mul.w	r0, lr, r5
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x124>
 8000dc2:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x122>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2b8>
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	1a12      	subs	r2, r2, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ddc:	fb07 2210 	mls	r2, r7, r0, r2
 8000de0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x14e>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x14c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2c2>
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e06:	e79f      	b.n	8000d48 <__udivmoddi4+0x98>
 8000e08:	f1c1 0720 	rsb	r7, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa05 f401 	lsl.w	r4, r5, r1
 8000e1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e1e:	40fd      	lsrs	r5, r7
 8000e20:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e24:	4323      	orrs	r3, r4
 8000e26:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e32:	0c1c      	lsrs	r4, r3, #16
 8000e34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e38:	fb08 f50e 	mul.w	r5, r8, lr
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	fa00 f001 	lsl.w	r0, r0, r1
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b0>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2b4>
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2b4>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4464      	add	r4, ip
 8000e60:	1b64      	subs	r4, r4, r5
 8000e62:	b29d      	uxth	r5, r3
 8000e64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e68:	fb09 4413 	mls	r4, r9, r3, r4
 8000e6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e70:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1da>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2ac>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2ac>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e8e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46ae      	mov	lr, r5
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x29c>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x298>
 8000ea0:	b156      	cbz	r6, 8000eb8 <__udivmoddi4+0x208>
 8000ea2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ea6:	eb64 040e 	sbc.w	r4, r4, lr
 8000eaa:	fa04 f707 	lsl.w	r7, r4, r7
 8000eae:	40ca      	lsrs	r2, r1
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	4317      	orrs	r7, r2
 8000eb4:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	f1c3 0120 	rsb	r1, r3, #32
 8000ec4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec8:	fa20 f201 	lsr.w	r2, r0, r1
 8000ecc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed0:	409d      	lsls	r5, r3
 8000ed2:	432a      	orrs	r2, r5
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ee4:	0c11      	lsrs	r1, r2, #16
 8000ee6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eea:	fb00 f50e 	mul.w	r5, r0, lr
 8000eee:	428d      	cmp	r5, r1
 8000ef0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x258>
 8000ef6:	eb1c 0101 	adds.w	r1, ip, r1
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b0>
 8000f00:	428d      	cmp	r5, r1
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b0>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4461      	add	r1, ip
 8000f08:	1b49      	subs	r1, r1, r5
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f10:	fb07 1115 	mls	r1, r7, r5, r1
 8000f14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f18:	fb05 f10e 	mul.w	r1, r5, lr
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x282>
 8000f20:	eb1c 0202 	adds.w	r2, ip, r2
 8000f24:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2a:	4291      	cmp	r1, r2
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	3d02      	subs	r5, #2
 8000f30:	4462      	add	r2, ip
 8000f32:	1a52      	subs	r2, r2, r1
 8000f34:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0xfc>
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000f40:	4639      	mov	r1, r7
 8000f42:	e6e6      	b.n	8000d12 <__udivmoddi4+0x62>
 8000f44:	4610      	mov	r0, r2
 8000f46:	e6fb      	b.n	8000d40 <__udivmoddi4+0x90>
 8000f48:	4548      	cmp	r0, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f0>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f54:	3b01      	subs	r3, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f0>
 8000f58:	4645      	mov	r5, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x282>
 8000f5c:	462b      	mov	r3, r5
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1da>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x258>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b0>
 8000f68:	3d02      	subs	r5, #2
 8000f6a:	4462      	add	r2, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x124>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e70a      	b.n	8000d88 <__udivmoddi4+0xd8>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x14e>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b089      	sub	sp, #36	; 0x24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	332c      	adds	r3, #44	; 0x2c
 80010e6:	4619      	mov	r1, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010f2:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	40d3      	lsrs	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	211f      	movs	r1, #31
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 011f 	and.w	r1, r3, #31
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001168:	b480      	push	{r7}
 800116a:	b08d      	sub	sp, #52	; 0x34
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	330c      	adds	r3, #12
 8001178:	4619      	mov	r1, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	617a      	str	r2, [r7, #20]
  return result;
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	40d3      	lsrs	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011a8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011ac:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	6a39      	ldr	r1, [r7, #32]
 80011b0:	fa91 f1a1 	rbit	r1, r1
 80011b4:	61f9      	str	r1, [r7, #28]
  return result;
 80011b6:	69f9      	ldr	r1, [r7, #28]
 80011b8:	fab1 f181 	clz	r1, r1
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	40cb      	lsrs	r3, r1
 80011c0:	2107      	movs	r1, #7
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80011d0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80011d4:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011d8:	fa91 f1a1 	rbit	r1, r1
 80011dc:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80011de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e0:	fab1 f181 	clz	r1, r1
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	40cb      	lsrs	r3, r1
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	431a      	orrs	r2, r3
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80011f4:	bf00      	nop
 80011f6:	3734      	adds	r7, #52	; 0x34
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60da      	str	r2, [r3, #12]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f023 0201 	bic.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60da      	str	r2, [r3, #12]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <LL_RCC_HSI_Enable+0x1c>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_HSI_IsReady+0x20>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800

080012cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 0203 	bic.w	r2, r3, #3
 8001308:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_RCC_SetSysClkSource+0x24>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <LL_RCC_GetSysClkSource+0x18>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <LL_RCC_SetAHBPrescaler+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023800 	.word	0x40023800

08001364 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40023800 	.word	0x40023800

0800138c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800

080013b4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <LL_RCC_SetTIMPrescaler+0x28>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013c6:	4905      	ldr	r1, [pc, #20]	; (80013dc <LL_RCC_SetTIMPrescaler+0x28>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800

080013e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_RCC_PLL_Enable+0x1c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <LL_RCC_PLL_Enable+0x1c>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <LL_RCC_PLL_IsReady+0x24>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001410:	bf0c      	ite	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	2300      	movne	r3, #0
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800143c:	4013      	ands	r3, r2
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4311      	orrs	r1, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	0192      	lsls	r2, r2, #6
 8001448:	430a      	orrs	r2, r1
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023800 	.word	0x40023800
 8001470:	ffbf8000 	.word	0xffbf8000

08001474 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800147e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800

080014a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023800 	.word	0x40023800

080014d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_APB2_GRP1_EnableClock+0x2c>)
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40023800 	.word	0x40023800

08001504 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <LL_SYSCFG_SetEXTISource+0x58>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3302      	adds	r3, #2
 8001516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	43db      	mvns	r3, r3
 8001520:	ea02 0103 	and.w	r1, r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	60bb      	str	r3, [r7, #8]
  return result;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	fa03 f202 	lsl.w	r2, r3, r2
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <LL_SYSCFG_SetEXTISource+0x58>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	430a      	orrs	r2, r1
 800154a:	3302      	adds	r3, #2
 800154c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40013800 	.word	0x40013800

08001560 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <LL_FLASH_SetLatency+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 0207 	bic.w	r2, r3, #7
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <LL_FLASH_SetLatency+0x24>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023c00 	.word	0x40023c00

08001588 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_FLASH_GetLatency+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80015b4:	4904      	ldr	r1, [pc, #16]	; (80015c8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40007000 	.word	0x40007000

080015cc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000

080015f4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f023 0210 	bic.w	r2, r3, #16
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 0208 	bic.w	r2, r3, #8
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d01c      	beq.n	80016aa <LL_TIM_OC_DisableFast+0x4a>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b04      	cmp	r3, #4
 8001674:	d017      	beq.n	80016a6 <LL_TIM_OC_DisableFast+0x46>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d012      	beq.n	80016a2 <LL_TIM_OC_DisableFast+0x42>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b40      	cmp	r3, #64	; 0x40
 8001680:	d00d      	beq.n	800169e <LL_TIM_OC_DisableFast+0x3e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001688:	d007      	beq.n	800169a <LL_TIM_OC_DisableFast+0x3a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d101      	bne.n	8001696 <LL_TIM_OC_DisableFast+0x36>
 8001692:	2305      	movs	r3, #5
 8001694:	e00a      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 8001696:	2306      	movs	r3, #6
 8001698:	e008      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_TIM_OC_DisableFast+0x4c>
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3318      	adds	r3, #24
 80016b2:	4619      	mov	r1, r3
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LL_TIM_OC_DisableFast+0x84>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	440b      	add	r3, r1
 80016bc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	4908      	ldr	r1, [pc, #32]	; (80016e8 <LL_TIM_OC_DisableFast+0x88>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	4619      	mov	r1, r3
 80016ca:	2304      	movs	r3, #4
 80016cc:	408b      	lsls	r3, r1
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	601a      	str	r2, [r3, #0]

}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	0800e1dc 	.word	0x0800e1dc
 80016e8:	0800e1e4 	.word	0x0800e1e4

080016ec <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d01c      	beq.n	8001736 <LL_TIM_OC_EnablePreload+0x4a>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d017      	beq.n	8001732 <LL_TIM_OC_EnablePreload+0x46>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b10      	cmp	r3, #16
 8001706:	d012      	beq.n	800172e <LL_TIM_OC_EnablePreload+0x42>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b40      	cmp	r3, #64	; 0x40
 800170c:	d00d      	beq.n	800172a <LL_TIM_OC_EnablePreload+0x3e>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d007      	beq.n	8001726 <LL_TIM_OC_EnablePreload+0x3a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171c:	d101      	bne.n	8001722 <LL_TIM_OC_EnablePreload+0x36>
 800171e:	2305      	movs	r3, #5
 8001720:	e00a      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001722:	2306      	movs	r3, #6
 8001724:	e008      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_TIM_OC_EnablePreload+0x4c>
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3318      	adds	r3, #24
 800173e:	4619      	mov	r1, r3
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <LL_TIM_OC_EnablePreload+0x80>)
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	440b      	add	r3, r1
 8001748:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <LL_TIM_OC_EnablePreload+0x84>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	4619      	mov	r1, r3
 8001756:	2308      	movs	r3, #8
 8001758:	408b      	lsls	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	0800e1dc 	.word	0x0800e1dc
 8001770:	0800e1e4 	.word	0x0800e1e4

08001774 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d01c      	beq.n	80017c0 <LL_TIM_IC_SetActiveInput+0x4c>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d017      	beq.n	80017bc <LL_TIM_IC_SetActiveInput+0x48>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d012      	beq.n	80017b8 <LL_TIM_IC_SetActiveInput+0x44>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d00d      	beq.n	80017b4 <LL_TIM_IC_SetActiveInput+0x40>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179e:	d007      	beq.n	80017b0 <LL_TIM_IC_SetActiveInput+0x3c>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d101      	bne.n	80017ac <LL_TIM_IC_SetActiveInput+0x38>
 80017a8:	2305      	movs	r3, #5
 80017aa:	e00a      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017ac:	2306      	movs	r3, #6
 80017ae:	e008      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e006      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e004      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e002      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_TIM_IC_SetActiveInput+0x4e>
 80017c0:	2300      	movs	r3, #0
 80017c2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3318      	adds	r3, #24
 80017c8:	4619      	mov	r1, r3
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <LL_TIM_IC_SetActiveInput+0x94>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	440b      	add	r3, r1
 80017d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <LL_TIM_IC_SetActiveInput+0x98>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	4619      	mov	r1, r3
 80017e0:	2303      	movs	r3, #3
 80017e2:	408b      	lsls	r3, r1
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	7df9      	ldrb	r1, [r7, #23]
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <LL_TIM_IC_SetActiveInput+0x98>)
 80017f0:	5c41      	ldrb	r1, [r0, r1]
 80017f2:	408b      	lsls	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0800e1dc 	.word	0x0800e1dc
 800180c:	0800e1ec 	.word	0x0800e1ec

08001810 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d01c      	beq.n	800185c <LL_TIM_IC_SetPrescaler+0x4c>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d017      	beq.n	8001858 <LL_TIM_IC_SetPrescaler+0x48>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d012      	beq.n	8001854 <LL_TIM_IC_SetPrescaler+0x44>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d00d      	beq.n	8001850 <LL_TIM_IC_SetPrescaler+0x40>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183a:	d007      	beq.n	800184c <LL_TIM_IC_SetPrescaler+0x3c>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001842:	d101      	bne.n	8001848 <LL_TIM_IC_SetPrescaler+0x38>
 8001844:	2305      	movs	r3, #5
 8001846:	e00a      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001848:	2306      	movs	r3, #6
 800184a:	e008      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 800184c:	2304      	movs	r3, #4
 800184e:	e006      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001850:	2303      	movs	r3, #3
 8001852:	e004      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001854:	2302      	movs	r3, #2
 8001856:	e002      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_TIM_IC_SetPrescaler+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3318      	adds	r3, #24
 8001864:	4619      	mov	r1, r3
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <LL_TIM_IC_SetPrescaler+0x94>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	440b      	add	r3, r1
 800186e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	490c      	ldr	r1, [pc, #48]	; (80018a8 <LL_TIM_IC_SetPrescaler+0x98>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	4619      	mov	r1, r3
 800187c:	230c      	movs	r3, #12
 800187e:	408b      	lsls	r3, r1
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7df9      	ldrb	r1, [r7, #23]
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <LL_TIM_IC_SetPrescaler+0x98>)
 800188c:	5c41      	ldrb	r1, [r0, r1]
 800188e:	408b      	lsls	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0800e1dc 	.word	0x0800e1dc
 80018a8:	0800e1ec 	.word	0x0800e1ec

080018ac <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d01c      	beq.n	80018f8 <LL_TIM_IC_SetFilter+0x4c>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d017      	beq.n	80018f4 <LL_TIM_IC_SetFilter+0x48>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d012      	beq.n	80018f0 <LL_TIM_IC_SetFilter+0x44>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	d00d      	beq.n	80018ec <LL_TIM_IC_SetFilter+0x40>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d6:	d007      	beq.n	80018e8 <LL_TIM_IC_SetFilter+0x3c>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018de:	d101      	bne.n	80018e4 <LL_TIM_IC_SetFilter+0x38>
 80018e0:	2305      	movs	r3, #5
 80018e2:	e00a      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018e4:	2306      	movs	r3, #6
 80018e6:	e008      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e006      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018ec:	2303      	movs	r3, #3
 80018ee:	e004      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e002      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_TIM_IC_SetFilter+0x4e>
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3318      	adds	r3, #24
 8001900:	4619      	mov	r1, r3
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LL_TIM_IC_SetFilter+0x94>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	440b      	add	r3, r1
 800190a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	490c      	ldr	r1, [pc, #48]	; (8001944 <LL_TIM_IC_SetFilter+0x98>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	4619      	mov	r1, r3
 8001918:	23f0      	movs	r3, #240	; 0xf0
 800191a:	408b      	lsls	r3, r1
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	7df9      	ldrb	r1, [r7, #23]
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <LL_TIM_IC_SetFilter+0x98>)
 8001928:	5c41      	ldrb	r1, [r0, r1]
 800192a:	408b      	lsls	r3, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	0800e1dc 	.word	0x0800e1dc
 8001944:	0800e1ec 	.word	0x0800e1ec

08001948 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d01c      	beq.n	8001994 <LL_TIM_IC_SetPolarity+0x4c>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d017      	beq.n	8001990 <LL_TIM_IC_SetPolarity+0x48>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b10      	cmp	r3, #16
 8001964:	d012      	beq.n	800198c <LL_TIM_IC_SetPolarity+0x44>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d00d      	beq.n	8001988 <LL_TIM_IC_SetPolarity+0x40>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	d007      	beq.n	8001984 <LL_TIM_IC_SetPolarity+0x3c>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d101      	bne.n	8001980 <LL_TIM_IC_SetPolarity+0x38>
 800197c:	2305      	movs	r3, #5
 800197e:	e00a      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001980:	2306      	movs	r3, #6
 8001982:	e008      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_TIM_IC_SetPolarity+0x4e>
 8001994:	2300      	movs	r3, #0
 8001996:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	490b      	ldr	r1, [pc, #44]	; (80019cc <LL_TIM_IC_SetPolarity+0x84>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	4619      	mov	r1, r3
 80019a4:	230a      	movs	r3, #10
 80019a6:	408b      	lsls	r3, r1
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	4907      	ldr	r1, [pc, #28]	; (80019cc <LL_TIM_IC_SetPolarity+0x84>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	4619      	mov	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	408b      	lsls	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	0800e1f4 	.word	0x0800e1f4

080019d0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 0207 	bic.w	r2, r3, #7
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60da      	str	r2, [r3, #12]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	615a      	str	r2, [r3, #20]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b089      	sub	sp, #36	; 0x24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	613b      	str	r3, [r7, #16]
  return result;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2103      	movs	r1, #3
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	61bb      	str	r3, [r7, #24]
  return result;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	613b      	str	r3, [r7, #16]
  return result;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2103      	movs	r1, #3
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	60da      	str	r2, [r3, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	041a      	lsls	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b94:	f7ff fc9e 	bl	80014d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b9c:	f7ff fc82 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba0:	2007      	movs	r0, #7
 8001ba2:	f7ff f9eb 	bl	8000f7c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 f81b 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001baa:	f000 fc69 	bl	8002480 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bae:	f000 f865 	bl	8001c7c <MX_ADC1_Init>
  MX_I2C3_Init();
 8001bb2:	f000 f8e1 	bl	8001d78 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001bb6:	f000 f9a1 	bl	8001efc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bba:	f000 f9d7 	bl	8001f6c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bbe:	f000 fa4f 	bl	8002060 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001bc2:	f000 fac7 	bl	8002154 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001bc6:	f000 fc0b 	bl	80023e0 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001bca:	f000 fb03 	bl	80021d4 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001bce:	f000 f941 	bl	8001e54 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001bd2:	f000 fb39 	bl	8002248 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001bd6:	f000 fb9d 	bl	8002314 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001bda:	f005 fff9 	bl	8007bd0 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001bde:	e7fe      	b.n	8001bde <main+0x52>

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff fcbb 	bl	8001560 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001bea:	bf00      	nop
 8001bec:	f7ff fccc 	bl	8001588 <LL_FLASH_GetLatency>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d1fa      	bne.n	8001bec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001bf6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001bfa:	f7ff fcd3 	bl	80015a4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f7ff fb64 	bl	80012cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001c04:	f7ff fb40 	bl	8001288 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c08:	bf00      	nop
 8001c0a:	f7ff fb4d 	bl	80012a8 <LL_RCC_HSI_IsReady>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d1fa      	bne.n	8001c0a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001c14:	2300      	movs	r3, #0
 8001c16:	2264      	movs	r2, #100	; 0x64
 8001c18:	2108      	movs	r1, #8
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fc04 	bl	8001428 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001c20:	f7ff fbde 	bl	80013e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001c24:	bf00      	nop
 8001c26:	f7ff fbeb 	bl	8001400 <LL_RCC_PLL_IsReady>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d1fa      	bne.n	8001c26 <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001c30:	bf00      	nop
 8001c32:	f7ff fccb 	bl	80015cc <LL_PWR_IsActiveFlag_VOS>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0fa      	beq.n	8001c32 <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff fb7d 	bl	800133c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001c42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c46:	f7ff fb8d 	bl	8001364 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fb9e 	bl	800138c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fb51 	bl	80012f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c56:	bf00      	nop
 8001c58:	f7ff fb62 	bl	8001320 <LL_RCC_GetSysClkSource>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d1fa      	bne.n	8001c58 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <SystemClock_Config+0x98>)
 8001c64:	f003 f8d8 	bl	8004e18 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <SystemClock_Config+0x98>)
 8001c6a:	f003 f8e3 	bl	8004e34 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fba0 	bl	80013b4 <LL_RCC_SetTIMPrescaler>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	05f5e100 	.word	0x05f5e100

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b090      	sub	sp, #64	; 0x40
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001cb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cb6:	f7ff fc0d 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fbda 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f7ff fbd7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4823      	ldr	r0, [pc, #140]	; (8001d64 <MX_ADC1_Init+0xe8>)
 8001cd8:	f001 ff94 	bl	8003c04 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ADC_Battery_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	481e      	ldr	r0, [pc, #120]	; (8001d68 <MX_ADC1_Init+0xec>)
 8001cee:	f001 ff89 	bl	8003c04 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001cfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d02:	4619      	mov	r1, r3
 8001d04:	4819      	ldr	r0, [pc, #100]	; (8001d6c <MX_ADC1_Init+0xf0>)
 8001d06:	f001 fcf3 	bl	80036f0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	4619      	mov	r1, r3
 8001d24:	4811      	ldr	r0, [pc, #68]	; (8001d6c <MX_ADC1_Init+0xf0>)
 8001d26:	f001 fd0f 	bl	8003748 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <MX_ADC1_Init+0xf0>)
 8001d30:	f7ff fa07 	bl	8001142 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d38:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <MX_ADC1_Init+0xf4>)
 8001d42:	f001 fcb7 	bl	80036b4 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <MX_ADC1_Init+0xf8>)
 8001d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_ADC1_Init+0xf0>)
 8001d4e:	f7ff f9c2 	bl	80010d6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES);
 8001d52:	2202      	movs	r2, #2
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <MX_ADC1_Init+0xf8>)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_ADC1_Init+0xf0>)
 8001d58:	f7ff fa06 	bl	8001168 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3740      	adds	r7, #64	; 0x40
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	40012300 	.word	0x40012300
 8001d74:	03200006 	.word	0x03200006

08001d78 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	2220      	movs	r2, #32
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f009 fc78 	bl	800b67c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001d9c:	2004      	movs	r0, #4
 8001d9e:	f7ff fb69 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff fb66 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dae:	2302      	movs	r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001db6:	2301      	movs	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481f      	ldr	r0, [pc, #124]	; (8001e44 <MX_I2C3_Init+0xcc>)
 8001dc8:	f001 ff1c 	bl	8003c04 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001de2:	2304      	movs	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	4817      	ldr	r0, [pc, #92]	; (8001e48 <MX_I2C3_Init+0xd0>)
 8001dec:	f001 ff0a 	bl	8003c04 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001df0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001df4:	f7ff fb56 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001df8:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_I2C3_Init+0xd4>)
 8001dfa:	f7ff fa34 	bl	8001266 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001dfe:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_I2C3_Init+0xd4>)
 8001e00:	f7ff fa0e 	bl	8001220 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001e04:	4811      	ldr	r0, [pc, #68]	; (8001e4c <MX_I2C3_Init+0xd4>)
 8001e06:	f7ff f9fb 	bl	8001200 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_I2C3_Init+0xd8>)
 8001e10:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_I2C3_Init+0xd4>)
 8001e2e:	f002 f869 	bl	8003f04 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_I2C3_Init+0xd4>)
 8001e36:	f7ff fa03 	bl	8001240 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3738      	adds	r7, #56	; 0x38
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40005c00 	.word	0x40005c00
 8001e50:	000186a0 	.word	0x000186a0

08001e54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b090      	sub	sp, #64	; 0x40
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001e5a:	f107 0318 	add.w	r3, r7, #24
 8001e5e:	2228      	movs	r2, #40	; 0x28
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fc0a 	bl	800b67c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001e78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e7c:	f7ff fb12 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7ff faf7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001e86:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001e8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4813      	ldr	r0, [pc, #76]	; (8001ef4 <MX_SPI2_Init+0xa0>)
 8001ea6:	f001 fead 	bl	8003c04 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001eae:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001eb2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_SPI2_Init+0xa4>)
 8001ede:	f002 f9a8 	bl	8004232 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_SPI2_Init+0xa4>)
 8001ee6:	f7ff fb85 	bl	80015f4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	3740      	adds	r7, #64	; 0x40
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40003800 	.word	0x40003800

08001efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff fac7 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001f16:	2363      	movs	r3, #99	; 0x63
 8001f18:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f30:	f002 fa44 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001f34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f38:	f7ff fb82 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f42:	f7ff fd45 	bl	80019d0 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001f46:	2108      	movs	r1, #8
 8001f48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f4c:	f7ff fb65 	bl	800161a <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001f50:	2100      	movs	r1, #0
 8001f52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f56:	f7ff fd63 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001f5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f5e:	f7ff fd72 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7ff fa86 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f98:	2004      	movs	r0, #4
 8001f9a:	f7ff fa6b 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MotorR_Encoder1_Pin|MotorR_Encoder2_Pin;
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4827      	ldr	r0, [pc, #156]	; (8002058 <MX_TIM3_Init+0xec>)
 8001fbc:	f001 fe22 	bl	8003c04 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <MX_TIM3_Init+0xf0>)
 8001fc4:	f7ff fd19 	bl	80019fa <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001fc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4823      	ldr	r0, [pc, #140]	; (800205c <MX_TIM3_Init+0xf0>)
 8001fd0:	f7ff fbd0 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4820      	ldr	r0, [pc, #128]	; (800205c <MX_TIM3_Init+0xf0>)
 8001fda:	f7ff fc19 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	481e      	ldr	r0, [pc, #120]	; (800205c <MX_TIM3_Init+0xf0>)
 8001fe4:	f7ff fc62 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2101      	movs	r1, #1
 8001fec:	481b      	ldr	r0, [pc, #108]	; (800205c <MX_TIM3_Init+0xf0>)
 8001fee:	f7ff fcab 	bl	8001948 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4818      	ldr	r0, [pc, #96]	; (800205c <MX_TIM3_Init+0xf0>)
 8001ffa:	f7ff fbbb 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2110      	movs	r1, #16
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <MX_TIM3_Init+0xf0>)
 8002004:	f7ff fc04 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002008:	2200      	movs	r2, #0
 800200a:	2110      	movs	r1, #16
 800200c:	4813      	ldr	r0, [pc, #76]	; (800205c <MX_TIM3_Init+0xf0>)
 800200e:	f7ff fc4d 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002012:	2200      	movs	r2, #0
 8002014:	2110      	movs	r1, #16
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <MX_TIM3_Init+0xf0>)
 8002018:	f7ff fc96 	bl	8001948 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <MX_TIM3_Init+0xf0>)
 8002036:	f002 f9c1 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800203a:	4808      	ldr	r0, [pc, #32]	; (800205c <MX_TIM3_Init+0xf0>)
 800203c:	f7ff fb00 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002040:	2100      	movs	r1, #0
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <MX_TIM3_Init+0xf0>)
 8002044:	f7ff fcec 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_TIM3_Init+0xf0>)
 800204a:	f7ff fcfc 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	; 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020800 	.word	0x40020800
 800205c:	40000400 	.word	0x40000400

08002060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002086:	2004      	movs	r0, #4
 8002088:	f7ff fa0c 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff f9f1 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = MotorL_Encoder1_Pin|MotorL_Encoder2_Pin;
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002096:	2302      	movs	r3, #2
 8002098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4827      	ldr	r0, [pc, #156]	; (800214c <MX_TIM4_Init+0xec>)
 80020b0:	f001 fda8 	bl	8003c04 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	4826      	ldr	r0, [pc, #152]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020b8:	f7ff fc9f 	bl	80019fa <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80020bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020c0:	2101      	movs	r1, #1
 80020c2:	4823      	ldr	r0, [pc, #140]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020c4:	f7ff fb56 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2101      	movs	r1, #1
 80020cc:	4820      	ldr	r0, [pc, #128]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020ce:	f7ff fb9f 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020d8:	f7ff fbe8 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80020dc:	2200      	movs	r2, #0
 80020de:	2101      	movs	r1, #1
 80020e0:	481b      	ldr	r0, [pc, #108]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020e2:	f7ff fc31 	bl	8001948 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80020e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ea:	2110      	movs	r1, #16
 80020ec:	4818      	ldr	r0, [pc, #96]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020ee:	f7ff fb41 	bl	8001774 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2110      	movs	r1, #16
 80020f6:	4816      	ldr	r0, [pc, #88]	; (8002150 <MX_TIM4_Init+0xf0>)
 80020f8:	f7ff fb8a 	bl	8001810 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2110      	movs	r1, #16
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <MX_TIM4_Init+0xf0>)
 8002102:	f7ff fbd3 	bl	80018ac <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002106:	2200      	movs	r2, #0
 8002108:	2110      	movs	r1, #16
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <MX_TIM4_Init+0xf0>)
 800210c:	f7ff fc1c 	bl	8001948 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <MX_TIM4_Init+0xf0>)
 800212a:	f002 f947 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <MX_TIM4_Init+0xf0>)
 8002130:	f7ff fa86 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002134:	2100      	movs	r1, #0
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_TIM4_Init+0xf0>)
 8002138:	f7ff fc72 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_TIM4_Init+0xf0>)
 800213e:	f7ff fc82 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020400 	.word	0x40020400
 8002150:	40000800 	.word	0x40000800

08002154 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8002168:	2008      	movs	r0, #8
 800216a:	f7ff f99b 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800216e:	f7fe ff29 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8002172:	4603      	mov	r3, r0
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe ff79 	bl	8001070 <NVIC_EncodePriority>
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	2032      	movs	r0, #50	; 0x32
 8002184:	f7fe ff4a 	bl	800101c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8002188:	2032      	movs	r0, #50	; 0x32
 800218a:	f7fe ff29 	bl	8000fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8002196:	f242 730f 	movw	r3, #9999	; 0x270f
 800219a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <MX_TIM5_Init+0x7c>)
 80021a6:	f002 f909 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <MX_TIM5_Init+0x7c>)
 80021ac:	f7ff fa48 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021b0:	2100      	movs	r1, #0
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM5_Init+0x7c>)
 80021b4:	f7ff fc0c 	bl	80019d0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80021b8:	2100      	movs	r1, #0
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM5_Init+0x7c>)
 80021bc:	f7ff fc30 	bl	8001a20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM5_Init+0x7c>)
 80021c2:	f7ff fc40 	bl	8001a46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40000c00 	.word	0x40000c00

080021d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 80021e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80021ec:	f7ff f972 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 80021f0:	f7fe fee8 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2201      	movs	r2, #1
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe ff38 	bl	8001070 <NVIC_EncodePriority>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	2018      	movs	r0, #24
 8002206:	f7fe ff09 	bl	800101c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800220a:	2018      	movs	r0, #24
 800220c:	f7fe fee8 	bl	8000fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49999;
 8002218:	f24c 334f 	movw	r3, #49999	; 0xc34f
 800221c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM9_Init+0x70>)
 8002228:	f002 f8c8 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_TIM9_Init+0x70>)
 800222e:	f7ff fa07 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002232:	2100      	movs	r1, #0
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM9_Init+0x70>)
 8002236:	f7ff fbcb 	bl	80019d0 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40014000 	.word	0x40014000

08002248 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800224e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	2220      	movs	r2, #32
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f009 fa08 	bl	800b67c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 800227c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002280:	f7ff f928 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002288:	2300      	movs	r3, #0
 800228a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 800228c:	f241 3387 	movw	r3, #4999	; 0x1387
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 8002296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800229a:	4619      	mov	r1, r3
 800229c:	481b      	ldr	r0, [pc, #108]	; (800230c <MX_TIM10_Init+0xc4>)
 800229e:	f002 f88d 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 80022a2:	481a      	ldr	r0, [pc, #104]	; (800230c <MX_TIM10_Init+0xc4>)
 80022a4:	f7ff f9cc 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM10, LL_TIM_CHANNEL_CH1);
 80022a8:	2101      	movs	r1, #1
 80022aa:	4818      	ldr	r0, [pc, #96]	; (800230c <MX_TIM10_Init+0xc4>)
 80022ac:	f7ff fa1e 	bl	80016ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022b0:	2360      	movs	r3, #96	; 0x60
 80022b2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM10, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	461a      	mov	r2, r3
 80022ca:	2101      	movs	r1, #1
 80022cc:	480f      	ldr	r0, [pc, #60]	; (800230c <MX_TIM10_Init+0xc4>)
 80022ce:	f002 f8ef 	bl	80044b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM10, LL_TIM_CHANNEL_CH1);
 80022d2:	2101      	movs	r1, #1
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <MX_TIM10_Init+0xc4>)
 80022d6:	f7ff f9c3 	bl	8001660 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022da:	2002      	movs	r0, #2
 80022dc:	f7ff f8ca 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM10 GPIO Configuration
  PB8   ------> TIM10_CH1
  */
  GPIO_InitStruct.Pin = MotorL_PWM_Pin;
 80022e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022e6:	2302      	movs	r3, #2
 80022e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorL_PWM_GPIO_Port, &GPIO_InitStruct);
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_TIM10_Init+0xc8>)
 8002300:	f001 fc80 	bl	8003c04 <LL_GPIO_Init>

}
 8002304:	bf00      	nop
 8002306:	3750      	adds	r7, #80	; 0x50
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40014400 	.word	0x40014400
 8002310:	40020400 	.word	0x40020400

08002314 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	; 0x50
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800231a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	2220      	movs	r2, #32
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f009 f9a2 	bl	800b67c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 8002348:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800234c:	f7ff f8c2 	bl	80014d4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 8002358:	f241 3387 	movw	r3, #4999	; 0x1387
 800235c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 8002362:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002366:	4619      	mov	r1, r3
 8002368:	481b      	ldr	r0, [pc, #108]	; (80023d8 <MX_TIM11_Init+0xc4>)
 800236a:	f002 f827 	bl	80043bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 800236e:	481a      	ldr	r0, [pc, #104]	; (80023d8 <MX_TIM11_Init+0xc4>)
 8002370:	f7ff f966 	bl	8001640 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 8002374:	2101      	movs	r1, #1
 8002376:	4818      	ldr	r0, [pc, #96]	; (80023d8 <MX_TIM11_Init+0xc4>)
 8002378:	f7ff f9b8 	bl	80016ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800237c:	2360      	movs	r3, #96	; 0x60
 800237e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	461a      	mov	r2, r3
 8002396:	2101      	movs	r1, #1
 8002398:	480f      	ldr	r0, [pc, #60]	; (80023d8 <MX_TIM11_Init+0xc4>)
 800239a:	f002 f889 	bl	80044b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 800239e:	2101      	movs	r1, #1
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_TIM11_Init+0xc4>)
 80023a2:	f7ff f95d 	bl	8001660 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023a6:	2002      	movs	r0, #2
 80023a8:	f7ff f864 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**TIM11 GPIO Configuration
  PB9   ------> TIM11_CH1
  */
  GPIO_InitStruct.Pin = MotorR_PWM_Pin;
 80023ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023b2:	2302      	movs	r3, #2
 80023b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80023be:	2302      	movs	r3, #2
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80023c2:	2303      	movs	r3, #3
 80023c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorR_PWM_GPIO_Port, &GPIO_InitStruct);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_TIM11_Init+0xc8>)
 80023cc:	f001 fc1a 	bl	8003c04 <LL_GPIO_Init>

}
 80023d0:	bf00      	nop
 80023d2:	3750      	adds	r7, #80	; 0x50
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40014800 	.word	0x40014800
 80023dc:	40020400 	.word	0x40020400

080023e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800240a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800240e:	f7ff f849 	bl	80014a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002412:	2001      	movs	r0, #1
 8002414:	f7ff f82e 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002418:	230c      	movs	r3, #12
 800241a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800241c:	2302      	movs	r3, #2
 800241e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800242c:	2307      	movs	r3, #7
 800242e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4810      	ldr	r0, [pc, #64]	; (8002478 <MX_USART2_UART_Init+0x98>)
 8002436:	f001 fbe5 	bl	8003c04 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800243a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800243e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800244c:	230c      	movs	r3, #12
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_USART2_UART_Init+0x9c>)
 8002460:	f002 fc5c 	bl	8004d1c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_USART2_UART_Init+0x9c>)
 8002466:	f7ff fb0e 	bl	8001a86 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800246a:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_USART2_UART_Init+0x9c>)
 800246c:	f7ff fafb 	bl	8001a66 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3738      	adds	r7, #56	; 0x38
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40020000 	.word	0x40020000
 800247c:	40004400 	.word	0x40004400

08002480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	463b      	mov	r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]
 800249e:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80024a0:	2004      	movs	r0, #4
 80024a2:	f7fe ffe7 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80024a6:	2080      	movs	r0, #128	; 0x80
 80024a8:	f7fe ffe4 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7fe ffe1 	bl	8001474 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80024b2:	2002      	movs	r0, #2
 80024b4:	f7fe ffde 	bl	8001474 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 80024b8:	213f      	movs	r1, #63	; 0x3f
 80024ba:	483a      	ldr	r0, [pc, #232]	; (80025a4 <MX_GPIO_Init+0x124>)
 80024bc:	f7ff fb57 	bl	8001b6e <LL_GPIO_ResetOutputPin>
                          |MotorR_1_Pin|MotorR_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 80024c0:	2130      	movs	r1, #48	; 0x30
 80024c2:	4839      	ldr	r0, [pc, #228]	; (80025a8 <MX_GPIO_Init+0x128>)
 80024c4:	f7ff fb53 	bl	8001b6e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin);
 80024c8:	2134      	movs	r1, #52	; 0x34
 80024ca:	4838      	ldr	r0, [pc, #224]	; (80025ac <MX_GPIO_Init+0x12c>)
 80024cc:	f7ff fb4f 	bl	8001b6e <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80024d0:	4937      	ldr	r1, [pc, #220]	; (80025b0 <MX_GPIO_Init+0x130>)
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7ff f816 	bl	8001504 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80024d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024dc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80024e2:	2300      	movs	r3, #0
 80024e4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80024e6:	2302      	movs	r3, #2
 80024e8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fa04 	bl	80038fc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80024f4:	2200      	movs	r2, #0
 80024f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <MX_GPIO_Init+0x124>)
 80024fc:	f7ff fb08 	bl	8001b10 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002506:	4827      	ldr	r0, [pc, #156]	; (80025a4 <MX_GPIO_Init+0x124>)
 8002508:	f7ff fad3 	bl	8001ab2 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 800250c:	233f      	movs	r3, #63	; 0x3f
 800250e:	603b      	str	r3, [r7, #0]
                          |MotorR_1_Pin|MotorR_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002510:	2301      	movs	r3, #1
 8002512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800251c:	2302      	movs	r3, #2
 800251e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	481f      	ldr	r0, [pc, #124]	; (80025a4 <MX_GPIO_Init+0x124>)
 8002526:	f001 fb6d 	bl	8003c04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800252a:	2310      	movs	r3, #16
 800252c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800252e:	2301      	movs	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800253a:	2302      	movs	r3, #2
 800253c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800253e:	463b      	mov	r3, r7
 8002540:	4619      	mov	r1, r3
 8002542:	4819      	ldr	r0, [pc, #100]	; (80025a8 <MX_GPIO_Init+0x128>)
 8002544:	f001 fb5e 	bl	8003c04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002548:	2320      	movs	r3, #32
 800254a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800254c:	2301      	movs	r3, #1
 800254e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800255c:	463b      	mov	r3, r7
 800255e:	4619      	mov	r1, r3
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_GPIO_Init+0x128>)
 8002562:	f001 fb4f 	bl	8003c04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin;
 8002566:	2334      	movs	r3, #52	; 0x34
 8002568:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800256a:	2301      	movs	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002576:	2302      	movs	r3, #2
 8002578:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <MX_GPIO_Init+0x12c>)
 8002580:	f001 fb40 	bl	8003c04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin;
 8002584:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002588:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800258e:	2301      	movs	r3, #1
 8002590:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002592:	463b      	mov	r3, r7
 8002594:	4619      	mov	r1, r3
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_GPIO_Init+0x124>)
 8002598:	f001 fb34 	bl	8003c04 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	00f00003 	.word	0x00f00003

080025b4 <LL_ADC_REG_SetSequencerRanks>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	332c      	adds	r3, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	617a      	str	r2, [r7, #20]
  return result;
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	40d3      	lsrs	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	211f      	movs	r1, #31
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	401a      	ands	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f003 011f 	and.w	r1, r3, #31
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	431a      	orrs	r2, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3724      	adds	r7, #36	; 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264c:	b29b      	uxth	r3, r3
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f06f 0202 	mvn.w	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f06f 0201 	mvn.w	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <Custom_GPIO_Set+0x22>
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026d8:	e000      	b.n	80026dc <Custom_GPIO_Set+0x24>
 80026da:	2100      	movs	r1, #0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	400b      	ands	r3, r1
 80026e0:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <ADC_Read>:
void	Sensor_Stop();
void	Sensor_Calibration();



__STATIC_INLINE uint16_t	ADC_Read() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026fa:	b672      	cpsid	i
}
 80026fc:	bf00      	nop
	uint16_t adcValue;
	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <ADC_Read+0x44>)
 8002700:	f7ff ffbe 	bl	8002680 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <ADC_Read+0x44>)
 8002706:	f7ff ff8b 	bl	8002620 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 800270a:	bf00      	nop
 800270c:	480a      	ldr	r0, [pc, #40]	; (8002738 <ADC_Read+0x44>)
 800270e:	f7ff ffa4 	bl	800265a <LL_ADC_IsActiveFlag_EOCS>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f9      	beq.n	800270c <ADC_Read+0x18>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8002718:	4807      	ldr	r0, [pc, #28]	; (8002738 <ADC_Read+0x44>)
 800271a:	f7ff ff91 	bl	8002640 <LL_ADC_REG_ReadConversionData12>
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
	LL_ADC_ClearFlag_EOCS(ADC1);
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <ADC_Read+0x44>)
 8002724:	f7ff ffac 	bl	8002680 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 8002728:	b662      	cpsie	i
}
 800272a:	bf00      	nop
	__enable_irq();
	return adcValue;
 800272c:	88fb      	ldrh	r3, [r7, #6]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40012000 	.word	0x40012000

0800273c <Make_Sensor_Raw_Vals>:





__STATIC_INLINE void	Make_Sensor_Raw_Vals(uint8_t idx) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]

	// IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | idx | 0x08;
 8002746:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <Make_Sensor_Raw_Vals+0x1ac>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4313      	orrs	r3, r2
 8002752:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <Make_Sensor_Raw_Vals+0x1ac>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6153      	str	r3, [r2, #20]
//	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
//	sensorMidianRight[0] = ADC_Read();



	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800275a:	4a64      	ldr	r2, [pc, #400]	; (80028ec <Make_Sensor_Raw_Vals+0x1b0>)
 800275c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002760:	4863      	ldr	r0, [pc, #396]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 8002762:	f7ff ff27 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianLeft[0] = ADC_Read();
 8002766:	f7ff ffc5 	bl	80026f4 <ADC_Read>
 800276a:	4603      	mov	r3, r0
 800276c:	823b      	strh	r3, [r7, #16]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 800276e:	4a61      	ldr	r2, [pc, #388]	; (80028f4 <Make_Sensor_Raw_Vals+0x1b8>)
 8002770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002774:	485e      	ldr	r0, [pc, #376]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 8002776:	f7ff ff1d 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianRight[0] = ADC_Read();
 800277a:	f7ff ffbb 	bl	80026f4 <ADC_Read>
 800277e:	4603      	mov	r3, r0
 8002780:	813b      	strh	r3, [r7, #8]



	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8002782:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <Make_Sensor_Raw_Vals+0x1b0>)
 8002784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002788:	4859      	ldr	r0, [pc, #356]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 800278a:	f7ff ff13 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianLeft[1] = ADC_Read();
 800278e:	f7ff ffb1 	bl	80026f4 <ADC_Read>
 8002792:	4603      	mov	r3, r0
 8002794:	827b      	strh	r3, [r7, #18]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8002796:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <Make_Sensor_Raw_Vals+0x1b8>)
 8002798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800279c:	4854      	ldr	r0, [pc, #336]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 800279e:	f7ff ff09 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianRight[1] = ADC_Read();
 80027a2:	f7ff ffa7 	bl	80026f4 <ADC_Read>
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]



	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 80027aa:	4a50      	ldr	r2, [pc, #320]	; (80028ec <Make_Sensor_Raw_Vals+0x1b0>)
 80027ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b0:	484f      	ldr	r0, [pc, #316]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 80027b2:	f7ff feff 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianLeft[2] = ADC_Read();
 80027b6:	f7ff ff9d 	bl	80026f4 <ADC_Read>
 80027ba:	4603      	mov	r3, r0
 80027bc:	82bb      	strh	r3, [r7, #20]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 80027be:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <Make_Sensor_Raw_Vals+0x1b8>)
 80027c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027c4:	484a      	ldr	r0, [pc, #296]	; (80028f0 <Make_Sensor_Raw_Vals+0x1b4>)
 80027c6:	f7ff fef5 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	sensorMidianRight[2] = ADC_Read();
 80027ca:	f7ff ff93 	bl	80026f4 <ADC_Read>
 80027ce:	4603      	mov	r3, r0
 80027d0:	81bb      	strh	r3, [r7, #12]



	if (sensorMidianLeft[0] > sensorMidianLeft[1]) {
 80027d2:	8a3a      	ldrh	r2, [r7, #16]
 80027d4:	8a7b      	ldrh	r3, [r7, #18]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90e      	bls.n	80027f8 <Make_Sensor_Raw_Vals+0xbc>
		INT_SWAP(sensorMidianLeft[0], sensorMidianLeft[1]);
 80027da:	8a3a      	ldrh	r2, [r7, #16]
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	4053      	eors	r3, r2
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	823b      	strh	r3, [r7, #16]
 80027e4:	8a7a      	ldrh	r2, [r7, #18]
 80027e6:	8a3b      	ldrh	r3, [r7, #16]
 80027e8:	4053      	eors	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	827b      	strh	r3, [r7, #18]
 80027ee:	8a3a      	ldrh	r2, [r7, #16]
 80027f0:	8a7b      	ldrh	r3, [r7, #18]
 80027f2:	4053      	eors	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	823b      	strh	r3, [r7, #16]
	}
	if (sensorMidianLeft[1] > sensorMidianLeft[2]) {
 80027f8:	8a7a      	ldrh	r2, [r7, #18]
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d90e      	bls.n	800281e <Make_Sensor_Raw_Vals+0xe2>
		INT_SWAP(sensorMidianLeft[1], sensorMidianLeft[2]);
 8002800:	8a7a      	ldrh	r2, [r7, #18]
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	4053      	eors	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	827b      	strh	r3, [r7, #18]
 800280a:	8aba      	ldrh	r2, [r7, #20]
 800280c:	8a7b      	ldrh	r3, [r7, #18]
 800280e:	4053      	eors	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	82bb      	strh	r3, [r7, #20]
 8002814:	8a7a      	ldrh	r2, [r7, #18]
 8002816:	8abb      	ldrh	r3, [r7, #20]
 8002818:	4053      	eors	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	827b      	strh	r3, [r7, #18]
	}
	if (sensorMidianLeft[0] > sensorMidianLeft[1]) {
 800281e:	8a3a      	ldrh	r2, [r7, #16]
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	429a      	cmp	r2, r3
 8002824:	d90e      	bls.n	8002844 <Make_Sensor_Raw_Vals+0x108>
		INT_SWAP(sensorMidianLeft[0], sensorMidianLeft[1]);
 8002826:	8a3a      	ldrh	r2, [r7, #16]
 8002828:	8a7b      	ldrh	r3, [r7, #18]
 800282a:	4053      	eors	r3, r2
 800282c:	b29b      	uxth	r3, r3
 800282e:	823b      	strh	r3, [r7, #16]
 8002830:	8a7a      	ldrh	r2, [r7, #18]
 8002832:	8a3b      	ldrh	r3, [r7, #16]
 8002834:	4053      	eors	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	827b      	strh	r3, [r7, #18]
 800283a:	8a3a      	ldrh	r2, [r7, #16]
 800283c:	8a7b      	ldrh	r3, [r7, #18]
 800283e:	4053      	eors	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	823b      	strh	r3, [r7, #16]
	}



	if (sensorMidianRight[0] > sensorMidianRight[1]) {
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	429a      	cmp	r2, r3
 800284a:	d90e      	bls.n	800286a <Make_Sensor_Raw_Vals+0x12e>
		INT_SWAP(sensorMidianRight[0], sensorMidianRight[1]);
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	4053      	eors	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	897a      	ldrh	r2, [r7, #10]
 8002858:	893b      	ldrh	r3, [r7, #8]
 800285a:	4053      	eors	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	893a      	ldrh	r2, [r7, #8]
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	4053      	eors	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	813b      	strh	r3, [r7, #8]
	}
	if (sensorMidianRight[1] > sensorMidianRight[2]) {
 800286a:	897a      	ldrh	r2, [r7, #10]
 800286c:	89bb      	ldrh	r3, [r7, #12]
 800286e:	429a      	cmp	r2, r3
 8002870:	d90e      	bls.n	8002890 <Make_Sensor_Raw_Vals+0x154>
		INT_SWAP(sensorMidianRight[1], sensorMidianRight[2]);
 8002872:	897a      	ldrh	r2, [r7, #10]
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	4053      	eors	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	817b      	strh	r3, [r7, #10]
 800287c:	89ba      	ldrh	r2, [r7, #12]
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	4053      	eors	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	81bb      	strh	r3, [r7, #12]
 8002886:	897a      	ldrh	r2, [r7, #10]
 8002888:	89bb      	ldrh	r3, [r7, #12]
 800288a:	4053      	eors	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	817b      	strh	r3, [r7, #10]
	}
	if (sensorMidianRight[0] > sensorMidianRight[1]) {
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	429a      	cmp	r2, r3
 8002896:	d90e      	bls.n	80028b6 <Make_Sensor_Raw_Vals+0x17a>
		INT_SWAP(sensorMidianRight[0], sensorMidianRight[1]);
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	4053      	eors	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	813b      	strh	r3, [r7, #8]
 80028a2:	897a      	ldrh	r2, [r7, #10]
 80028a4:	893b      	ldrh	r3, [r7, #8]
 80028a6:	4053      	eors	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	817b      	strh	r3, [r7, #10]
 80028ac:	893a      	ldrh	r2, [r7, #8]
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	4053      	eors	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	813b      	strh	r3, [r7, #8]
	}



	sensorRawVals[idx] = sensorMidianLeft[1] >> 4;
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	b2d1      	uxtb	r1, r2
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <Make_Sensor_Raw_Vals+0x1bc>)
 80028c2:	54d1      	strb	r1, [r2, r3]
	sensorRawVals[idx + 8] = sensorMidianRight[1] >> 4;
 80028c4:	897b      	ldrh	r3, [r7, #10]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	3308      	adds	r3, #8
 80028ce:	b2d1      	uxtb	r1, r2
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <Make_Sensor_Raw_Vals+0x1bc>)
 80028d2:	54d1      	strb	r1, [r2, r3]

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <Make_Sensor_Raw_Vals+0x1ac>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	4a03      	ldr	r2, [pc, #12]	; (80028e8 <Make_Sensor_Raw_Vals+0x1ac>)
 80028da:	f023 0308 	bic.w	r3, r3, #8
 80028de:	6153      	str	r3, [r2, #20]
}
 80028e0:	bf00      	nop
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40020800 	.word	0x40020800
 80028ec:	03500007 	.word	0x03500007
 80028f0:	40012000 	.word	0x40012000
 80028f4:	03200006 	.word	0x03200006
 80028f8:	2000354c 	.word	0x2000354c

080028fc <Make_Sensor_Norm_Vals>:




// normalized value 계산
__STATIC_INLINE void	Make_Sensor_Norm_Vals(uint8_t idx) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]


 	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <Make_Sensor_Norm_Vals+0x88>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <Make_Sensor_Norm_Vals+0x8c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	1aca      	subs	r2, r1, r3
 800291a:	4613      	mov	r3, r2
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	491a      	ldr	r1, [pc, #104]	; (800298c <Make_Sensor_Norm_Vals+0x90>)
 8002924:	5c8a      	ldrb	r2, [r1, r2]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	fb93 f3f2 	sdiv	r3, r3, r2
 		& ( (sensorRawVals[idx] < blackMaxs[idx] ? 1 : 0) - 0x01 )  ) \
 800292c:	b25b      	sxtb	r3, r3
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	4914      	ldr	r1, [pc, #80]	; (8002984 <Make_Sensor_Norm_Vals+0x88>)
 8002932:	5c8a      	ldrb	r2, [r1, r2]
 8002934:	b2d1      	uxtb	r1, r2
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	4813      	ldr	r0, [pc, #76]	; (8002988 <Make_Sensor_Norm_Vals+0x8c>)
 800293a:	5c82      	ldrb	r2, [r0, r2]
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4291      	cmp	r1, r2
 8002940:	d201      	bcs.n	8002946 <Make_Sensor_Norm_Vals+0x4a>
 8002942:	2200      	movs	r2, #0
 8002944:	e001      	b.n	800294a <Make_Sensor_Norm_Vals+0x4e>
 8002946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294a:	4013      	ands	r3, r2
 800294c:	b25b      	sxtb	r3, r3
 		| ( (sensorRawVals[idx] < whiteMaxs[idx] ? 1 : 0) - 0x01 );
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <Make_Sensor_Norm_Vals+0x88>)
 8002952:	5c8a      	ldrb	r2, [r1, r2]
 8002954:	b2d1      	uxtb	r1, r2
 8002956:	79fa      	ldrb	r2, [r7, #7]
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <Make_Sensor_Norm_Vals+0x94>)
 800295a:	5c82      	ldrb	r2, [r0, r2]
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	4291      	cmp	r1, r2
 8002960:	d201      	bcs.n	8002966 <Make_Sensor_Norm_Vals+0x6a>
 8002962:	2200      	movs	r2, #0
 8002964:	e001      	b.n	800296a <Make_Sensor_Norm_Vals+0x6e>
 8002966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800296a:	4313      	orrs	r3, r2
 800296c:	b25a      	sxtb	r2, r3
 	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 800296e:	79fb      	ldrb	r3, [r7, #7]
 		| ( (sensorRawVals[idx] < whiteMaxs[idx] ? 1 : 0) - 0x01 );
 8002970:	b2d1      	uxtb	r1, r2
 	sensorNormVals[idx] = ( (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]) \
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <Make_Sensor_Norm_Vals+0x98>)
 8002974:	54d1      	strb	r1, [r2, r3]
//		sensorNormVals[idx] = 255;
//	}
//	else {
//		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
//	}
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	2000354c 	.word	0x2000354c
 8002988:	2000006c 	.word	0x2000006c
 800298c:	2000356c 	.word	0x2000356c
 8002990:	2000005c 	.word	0x2000005c
 8002994:	2000355c 	.word	0x2000355c

08002998 <Make_Sensor_State>:



// sensor state 계산
__STATIC_INLINE void	Make_Sensor_State(uint8_t idx) {
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]

	uint8_t stateMaskingIdx = IR_SENSOR_LEN - 1 - idx;
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f1c3 030f 	rsb	r3, r3, #15
 80029a8:	73fb      	strb	r3, [r7, #15]

	irSensorState = ( irSensorState & ~(0x01 << stateMaskingIdx) ) | ( (sensorNormVals[idx] > threshold ? 1 : 0) << stateMaskingIdx );
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <Make_Sensor_State+0x64>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4013      	ands	r3, r2
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	490e      	ldr	r1, [pc, #56]	; (8002a00 <Make_Sensor_State+0x68>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	b2d9      	uxtb	r1, r3
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <Make_Sensor_State+0x6c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4299      	cmp	r1, r3
 80029d4:	bf8c      	ite	hi
 80029d6:	2301      	movhi	r3, #1
 80029d8:	2300      	movls	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <Make_Sensor_State+0x64>)
 80029ee:	801a      	strh	r2, [r3, #0]
//		irSensorState |= 0x01 << stateMaskingIdx;
//	}
//	else {
//		irSensorState &= ~(0x01 << stateMaskingIdx);
//	}
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	2000357c 	.word	0x2000357c
 8002a00:	2000355c 	.word	0x2000355c
 8002a04:	2000007c 	.word	0x2000007c

08002a08 <Make_Voltage_Raw_Val>:



__STATIC_INLINE float	Make_Voltage_Raw_Val() {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <Make_Voltage_Raw_Val+0x38>)
 8002a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a12:	480c      	ldr	r0, [pc, #48]	; (8002a44 <Make_Voltage_Raw_Val+0x3c>)
 8002a14:	f7ff fdce 	bl	80025b4 <LL_ADC_REG_SetSequencerRanks>
	return 3.3f * 21.f * (float)ADC_Read() / 4096.f;
 8002a18:	f7ff fe6c 	bl	80026f4 <ADC_Read>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a48 <Make_Voltage_Raw_Val+0x40>
 8002a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a4c <Make_Voltage_Raw_Val+0x44>
 8002a32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a36:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	03800008 	.word	0x03800008
 8002a44:	40012000 	.word	0x40012000
 8002a48:	428a9999 	.word	0x428a9999
 8002a4c:	45800000 	.word	0x45800000

08002a50 <Make_Battery_Voltage>:



__STATIC_INLINE void	Make_Battery_Voltage() {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
	static uint8_t	sensingVoltageIdx = 0;
	static float	sensingVoltageMidian[3];


	switch(sensingVoltageIdx) {
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <Make_Battery_Voltage+0xec>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	dc02      	bgt.n	8002a64 <Make_Battery_Voltage+0x14>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da03      	bge.n	8002a6a <Make_Battery_Voltage+0x1a>
			sensingVoltage = sensingVoltageMidian[1];
			sensingVoltageIdx = 0;

			break;
	}
}
 8002a62:	e067      	b.n	8002b34 <Make_Battery_Voltage+0xe4>
	switch(sensingVoltageIdx) {
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d013      	beq.n	8002a90 <Make_Battery_Voltage+0x40>
}
 8002a68:	e064      	b.n	8002b34 <Make_Battery_Voltage+0xe4>
			sensingVoltageMidian[sensingVoltageIdx] = Make_Voltage_Raw_Val();
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <Make_Battery_Voltage+0xec>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461c      	mov	r4, r3
 8002a70:	f7ff ffca 	bl	8002a08 <Make_Voltage_Raw_Val>
 8002a74:	eef0 7a40 	vmov.f32	s15, s0
 8002a78:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002a7a:	00a3      	lsls	r3, r4, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
			sensingVoltageIdx++;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <Make_Battery_Voltage+0xec>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <Make_Battery_Voltage+0xec>)
 8002a8c:	701a      	strb	r2, [r3, #0]
			break;
 8002a8e:	e051      	b.n	8002b34 <Make_Battery_Voltage+0xe4>
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002a98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	dd09      	ble.n	8002aba <Make_Battery_Voltage+0x6a>
				FLOAT_SWAP(sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6053      	str	r3, [r2, #4]
			if (sensingVoltageMidian[1] > sensingVoltageMidian[2]) {
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002abc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ac2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ace:	dd09      	ble.n	8002ae4 <Make_Battery_Voltage+0x94>
				FLOAT_SWAP(sensingVoltageMidian[1], sensingVoltageMidian[2]);
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002adc:	6053      	str	r3, [r2, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6093      	str	r3, [r2, #8]
			if (sensingVoltageMidian[0] > sensingVoltageMidian[1]) {
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002ae6:	ed93 7a00 	vldr	s14, [r3]
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002aec:	edd3 7a01 	vldr	s15, [r3, #4]
 8002af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	dd09      	ble.n	8002b0e <Make_Battery_Voltage+0xbe>
				FLOAT_SWAP(sensingVoltageMidian[0], sensingVoltageMidian[1]);
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6053      	str	r3, [r2, #4]
			if (sensingVoltageMidian[1] == 0) {
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	d102      	bne.n	8002b24 <Make_Battery_Voltage+0xd4>
				sensingVoltageMidian[1] = 0.001f;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <Make_Battery_Voltage+0xf4>)
 8002b22:	605a      	str	r2, [r3, #4]
			sensingVoltage = sensingVoltageMidian[1];
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <Make_Battery_Voltage+0xf0>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <Make_Battery_Voltage+0xf8>)
 8002b2a:	6013      	str	r3, [r2, #0]
			sensingVoltageIdx = 0;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <Make_Battery_Voltage+0xec>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
			break;
 8002b32:	bf00      	nop
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	200002a9 	.word	0x200002a9
 8002b40:	200002ac 	.word	0x200002ac
 8002b44:	3a83126f 	.word	0x3a83126f
 8002b48:	20003580 	.word	0x20003580

08002b4c <Sensor_TIM5_IRQ>:





__STATIC_INLINE void	Sensor_TIM5_IRQ() {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
//	DWT->CYCCNT = 0;

	const  uint8_t	senorReadTable[IR_SENSOR_LEN_HALF] = { 0, 2, 4, 6, 1, 3, 5, 7 };
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <Sensor_TIM5_IRQ+0x7c>)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b5a:	e883 0003 	stmia.w	r3, {r0, r1}

	static uint8_t	tim5Idx = 0;

	uint8_t sensorReadIdx = senorReadTable[tim5Idx];
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <Sensor_TIM5_IRQ+0x80>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3310      	adds	r3, #16
 8002b64:	443b      	add	r3, r7
 8002b66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b6a:	73fb      	strb	r3, [r7, #15]

	Make_Sensor_Raw_Vals(sensorReadIdx);
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fde4 	bl	800273c <Make_Sensor_Raw_Vals>

	Make_Sensor_Norm_Vals(sensorReadIdx);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fec0 	bl	80028fc <Make_Sensor_Norm_Vals>
	Make_Sensor_Norm_Vals(sensorReadIdx + 8);
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff feba 	bl	80028fc <Make_Sensor_Norm_Vals>

	Make_Sensor_State(sensorReadIdx);
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff04 	bl	8002998 <Make_Sensor_State>
	Make_Sensor_State(sensorReadIdx + 8);
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3308      	adds	r3, #8
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fefe 	bl	8002998 <Make_Sensor_State>

	if (tim5Idx & 0x01) {
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <Sensor_TIM5_IRQ+0x80>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <Sensor_TIM5_IRQ+0x60>
		Make_Battery_Voltage();
 8002ba8:	f7ff ff52 	bl	8002a50 <Make_Battery_Voltage>


//	다음의 순서로 센서를 읽음 { 0, 2, 4, 6, 1, 3, 5, 7 };
//	인덱스 증가

	tim5Idx = (tim5Idx + 1) & 0x07;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <Sensor_TIM5_IRQ+0x80>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <Sensor_TIM5_IRQ+0x80>)
 8002bbc:	701a      	strb	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800d910 	.word	0x0800d910
 8002bcc:	200002a8 	.word	0x200002a8

08002bd0 <Motor_Speed_Control>:
//	return gap;
//}



__STATIC_INLINE void	Motor_Speed_Control(float speedL, float speedR) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b096      	sub	sp, #88	; 0x58
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bda:	edc7 0a00 	vstr	s1, [r7]

	float curVoltage = sensingVoltage;
 8002bde:	4bcc      	ldr	r3, [pc, #816]	; (8002f10 <Motor_Speed_Control+0x340>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54

	t_encoder curEncoderValueL = TIM4->CNT;
 8002be4:	4bcb      	ldr	r3, [pc, #812]	; (8002f14 <Motor_Speed_Control+0x344>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	t_encoder curEncoderValueR = TIM3->CNT;
 8002bec:	4bca      	ldr	r3, [pc, #808]	; (8002f18 <Motor_Speed_Control+0x348>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	float velocityCmdL = RADIAN_PER_M * speedL;
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fd fcaf 	bl	8000558 <__aeabi_f2d>
 8002bfa:	a3c3      	add	r3, pc, #780	; (adr r3, 8002f08 <Motor_Speed_Control+0x338>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fd02 	bl	8000608 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7fd ffd4 	bl	8000bb8 <__aeabi_d2f>
 8002c10:	4603      	mov	r3, r0
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
	float velocityCmdR = RADIAN_PER_M * speedR;
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f7fd fc9f 	bl	8000558 <__aeabi_f2d>
 8002c1a:	a3bb      	add	r3, pc, #748	; (adr r3, 8002f08 <Motor_Speed_Control+0x338>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fcf2 	bl	8000608 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ffc4 	bl	8000bb8 <__aeabi_d2f>
 8002c30:	4603      	mov	r3, r0
 8002c32:	64bb      	str	r3, [r7, #72]	; 0x48

	positionCmdL += velocityCmdL * MOTOR_CONTROL_INTERVAL_S;
 8002c34:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002c38:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c40:	4bb7      	ldr	r3, [pc, #732]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	4bb5      	ldr	r3, [pc, #724]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002c4c:	edc3 7a00 	vstr	s15, [r3]
	positionCmdR += velocityCmdR * MOTOR_CONTROL_INTERVAL_S;
 8002c50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c54:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002c58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c5c:	4bb1      	ldr	r3, [pc, #708]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c66:	4baf      	ldr	r3, [pc, #700]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002c68:	edc3 7a00 	vstr	s15, [r3]

	t_encoder deltaTickL = (t_encoder)(curEncoderValueL - prevEncoderValueL);
 8002c6c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002c70:	4bad      	ldr	r3, [pc, #692]	; (8002f28 <Motor_Speed_Control+0x358>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	t_encoder deltaTickR = (t_encoder)(curEncoderValueR - prevEncoderValueR);
 8002c80:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c84:	4ba9      	ldr	r3, [pc, #676]	; (8002f2c <Motor_Speed_Control+0x35c>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	float velocityL = deltaTickL * RADIAN_PER_TICK / MOTOR_CONTROL_INTERVAL_S;
 8002c94:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002f30 <Motor_Speed_Control+0x360>
 8002ca4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca8:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float velocityR = deltaTickR * RADIAN_PER_TICK / MOTOR_CONTROL_INTERVAL_S;
 8002cb4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002f30 <Motor_Speed_Control+0x360>
 8002cc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc8:	eddf 6a94 	vldr	s13, [pc, #592]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	positionL += velocityL * MOTOR_CONTROL_INTERVAL_S;
 8002cd4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cd8:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ce0:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002cec:	edc3 7a00 	vstr	s15, [r3]
	positionR += velocityR * MOTOR_CONTROL_INTERVAL_S;
 8002cf0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cf4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002f1c <Motor_Speed_Control+0x34c>
 8002cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfc:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]

	// anti windup
	positionCmdL = GET_MIN(positionCmdL, positionL + 0.5f);
 8002d0c:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	dd03      	ble.n	8002d32 <Motor_Speed_Control+0x162>
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	e006      	b.n	8002d40 <Motor_Speed_Control+0x170>
 8002d32:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d40:	4b77      	ldr	r3, [pc, #476]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]
	positionCmdL = GET_MAX(positionCmdL, positionL - 0.5f);
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d54:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d62:	d503      	bpl.n	8002d6c <Motor_Speed_Control+0x19c>
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	e006      	b.n	8002d7a <Motor_Speed_Control+0x1aa>
 8002d6c:	4b71      	ldr	r3, [pc, #452]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d7a:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002d7c:	edc3 7a00 	vstr	s15, [r3]

	positionCmdR = GET_MIN(positionCmdR, positionR + 0.5f);
 8002d80:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	dd03      	ble.n	8002da6 <Motor_Speed_Control+0x1d6>
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	e006      	b.n	8002db4 <Motor_Speed_Control+0x1e4>
 8002da6:	4b64      	ldr	r3, [pc, #400]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002db4:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002db6:	edc3 7a00 	vstr	s15, [r3]
	positionCmdR = GET_MAX(positionCmdR, positionR - 0.5f);
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002dc8:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d503      	bpl.n	8002de0 <Motor_Speed_Control+0x210>
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	e006      	b.n	8002dee <Motor_Speed_Control+0x21e>
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dee:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002df0:	edc3 7a00 	vstr	s15, [r3]


	float positionErrL = positionL - positionCmdL;
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <Motor_Speed_Control+0x364>)
 8002df6:	ed93 7a00 	vldr	s14, [r3]
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <Motor_Speed_Control+0x350>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e04:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float positionErrR = positionR - positionCmdR;
 8002e08:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <Motor_Speed_Control+0x368>)
 8002e0a:	ed93 7a00 	vldr	s14, [r3]
 8002e0e:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <Motor_Speed_Control+0x354>)
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e18:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	float velocityErrL = velocityL - velocityCmdL;
 8002e1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e20:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e28:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float velocityErrR = velocityR - velocityCmdR;
 8002e2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float currentL = -(positionErrL * pCoef + velocityErrL * dCoef);
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <Motor_Speed_Control+0x36c>)
 8002e3e:	ed93 7a00 	vldr	s14, [r3]
 8002e42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <Motor_Speed_Control+0x370>)
 8002e4c:	edd3 6a00 	vldr	s13, [r3]
 8002e50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	eef1 7a67 	vneg.f32	s15, s15
 8002e60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float currentR = -(positionErrR * pCoef + velocityErrR * dCoef);
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <Motor_Speed_Control+0x36c>)
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e72:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <Motor_Speed_Control+0x370>)
 8002e74:	edd3 6a00 	vldr	s13, [r3]
 8002e78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	eef1 7a67 	vneg.f32	s15, s15
 8002e88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float voltL = currentL * MOTOR_RESISTANCE + velocityL * MOTOR_KE;
 8002e8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e90:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f44 <Motor_Speed_Control+0x374>
 8002e94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e98:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002e9c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002f48 <Motor_Speed_Control+0x378>
 8002ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	edc7 7a08 	vstr	s15, [r7, #32]
	float voltR = currentR * MOTOR_RESISTANCE + velocityR * MOTOR_KE;
 8002eac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002eb0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002f44 <Motor_Speed_Control+0x374>
 8002eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ebc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002f48 <Motor_Speed_Control+0x378>
 8002ec0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	edc7 7a07 	vstr	s15, [r7, #28]

	float dutyRatioL = voltL / curVoltage;
 8002ecc:	edd7 6a08 	vldr	s13, [r7, #32]
 8002ed0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed8:	edc7 7a06 	vstr	s15, [r7, #24]
	float dutyRatioR = voltR / curVoltage;
 8002edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ee0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee8:	edc7 7a05 	vstr	s15, [r7, #20]

	uint32_t levelCCR_L = ABS(dutyRatioL) * levelMaxCCR;
 8002eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d528      	bpl.n	8002f4c <Motor_Speed_Control+0x37c>
 8002efa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002efe:	eef1 7a67 	vneg.f32	s15, s15
 8002f02:	e025      	b.n	8002f50 <Motor_Speed_Control+0x380>
 8002f04:	f3af 8000 	nop.w
 8002f08:	52242ab6 	.word	0x52242ab6
 8002f0c:	4041f1a6 	.word	0x4041f1a6
 8002f10:	20003580 	.word	0x20003580
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	3a03126f 	.word	0x3a03126f
 8002f20:	20001450 	.word	0x20001450
 8002f24:	20001458 	.word	0x20001458
 8002f28:	20001460 	.word	0x20001460
 8002f2c:	20001462 	.word	0x20001462
 8002f30:	3a000000 	.word	0x3a000000
 8002f34:	20001454 	.word	0x20001454
 8002f38:	2000145c 	.word	0x2000145c
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000008 	.word	0x20000008
 8002f44:	40e47ae1 	.word	0x40e47ae1
 8002f48:	3d072b02 	.word	0x3d072b02
 8002f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	ee07 3a10 	vmov	s14, r3
 8002f58:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f64:	ee17 3a90 	vmov	r3, s15
 8002f68:	613b      	str	r3, [r7, #16]
	levelCCR_L = GET_MIN(levelCCR_L, levelMaxCCR);
 8002f6a:	4b45      	ldr	r3, [pc, #276]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d201      	bcs.n	8002f78 <Motor_Speed_Control+0x3a8>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	e001      	b.n	8002f7c <Motor_Speed_Control+0x3ac>
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]

	uint32_t levelCCR_R = ABS(dutyRatioR) * levelMaxCCR;
 8002f7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	d504      	bpl.n	8002f96 <Motor_Speed_Control+0x3c6>
 8002f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f90:	eef1 7a67 	vneg.f32	s15, s15
 8002f94:	e001      	b.n	8002f9a <Motor_Speed_Control+0x3ca>
 8002f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	ee07 3a10 	vmov	s14, r3
 8002fa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fae:	ee17 3a90 	vmov	r3, s15
 8002fb2:	60fb      	str	r3, [r7, #12]
	levelCCR_R = GET_MIN(levelCCR_R, levelMaxCCR);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d201      	bcs.n	8002fc2 <Motor_Speed_Control+0x3f2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	e001      	b.n	8002fc6 <Motor_Speed_Control+0x3f6>
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <Motor_Speed_Control+0x4b0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

	TIM10->CCR1 = levelCCR_L;
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <Motor_Speed_Control+0x4b4>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6353      	str	r3, [r2, #52]	; 0x34
	TIM11->CCR1 = levelCCR_R;
 8002fce:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <Motor_Speed_Control+0x4b8>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6353      	str	r3, [r2, #52]	; 0x34


	Custom_GPIO_Set(GPIOB, 1 << 4, dutyRatioL > 0 ? 1 : 0); // PB4
 8002fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	bfcc      	ite	gt
 8002fe2:	2301      	movgt	r3, #1
 8002fe4:	2300      	movle	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2110      	movs	r1, #16
 8002fec:	4827      	ldr	r0, [pc, #156]	; (800308c <Motor_Speed_Control+0x4bc>)
 8002fee:	f7ff fb63 	bl	80026b8 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOB, 1 << 5, dutyRatioL < 0 ? 1 : 0); // PB5
 8002ff2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	bf4c      	ite	mi
 8003000:	2301      	movmi	r3, #1
 8003002:	2300      	movpl	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	2120      	movs	r1, #32
 800300a:	4820      	ldr	r0, [pc, #128]	; (800308c <Motor_Speed_Control+0x4bc>)
 800300c:	f7ff fb54 	bl	80026b8 <Custom_GPIO_Set>

	Custom_GPIO_Set(GPIOC, 1 << 4, dutyRatioR < 0 ? 1 : 0); // PC4
 8003010:	edd7 7a05 	vldr	s15, [r7, #20]
 8003014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	bf4c      	ite	mi
 800301e:	2301      	movmi	r3, #1
 8003020:	2300      	movpl	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	2110      	movs	r1, #16
 8003028:	4819      	ldr	r0, [pc, #100]	; (8003090 <Motor_Speed_Control+0x4c0>)
 800302a:	f7ff fb45 	bl	80026b8 <Custom_GPIO_Set>
	Custom_GPIO_Set(GPIOC, 1 << 5, dutyRatioR > 0 ? 1 : 0); // PC5
 800302e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	bfcc      	ite	gt
 800303c:	2301      	movgt	r3, #1
 800303e:	2300      	movle	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	2120      	movs	r1, #32
 8003046:	4812      	ldr	r0, [pc, #72]	; (8003090 <Motor_Speed_Control+0x4c0>)
 8003048:	f7ff fb36 	bl	80026b8 <Custom_GPIO_Set>


	curTick_L += deltaTickL;
 800304c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003050:	4b10      	ldr	r3, [pc, #64]	; (8003094 <Motor_Speed_Control+0x4c4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4413      	add	r3, r2
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <Motor_Speed_Control+0x4c4>)
 8003058:	6013      	str	r3, [r2, #0]
	curTick_R += deltaTickR;
 800305a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <Motor_Speed_Control+0x4c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <Motor_Speed_Control+0x4c8>)
 8003066:	6013      	str	r3, [r2, #0]
//	curMarkSamplingTick += (float)(deltaTickL + deltaTickR) / 2.f;

	prevEncoderValueL = curEncoderValueL;
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <Motor_Speed_Control+0x4cc>)
 800306a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800306e:	8013      	strh	r3, [r2, #0]
	prevEncoderValueR = curEncoderValueR;
 8003070:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <Motor_Speed_Control+0x4d0>)
 8003072:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003076:	8013      	strh	r3, [r2, #0]

}
 8003078:	bf00      	nop
 800307a:	3758      	adds	r7, #88	; 0x58
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000144c 	.word	0x2000144c
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	2000147c 	.word	0x2000147c
 8003098:	20001480 	.word	0x20001480
 800309c:	20001460 	.word	0x20001460
 80030a0:	20001462 	.word	0x20001462

080030a4 <Drive_Speed_Accele_Control>:




// 가속도 및 속도 제어
__STATIC_INLINE void	Drive_Speed_Accele_Control() {
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

	if (curSpeed == targetSpeed) {
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 80030aa:	ed93 7a00 	vldr	s14, [r3]
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	d104      	bne.n	80030c8 <Drive_Speed_Accele_Control+0x24>

		// 속도를 targetSpeed 까지 올린 후, curAccele을 0으로 변환
		// 혹은 직선 가속 후 targetSpeed 까지 도달하지 못하고 감속한 후 감속이 종료되었으면 , curAccele을 0으로 변환
		curAccele = 0.f;
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
	else {

		// 속도 제어
		curSpeed = GET_MAX(curSpeed - decele * MOTOR_CONTROL_INTERVAL_S, targetSpeed);
	}
}
 80030c6:	e076      	b.n	80031b6 <Drive_Speed_Accele_Control+0x112>
	else if (curSpeed < targetSpeed) {
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 80030ca:	ed93 7a00 	vldr	s14, [r3]
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	d544      	bpl.n	8003168 <Drive_Speed_Accele_Control+0xc4>
		curAccele = GET_MIN(curAccele + JERK_COEF, targetAccele);
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80031cc <Drive_Speed_Accele_Control+0x128>
 80030e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <Drive_Speed_Accele_Control+0x12c>)
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	d507      	bpl.n	800310c <Drive_Speed_Accele_Control+0x68>
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80031cc <Drive_Speed_Accele_Control+0x128>
 8003106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800310a:	e002      	b.n	8003112 <Drive_Speed_Accele_Control+0x6e>
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <Drive_Speed_Accele_Control+0x12c>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 8003114:	edc3 7a00 	vstr	s15, [r3]
		curSpeed = GET_MIN(curSpeed + curAccele * MOTOR_CONTROL_INTERVAL_S, targetSpeed);
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80031d4 <Drive_Speed_Accele_Control+0x130>
 8003122:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d50c      	bpl.n	800315a <Drive_Speed_Accele_Control+0xb6>
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <Drive_Speed_Accele_Control+0x124>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031d4 <Drive_Speed_Accele_Control+0x130>
 800314a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	e002      	b.n	8003160 <Drive_Speed_Accele_Control+0xbc>
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 8003162:	edc3 7a00 	vstr	s15, [r3]
}
 8003166:	e026      	b.n	80031b6 <Drive_Speed_Accele_Control+0x112>
		curSpeed = GET_MAX(curSpeed - decele * MOTOR_CONTROL_INTERVAL_S, targetSpeed);
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <Drive_Speed_Accele_Control+0x134>)
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	eddf 6a17 	vldr	s13, [pc, #92]	; 80031d4 <Drive_Speed_Accele_Control+0x130>
 8003178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	dd0c      	ble.n	80031aa <Drive_Speed_Accele_Control+0x106>
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 8003192:	ed93 7a00 	vldr	s14, [r3]
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <Drive_Speed_Accele_Control+0x134>)
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80031d4 <Drive_Speed_Accele_Control+0x130>
 80031a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a8:	e002      	b.n	80031b0 <Drive_Speed_Accele_Control+0x10c>
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <Drive_Speed_Accele_Control+0x120>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <Drive_Speed_Accele_Control+0x11c>)
 80031b2:	edc3 7a00 	vstr	s15, [r3]
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	20001478 	.word	0x20001478
 80031c4:	2000002c 	.word	0x2000002c
 80031c8:	20000024 	.word	0x20000024
 80031cc:	3e4ccccd 	.word	0x3e4ccccd
 80031d0:	20000020 	.word	0x20000020
 80031d4:	3a03126f 	.word	0x3a03126f
 80031d8:	20000028 	.word	0x20000028

080031dc <Make_Limited_Position>:




//limitedPositionVal 값 업데이트
__STATIC_INLINE void	Make_Limited_Position() {
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0

	int32_t absPositionVal = ABS(positionVal - curInlineVal);
 80031e2:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <Make_Limited_Position+0x78>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <Make_Limited_Position+0x7c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da05      	bge.n	80031fc <Make_Limited_Position+0x20>
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <Make_Limited_Position+0x7c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <Make_Limited_Position+0x78>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	e004      	b.n	8003206 <Make_Limited_Position+0x2a>
 80031fc:	4b15      	ldr	r3, [pc, #84]	; (8003254 <Make_Limited_Position+0x78>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <Make_Limited_Position+0x7c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	607b      	str	r3, [r7, #4]

	// 곡선에 진입을 시작했을 때 빠르게 curve decel을 해줌
	if (limitedPositionVal < absPositionVal) {
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <Make_Limited_Position+0x80>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dd0d      	ble.n	800322e <Make_Limited_Position+0x52>

		limitedPositionVal = GET_MIN(limitedPositionVal + 50, absPositionVal);
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <Make_Limited_Position+0x80>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3332      	adds	r3, #50	; 0x32
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	dd03      	ble.n	8003226 <Make_Limited_Position+0x4a>
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <Make_Limited_Position+0x80>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3332      	adds	r3, #50	; 0x32
 8003224:	e000      	b.n	8003228 <Make_Limited_Position+0x4c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <Make_Limited_Position+0x80>)
 800322a:	6013      	str	r3, [r2, #0]
	// 곡선에서 벗어날 때 천천히 속도를 올려줌
	else {

		limitedPositionVal = GET_MAX(limitedPositionVal - 25, absPositionVal);
	}
}
 800322c:	e00c      	b.n	8003248 <Make_Limited_Position+0x6c>
		limitedPositionVal = GET_MAX(limitedPositionVal - 25, absPositionVal);
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <Make_Limited_Position+0x80>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3b19      	subs	r3, #25
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	da03      	bge.n	8003242 <Make_Limited_Position+0x66>
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <Make_Limited_Position+0x80>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3b19      	subs	r3, #25
 8003240:	e000      	b.n	8003244 <Make_Limited_Position+0x68>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <Make_Limited_Position+0x80>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20001464 	.word	0x20001464
 8003258:	2000148c 	.word	0x2000148c
 800325c:	20001468 	.word	0x20001468

08003260 <Make_Inline_Val>:


__STATIC_INLINE void	Make_Inline_Val(float finalSpeed) {
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	ed87 0a01 	vstr	s0, [r7, #4]
	 * l(m) 이동햇을 때 (curInlineVal == targetInlineVal)이 되도록 하는 curInlineVal의 변회량
	 * 		= targetInlineVal / { l(m) 이동하는데 걸리는 시간(l(m) / 500(us)) }
	 * 		= targetInlineVal * curSpeed / l(m) / 2000
	 */

	if (curInlineVal < targetInlineVal) {
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <Make_Inline_Val+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <Make_Inline_Val+0x68>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	da10      	bge.n	8003298 <Make_Inline_Val+0x38>

		curInlineVal = GET_MIN(curInlineVal + 200, targetInlineVal);
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <Make_Inline_Val+0x64>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <Make_Inline_Val+0x68>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	da03      	bge.n	800328e <Make_Inline_Val+0x2e>
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <Make_Inline_Val+0x64>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	33c8      	adds	r3, #200	; 0xc8
 800328c:	e001      	b.n	8003292 <Make_Inline_Val+0x32>
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <Make_Inline_Val+0x68>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <Make_Inline_Val+0x64>)
 8003294:	6013      	str	r3, [r2, #0]

	else {

		curInlineVal = GET_MAX(curInlineVal - 200, targetInlineVal);
	}
}
 8003296:	e00f      	b.n	80032b8 <Make_Inline_Val+0x58>
		curInlineVal = GET_MAX(curInlineVal - 200, targetInlineVal);
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <Make_Inline_Val+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <Make_Inline_Val+0x68>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dd03      	ble.n	80032b0 <Make_Inline_Val+0x50>
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <Make_Inline_Val+0x64>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3bc8      	subs	r3, #200	; 0xc8
 80032ae:	e001      	b.n	80032b4 <Make_Inline_Val+0x54>
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <Make_Inline_Val+0x68>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <Make_Inline_Val+0x64>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	2000148c 	.word	0x2000148c
 80032c8:	20001488 	.word	0x20001488

080032cc <Drive_TIM9_IRQ>:



// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
//	DWT->CYCCNT = 0;


	/* origin */
	// 가속도 및 속도 제어
	Drive_Speed_Accele_Control();
 80032d2:	f7ff fee7 	bl	80030a4 <Drive_Speed_Accele_Control>

	// limitedPositionVal 값 업데이트
	Make_Limited_Position();
 80032d6:	f7ff ff81 	bl	80031dc <Make_Limited_Position>

	// 포지션 값에 따른 감속
	float finalSpeed = curSpeed * curveDeceleCoef / (limitedPositionVal + curveDeceleCoef);
 80032da:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <Drive_TIM9_IRQ+0xb8>)
 80032dc:	ed93 7a00 	vldr	s14, [r3]
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <Drive_TIM9_IRQ+0xbc>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <Drive_TIM9_IRQ+0xc0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <Drive_TIM9_IRQ+0xbc>)
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003304:	edc7 7a05 	vstr	s15, [r7, #20]

	// inLine 값 생성
	Make_Inline_Val(finalSpeed);
 8003308:	ed97 0a05 	vldr	s0, [r7, #20]
 800330c:	f7ff ffa8 	bl	8003260 <Make_Inline_Val>


	float positionValCmd = positionVal - curInlineVal;
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <Drive_TIM9_IRQ+0xc4>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <Drive_TIM9_IRQ+0xc8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003322:	edc7 7a04 	vstr	s15, [r7, #16]
//	float deltaPositionVal = positionValCmd - prevPositionValCmd;

//	float finalPosition = positionValCmd + 0.1f * deltaPositionVal;
	float finalPosition = positionValCmd;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	60fb      	str	r3, [r7, #12]

	//position 값에 따른 좌우 모터 속도 조정
	float speedL = finalSpeed * (1.f + finalPosition * positionCoef);
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <Drive_TIM9_IRQ+0xcc>)
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	edd7 7a03 	vldr	s15, [r7, #12]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800333c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003340:	ed97 7a05 	vldr	s14, [r7, #20]
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	edc7 7a02 	vstr	s15, [r7, #8]
	float speedR = finalSpeed * (1.f - finalPosition * positionCoef);
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <Drive_TIM9_IRQ+0xcc>)
 800334e:	ed93 7a00 	vldr	s14, [r3]
 8003352:	edd7 7a03 	vldr	s15, [r7, #12]
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800335e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003362:	ed97 7a05 	vldr	s14, [r7, #20]
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a01 	vstr	s15, [r7, #4]

//	prevPositionValCmd = positionValCmd;

	Motor_Speed_Control(speedL, speedR);
 800336e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003372:	ed97 0a02 	vldr	s0, [r7, #8]
 8003376:	f7ff fc2b 	bl	8002bd0 <Motor_Speed_Control>

//	uint32_t tickElapsed = DWT->CYCCNT;
}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20001478 	.word	0x20001478
 8003388:	20000038 	.word	0x20000038
 800338c:	20001468 	.word	0x20001468
 8003390:	20001464 	.word	0x20001464
 8003394:	2000148c 	.word	0x2000148c
 8003398:	20000018 	.word	0x20000018

0800339c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80033a0:	e7fe      	b.n	80033a0 <NMI_Handler+0x4>

080033a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 80033a6:	f005 ff25 	bl	80091f4 <Motor_Power_Off>
 80033aa:	e7fc      	b.n	80033a6 <HardFault_Handler+0x4>

080033ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 80033b0:	f005 ff20 	bl	80091f4 <Motor_Power_Off>
 80033b4:	e7fc      	b.n	80033b0 <MemManage_Handler+0x4>

080033b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 80033ba:	f005 ff1b 	bl	80091f4 <Motor_Power_Off>
 80033be:	e7fc      	b.n	80033ba <BusFault_Handler+0x4>

080033c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 80033c4:	f005 ff16 	bl	80091f4 <Motor_Power_Off>
 80033c8:	e7fc      	b.n	80033c4 <UsageFault_Handler+0x4>

080033ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <SysTick_Handler+0x18>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a03      	ldr	r2, [pc, #12]	; (800340c <SysTick_Handler+0x18>)
 8003400:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	200002a4 	.word	0x200002a4

08003410 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	Drive_TIM9_IRQ();
 8003414:	f7ff ff5a 	bl	80032cc <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM9);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800341a:	f7ff f93f 	bl	800269c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40014000 	.word	0x40014000

08003428 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	Sensor_TIM5_IRQ();
 800342c:	f7ff fb8e 	bl	8002b4c <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM5);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <TIM5_IRQHandler+0x14>)
 8003432:	f7ff f933 	bl	800269c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40000c00 	.word	0x40000c00

08003440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <_kill>:

int _kill(int pid, int sig)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800345a:	f008 f91b 	bl	800b694 <__errno>
 800345e:	4603      	mov	r3, r0
 8003460:	2216      	movs	r2, #22
 8003462:	601a      	str	r2, [r3, #0]
	return -1;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <_exit>:

void _exit (int status)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ffe7 	bl	8003450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003482:	e7fe      	b.n	8003482 <_exit+0x12>

08003484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e00a      	b.n	80034ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003496:	f3af 8000 	nop.w
 800349a:	4601      	mov	r1, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	60ba      	str	r2, [r7, #8]
 80034a2:	b2ca      	uxtb	r2, r1
 80034a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dbf0      	blt.n	8003496 <_read+0x12>
	}

return len;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e009      	b.n	80034e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	60ba      	str	r2, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fb61 	bl	8007ba0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	dbf1      	blt.n	80034d0 <_write+0x12>
	}
	return len;
 80034ec:	687b      	ldr	r3, [r7, #4]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_close>:

int _close(int file)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	return -1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800351e:	605a      	str	r2, [r3, #4]
	return 0;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <_isatty>:

int _isatty(int file)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
	return 1;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
	return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <_sbrk+0x5c>)
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <_sbrk+0x60>)
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <_sbrk+0x64>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <_sbrk+0x64>)
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <_sbrk+0x68>)
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <_sbrk+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d207      	bcs.n	80035a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003590:	f008 f880 	bl	800b694 <__errno>
 8003594:	4603      	mov	r3, r0
 8003596:	220c      	movs	r2, #12
 8003598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359e:	e009      	b.n	80035b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <_sbrk+0x64>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <_sbrk+0x64>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <_sbrk+0x64>)
 80035b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20020000 	.word	0x20020000
 80035c0:	00000400 	.word	0x00000400
 80035c4:	200002b8 	.word	0x200002b8
 80035c8:	200036d0 	.word	0x200036d0

080035cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <SystemInit+0x20>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <SystemInit+0x20>)
 80035d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035f4:	480d      	ldr	r0, [pc, #52]	; (800362c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035f6:	490e      	ldr	r1, [pc, #56]	; (8003630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035fc:	e002      	b.n	8003604 <LoopCopyDataInit>

080035fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003602:	3304      	adds	r3, #4

08003604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003608:	d3f9      	bcc.n	80035fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800360c:	4c0b      	ldr	r4, [pc, #44]	; (800363c <LoopFillZerobss+0x26>)
  movs r3, #0
 800360e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003610:	e001      	b.n	8003616 <LoopFillZerobss>

08003612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003614:	3204      	adds	r2, #4

08003616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003618:	d3fb      	bcc.n	8003612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800361a:	f7ff ffd7 	bl	80035cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800361e:	f008 f83f 	bl	800b6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003622:	f7fe fab3 	bl	8001b8c <main>
  bx  lr    
 8003626:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800362c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003630:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003634:	0800e814 	.word	0x0800e814
  ldr r2, =_sbss
 8003638:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 800363c:	200036d0 	.word	0x200036d0

08003640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC_IRQHandler>

08003642 <LL_ADC_SetCommonClock>:
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_REG_SetSequencerLength>:
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_ADC_IsEnabled>:
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80036c2:	480a      	ldr	r0, [pc, #40]	; (80036ec <LL_ADC_CommonInit+0x38>)
 80036c4:	f7ff ffe3 	bl	800368e <LL_ADC_IsEnabled>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ffb4 	bl	8003642 <LL_ADC_SetCommonClock>
 80036da:	e001      	b.n	80036e0 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40012000 	.word	0x40012000

080036f0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffc5 	bl	800368e <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d117      	bne.n	800373a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6811      	ldr	r1, [r2, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	430a      	orrs	r2, r1
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	e001      	b.n	800373e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff99 	bl	800368e <LL_ADC_IsEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12b      	bne.n	80037ba <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e005      	b.n	800378a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <LL_ADC_REG_Init+0x80>)
 8003790:	4013      	ands	r3, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	4311      	orrs	r1, r2
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6912      	ldr	r2, [r2, #16]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff58 	bl	8003668 <LL_ADC_REG_SetSequencerLength>
 80037b8:	e001      	b.n	80037be <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	c0fffcfd 	.word	0xc0fffcfd

080037cc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <LL_EXTI_EnableIT_0_31+0x20>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <LL_EXTI_EnableIT_0_31+0x20>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40013c00 	.word	0x40013c00

080037f0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <LL_EXTI_DisableIT_0_31+0x24>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	43db      	mvns	r3, r3
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <LL_EXTI_DisableIT_0_31+0x24>)
 8003802:	4013      	ands	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40013c00 	.word	0x40013c00

08003818 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]

}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40013c00 	.word	0x40013c00

0800383c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	43db      	mvns	r3, r3
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <LL_EXTI_DisableEvent_0_31+0x24>)
 800384e:	4013      	ands	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40013c00 	.word	0x40013c00

08003864 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4904      	ldr	r1, [pc, #16]	; (8003884 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40013c00 	.word	0x40013c00

08003888 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	43db      	mvns	r3, r3
 8003898:	4904      	ldr	r1, [pc, #16]	; (80038ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800389a:	4013      	ands	r3, r2
 800389c:	608b      	str	r3, [r1, #8]

}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40013c00 	.word	0x40013c00

080038b0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60cb      	str	r3, [r1, #12]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	4904      	ldr	r1, [pc, #16]	; (80038f8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	60cb      	str	r3, [r1, #12]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40013c00 	.word	0x40013c00

080038fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d065      	beq.n	80039dc <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06b      	beq.n	80039f0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	795b      	ldrb	r3, [r3, #5]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d01c      	beq.n	800395a <LL_EXTI_Init+0x5e>
 8003920:	2b02      	cmp	r3, #2
 8003922:	dc25      	bgt.n	8003970 <LL_EXTI_Init+0x74>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <LL_EXTI_Init+0x32>
 8003928:	2b01      	cmp	r3, #1
 800392a:	d00b      	beq.n	8003944 <LL_EXTI_Init+0x48>
 800392c:	e020      	b.n	8003970 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff82 	bl	800383c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff45 	bl	80037cc <LL_EXTI_EnableIT_0_31>
          break;
 8003942:	e018      	b.n	8003976 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff51 	bl	80037f0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff60 	bl	8003818 <LL_EXTI_EnableEvent_0_31>
          break;
 8003958:	e00d      	b.n	8003976 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff34 	bl	80037cc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff55 	bl	8003818 <LL_EXTI_EnableEvent_0_31>
          break;
 800396e:	e002      	b.n	8003976 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
          break;
 8003974:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	799b      	ldrb	r3, [r3, #6]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d038      	beq.n	80039f0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	799b      	ldrb	r3, [r3, #6]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d01c      	beq.n	80039c0 <LL_EXTI_Init+0xc4>
 8003986:	2b03      	cmp	r3, #3
 8003988:	dc25      	bgt.n	80039d6 <LL_EXTI_Init+0xda>
 800398a:	2b01      	cmp	r3, #1
 800398c:	d002      	beq.n	8003994 <LL_EXTI_Init+0x98>
 800398e:	2b02      	cmp	r3, #2
 8003990:	d00b      	beq.n	80039aa <LL_EXTI_Init+0xae>
 8003992:	e020      	b.n	80039d6 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff9b 	bl	80038d4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff5e 	bl	8003864 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80039a8:	e022      	b.n	80039f0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff6a 	bl	8003888 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff79 	bl	80038b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039be:	e017      	b.n	80039f0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff4d 	bl	8003864 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff6e 	bl	80038b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039d4:	e00c      	b.n	80039f0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
            break;
 80039da:	e009      	b.n	80039f0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff05 	bl	80037f0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff26 	bl	800383c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <LL_GPIO_SetPinMode>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	b089      	sub	sp, #36	; 0x24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	613b      	str	r3, [r7, #16]
  return result;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2103      	movs	r1, #3
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	401a      	ands	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	61bb      	str	r3, [r7, #24]
  return result;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	3724      	adds	r7, #36	; 0x24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_GPIO_SetPinOutputType>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	605a      	str	r2, [r3, #4]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_GPIO_SetPinSpeed>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	613b      	str	r3, [r7, #16]
  return result;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	2103      	movs	r1, #3
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	61bb      	str	r3, [r7, #24]
  return result;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	bf00      	nop
 8003adc:	3724      	adds	r7, #36	; 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <LL_GPIO_SetPinPull>:
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b089      	sub	sp, #36	; 0x24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	613b      	str	r3, [r7, #16]
  return result;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2103      	movs	r1, #3
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	401a      	ands	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	61bb      	str	r3, [r7, #24]
  return result;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3724      	adds	r7, #36	; 0x24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_GPIO_SetAFPin_0_7>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	613b      	str	r3, [r7, #16]
  return result;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	210f      	movs	r1, #15
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	61bb      	str	r3, [r7, #24]
  return result;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	3724      	adds	r7, #36	; 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_GPIO_SetAFPin_8_15>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b089      	sub	sp, #36	; 0x24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	613b      	str	r3, [r7, #16]
  return result;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	210f      	movs	r1, #15
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	61bb      	str	r3, [r7, #24]
  return result;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003bf8:	bf00      	nop
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	613b      	str	r3, [r7, #16]
  return result;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c2e:	e050      	b.n	8003cd2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d042      	beq.n	8003ccc <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d003      	beq.n	8003c56 <LL_GPIO_Init+0x52>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d10d      	bne.n	8003c72 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	69b9      	ldr	r1, [r7, #24]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff12 	bl	8003a88 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fef3 	bl	8003a58 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	461a      	mov	r2, r3
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ff33 	bl	8003ae6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11a      	bne.n	8003cbe <LL_GPIO_Init+0xba>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	60bb      	str	r3, [r7, #8]
  return result;
 8003c94:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b07      	cmp	r3, #7
 8003c9e:	d807      	bhi.n	8003cb0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff4b 	bl	8003b44 <LL_GPIO_SetAFPin_0_7>
 8003cae:	e006      	b.n	8003cbe <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff72 	bl	8003ba2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fe97 	bl	80039fa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1a7      	bne.n	8003c30 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <LL_I2C_Enable>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_I2C_Disable>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_I2C_ConfigFilters>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f023 021f 	bic.w	r2, r3, #31
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_I2C_SetOwnAddress1>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a42      	ldr	r2, [pc, #264]	; (8003eac <LL_I2C_ConfigSpeed+0x124>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	493a      	ldr	r1, [pc, #232]	; (8003eb0 <LL_I2C_ConfigSpeed+0x128>)
 8003dc6:	428b      	cmp	r3, r1
 8003dc8:	d802      	bhi.n	8003dd0 <LL_I2C_ConfigSpeed+0x48>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	e009      	b.n	8003de4 <LL_I2C_ConfigSpeed+0x5c>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4936      	ldr	r1, [pc, #216]	; (8003eb4 <LL_I2C_ConfigSpeed+0x12c>)
 8003ddc:	fba1 1303 	umull	r1, r3, r1, r3
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	3301      	adds	r3, #1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <LL_I2C_ConfigSpeed+0x128>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d939      	bls.n	8003e66 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d117      	bne.n	8003e28 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4413      	add	r3, r2
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e20:	e01d      	b.n	8003e5e <LL_I2C_ConfigSpeed+0xd6>
 8003e22:	f248 0301 	movw	r3, #32769	; 0x8001
 8003e26:	e01a      	b.n	8003e5e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009a      	lsls	r2, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e58:	e001      	b.n	8003e5e <LL_I2C_ConfigSpeed+0xd6>
 8003e5a:	f248 0301 	movw	r3, #32769	; 0x8001
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e011      	b.n	8003e8a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e74:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	e000      	b.n	8003e88 <LL_I2C_ConfigSpeed+0x100>
 8003e86:	2304      	movs	r3, #4
 8003e88:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	61da      	str	r2, [r3, #28]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	431bde83 	.word	0x431bde83
 8003eb0:	000186a0 	.word	0x000186a0
 8003eb4:	10624dd3 	.word	0x10624dd3

08003eb8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 021a 	bic.w	r2, r3, #26
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fefb 	bl	8003d0a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f89d 	bl	8004058 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68d9      	ldr	r1, [r3, #12]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fefe 	bl	8003d2a <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff25 	bl	8003d88 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6959      	ldr	r1, [r3, #20]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff04 	bl	8003d56 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ffaf 	bl	8003eb8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fec5 	bl	8003cea <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ffb9 	bl	8003ede <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <LL_RCC_GetSysClkSource>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f7c:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <LL_RCC_GetSysClkSource+0x18>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <LL_RCC_GetAHBPrescaler>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <LL_RCC_GetAHBPrescaler+0x18>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800

08003fb0 <LL_RCC_GetAPB1Prescaler>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800

08003fcc <LL_RCC_GetAPB2Prescaler>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <LL_RCC_PLL_GetMainSource+0x18>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800

08004004 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <LL_RCC_PLL_GetN+0x18>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40023800 	.word	0x40023800

08004020 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <LL_RCC_PLL_GetP+0x18>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <LL_RCC_PLL_GetDivider+0x18>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800

08004058 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004060:	f000 f820 	bl	80040a4 <RCC_GetSystemClockFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f840 	bl	80040f4 <RCC_GetHCLKClockFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f84e 	bl	8004120 <RCC_GetPCLK1ClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f85a 	bl	8004148 <RCC_GetPCLK2ClockFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60da      	str	r2, [r3, #12]
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80040ae:	f7ff ff63 	bl	8003f78 <LL_RCC_GetSysClkSource>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d00c      	beq.n	80040d2 <RCC_GetSystemClockFreq+0x2e>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d80f      	bhi.n	80040dc <RCC_GetSystemClockFreq+0x38>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <RCC_GetSystemClockFreq+0x22>
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d003      	beq.n	80040cc <RCC_GetSystemClockFreq+0x28>
 80040c4:	e00a      	b.n	80040dc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <RCC_GetSystemClockFreq+0x48>)
 80040c8:	607b      	str	r3, [r7, #4]
      break;
 80040ca:	e00a      	b.n	80040e2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <RCC_GetSystemClockFreq+0x4c>)
 80040ce:	607b      	str	r3, [r7, #4]
      break;
 80040d0:	e007      	b.n	80040e2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80040d2:	2008      	movs	r0, #8
 80040d4:	f000 f84c 	bl	8004170 <RCC_PLL_GetFreqDomain_SYS>
 80040d8:	6078      	str	r0, [r7, #4]
      break;
 80040da:	e002      	b.n	80040e2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <RCC_GetSystemClockFreq+0x48>)
 80040de:	607b      	str	r3, [r7, #4]
      break;
 80040e0:	bf00      	nop
  }

  return frequency;
 80040e2:	687b      	ldr	r3, [r7, #4]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	007a1200 	.word	0x007a1200

080040f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040fc:	f7ff ff4a 	bl	8003f94 <LL_RCC_GetAHBPrescaler>
 8004100:	4603      	mov	r3, r0
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <RCC_GetHCLKClockFreq+0x28>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	40d3      	lsrs	r3, r2
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	0800e1fc 	.word	0x0800e1fc

08004120 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004128:	f7ff ff42 	bl	8003fb0 <LL_RCC_GetAPB1Prescaler>
 800412c:	4603      	mov	r3, r0
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <RCC_GetPCLK1ClockFreq+0x24>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	40d3      	lsrs	r3, r2
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	0800e20c 	.word	0x0800e20c

08004148 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004150:	f7ff ff3c 	bl	8003fcc <LL_RCC_GetAPB2Prescaler>
 8004154:	4603      	mov	r3, r0
 8004156:	0b5b      	lsrs	r3, r3, #13
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <RCC_GetPCLK2ClockFreq+0x24>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	40d3      	lsrs	r3, r2
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	0800e20c 	.word	0x0800e20c

08004170 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004184:	f7ff ff30 	bl	8003fe8 <LL_RCC_PLL_GetMainSource>
 8004188:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004196:	d003      	beq.n	80041a0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004198:	e005      	b.n	80041a6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800419c:	617b      	str	r3, [r7, #20]
      break;
 800419e:	e005      	b.n	80041ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80041a2:	617b      	str	r3, [r7, #20]
      break;
 80041a4:	e002      	b.n	80041ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80041a8:	617b      	str	r3, [r7, #20]
      break;
 80041aa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d113      	bne.n	80041da <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80041b2:	f7ff ff43 	bl	800403c <LL_RCC_PLL_GetDivider>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fbb3 f4f2 	udiv	r4, r3, r2
 80041be:	f7ff ff21 	bl	8004004 <LL_RCC_PLL_GetN>
 80041c2:	4603      	mov	r3, r0
 80041c4:	fb03 f404 	mul.w	r4, r3, r4
 80041c8:	f7ff ff2a 	bl	8004020 <LL_RCC_PLL_GetP>
 80041cc:	4603      	mov	r3, r0
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	3301      	adds	r3, #1
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041d8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80041da:	693b      	ldr	r3, [r7, #16]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	007a1200 	.word	0x007a1200

080041ec <LL_SPI_IsEnabled>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d101      	bne.n	8004204 <LL_SPI_IsEnabled+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_SPI_IsEnabled+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffd3 	bl	80041ec <LL_SPI_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d139      	bne.n	80042c0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004254:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	6811      	ldr	r1, [r2, #0]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	4311      	orrs	r1, r2
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	4311      	orrs	r1, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	68d2      	ldr	r2, [r2, #12]
 800426c:	4311      	orrs	r1, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	6912      	ldr	r2, [r2, #16]
 8004272:	4311      	orrs	r1, r2
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	6952      	ldr	r2, [r2, #20]
 8004278:	4311      	orrs	r1, r2
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	6992      	ldr	r2, [r2, #24]
 800427e:	4311      	orrs	r1, r2
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	69d2      	ldr	r2, [r2, #28]
 8004284:	4311      	orrs	r1, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	6a12      	ldr	r2, [r2, #32]
 800428a:	430a      	orrs	r2, r1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f023 0204 	bic.w	r2, r3, #4
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d105      	bne.n	80042bc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffab 	bl	8004212 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	61da      	str	r2, [r3, #28]
  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <LL_TIM_SetPrescaler>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <LL_TIM_SetAutoReload>:
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_TIM_SetRepetitionCounter>:
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_TIM_OC_SetCompareCH1>:
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	635a      	str	r2, [r3, #52]	; 0x34
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_TIM_OC_SetCompareCH2>:
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_TIM_OC_SetCompareCH3>:
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_TIM_OC_SetCompareCH4>:
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	615a      	str	r2, [r3, #20]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a31      	ldr	r2, [pc, #196]	; (8004494 <LL_TIM_Init+0xd8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <LL_TIM_Init+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00b      	beq.n	80043f4 <LL_TIM_Init+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <LL_TIM_Init+0xdc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <LL_TIM_Init+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <LL_TIM_Init+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <LL_TIM_Init+0x38>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <LL_TIM_Init+0xe4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d106      	bne.n	8004402 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a23      	ldr	r2, [pc, #140]	; (8004494 <LL_TIM_Init+0xd8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01b      	beq.n	8004442 <LL_TIM_Init+0x86>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d017      	beq.n	8004442 <LL_TIM_Init+0x86>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <LL_TIM_Init+0xdc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <LL_TIM_Init+0x86>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <LL_TIM_Init+0xe0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <LL_TIM_Init+0x86>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <LL_TIM_Init+0xe4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <LL_TIM_Init+0x86>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <LL_TIM_Init+0xe8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <LL_TIM_Init+0x86>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <LL_TIM_Init+0xec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <LL_TIM_Init+0x86>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <LL_TIM_Init+0xf0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d106      	bne.n	8004450 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff48 	bl	80042f2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff34 	bl	80042d6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <LL_TIM_Init+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d105      	bne.n	8004482 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff46 	bl	800430e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ff89 	bl	800439a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800

080044b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d027      	beq.n	8004518 <LL_TIM_OC_Init+0x68>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d82a      	bhi.n	8004526 <LL_TIM_OC_Init+0x76>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d6:	d018      	beq.n	800450a <LL_TIM_OC_Init+0x5a>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d822      	bhi.n	8004526 <LL_TIM_OC_Init+0x76>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d003      	beq.n	80044ee <LL_TIM_OC_Init+0x3e>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d007      	beq.n	80044fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80044ec:	e01b      	b.n	8004526 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f81f 	bl	8004534 <OC1Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]
      break;
 80044fa:	e015      	b.n	8004528 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f87e 	bl	8004600 <OC2Config>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	e00e      	b.n	8004528 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f8e1 	bl	80046d4 <OC3Config>
 8004512:	4603      	mov	r3, r0
 8004514:	75fb      	strb	r3, [r7, #23]
      break;
 8004516:	e007      	b.n	8004528 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f944 	bl	80047a8 <OC4Config>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	e000      	b.n	8004528 <LL_TIM_OC_Init+0x78>
      break;
 8004526:	bf00      	nop
  }

  return result;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 0202 	bic.w	r2, r3, #2
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <OC1Config+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d11e      	bne.n	80045d4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0208 	bic.w	r2, r3, #8
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0204 	bic.w	r2, r3, #4
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fe9f 	bl	800432a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40010000 	.word	0x40010000

08004600 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0210 	bic.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0220 	bic.w	r2, r3, #32
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0210 	bic.w	r2, r3, #16
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <OC2Config+0xd0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d11f      	bne.n	80046a8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	019b      	lsls	r3, r3, #6
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fe43 	bl	8004346 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40010000 	.word	0x40010000

080046d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <OC3Config+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d11f      	bne.n	800477a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	029b      	lsls	r3, r3, #10
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	015b      	lsls	r3, r3, #5
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fde8 	bl	8004362 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000

080047a8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	031b      	lsls	r3, r3, #12
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a0f      	ldr	r2, [pc, #60]	; (8004848 <OC4Config+0xa0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d107      	bne.n	8004820 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	019b      	lsls	r3, r3, #6
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fda3 	bl	800437e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40010000 	.word	0x40010000

0800484c <LL_USART_IsEnabled>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_USART_SetStopBitsLength>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	611a      	str	r2, [r3, #16]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_USART_SetHWFlowCtrl>:
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	615a      	str	r2, [r3, #20]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_USART_SetBaudRate>:
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b0c0      	sub	sp, #256	; 0x100
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048cc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80048d0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80048d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e0:	f040 810c 	bne.w	8004afc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80048e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	1891      	adds	r1, r2, r2
 80048fc:	6639      	str	r1, [r7, #96]	; 0x60
 80048fe:	415b      	adcs	r3, r3
 8004900:	667b      	str	r3, [r7, #100]	; 0x64
 8004902:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004906:	4621      	mov	r1, r4
 8004908:	eb12 0801 	adds.w	r8, r2, r1
 800490c:	4629      	mov	r1, r5
 800490e:	eb43 0901 	adc.w	r9, r3, r1
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004926:	4690      	mov	r8, r2
 8004928:	4699      	mov	r9, r3
 800492a:	4623      	mov	r3, r4
 800492c:	eb18 0303 	adds.w	r3, r8, r3
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004934:	462b      	mov	r3, r5
 8004936:	eb49 0303 	adc.w	r3, r9, r3
 800493a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800493e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004942:	2200      	movs	r2, #0
 8004944:	469a      	mov	sl, r3
 8004946:	4693      	mov	fp, r2
 8004948:	eb1a 030a 	adds.w	r3, sl, sl
 800494c:	65bb      	str	r3, [r7, #88]	; 0x58
 800494e:	eb4b 030b 	adc.w	r3, fp, fp
 8004952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004954:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800495c:	f7fc f97c 	bl	8000c58 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <LL_USART_SetBaudRate+0x238>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	b29b      	uxth	r3, r3
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	b29c      	uxth	r4, r3
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800497c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004980:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	6539      	str	r1, [r7, #80]	; 0x50
 800498c:	415b      	adcs	r3, r3
 800498e:	657b      	str	r3, [r7, #84]	; 0x54
 8004990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004994:	4641      	mov	r1, r8
 8004996:	1851      	adds	r1, r2, r1
 8004998:	64b9      	str	r1, [r7, #72]	; 0x48
 800499a:	4649      	mov	r1, r9
 800499c:	414b      	adcs	r3, r1
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80049ac:	4659      	mov	r1, fp
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4651      	mov	r1, sl
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049de:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80049e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	643b      	str	r3, [r7, #64]	; 0x40
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	647b      	str	r3, [r7, #68]	; 0x44
 80049f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80049fc:	f7fc f92c 	bl	8000c58 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4611      	mov	r1, r2
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <LL_USART_SetBaudRate+0x238>)
 8004a08:	fba3 2301 	umull	r2, r3, r3, r1
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2264      	movs	r2, #100	; 0x64
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	1acb      	subs	r3, r1, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <LL_USART_SetBaudRate+0x238>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4423      	add	r3, r4
 8004a32:	b29c      	uxth	r4, r3
 8004a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a42:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	1891      	adds	r1, r2, r2
 8004a4c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a56:	4641      	mov	r1, r8
 8004a58:	1851      	adds	r1, r2, r1
 8004a5a:	6339      	str	r1, [r7, #48]	; 0x30
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	414b      	adcs	r3, r1
 8004a60:	637b      	str	r3, [r7, #52]	; 0x34
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a6e:	4659      	mov	r1, fp
 8004a70:	00cb      	lsls	r3, r1, #3
 8004a72:	4651      	mov	r1, sl
 8004a74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a78:	4651      	mov	r1, sl
 8004a7a:	00ca      	lsls	r2, r1, #3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4603      	mov	r3, r0
 8004a82:	4642      	mov	r2, r8
 8004a84:	189b      	adds	r3, r3, r2
 8004a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	eb42 0303 	adc.w	r3, r2, r3
 8004a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004aa4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	18db      	adds	r3, r3, r3
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	4613      	mov	r3, r2
 8004ab0:	eb42 0303 	adc.w	r3, r2, r3
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004abe:	f7fc f8cb 	bl	8000c58 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <LL_USART_SetBaudRate+0x238>)
 8004ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2164      	movs	r1, #100	; 0x64
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	3332      	adds	r3, #50	; 0x32
 8004ada:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <LL_USART_SetBaudRate+0x238>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	4423      	add	r3, r4
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af4:	609a      	str	r2, [r3, #8]
}
 8004af6:	e108      	b.n	8004d0a <LL_USART_SetBaudRate+0x44a>
 8004af8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004afc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b06:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b0a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004b0e:	4642      	mov	r2, r8
 8004b10:	464b      	mov	r3, r9
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	6239      	str	r1, [r7, #32]
 8004b16:	415b      	adcs	r3, r3
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b1e:	4641      	mov	r1, r8
 8004b20:	1854      	adds	r4, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb43 0501 	adc.w	r5, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	00eb      	lsls	r3, r5, #3
 8004b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b36:	00e2      	lsls	r2, r4, #3
 8004b38:	4614      	mov	r4, r2
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	18e3      	adds	r3, r4, r3
 8004b40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b44:	464b      	mov	r3, r9
 8004b46:	eb45 0303 	adc.w	r3, r5, r3
 8004b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004b68:	4629      	mov	r1, r5
 8004b6a:	008b      	lsls	r3, r1, #2
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b72:	4621      	mov	r1, r4
 8004b74:	008a      	lsls	r2, r1, #2
 8004b76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004b7a:	f7fc f86d 	bl	8000c58 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <LL_USART_SetBaudRate+0x458>)
 8004b84:	fba3 2302 	umull	r2, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	b29c      	uxth	r4, r3
 8004b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b9e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	61b9      	str	r1, [r7, #24]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1851      	adds	r1, r2, r1
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	4649      	mov	r1, r9
 8004bba:	414b      	adcs	r3, r1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bca:	4659      	mov	r1, fp
 8004bcc:	00cb      	lsls	r3, r1, #3
 8004bce:	4651      	mov	r1, sl
 8004bd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	00ca      	lsls	r2, r1, #3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4642      	mov	r2, r8
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be6:	464b      	mov	r3, r9
 8004be8:	460a      	mov	r2, r1
 8004bea:	eb42 0303 	adc.w	r3, r2, r3
 8004bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bfc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	008b      	lsls	r3, r1, #2
 8004c10:	4641      	mov	r1, r8
 8004c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c16:	4641      	mov	r1, r8
 8004c18:	008a      	lsls	r2, r1, #2
 8004c1a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004c1e:	f7fc f81b 	bl	8000c58 <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <LL_USART_SetBaudRate+0x458>)
 8004c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2264      	movs	r2, #100	; 0x64
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	1acb      	subs	r3, r1, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	; 0x32
 8004c3c:	4a36      	ldr	r2, [pc, #216]	; (8004d18 <LL_USART_SetBaudRate+0x458>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	4423      	add	r3, r4
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c54:	2200      	movs	r2, #0
 8004c56:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c58:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c5a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c5e:	4642      	mov	r2, r8
 8004c60:	464b      	mov	r3, r9
 8004c62:	1891      	adds	r1, r2, r2
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	415b      	adcs	r3, r3
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c6e:	4641      	mov	r1, r8
 8004c70:	1851      	adds	r1, r2, r1
 8004c72:	6039      	str	r1, [r7, #0]
 8004c74:	4649      	mov	r1, r9
 8004c76:	414b      	adcs	r3, r1
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c86:	4659      	mov	r1, fp
 8004c88:	00cb      	lsls	r3, r1, #3
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c90:	4651      	mov	r1, sl
 8004c92:	00ca      	lsls	r2, r1, #3
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	677b      	str	r3, [r7, #116]	; 0x74
 8004caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cae:	2200      	movs	r2, #0
 8004cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cca:	4641      	mov	r1, r8
 8004ccc:	008a      	lsls	r2, r1, #2
 8004cce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004cd2:	f7fb ffc1 	bl	8000c58 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <LL_USART_SetBaudRate+0x458>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <LL_USART_SetBaudRate+0x458>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	4423      	add	r3, r4
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d08:	609a      	str	r2, [r3, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	51eb851f 	.word	0x51eb851f

08004d1c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fd8c 	bl	800484c <LL_USART_IsEnabled>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d149      	bne.n	8004dce <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d42:	f023 030c 	bic.w	r3, r3, #12
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	6851      	ldr	r1, [r2, #4]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	68d2      	ldr	r2, [r2, #12]
 8004d4e:	4311      	orrs	r1, r2
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	6912      	ldr	r2, [r2, #16]
 8004d54:	4311      	orrs	r1, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	6992      	ldr	r2, [r2, #24]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fd83 	bl	8004874 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fd90 	bl	800489a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff f96a 	bl	8004058 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <LL_USART_Init+0xbc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d102      	bne.n	8004d92 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e00c      	b.n	8004dac <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <LL_USART_Init+0xc0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d102      	bne.n	8004da0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	e005      	b.n	8004dac <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <LL_USART_Init+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fd79 	bl	80048c0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40011400 	.word	0x40011400

08004de4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <LL_InitTick+0x30>)
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <LL_InitTick+0x30>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <LL_InitTick+0x30>)
 8004e04:	2205      	movs	r2, #5
 8004e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e010 	.word	0xe000e010

08004e18 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004e20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ffdd 	bl	8004de4 <LL_InitTick>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <LL_SetSystemCoreClock+0x1c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6013      	str	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000000 	.word	0x20000000

08004e54 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	_file = file;
 8004e60:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <__Custom_Exception_Set_Message+0x2c>)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6013      	str	r3, [r2, #0]
	_line = line;
 8004e66:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <__Custom_Exception_Set_Message+0x30>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6013      	str	r3, [r2, #0]
	_message = message;
 8004e6c:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <__Custom_Exception_Set_Message+0x34>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	200002bc 	.word	0x200002bc
 8004e84:	200002c0 	.word	0x200002c0
 8004e88:	200002c4 	.word	0x200002c4

08004e8c <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8004e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e94:	4803      	ldr	r0, [pc, #12]	; (8004ea4 <Custom_FileSystem_Load+0x18>)
 8004e96:	f000 f851 	bl	8004f3c <Custom_Flash_Read>
	filesystemLoaded = true;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <Custom_FileSystem_Load+0x1c>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	701a      	strb	r2, [r3, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200002c8 	.word	0x200002c8
 8004ea8:	200012c9 	.word	0x200012c9

08004eac <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <Custom_Flash_Check_Error+0x78>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <Custom_Flash_Check_Error+0x24>
 8004ec2:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <Custom_Flash_Check_Error+0x7c>)
 8004ec4:	2113      	movs	r1, #19
 8004ec6:	4819      	ldr	r0, [pc, #100]	; (8004f2c <Custom_Flash_Check_Error+0x80>)
 8004ec8:	f7ff ffc4 	bl	8004e54 <__Custom_Exception_Set_Message>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e024      	b.n	8004f1a <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d006      	beq.n	8004ee8 <Custom_Flash_Check_Error+0x3c>
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <Custom_Flash_Check_Error+0x84>)
 8004edc:	2114      	movs	r1, #20
 8004ede:	4813      	ldr	r0, [pc, #76]	; (8004f2c <Custom_Flash_Check_Error+0x80>)
 8004ee0:	f7ff ffb8 	bl	8004e54 <__Custom_Exception_Set_Message>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e018      	b.n	8004f1a <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <Custom_Flash_Check_Error+0x54>
 8004ef2:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <Custom_Flash_Check_Error+0x88>)
 8004ef4:	2115      	movs	r1, #21
 8004ef6:	480d      	ldr	r0, [pc, #52]	; (8004f2c <Custom_Flash_Check_Error+0x80>)
 8004ef8:	f7ff ffac 	bl	8004e54 <__Custom_Exception_Set_Message>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e00c      	b.n	8004f1a <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <Custom_Flash_Check_Error+0x6c>
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <Custom_Flash_Check_Error+0x8c>)
 8004f0c:	2116      	movs	r1, #22
 8004f0e:	4807      	ldr	r0, [pc, #28]	; (8004f2c <Custom_Flash_Check_Error+0x80>)
 8004f10:	f7ff ffa0 	bl	8004e54 <__Custom_Exception_Set_Message>
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <Custom_Flash_Check_Error+0x6e>

	return true;
 8004f18:	2301      	movs	r3, #1
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	0800d918 	.word	0x0800d918
 8004f2c:	0800d934 	.word	0x0800d934
 8004f30:	0800d95c 	.word	0x0800d95c
 8004f34:	0800d97c 	.word	0x0800d97c
 8004f38:	0800d99c 	.word	0x0800d99c

08004f3c <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4c:	d306      	bcc.n	8004f5c <Custom_Flash_Read+0x20>
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <Custom_Flash_Read+0x5c>)
 8004f50:	211d      	movs	r1, #29
 8004f52:	4812      	ldr	r0, [pc, #72]	; (8004f9c <Custom_Flash_Read+0x60>)
 8004f54:	f7ff ff7e 	bl	8004e54 <__Custom_Exception_Set_Message>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e019      	b.n	8004f90 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e00f      	b.n	8004f82 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004f68:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004f6c:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	440b      	add	r3, r1
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d8eb      	bhi.n	8004f62 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8004f8a:	f7ff ff8f 	bl	8004eac <Custom_Flash_Check_Error>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0800d9b4 	.word	0x0800d9b4
 8004f9c:	0800d934 	.word	0x0800d934

08004fa0 <LL_SPI_Enable>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_SPI_SetTransferDirection>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d101      	bne.n	8004ffe <LL_SPI_IsActiveFlag_TXE+0x18>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d101      	bne.n	8005024 <LL_SPI_IsActiveFlag_BSY+0x18>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	330c      	adds	r3, #12
 8005042:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <Custom_GPIO_Set>:
		uint32_t value) {
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	43db      	mvns	r3, r3
 800506a:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <Custom_GPIO_Set+0x22>
 8005072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005076:	e000      	b.n	800507a <Custom_GPIO_Set+0x24>
 8005078:	2100      	movs	r1, #0
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	400b      	ands	r3, r1
 800507e:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	615a      	str	r2, [r3, #20]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 800509a:	bf00      	nop
 800509c:	480b      	ldr	r0, [pc, #44]	; (80050cc <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800509e:	f7ff ffa2 	bl	8004fe6 <LL_SPI_IsActiveFlag_TXE>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f9      	beq.n	800509c <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	4619      	mov	r1, r3
 80050ac:	4807      	ldr	r0, [pc, #28]	; (80050cc <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 80050ae:	f7ff ffc0 	bl	8005032 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 80050b2:	bf00      	nop
 80050b4:	4805      	ldr	r0, [pc, #20]	; (80050cc <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 80050b6:	f7ff ffa9 	bl	800500c <LL_SPI_IsActiveFlag_BSY>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f9      	bne.n	80050b4 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40003800 	.word	0x40003800

080050d0 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 80050da:	2200      	movs	r2, #0
 80050dc:	2110      	movs	r1, #16
 80050de:	4811      	ldr	r0, [pc, #68]	; (8005124 <Custom_OLED_Write_Command+0x54>)
 80050e0:	f7ff ffb9 	bl	8005056 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 80050e4:	2200      	movs	r2, #0
 80050e6:	2104      	movs	r1, #4
 80050e8:	480f      	ldr	r0, [pc, #60]	; (8005128 <Custom_OLED_Write_Command+0x58>)
 80050ea:	f7ff ffb4 	bl	8005056 <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e009      	b.n	8005108 <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff ffc7 	bl	8005090 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d8f1      	bhi.n	80050f4 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8005110:	2201      	movs	r2, #1
 8005112:	2104      	movs	r1, #4
 8005114:	4804      	ldr	r0, [pc, #16]	; (8005128 <Custom_OLED_Write_Command+0x58>)
 8005116:	f7ff ff9e 	bl	8005056 <Custom_GPIO_Set>
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020000 	.word	0x40020000
 8005128:	40020400 	.word	0x40020400

0800512c <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 8005136:	2201      	movs	r2, #1
 8005138:	2110      	movs	r1, #16
 800513a:	4817      	ldr	r0, [pc, #92]	; (8005198 <Custom_OLED_Write_Data+0x6c>)
 800513c:	f7ff ff8b 	bl	8005056 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8005140:	2200      	movs	r2, #0
 8005142:	2104      	movs	r1, #4
 8005144:	4815      	ldr	r0, [pc, #84]	; (800519c <Custom_OLED_Write_Data+0x70>)
 8005146:	f7ff ff86 	bl	8005056 <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e016      	b.n	800517e <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	b29b      	uxth	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ff95 	bl	8005090 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ff8c 	bl	8005090 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d8e4      	bhi.n	8005150 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8005186:	2201      	movs	r2, #1
 8005188:	2104      	movs	r1, #4
 800518a:	4804      	ldr	r0, [pc, #16]	; (800519c <Custom_OLED_Write_Data+0x70>)
 800518c:	f7ff ff63 	bl	8005056 <Custom_GPIO_Set>
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40020000 	.word	0x40020000
 800519c:	40020400 	.word	0x40020400

080051a0 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	71fb      	strb	r3, [r7, #7]
 80051b2:	4603      	mov	r3, r0
 80051b4:	71bb      	strb	r3, [r7, #6]
 80051b6:	460b      	mov	r3, r1
 80051b8:	717b      	strb	r3, [r7, #5]
 80051ba:	4613      	mov	r3, r2
 80051bc:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 80051be:	2315      	movs	r3, #21
 80051c0:	723b      	strb	r3, [r7, #8]
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	727b      	strb	r3, [r7, #9]
 80051c6:	797b      	ldrb	r3, [r7, #5]
 80051c8:	72bb      	strb	r3, [r7, #10]
 80051ca:	2375      	movs	r3, #117	; 0x75
 80051cc:	72fb      	strb	r3, [r7, #11]
 80051ce:	79bb      	ldrb	r3, [r7, #6]
 80051d0:	733b      	strb	r3, [r7, #12]
 80051d2:	793b      	ldrb	r3, [r7, #4]
 80051d4:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	2106      	movs	r1, #6
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff ff77 	bl	80050d0 <Custom_OLED_Write_Command>
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd90      	pop	{r4, r7, pc}

080051ea <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 80051f0:	2300      	movs	r3, #0
 80051f2:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 80051f4:	233f      	movs	r3, #63	; 0x3f
 80051f6:	225f      	movs	r2, #95	; 0x5f
 80051f8:	2100      	movs	r1, #0
 80051fa:	2000      	movs	r0, #0
 80051fc:	f7ff ffd0 	bl	80051a0 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8005200:	2300      	movs	r3, #0
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e007      	b.n	8005216 <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 8005206:	1cbb      	adds	r3, r7, #2
 8005208:	2101      	movs	r1, #1
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff8e 	bl	800512c <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3301      	adds	r3, #1
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800521c:	dbf3      	blt.n	8005206 <Custom_OLED_Clear+0x1c>
    }
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <Custom_OLED_Init>:

void Custom_OLED_Init() {
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 800522e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005232:	480e      	ldr	r0, [pc, #56]	; (800526c <Custom_OLED_Init+0x44>)
 8005234:	f7ff fec4 	bl	8004fc0 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <Custom_OLED_Init+0x44>)
 800523a:	f7ff feb1 	bl	8004fa0 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <Custom_OLED_Init+0x48>)
 8005240:	463c      	mov	r4, r7
 8005242:	461d      	mov	r5, r3
 8005244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800524a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800524c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005250:	6020      	str	r0, [r4, #0]
 8005252:	3404      	adds	r4, #4
 8005254:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 8005256:	463b      	mov	r3, r7
 8005258:	2125      	movs	r1, #37	; 0x25
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff38 	bl	80050d0 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8005260:	f7ff ffc3 	bl	80051ea <Custom_OLED_Clear>
}
 8005264:	bf00      	nop
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	40003800 	.word	0x40003800
 8005270:	0800d9fc 	.word	0x0800d9fc

08005274 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4623      	mov	r3, r4
 8005284:	71fb      	strb	r3, [r7, #7]
 8005286:	4603      	mov	r3, r0
 8005288:	80bb      	strh	r3, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	71bb      	strb	r3, [r7, #6]
 800528e:	4613      	mov	r3, r2
 8005290:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8005292:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005296:	461a      	mov	r2, r3
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4413      	add	r3, r2
 800529c:	b2da      	uxtb	r2, r3
 800529e:	79bb      	ldrb	r3, [r7, #6]
 80052a0:	4413      	add	r3, r2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 80052a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	4413      	add	r3, r2
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b5f      	cmp	r3, #95	; 0x5f
 80052be:	d802      	bhi.n	80052c6 <Custom_OLED_Putchar+0x52>
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	2b3f      	cmp	r3, #63	; 0x3f
 80052c4:	d902      	bls.n	80052cc <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ca:	e06a      	b.n	80053a2 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	78f9      	ldrb	r1, [r7, #3]
 80052d2:	79b8      	ldrb	r0, [r7, #6]
 80052d4:	f7ff ff64 	bl	80051a0 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 80052d8:	79fa      	ldrb	r2, [r7, #7]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	4a32      	ldr	r2, [pc, #200]	; (80053ac <Custom_OLED_Putchar+0x138>)
 80052e2:	4413      	add	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e048      	b.n	800537e <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	e03f      	b.n	8005372 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e034      	b.n	8005362 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e029      	b.n	8005352 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	4413      	add	r3, r2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fa42 f303 	asr.w	r3, r2, r3
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <Custom_OLED_Putchar+0xa6>
 8005316:	88b8      	ldrh	r0, [r7, #4]
 8005318:	e000      	b.n	800531c <Custom_OLED_Putchar+0xa8>
 800531a:	2000      	movs	r0, #0
 800531c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005320:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005324:	69f9      	ldr	r1, [r7, #28]
 8005326:	fb02 f101 	mul.w	r1, r2, r1
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	440a      	add	r2, r1
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005338:	69b9      	ldr	r1, [r7, #24]
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	441a      	add	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <Custom_OLED_Putchar+0x13c>)
 8005346:	4601      	mov	r1, r0
 8005348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3301      	adds	r3, #1
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	dbd0      	blt.n	80052fe <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3301      	adds	r3, #1
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	429a      	cmp	r2, r3
 800536a:	dbc5      	blt.n	80052f8 <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	3301      	adds	r3, #1
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b07      	cmp	r3, #7
 8005376:	ddbc      	ble.n	80052f2 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b04      	cmp	r3, #4
 8005382:	ddb3      	ble.n	80052ec <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8005384:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005388:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800538c:	fb03 f202 	mul.w	r2, r3, r2
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4619      	mov	r1, r3
 800539a:	4805      	ldr	r0, [pc, #20]	; (80053b0 <Custom_OLED_Putchar+0x13c>)
 800539c:	f7ff fec6 	bl	800512c <Custom_OLED_Write_Data>
	return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	; 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}
 80053aa:	bf00      	nop
 80053ac:	0800e214 	.word	0x0800e214
 80053b0:	200012cc 	.word	0x200012cc

080053b4 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 80053b4:	b40f      	push	{r0, r1, r2, r3}
 80053b6:	b590      	push	{r4, r7, lr}
 80053b8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80053bc:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 80053ca:	f507 720d 	add.w	r2, r7, #564	; 0x234
 80053ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80053d2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80053d6:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 80053d8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80053dc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80053e0:	f107 0008 	add.w	r0, r7, #8
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80053ea:	f006 f93d 	bl	800b668 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80053f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053f8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 8005402:	e226      	b.n	8005852 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 8005404:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005408:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800540c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005410:	4413      	add	r3, r2
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b2f      	cmp	r3, #47	; 0x2f
 8005416:	f040 81f7 	bne.w	8005808 <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 800541a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800541e:	3301      	adds	r3, #1
 8005420:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005424:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005428:	5cd3      	ldrb	r3, [r2, r3]
 800542a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 800542e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005432:	2b2f      	cmp	r3, #47	; 0x2f
 8005434:	d105      	bne.n	8005442 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 8005436:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800543a:	3301      	adds	r3, #1
 800543c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005440:	e1e2      	b.n	8005808 <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 8005442:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005446:	3b23      	subs	r3, #35	; 0x23
 8005448:	2b56      	cmp	r3, #86	; 0x56
 800544a:	f200 81d7 	bhi.w	80057fc <Custom_OLED_Printf+0x448>
 800544e:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <Custom_OLED_Printf+0xa0>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	0800566d 	.word	0x0800566d
 8005458:	080057fd 	.word	0x080057fd
 800545c:	080057fd 	.word	0x080057fd
 8005460:	080057fd 	.word	0x080057fd
 8005464:	080057fd 	.word	0x080057fd
 8005468:	080057fd 	.word	0x080057fd
 800546c:	080057fd 	.word	0x080057fd
 8005470:	080057fd 	.word	0x080057fd
 8005474:	080057fd 	.word	0x080057fd
 8005478:	080057fd 	.word	0x080057fd
 800547c:	080057fd 	.word	0x080057fd
 8005480:	080057fd 	.word	0x080057fd
 8005484:	080057fd 	.word	0x080057fd
 8005488:	080055b1 	.word	0x080055b1
 800548c:	080055b1 	.word	0x080055b1
 8005490:	080055b1 	.word	0x080055b1
 8005494:	080055b1 	.word	0x080055b1
 8005498:	080055b1 	.word	0x080055b1
 800549c:	080055b1 	.word	0x080055b1
 80054a0:	080055b1 	.word	0x080055b1
 80054a4:	080057fd 	.word	0x080057fd
 80054a8:	080057fd 	.word	0x080057fd
 80054ac:	080057fd 	.word	0x080057fd
 80054b0:	080057fd 	.word	0x080057fd
 80054b4:	080057fd 	.word	0x080057fd
 80054b8:	080057fd 	.word	0x080057fd
 80054bc:	080057fd 	.word	0x080057fd
 80054c0:	080057fd 	.word	0x080057fd
 80054c4:	080057fd 	.word	0x080057fd
 80054c8:	080057fd 	.word	0x080057fd
 80054cc:	0800565d 	.word	0x0800565d
 80054d0:	080057fd 	.word	0x080057fd
 80054d4:	080057fd 	.word	0x080057fd
 80054d8:	080057fd 	.word	0x080057fd
 80054dc:	080057fd 	.word	0x080057fd
 80054e0:	080057fd 	.word	0x080057fd
 80054e4:	080057fd 	.word	0x080057fd
 80054e8:	080057fd 	.word	0x080057fd
 80054ec:	080057fd 	.word	0x080057fd
 80054f0:	080057fd 	.word	0x080057fd
 80054f4:	0800564b 	.word	0x0800564b
 80054f8:	080057fd 	.word	0x080057fd
 80054fc:	080057fd 	.word	0x080057fd
 8005500:	080057fd 	.word	0x080057fd
 8005504:	080057fd 	.word	0x080057fd
 8005508:	080057fd 	.word	0x080057fd
 800550c:	080057fd 	.word	0x080057fd
 8005510:	080057fd 	.word	0x080057fd
 8005514:	080057fd 	.word	0x080057fd
 8005518:	080057fd 	.word	0x080057fd
 800551c:	080057fd 	.word	0x080057fd
 8005520:	080057fd 	.word	0x080057fd
 8005524:	080057fd 	.word	0x080057fd
 8005528:	080057fd 	.word	0x080057fd
 800552c:	080057fd 	.word	0x080057fd
 8005530:	080057fd 	.word	0x080057fd
 8005534:	080057fd 	.word	0x080057fd
 8005538:	080057fd 	.word	0x080057fd
 800553c:	080057fd 	.word	0x080057fd
 8005540:	080057fd 	.word	0x080057fd
 8005544:	080057fd 	.word	0x080057fd
 8005548:	080057fd 	.word	0x080057fd
 800554c:	08005665 	.word	0x08005665
 8005550:	080055e9 	.word	0x080055e9
 8005554:	080055fb 	.word	0x080055fb
 8005558:	080057fd 	.word	0x080057fd
 800555c:	080057fd 	.word	0x080057fd
 8005560:	080057fd 	.word	0x080057fd
 8005564:	080055df 	.word	0x080055df
 8005568:	080057fd 	.word	0x080057fd
 800556c:	080057fd 	.word	0x080057fd
 8005570:	080057fd 	.word	0x080057fd
 8005574:	08005655 	.word	0x08005655
 8005578:	08005619 	.word	0x08005619
 800557c:	08005605 	.word	0x08005605
 8005580:	080057fd 	.word	0x080057fd
 8005584:	0800560f 	.word	0x0800560f
 8005588:	08005641 	.word	0x08005641
 800558c:	080057fd 	.word	0x080057fd
 8005590:	080055d5 	.word	0x080055d5
 8005594:	0800562d 	.word	0x0800562d
 8005598:	08005623 	.word	0x08005623
 800559c:	080057fd 	.word	0x080057fd
 80055a0:	08005637 	.word	0x08005637
 80055a4:	080055cb 	.word	0x080055cb
 80055a8:	080057fd 	.word	0x080057fd
 80055ac:	080055f1 	.word	0x080055f1
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 80055b6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80055ba:	3b30      	subs	r3, #48	; 0x30
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	00d2      	lsls	r2, r2, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 80055c8:	e118      	b.n	80057fc <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 80055ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ce:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80055d2:	e113      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 80055d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055d8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80055dc:	e10e      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 80055de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80055e2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80055e6:	e109      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 80055e8:	231f      	movs	r3, #31
 80055ea:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80055ee:	e105      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80055f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80055f4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80055f8:	e100      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80055fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80055fe:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005602:	e0fb      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 8005604:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005608:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800560c:	e0f6      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 800560e:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8005612:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005616:	e0f1      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 8005618:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 800561c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005620:	e0ec      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 8005622:	f240 73ef 	movw	r3, #2031	; 0x7ef
 8005626:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800562a:	e0e7      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 800562c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005630:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005634:	e0e2      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 8005636:	f647 031f 	movw	r3, #30751	; 0x781f
 800563a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800563e:	e0dd      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 8005640:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8005644:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005648:	e0d8      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 800564a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800564e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005652:	e0d3      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8005654:	2300      	movs	r3, #0
 8005656:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800565a:	e0cf      	b.n	80057fc <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 800565c:	2302      	movs	r3, #2
 800565e:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8005662:	e0cb      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800566a:	e0c7      	b.n	80057fc <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005678:	e099      	b.n	80057ae <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 800567a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800567e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005682:	4413      	add	r3, r2
 8005684:	3302      	adds	r3, #2
 8005686:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800568a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d924      	bls.n	80056de <Custom_OLED_Printf+0x32a>
 8005694:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005698:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800569c:	4413      	add	r3, r2
 800569e:	3302      	adds	r3, #2
 80056a0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80056a4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80056a8:	5cd3      	ldrb	r3, [r2, r3]
 80056aa:	2b46      	cmp	r3, #70	; 0x46
 80056ac:	d817      	bhi.n	80056de <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 80056ae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 80056b8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80056bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80056c0:	4413      	add	r3, r2
 80056c2:	3302      	adds	r3, #2
 80056c4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80056c8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056d4:	4413      	add	r3, r2
 80056d6:	3b37      	subs	r3, #55	; 0x37
 80056d8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80056dc:	e062      	b.n	80057a4 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 80056de:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80056e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80056e6:	4413      	add	r3, r2
 80056e8:	3302      	adds	r3, #2
 80056ea:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80056ee:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	2b60      	cmp	r3, #96	; 0x60
 80056f6:	d924      	bls.n	8005742 <Custom_OLED_Printf+0x38e>
 80056f8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80056fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005700:	4413      	add	r3, r2
 8005702:	3302      	adds	r3, #2
 8005704:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005708:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800570c:	5cd3      	ldrb	r3, [r2, r3]
 800570e:	2b66      	cmp	r3, #102	; 0x66
 8005710:	d817      	bhi.n	8005742 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 8005712:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 800571c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005720:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005724:	4413      	add	r3, r2
 8005726:	3302      	adds	r3, #2
 8005728:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800572c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005730:	5cd3      	ldrb	r3, [r2, r3]
 8005732:	461a      	mov	r2, r3
 8005734:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005738:	4413      	add	r3, r2
 800573a:	3b57      	subs	r3, #87	; 0x57
 800573c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005740:	e030      	b.n	80057a4 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 8005742:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005746:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800574a:	4413      	add	r3, r2
 800574c:	3302      	adds	r3, #2
 800574e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005752:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	2b2f      	cmp	r3, #47	; 0x2f
 800575a:	d923      	bls.n	80057a4 <Custom_OLED_Printf+0x3f0>
 800575c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005760:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005764:	4413      	add	r3, r2
 8005766:	3302      	adds	r3, #2
 8005768:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800576c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	2b39      	cmp	r3, #57	; 0x39
 8005774:	d816      	bhi.n	80057a4 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 8005776:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8005780:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005784:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005788:	4413      	add	r3, r2
 800578a:	3302      	adds	r3, #2
 800578c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005790:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005794:	5cd3      	ldrb	r3, [r2, r3]
 8005796:	461a      	mov	r2, r3
 8005798:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800579c:	4413      	add	r3, r2
 800579e:	3b30      	subs	r3, #48	; 0x30
 80057a0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 80057a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80057a8:	3301      	adds	r3, #1
 80057aa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80057ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	f67f af61 	bls.w	800567a <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 80057b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057c4:	f023 0307 	bic.w	r3, r3, #7
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 80057f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80057f4:	3306      	adds	r3, #6
 80057f6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80057fa:	bf00      	nop
				}

				cursor += 2;
 80057fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005800:	3302      	adds	r3, #2
 8005802:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 8005806:	e024      	b.n	8005852 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 8005808:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800580c:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8005810:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005814:	4413      	add	r3, r2
 8005816:	7818      	ldrb	r0, [r3, #0]
 8005818:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 800581c:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8005820:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8005824:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	4623      	mov	r3, r4
 800582c:	f7ff fd22 	bl	8005274 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 8005830:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8005834:	461a      	mov	r2, r3
 8005836:	0052      	lsls	r2, r2, #1
 8005838:	4413      	add	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8005842:	4413      	add	r3, r2
 8005844:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 8005848:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800584c:	3301      	adds	r3, #1
 800584e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 8005852:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005856:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800585a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800585e:	4413      	add	r3, r2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f47f adce 	bne.w	8005404 <Custom_OLED_Printf+0x50>
	}
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8005870:	46bd      	mov	sp, r7
 8005872:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005876:	b004      	add	sp, #16
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop

0800587c <LL_GPIO_ReadInputPort>:
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
	return uwTick;
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <Custom_Delay_Get_SysTick+0x14>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	200002a4 	.word	0x200002a4

080058ac <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 80058ca:	f7ff ffe3 	bl	8005894 <Custom_Delay_Get_SysTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	741a      	strb	r2, [r3, #16]
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ffc3 	bl	800587c <LL_GPIO_ReadInputPort>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bf0c      	ite	eq
 8005902:	2301      	moveq	r3, #1
 8005904:	2300      	movne	r3, #0
 8005906:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 800590c:	f7ff ffc2 	bl	8005894 <Custom_Delay_Get_SysTick>
 8005910:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7c1b      	ldrb	r3, [r3, #16]
 8005916:	3b01      	subs	r3, #1
 8005918:	2b07      	cmp	r3, #7
 800591a:	d873      	bhi.n	8005a04 <Custom_Switch_State_Machine+0x120>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <Custom_Switch_State_Machine+0x40>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005945 	.word	0x08005945
 8005928:	08005959 	.word	0x08005959
 800592c:	08005a05 	.word	0x08005a05
 8005930:	0800598f 	.word	0x0800598f
 8005934:	08005a05 	.word	0x08005a05
 8005938:	08005a05 	.word	0x08005a05
 800593c:	08005a05 	.word	0x08005a05
 8005940:	080059d9 	.word	0x080059d9

		case LONG_OFF:
			if (currentPushed) {
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d05b      	beq.n	8005a02 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2250      	movs	r2, #80	; 0x50
 8005954:	609a      	str	r2, [r3, #8]
			}
			break;
 8005956:	e054      	b.n	8005a02 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	429a      	cmp	r2, r3
 8005966:	d808      	bhi.n	800597a <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2204      	movs	r2, #4
 8005970:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005978:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1acb      	subs	r3, r1, r3
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
			break;
 800598c:	e03a      	b.n	8005a04 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	f083 0301 	eor.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d006      	beq.n	80059a8 <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2208      	movs	r2, #8
 800599e:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2250      	movs	r2, #80	; 0x50
 80059a4:	609a      	str	r2, [r3, #8]
				break;
 80059a6:	e02d      	b.n	8005a04 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	1acb      	subs	r3, r1, r3
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d805      	bhi.n	80059c4 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059c2:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68d9      	ldr	r1, [r3, #12]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	1acb      	subs	r3, r1, r3
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
			break;
 80059d6:	e015      	b.n	8005a04 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	1acb      	subs	r3, r1, r3
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d802      	bhi.n	80059ee <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68d9      	ldr	r1, [r3, #12]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1acb      	subs	r3, r1, r3
 80059fa:	441a      	add	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
			break;
 8005a00:	e000      	b.n	8005a04 <Custom_Switch_State_Machine+0x120>
			break;
 8005a02:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	60da      	str	r2, [r3, #12]

	return pushEvent;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2, sw3;
	if (!isInitialized) {
 8005a1a:	4b59      	ldr	r3, [pc, #356]	; (8005b80 <Custom_Switch_Read+0x16c>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f083 0301 	eor.w	r3, r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d014      	beq.n	8005a52 <Custom_Switch_Read+0x3e>
		isInitialized = true;
 8005a28:	4b55      	ldr	r3, [pc, #340]	; (8005b80 <Custom_Switch_Read+0x16c>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 8005a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a32:	4954      	ldr	r1, [pc, #336]	; (8005b84 <Custom_Switch_Read+0x170>)
 8005a34:	4854      	ldr	r0, [pc, #336]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005a36:	f7ff ff39 	bl	80058ac <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 8005a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3e:	4951      	ldr	r1, [pc, #324]	; (8005b84 <Custom_Switch_Read+0x170>)
 8005a40:	4852      	ldr	r0, [pc, #328]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005a42:	f7ff ff33 	bl	80058ac <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw3, SW3_PORT, SW3_PIN);
 8005a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4a:	494e      	ldr	r1, [pc, #312]	; (8005b84 <Custom_Switch_Read+0x170>)
 8005a4c:	4850      	ldr	r0, [pc, #320]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005a4e:	f7ff ff2d 	bl	80058ac <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8005a52:	484d      	ldr	r0, [pc, #308]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005a54:	f7ff ff46 	bl	80058e4 <Custom_Switch_State_Machine>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8005a5c:	484b      	ldr	r0, [pc, #300]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005a5e:	f7ff ff41 	bl	80058e4 <Custom_Switch_State_Machine>
 8005a62:	4603      	mov	r3, r0
 8005a64:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3PushEvent = Custom_Switch_State_Machine(&sw3);
 8005a66:	484a      	ldr	r0, [pc, #296]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005a68:	f7ff ff3c 	bl	80058e4 <Custom_Switch_State_Machine>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	717b      	strb	r3, [r7, #5]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if(sw1PushEvent) {
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d020      	beq.n	8005ab8 <Custom_Switch_Read+0xa4>
		if (sw2.state & SHORT_ON){
 8005a76:	4b45      	ldr	r3, [pc, #276]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005a78:	7c1b      	ldrb	r3, [r3, #16]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <Custom_Switch_Read+0x82>
			sw2PushEvent = true;
 8005a82:	2301      	movs	r3, #1
 8005a84:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw1.state;
 8005a86:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005a88:	7c1a      	ldrb	r2, [r3, #16]
 8005a8a:	4b40      	ldr	r3, [pc, #256]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005a8c:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw1.timer;
 8005a8e:	4b3e      	ldr	r3, [pc, #248]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4a3e      	ldr	r2, [pc, #248]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005a94:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005a98:	7c1b      	ldrb	r3, [r3, #16]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d051      	beq.n	8005b46 <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	717b      	strb	r3, [r7, #5]
			sw3.state = sw1.state;
 8005aa6:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005aa8:	7c1a      	ldrb	r2, [r3, #16]
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005aac:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw1.timer;
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4a37      	ldr	r2, [pc, #220]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005ab4:	6093      	str	r3, [r2, #8]
 8005ab6:	e046      	b.n	8005b46 <Custom_Switch_Read+0x132>
		}
	}
	else if(sw2PushEvent) {
 8005ab8:	79bb      	ldrb	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d020      	beq.n	8005b00 <Custom_Switch_Read+0xec>
		if (sw1.state & SHORT_ON){
 8005abe:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005ac0:	7c1b      	ldrb	r3, [r3, #16]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <Custom_Switch_Read+0xca>
			sw1PushEvent = true;
 8005aca:	2301      	movs	r3, #1
 8005acc:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw2.state;
 8005ace:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005ad0:	7c1a      	ldrb	r2, [r3, #16]
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005ad4:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw2.timer;
 8005ad6:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005adc:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 8005ade:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005ae0:	7c1b      	ldrb	r3, [r3, #16]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02d      	beq.n	8005b46 <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 8005aea:	2301      	movs	r3, #1
 8005aec:	717b      	strb	r3, [r7, #5]
			sw3.state = sw2.state;
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005af0:	7c1a      	ldrb	r2, [r3, #16]
 8005af2:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005af4:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw2.timer;
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005afc:	6093      	str	r3, [r2, #8]
 8005afe:	e022      	b.n	8005b46 <Custom_Switch_Read+0x132>
		}
	}
	else if(sw3PushEvent) {
 8005b00:	797b      	ldrb	r3, [r7, #5]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01f      	beq.n	8005b46 <Custom_Switch_Read+0x132>
		if (sw1.state & SHORT_ON){
 8005b06:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005b08:	7c1b      	ldrb	r3, [r3, #16]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <Custom_Switch_Read+0x112>
			sw1PushEvent = true;
 8005b12:	2301      	movs	r3, #1
 8005b14:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw3.state;
 8005b16:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005b18:	7c1a      	ldrb	r2, [r3, #16]
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005b1c:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw3.timer;
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <Custom_Switch_Read+0x174>)
 8005b24:	6093      	str	r3, [r2, #8]
		}
		if (sw2.state & SHORT_ON) {
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005b28:	7c1b      	ldrb	r3, [r3, #16]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <Custom_Switch_Read+0x132>
			sw2PushEvent = true;
 8005b32:	2301      	movs	r3, #1
 8005b34:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw3.state;
 8005b36:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005b38:	7c1a      	ldrb	r2, [r3, #16]
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005b3c:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw3.timer;
 8005b3e:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <Custom_Switch_Read+0x17c>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <Custom_Switch_Read+0x178>)
 8005b44:	6093      	str	r3, [r2, #8]
		}
	}


	uint8_t buttonPushEvent = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	713b      	strb	r3, [r7, #4]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <Custom_Switch_Read+0x144>
 8005b50:	793b      	ldrb	r3, [r7, #4]
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	713b      	strb	r3, [r7, #4]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8005b58:	79bb      	ldrb	r3, [r7, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <Custom_Switch_Read+0x152>
 8005b5e:	793b      	ldrb	r3, [r7, #4]
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	713b      	strb	r3, [r7, #4]
	if (sw3PushEvent) buttonPushEvent |= CUSTOM_SW_3;
 8005b66:	797b      	ldrb	r3, [r7, #5]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <Custom_Switch_Read+0x160>
 8005b6c:	793b      	ldrb	r3, [r7, #4]
 8005b6e:	f043 0304 	orr.w	r3, r3, #4
 8005b72:	713b      	strb	r3, [r7, #4]

	return buttonPushEvent;
 8005b74:	793b      	ldrb	r3, [r7, #4]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000140c 	.word	0x2000140c
 8005b84:	40020800 	.word	0x40020800
 8005b88:	20001410 	.word	0x20001410
 8005b8c:	20001424 	.word	0x20001424
 8005b90:	20001438 	.word	0x20001438

08005b94 <Print_Drive_Data>:


#include "header_init.h"


void Print_Drive_Data() {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
	uint32_t i = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
	uint8_t sw = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	717b      	strb	r3, [r7, #5]
	uint16_t markCnt_L = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	817b      	strh	r3, [r7, #10]
	uint16_t markCnt_R = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	813b      	strh	r3, [r7, #8]
	uint16_t crossCnt = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	80fb      	strh	r3, [r7, #6]

	// 마크 개수 세기
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 8005bae:	2301      	movs	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e04a      	b.n	8005c4a <Print_Drive_Data+0xb6>

		// 현재상태가 좌측 곡선인 경우
		if (driveData[i].markState == MARK_CURVE_L) {
 8005bb4:	4984      	ldr	r1, [pc, #528]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d103      	bne.n	8005bd2 <Print_Drive_Data+0x3e>

			markCnt_L += 1;
 8005bca:	897b      	ldrh	r3, [r7, #10]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	817b      	strh	r3, [r7, #10]
 8005bd0:	e038      	b.n	8005c44 <Print_Drive_Data+0xb0>
		}

		// 현재상태가 우측 곡선인 경우
		else if (driveData[i].markState == MARK_CURVE_R) {
 8005bd2:	497d      	ldr	r1, [pc, #500]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3308      	adds	r3, #8
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d103      	bne.n	8005bf0 <Print_Drive_Data+0x5c>

			markCnt_R += 1;
 8005be8:	893b      	ldrh	r3, [r7, #8]
 8005bea:	3301      	adds	r3, #1
 8005bec:	813b      	strh	r3, [r7, #8]
 8005bee:	e029      	b.n	8005c44 <Print_Drive_Data+0xb0>
		}

		// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
		else if (driveData[i].markState == MARK_STRAIGHT) {
 8005bf0:	4975      	ldr	r1, [pc, #468]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3308      	adds	r3, #8
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d11e      	bne.n	8005c44 <Print_Drive_Data+0xb0>

			// 이전 상태가 좌측 곡선이었을 경우
			if (driveData[i-1].markState == MARK_CURVE_L) {
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1e5a      	subs	r2, r3, #1
 8005c0a:	496f      	ldr	r1, [pc, #444]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	3308      	adds	r3, #8
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d103      	bne.n	8005c26 <Print_Drive_Data+0x92>
				markCnt_L += 1;
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	3301      	adds	r3, #1
 8005c22:	817b      	strh	r3, [r7, #10]
 8005c24:	e00e      	b.n	8005c44 <Print_Drive_Data+0xb0>
			}
			// 이전 상태가 우측 곡선이었을 경우
			else if (driveData[i-1].markState == MARK_CURVE_R) {
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e5a      	subs	r2, r3, #1
 8005c2a:	4967      	ldr	r1, [pc, #412]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3308      	adds	r3, #8
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d102      	bne.n	8005c44 <Print_Drive_Data+0xb0>
				markCnt_R += 1;
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	3301      	adds	r3, #1
 8005c42:	813b      	strh	r3, [r7, #8]
	for (i = 1; driveData[i].markState != MARK_NONE; i += 1) {
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	495f      	ldr	r1, [pc, #380]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	3308      	adds	r3, #8
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1a9      	bne.n	8005bb4 <Print_Drive_Data+0x20>
			}
		}
	}

	for (i = 0; crossCntTable[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e005      	b.n	8005c72 <Print_Drive_Data+0xde>
		crossCnt++;
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	80fb      	strh	r3, [r7, #6]
	for (i = 0; crossCntTable[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4a56      	ldr	r2, [pc, #344]	; (8005dcc <Print_Drive_Data+0x238>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <Print_Drive_Data+0xf0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d9f0      	bls.n	8005c66 <Print_Drive_Data+0xd2>
	}


	// OLED에 변수명 변수값 출력
	Custom_OLED_Clear();
 8005c84:	f7ff fab1 	bl	80051ea <Custom_OLED_Clear>
	Custom_OLED_Printf("/0mark L:   %d", markCnt_L);
 8005c88:	897b      	ldrh	r3, [r7, #10]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4850      	ldr	r0, [pc, #320]	; (8005dd0 <Print_Drive_Data+0x23c>)
 8005c8e:	f7ff fb91 	bl	80053b4 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1mark R:   %d", markCnt_R);
 8005c92:	893b      	ldrh	r3, [r7, #8]
 8005c94:	4619      	mov	r1, r3
 8005c96:	484f      	ldr	r0, [pc, #316]	; (8005dd4 <Print_Drive_Data+0x240>)
 8005c98:	f7ff fb8c 	bl	80053b4 <Custom_OLED_Printf>
	Custom_OLED_Printf("/2cross:    %d", crossCnt);
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	484d      	ldr	r0, [pc, #308]	; (8005dd8 <Print_Drive_Data+0x244>)
 8005ca2:	f7ff fb87 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 8005ca6:	bf00      	nop
 8005ca8:	f7ff feb4 	bl	8005a14 <Custom_Switch_Read>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d1fa      	bne.n	8005ca8 <Print_Drive_Data+0x114>



	Custom_OLED_Clear();
 8005cb2:	f7ff fa9a 	bl	80051ea <Custom_OLED_Clear>

	i = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]

	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005cba:	e076      	b.n	8005daa <Print_Drive_Data+0x216>

		if (driveData[i].markState == MARK_CURVE_L) {
 8005cbc:	4942      	ldr	r1, [pc, #264]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	3308      	adds	r3, #8
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d103      	bne.n	8005cda <Print_Drive_Data+0x146>

			Custom_OLED_Printf("/0mark L");
 8005cd2:	4842      	ldr	r0, [pc, #264]	; (8005ddc <Print_Drive_Data+0x248>)
 8005cd4:	f7ff fb6e 	bl	80053b4 <Custom_OLED_Printf>
 8005cd8:	e01c      	b.n	8005d14 <Print_Drive_Data+0x180>
		}
		else if (driveData[i].markState == MARK_CURVE_R) {
 8005cda:	493b      	ldr	r1, [pc, #236]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3308      	adds	r3, #8
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d103      	bne.n	8005cf8 <Print_Drive_Data+0x164>

			Custom_OLED_Printf("/0mark R");
 8005cf0:	483b      	ldr	r0, [pc, #236]	; (8005de0 <Print_Drive_Data+0x24c>)
 8005cf2:	f7ff fb5f 	bl	80053b4 <Custom_OLED_Printf>
 8005cf6:	e00d      	b.n	8005d14 <Print_Drive_Data+0x180>
		}
		else if (driveData[i].markState == MARK_STRAIGHT) {
 8005cf8:	4933      	ldr	r1, [pc, #204]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3308      	adds	r3, #8
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d102      	bne.n	8005d14 <Print_Drive_Data+0x180>

			Custom_OLED_Printf("/0straight");
 8005d0e:	4835      	ldr	r0, [pc, #212]	; (8005de4 <Print_Drive_Data+0x250>)
 8005d10:	f7ff fb50 	bl	80053b4 <Custom_OLED_Printf>
		}

		Custom_OLED_Printf("/1L: %9u", driveData[i].tickCnt_L);
 8005d14:	492c      	ldr	r1, [pc, #176]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4830      	ldr	r0, [pc, #192]	; (8005de8 <Print_Drive_Data+0x254>)
 8005d28:	f7ff fb44 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2R: %9u", driveData[i].tickCnt_R);
 8005d2c:	4926      	ldr	r1, [pc, #152]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	482a      	ldr	r0, [pc, #168]	; (8005dec <Print_Drive_Data+0x258>)
 8005d42:	f7ff fb37 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3C: %5u", driveData[i].crossCnt);
 8005d46:	4920      	ldr	r1, [pc, #128]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3309      	adds	r3, #9
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4825      	ldr	r0, [pc, #148]	; (8005df0 <Print_Drive_Data+0x25c>)
 8005d5c:	f7ff fb2a 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4S: %5u", driveData[i].curvature);
 8005d60:	4919      	ldr	r1, [pc, #100]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	330a      	adds	r3, #10
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	481f      	ldr	r0, [pc, #124]	; (8005df4 <Print_Drive_Data+0x260>)
 8005d76:	f7ff fb1d 	bl	80053b4 <Custom_OLED_Printf>

		if (sw == CUSTOM_SW_1) {
 8005d7a:	797b      	ldrb	r3, [r7, #5]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d103      	bne.n	8005d88 <Print_Drive_Data+0x1f4>

			i -= 1;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e005      	b.n	8005d94 <Print_Drive_Data+0x200>
		}
		else if (sw == CUSTOM_SW_2) {
 8005d88:	797b      	ldrb	r3, [r7, #5]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d102      	bne.n	8005d94 <Print_Drive_Data+0x200>

			i += 1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
		}

		if (driveData[i].markState == MARK_NONE) {
 8005d94:	490c      	ldr	r1, [pc, #48]	; (8005dc8 <Print_Drive_Data+0x234>)
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3308      	adds	r3, #8
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <Print_Drive_Data+0x226>
	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005daa:	f7ff fe33 	bl	8005a14 <Custom_Switch_Read>
 8005dae:	4603      	mov	r3, r0
 8005db0:	717b      	strb	r3, [r7, #5]
 8005db2:	797b      	ldrb	r3, [r7, #5]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d181      	bne.n	8005cbc <Print_Drive_Data+0x128>
 8005db8:	e000      	b.n	8005dbc <Print_Drive_Data+0x228>
			break ;
 8005dba:	bf00      	nop
		}
	}

	Custom_OLED_Clear();
 8005dbc:	f7ff fa15 	bl	80051ea <Custom_OLED_Clear>
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200014f8 	.word	0x200014f8
 8005dcc:	200032fc 	.word	0x200032fc
 8005dd0:	0800da24 	.word	0x0800da24
 8005dd4:	0800da34 	.word	0x0800da34
 8005dd8:	0800da44 	.word	0x0800da44
 8005ddc:	0800da54 	.word	0x0800da54
 8005de0:	0800da60 	.word	0x0800da60
 8005de4:	0800da6c 	.word	0x0800da6c
 8005de8:	0800da78 	.word	0x0800da78
 8005dec:	0800da84 	.word	0x0800da84
 8005df0:	0800da90 	.word	0x0800da90
 8005df4:	0800da9c 	.word	0x0800da9c

08005df8 <Print_Drive_Data_Buffer>:

void Print_Drive_Data_Buffer() {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
	uint32_t i = 1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
	uint8_t sw = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	717b      	strb	r3, [r7, #5]
	uint16_t markCnt_L = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	817b      	strh	r3, [r7, #10]
	uint16_t markCnt_R = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	813b      	strh	r3, [r7, #8]
	uint16_t crossCnt = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	80fb      	strh	r3, [r7, #6]

	// 마크 개수 세기
	for (i = 1; driveDataBuffer[i].markState != MARK_NONE; i += 1) {
 8005e12:	2301      	movs	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e04a      	b.n	8005eae <Print_Drive_Data_Buffer+0xb6>

		// 현재상태가 좌측 곡선인 경우
		if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 8005e18:	4984      	ldr	r1, [pc, #528]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	3308      	adds	r3, #8
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d103      	bne.n	8005e36 <Print_Drive_Data_Buffer+0x3e>

			markCnt_L += 1;
 8005e2e:	897b      	ldrh	r3, [r7, #10]
 8005e30:	3301      	adds	r3, #1
 8005e32:	817b      	strh	r3, [r7, #10]
 8005e34:	e038      	b.n	8005ea8 <Print_Drive_Data_Buffer+0xb0>
		}

		// 현재상태가 우측 곡선인 경우
		else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 8005e36:	497d      	ldr	r1, [pc, #500]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3308      	adds	r3, #8
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d103      	bne.n	8005e54 <Print_Drive_Data_Buffer+0x5c>

			markCnt_R += 1;
 8005e4c:	893b      	ldrh	r3, [r7, #8]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	813b      	strh	r3, [r7, #8]
 8005e52:	e029      	b.n	8005ea8 <Print_Drive_Data_Buffer+0xb0>
		}

		// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
		else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 8005e54:	4975      	ldr	r1, [pc, #468]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	3308      	adds	r3, #8
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d11e      	bne.n	8005ea8 <Print_Drive_Data_Buffer+0xb0>

			// 이전 상태가 좌측 곡선이었을 경우
			if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1e5a      	subs	r2, r3, #1
 8005e6e:	496f      	ldr	r1, [pc, #444]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005e70:	4613      	mov	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d103      	bne.n	8005e8a <Print_Drive_Data_Buffer+0x92>
				markCnt_L += 1;
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	3301      	adds	r3, #1
 8005e86:	817b      	strh	r3, [r7, #10]
 8005e88:	e00e      	b.n	8005ea8 <Print_Drive_Data_Buffer+0xb0>
			}
			// 이전 상태가 우측 곡선이었을 경우
			else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1e5a      	subs	r2, r3, #1
 8005e8e:	4967      	ldr	r1, [pc, #412]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d102      	bne.n	8005ea8 <Print_Drive_Data_Buffer+0xb0>
				markCnt_R += 1;
 8005ea2:	893b      	ldrh	r3, [r7, #8]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	813b      	strh	r3, [r7, #8]
	for (i = 1; driveDataBuffer[i].markState != MARK_NONE; i += 1) {
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	495f      	ldr	r1, [pc, #380]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1a9      	bne.n	8005e18 <Print_Drive_Data_Buffer+0x20>
			}
		}
	}

	for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e005      	b.n	8005ed6 <Print_Drive_Data_Buffer+0xde>
		crossCnt++;
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	80fb      	strh	r3, [r7, #6]
	for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4a56      	ldr	r2, [pc, #344]	; (8006030 <Print_Drive_Data_Buffer+0x238>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <Print_Drive_Data_Buffer+0xf0>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d9f0      	bls.n	8005eca <Print_Drive_Data_Buffer+0xd2>
	}


	// OLED에 변수명 변수값 출력
	Custom_OLED_Clear();
 8005ee8:	f7ff f97f 	bl	80051ea <Custom_OLED_Clear>
	Custom_OLED_Printf("/0mark L:   %d", markCnt_L);
 8005eec:	897b      	ldrh	r3, [r7, #10]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4850      	ldr	r0, [pc, #320]	; (8006034 <Print_Drive_Data_Buffer+0x23c>)
 8005ef2:	f7ff fa5f 	bl	80053b4 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1mark R:   %d", markCnt_R);
 8005ef6:	893b      	ldrh	r3, [r7, #8]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	484f      	ldr	r0, [pc, #316]	; (8006038 <Print_Drive_Data_Buffer+0x240>)
 8005efc:	f7ff fa5a 	bl	80053b4 <Custom_OLED_Printf>
	Custom_OLED_Printf("/2cross:    %d", crossCnt);
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	4619      	mov	r1, r3
 8005f04:	484d      	ldr	r0, [pc, #308]	; (800603c <Print_Drive_Data_Buffer+0x244>)
 8005f06:	f7ff fa55 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 8005f0a:	bf00      	nop
 8005f0c:	f7ff fd82 	bl	8005a14 <Custom_Switch_Read>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d1fa      	bne.n	8005f0c <Print_Drive_Data_Buffer+0x114>



	Custom_OLED_Clear();
 8005f16:	f7ff f968 	bl	80051ea <Custom_OLED_Clear>

	i = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]

	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005f1e:	e076      	b.n	800600e <Print_Drive_Data_Buffer+0x216>

		if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 8005f20:	4942      	ldr	r1, [pc, #264]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3308      	adds	r3, #8
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d103      	bne.n	8005f3e <Print_Drive_Data_Buffer+0x146>

			Custom_OLED_Printf("/0mark L");
 8005f36:	4842      	ldr	r0, [pc, #264]	; (8006040 <Print_Drive_Data_Buffer+0x248>)
 8005f38:	f7ff fa3c 	bl	80053b4 <Custom_OLED_Printf>
 8005f3c:	e01c      	b.n	8005f78 <Print_Drive_Data_Buffer+0x180>
		}
		else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 8005f3e:	493b      	ldr	r1, [pc, #236]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4613      	mov	r3, r2
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d103      	bne.n	8005f5c <Print_Drive_Data_Buffer+0x164>

			Custom_OLED_Printf("/0mark R");
 8005f54:	483b      	ldr	r0, [pc, #236]	; (8006044 <Print_Drive_Data_Buffer+0x24c>)
 8005f56:	f7ff fa2d 	bl	80053b4 <Custom_OLED_Printf>
 8005f5a:	e00d      	b.n	8005f78 <Print_Drive_Data_Buffer+0x180>
		}
		else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 8005f5c:	4933      	ldr	r1, [pc, #204]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <Print_Drive_Data_Buffer+0x180>

			Custom_OLED_Printf("/0straight");
 8005f72:	4835      	ldr	r0, [pc, #212]	; (8006048 <Print_Drive_Data_Buffer+0x250>)
 8005f74:	f7ff fa1e 	bl	80053b4 <Custom_OLED_Printf>
		}

		Custom_OLED_Printf("/1L: %9u", driveDataBuffer[i].tickCnt_L);
 8005f78:	492c      	ldr	r1, [pc, #176]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4830      	ldr	r0, [pc, #192]	; (800604c <Print_Drive_Data_Buffer+0x254>)
 8005f8c:	f7ff fa12 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2R: %9u", driveDataBuffer[i].tickCnt_R);
 8005f90:	4926      	ldr	r1, [pc, #152]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	482a      	ldr	r0, [pc, #168]	; (8006050 <Print_Drive_Data_Buffer+0x258>)
 8005fa6:	f7ff fa05 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3C: %5u", driveDataBuffer[i].crossCnt);
 8005faa:	4920      	ldr	r1, [pc, #128]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3309      	adds	r3, #9
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4825      	ldr	r0, [pc, #148]	; (8006054 <Print_Drive_Data_Buffer+0x25c>)
 8005fc0:	f7ff f9f8 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4S: %5d", driveData[i].curvature);
 8005fc4:	4924      	ldr	r1, [pc, #144]	; (8006058 <Print_Drive_Data_Buffer+0x260>)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	330a      	adds	r3, #10
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4820      	ldr	r0, [pc, #128]	; (800605c <Print_Drive_Data_Buffer+0x264>)
 8005fda:	f7ff f9eb 	bl	80053b4 <Custom_OLED_Printf>

		if (sw == CUSTOM_SW_1) {
 8005fde:	797b      	ldrb	r3, [r7, #5]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d103      	bne.n	8005fec <Print_Drive_Data_Buffer+0x1f4>

			i -= 1;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e005      	b.n	8005ff8 <Print_Drive_Data_Buffer+0x200>
		}
		else if (sw == CUSTOM_SW_2) {
 8005fec:	797b      	ldrb	r3, [r7, #5]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d102      	bne.n	8005ff8 <Print_Drive_Data_Buffer+0x200>

			i += 1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
		}

		if (driveDataBuffer[i].markState == MARK_NONE) {
 8005ff8:	490c      	ldr	r1, [pc, #48]	; (800602c <Print_Drive_Data_Buffer+0x234>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3308      	adds	r3, #8
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <Print_Drive_Data_Buffer+0x226>
	while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800600e:	f7ff fd01 	bl	8005a14 <Custom_Switch_Read>
 8006012:	4603      	mov	r3, r0
 8006014:	717b      	strb	r3, [r7, #5]
 8006016:	797b      	ldrb	r3, [r7, #5]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d181      	bne.n	8005f20 <Print_Drive_Data_Buffer+0x128>
 800601c:	e000      	b.n	8006020 <Print_Drive_Data_Buffer+0x228>
			break ;
 800601e:	bf00      	nop
		}
	}

	Custom_OLED_Clear();
 8006020:	f7ff f8e3 	bl	80051ea <Custom_OLED_Clear>
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	200023f8 	.word	0x200023f8
 8006030:	200033fc 	.word	0x200033fc
 8006034:	0800da24 	.word	0x0800da24
 8006038:	0800da34 	.word	0x0800da34
 800603c:	0800da44 	.word	0x0800da44
 8006040:	0800da54 	.word	0x0800da54
 8006044:	0800da60 	.word	0x0800da60
 8006048:	0800da6c 	.word	0x0800da6c
 800604c:	0800da78 	.word	0x0800da78
 8006050:	0800da84 	.word	0x0800da84
 8006054:	0800da90 	.word	0x0800da90
 8006058:	200014f8 	.word	0x200014f8
 800605c:	0800daa8 	.word	0x0800daa8

08006060 <Mark_Masking_Init>:
#include "math.h"




__STATIC_INLINE  void Mark_Masking_Init() {
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0

	markMasking.line_mask[0] =	0b1111000000000000;
 8006064:	4b5e      	ldr	r3, [pc, #376]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006066:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800606a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	markMasking.left_mask[0] =	0b0000000000000000;
 800606e:	4b5c      	ldr	r3, [pc, #368]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]
	markMasking.right_mask[0] =	0b0000111100000000;
 8006074:	4b5a      	ldr	r3, [pc, #360]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006076:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800607a:	841a      	strh	r2, [r3, #32]

	markMasking.line_mask[1] =	0b1111100000000000;
 800607c:	4b58      	ldr	r3, [pc, #352]	; (80061e0 <Mark_Masking_Init+0x180>)
 800607e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006082:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	markMasking.left_mask[1] =	0b0000000000000000;
 8006086:	4b56      	ldr	r3, [pc, #344]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006088:	2200      	movs	r2, #0
 800608a:	805a      	strh	r2, [r3, #2]
	markMasking.right_mask[1] =	0b0000011110000000;
 800608c:	4b54      	ldr	r3, [pc, #336]	; (80061e0 <Mark_Masking_Init+0x180>)
 800608e:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8006092:	845a      	strh	r2, [r3, #34]	; 0x22

	markMasking.line_mask[2] =	0b1111110000000000;
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006096:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800609a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	markMasking.left_mask[2] =	0b0000000000000000;
 800609e:	4b50      	ldr	r3, [pc, #320]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	809a      	strh	r2, [r3, #4]
	markMasking.right_mask[2] =	0b0000001111000000;
 80060a4:	4b4e      	ldr	r3, [pc, #312]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060a6:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80060aa:	849a      	strh	r2, [r3, #36]	; 0x24

	markMasking.line_mask[3] =	0b0111111000000000;
 80060ac:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060ae:	f44f 42fc 	mov.w	r2, #32256	; 0x7e00
 80060b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	markMasking.left_mask[3] =	0b1000000000000000;
 80060b6:	4b4a      	ldr	r3, [pc, #296]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060bc:	80da      	strh	r2, [r3, #6]
	markMasking.right_mask[3] =	0b0000000111100000;
 80060be:	4b48      	ldr	r3, [pc, #288]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80060c4:	84da      	strh	r2, [r3, #38]	; 0x26

	markMasking.line_mask[4] =	0b0011111100000000;
 80060c6:	4b46      	ldr	r3, [pc, #280]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060c8:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80060cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	markMasking.left_mask[4] =	0b1100000000000000;
 80060d0:	4b43      	ldr	r3, [pc, #268]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060d2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80060d6:	811a      	strh	r2, [r3, #8]
	markMasking.right_mask[4] =	0b0000000011110000;
 80060d8:	4b41      	ldr	r3, [pc, #260]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060da:	22f0      	movs	r2, #240	; 0xf0
 80060dc:	851a      	strh	r2, [r3, #40]	; 0x28

	markMasking.line_mask[5] =	0b0001111110000000;
 80060de:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060e0:	f44f 52fc 	mov.w	r2, #8064	; 0x1f80
 80060e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	markMasking.left_mask[5] =	0b1110000000000000;
 80060e8:	4b3d      	ldr	r3, [pc, #244]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060ea:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80060ee:	815a      	strh	r2, [r3, #10]
	markMasking.right_mask[5] =	0b0000000001111000;
 80060f0:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060f2:	2278      	movs	r2, #120	; 0x78
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a

	markMasking.line_mask[6] =	0b0000111111000000;
 80060f6:	4b3a      	ldr	r3, [pc, #232]	; (80061e0 <Mark_Masking_Init+0x180>)
 80060f8:	f44f 627c 	mov.w	r2, #4032	; 0xfc0
 80060fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	markMasking.left_mask[6] =	0b0111000000000000;
 8006100:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006102:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8006106:	819a      	strh	r2, [r3, #12]
	markMasking.right_mask[6] =	0b0000000000111100;
 8006108:	4b35      	ldr	r3, [pc, #212]	; (80061e0 <Mark_Masking_Init+0x180>)
 800610a:	223c      	movs	r2, #60	; 0x3c
 800610c:	859a      	strh	r2, [r3, #44]	; 0x2c

	markMasking.line_mask[7] =	0b0000011111100000;
 800610e:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006110:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8006114:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	markMasking.left_mask[7] =	0b0011100000000000;
 8006118:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <Mark_Masking_Init+0x180>)
 800611a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800611e:	81da      	strh	r2, [r3, #14]
	markMasking.right_mask[7] =	0b0000000000011100;
 8006120:	4b2f      	ldr	r3, [pc, #188]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006122:	221c      	movs	r2, #28
 8006124:	85da      	strh	r2, [r3, #46]	; 0x2e

	markMasking.line_mask[8] =	0b0000001111110000;
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006128:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800612c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	markMasking.left_mask[8] =	0b0011110000000000;
 8006130:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006132:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006136:	821a      	strh	r2, [r3, #16]
	markMasking.right_mask[8] =	0b0000000000001110;
 8006138:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <Mark_Masking_Init+0x180>)
 800613a:	220e      	movs	r2, #14
 800613c:	861a      	strh	r2, [r3, #48]	; 0x30

	markMasking.line_mask[9] =	0b0000000111111000;
 800613e:	4b28      	ldr	r3, [pc, #160]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006140:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8006144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	markMasking.left_mask[9] =	0b0001111000000000;
 8006148:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <Mark_Masking_Init+0x180>)
 800614a:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
 800614e:	825a      	strh	r2, [r3, #18]
	markMasking.right_mask[9] =	0b0000000000000111;
 8006150:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006152:	2207      	movs	r2, #7
 8006154:	865a      	strh	r2, [r3, #50]	; 0x32

	markMasking.line_mask[10] =	0b0000000011111100;
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006158:	22fc      	movs	r2, #252	; 0xfc
 800615a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	markMasking.left_mask[10] =	0b0000111100000000;
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006160:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006164:	829a      	strh	r2, [r3, #20]
	markMasking.right_mask[10] =0b0000000000000011;
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006168:	2203      	movs	r2, #3
 800616a:	869a      	strh	r2, [r3, #52]	; 0x34

	markMasking.line_mask[11] =	0b0000000001111110;
 800616c:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <Mark_Masking_Init+0x180>)
 800616e:	227e      	movs	r2, #126	; 0x7e
 8006170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	markMasking.left_mask[11] =	0b0000011110000000;
 8006174:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006176:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800617a:	82da      	strh	r2, [r3, #22]
	markMasking.right_mask[11] =0b0000000000000001;
 800617c:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <Mark_Masking_Init+0x180>)
 800617e:	2201      	movs	r2, #1
 8006180:	86da      	strh	r2, [r3, #54]	; 0x36

	markMasking.line_mask[12] =	0b0000000000111111;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006184:	223f      	movs	r2, #63	; 0x3f
 8006186:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	markMasking.left_mask[12] =	0b0000001111000000;
 800618a:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <Mark_Masking_Init+0x180>)
 800618c:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8006190:	831a      	strh	r2, [r3, #24]
	markMasking.right_mask[12] =0b0000000000000000;
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <Mark_Masking_Init+0x180>)
 8006194:	2200      	movs	r2, #0
 8006196:	871a      	strh	r2, [r3, #56]	; 0x38

	markMasking.line_mask[13] =	0b0000000000011111;
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <Mark_Masking_Init+0x180>)
 800619a:	221f      	movs	r2, #31
 800619c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	markMasking.left_mask[13] =	0b0000000111100000;
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80061a6:	835a      	strh	r2, [r3, #26]
	markMasking.right_mask[13] =0b0000000000000000;
 80061a8:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	875a      	strh	r2, [r3, #58]	; 0x3a

	markMasking.line_mask[14] =	0b0000000000001111;
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061b0:	220f      	movs	r2, #15
 80061b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	markMasking.left_mask[14] =	0b0000000011110000;
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061b8:	22f0      	movs	r2, #240	; 0xf0
 80061ba:	839a      	strh	r2, [r3, #28]
	markMasking.right_mask[14] =0b0000000000000000;
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061be:	2200      	movs	r2, #0
 80061c0:	879a      	strh	r2, [r3, #60]	; 0x3c

	markMasking.line_mask[15] = 0b0000000000000111;
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061c4:	2207      	movs	r2, #7
 80061c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	markMasking.left_mask[15] =	0b0000000001111000;
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061cc:	2278      	movs	r2, #120	; 0x78
 80061ce:	83da      	strh	r2, [r3, #30]
	markMasking.right_mask[15] =0b0000000000000000;
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <Mark_Masking_Init+0x180>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 80061d6:	bf00      	nop
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20001494 	.word	0x20001494

080061e4 <Mark_Sampling_Reset>:





__STATIC_INLINE void	Mark_Sampling_Reset() {
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0

	targetMarkSamplingTick = 0;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <Mark_Sampling_Reset+0x40>)
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
	curMarkSamplingTick = 0;
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <Mark_Sampling_Reset+0x44>)
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]


	for (uint8_t i = 0; i < MARK_SAMPLING_MAX_LEN; i++) {
 80061fa:	2300      	movs	r3, #0
 80061fc:	71fb      	strb	r3, [r7, #7]
 80061fe:	e006      	b.n	800620e <Mark_Sampling_Reset+0x2a>
		markSampling[i] = 0x00;
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <Mark_Sampling_Reset+0x48>)
 8006204:	2100      	movs	r1, #0
 8006206:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MARK_SAMPLING_MAX_LEN; i++) {
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	3301      	adds	r3, #1
 800620c:	71fb      	strb	r3, [r7, #7]
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2b09      	cmp	r3, #9
 8006212:	d9f5      	bls.n	8006200 <Mark_Sampling_Reset+0x1c>
	}
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20003508 	.word	0x20003508
 8006228:	20001484 	.word	0x20001484
 800622c:	2000350c 	.word	0x2000350c

08006230 <Drive_Optimize_Setting>:
static void Adjust_Float_Val(t_driveMenu_Float *floatValues, uint8_t intValCnt, uint8_t isEnd);




void Drive_Optimize_Setting() {
 8006230:	b580      	push	{r7, lr}
 8006232:	b094      	sub	sp, #80	; 0x50
 8006234:	af00      	add	r7, sp, #0
	t_driveMenu_Int		intValues[] = {
 8006236:	4a0a      	ldr	r2, [pc, #40]	; (8006260 <Drive_Optimize_Setting+0x30>)
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	4611      	mov	r1, r2
 800623c:	2248      	movs	r2, #72	; 0x48
 800623e:	4618      	mov	r0, r3
 8006240:	f005 fa55 	bl	800b6ee <memcpy>
			{ "straight boost",			&isStraightBoostEnabled,		1 },
			{ "curve boost   ",			&isCurveBoostEnabled,			1 },
			{ "inline drive  ",			&isInlineDriveEnabled,			1 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8006244:	2303      	movs	r3, #3
 8006246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Adjust_Int_Val(intValues, intValCnt, CUSTOM_FALSE);
 800624a:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	2200      	movs	r2, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f9f0 	bl	8006638 <Adjust_Int_Val>
}
 8006258:	bf00      	nop
 800625a:	3750      	adds	r7, #80	; 0x50
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	0800dab4 	.word	0x0800dab4

08006264 <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting() {
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0

	if (isStraightBoostEnabled) {
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <Pre_Drive_Setting+0x28>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <Pre_Drive_Setting+0x10>
		Adjust_Straight_Boost();
 8006270:	f000 f90e 	bl	8006490 <Adjust_Straight_Boost>
	}

	if (isCurveBoostEnabled) {
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <Pre_Drive_Setting+0x2c>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <Pre_Drive_Setting+0x1c>
		Adjust_Curve_Boost();
 800627c:	f000 f9c2 	bl	8006604 <Adjust_Curve_Boost>
	}

	Adjust_First_Drive();
 8006280:	f000 f8d4 	bl	800642c <Adjust_First_Drive>

	Pre_Drive_Var_Init();
 8006284:	f000 fb3c 	bl	8006900 <Pre_Drive_Var_Init>

}
 8006288:	bf00      	nop
 800628a:	bd80      	pop	{r7, pc}
 800628c:	200034fe 	.word	0x200034fe
 8006290:	200034ff 	.word	0x200034ff

08006294 <Pre_Drive_Read_Map>:

void Pre_Drive_Read_Map() {
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0

	threshold = 140;
 8006298:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <Pre_Drive_Read_Map+0x24>)
 800629a:	228c      	movs	r2, #140	; 0x8c
 800629c:	701a      	strb	r2, [r3, #0]
	pitInLen = 0.13f;
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <Pre_Drive_Read_Map+0x28>)
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <Pre_Drive_Read_Map+0x2c>)
 80062a2:	601a      	str	r2, [r3, #0]
	targetSpeed_init = 2.8f;
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <Pre_Drive_Read_Map+0x30>)
 80062a6:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <Pre_Drive_Read_Map+0x34>)
 80062a8:	601a      	str	r2, [r3, #0]
	curveDeceleCoef = 24500;
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <Pre_Drive_Read_Map+0x38>)
 80062ac:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <Pre_Drive_Read_Map+0x3c>)
 80062ae:	601a      	str	r2, [r3, #0]

	Pre_Drive_Var_Init();
 80062b0:	f000 fb26 	bl	8006900 <Pre_Drive_Var_Init>
}
 80062b4:	bf00      	nop
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	2000007c 	.word	0x2000007c
 80062bc:	2000004c 	.word	0x2000004c
 80062c0:	3e051eb8 	.word	0x3e051eb8
 80062c4:	2000000c 	.word	0x2000000c
 80062c8:	40333333 	.word	0x40333333
 80062cc:	20000038 	.word	0x20000038
 80062d0:	46bf6800 	.word	0x46bf6800

080062d4 <Pre_Drive_Second_Quick>:

void Pre_Drive_Second_Quick() {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0

	isStraightBoostEnabled = 1;
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <Pre_Drive_Second_Quick+0x5c>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
	isCurveBoostEnabled = 0;
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <Pre_Drive_Second_Quick+0x60>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
	isInlineDriveEnabled = 0;
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <Pre_Drive_Second_Quick+0x64>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]

	threshold = 140;
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <Pre_Drive_Second_Quick+0x68>)
 80062ec:	228c      	movs	r2, #140	; 0x8c
 80062ee:	701a      	strb	r2, [r3, #0]
	pitInLen = 0.17f;
 80062f0:	4b13      	ldr	r3, [pc, #76]	; (8006340 <Pre_Drive_Second_Quick+0x6c>)
 80062f2:	4a14      	ldr	r2, [pc, #80]	; (8006344 <Pre_Drive_Second_Quick+0x70>)
 80062f4:	601a      	str	r2, [r3, #0]
	targetSpeed_init = 3.f;
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <Pre_Drive_Second_Quick+0x74>)
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <Pre_Drive_Second_Quick+0x78>)
 80062fa:	601a      	str	r2, [r3, #0]
	curveDeceleCoef = 24500;
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <Pre_Drive_Second_Quick+0x7c>)
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <Pre_Drive_Second_Quick+0x80>)
 8006300:	601a      	str	r2, [r3, #0]

	acceleStartTick = 0.1f * TICK_PER_M;
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <Pre_Drive_Second_Quick+0x84>)
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <Pre_Drive_Second_Quick+0x88>)
 8006306:	601a      	str	r2, [r3, #0]
	deceleEndTick = 0.2f * TICK_PER_M;
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <Pre_Drive_Second_Quick+0x8c>)
 800630a:	4a16      	ldr	r2, [pc, #88]	; (8006364 <Pre_Drive_Second_Quick+0x90>)
 800630c:	601a      	str	r2, [r3, #0]
	starightBoostSpeed = 7.f;
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <Pre_Drive_Second_Quick+0x94>)
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <Pre_Drive_Second_Quick+0x98>)
 8006312:	601a      	str	r2, [r3, #0]
	targetAccele_init = 8.f;
 8006314:	4b16      	ldr	r3, [pc, #88]	; (8006370 <Pre_Drive_Second_Quick+0x9c>)
 8006316:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800631a:	601a      	str	r2, [r3, #0]
	decele_init = 7.f;
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <Pre_Drive_Second_Quick+0xa0>)
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <Pre_Drive_Second_Quick+0x98>)
 8006320:	601a      	str	r2, [r3, #0]
	deceleEndRatio = 0.3f;
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <Pre_Drive_Second_Quick+0xa4>)
 8006324:	4a15      	ldr	r2, [pc, #84]	; (800637c <Pre_Drive_Second_Quick+0xa8>)
 8006326:	601a      	str	r2, [r3, #0]

	Pre_Drive_Var_Init();
 8006328:	f000 faea 	bl	8006900 <Pre_Drive_Var_Init>
}
 800632c:	bf00      	nop
 800632e:	bd80      	pop	{r7, pc}
 8006330:	200034fe 	.word	0x200034fe
 8006334:	200034ff 	.word	0x200034ff
 8006338:	20003500 	.word	0x20003500
 800633c:	2000007c 	.word	0x2000007c
 8006340:	2000004c 	.word	0x2000004c
 8006344:	3e2e147b 	.word	0x3e2e147b
 8006348:	2000000c 	.word	0x2000000c
 800634c:	40400000 	.word	0x40400000
 8006350:	20000038 	.word	0x20000038
 8006354:	46bf6800 	.word	0x46bf6800
 8006358:	20000050 	.word	0x20000050
 800635c:	45e5aeb7 	.word	0x45e5aeb7
 8006360:	20000054 	.word	0x20000054
 8006364:	4665aeb7 	.word	0x4665aeb7
 8006368:	20000030 	.word	0x20000030
 800636c:	40e00000 	.word	0x40e00000
 8006370:	20000010 	.word	0x20000010
 8006374:	20000014 	.word	0x20000014
 8006378:	20000058 	.word	0x20000058
 800637c:	3e99999a 	.word	0x3e99999a

08006380 <Pre_Drive_Third_Quick>:

void Pre_Drive_Third_Quick() {
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0

	isStraightBoostEnabled = 1;
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <Pre_Drive_Third_Quick+0x5c>)
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
	isCurveBoostEnabled = 0;
 800638a:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <Pre_Drive_Third_Quick+0x60>)
 800638c:	2200      	movs	r2, #0
 800638e:	701a      	strb	r2, [r3, #0]
	isInlineDriveEnabled = 1;
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <Pre_Drive_Third_Quick+0x64>)
 8006392:	2201      	movs	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]

	threshold = 140;
 8006396:	4b14      	ldr	r3, [pc, #80]	; (80063e8 <Pre_Drive_Third_Quick+0x68>)
 8006398:	228c      	movs	r2, #140	; 0x8c
 800639a:	701a      	strb	r2, [r3, #0]
	pitInLen = 0.17f;
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <Pre_Drive_Third_Quick+0x6c>)
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <Pre_Drive_Third_Quick+0x70>)
 80063a0:	601a      	str	r2, [r3, #0]
	targetSpeed_init = 3.f;
 80063a2:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <Pre_Drive_Third_Quick+0x74>)
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <Pre_Drive_Third_Quick+0x78>)
 80063a6:	601a      	str	r2, [r3, #0]
	curveDeceleCoef = 24500;
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <Pre_Drive_Third_Quick+0x7c>)
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <Pre_Drive_Third_Quick+0x80>)
 80063ac:	601a      	str	r2, [r3, #0]

	acceleStartTick = 0.1f * TICK_PER_M;
 80063ae:	4b15      	ldr	r3, [pc, #84]	; (8006404 <Pre_Drive_Third_Quick+0x84>)
 80063b0:	4a15      	ldr	r2, [pc, #84]	; (8006408 <Pre_Drive_Third_Quick+0x88>)
 80063b2:	601a      	str	r2, [r3, #0]
	deceleEndTick = 0.2f * TICK_PER_M;
 80063b4:	4b15      	ldr	r3, [pc, #84]	; (800640c <Pre_Drive_Third_Quick+0x8c>)
 80063b6:	4a16      	ldr	r2, [pc, #88]	; (8006410 <Pre_Drive_Third_Quick+0x90>)
 80063b8:	601a      	str	r2, [r3, #0]
	starightBoostSpeed = 7.f;
 80063ba:	4b16      	ldr	r3, [pc, #88]	; (8006414 <Pre_Drive_Third_Quick+0x94>)
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <Pre_Drive_Third_Quick+0x98>)
 80063be:	601a      	str	r2, [r3, #0]
	targetAccele_init = 8.f;
 80063c0:	4b16      	ldr	r3, [pc, #88]	; (800641c <Pre_Drive_Third_Quick+0x9c>)
 80063c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80063c6:	601a      	str	r2, [r3, #0]
	decele_init = 7.f;
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <Pre_Drive_Third_Quick+0xa0>)
 80063ca:	4a13      	ldr	r2, [pc, #76]	; (8006418 <Pre_Drive_Third_Quick+0x98>)
 80063cc:	601a      	str	r2, [r3, #0]
	deceleEndRatio = 0.3f;
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <Pre_Drive_Third_Quick+0xa4>)
 80063d0:	4a15      	ldr	r2, [pc, #84]	; (8006428 <Pre_Drive_Third_Quick+0xa8>)
 80063d2:	601a      	str	r2, [r3, #0]

	Pre_Drive_Var_Init();
 80063d4:	f000 fa94 	bl	8006900 <Pre_Drive_Var_Init>
}
 80063d8:	bf00      	nop
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	200034fe 	.word	0x200034fe
 80063e0:	200034ff 	.word	0x200034ff
 80063e4:	20003500 	.word	0x20003500
 80063e8:	2000007c 	.word	0x2000007c
 80063ec:	2000004c 	.word	0x2000004c
 80063f0:	3e2e147b 	.word	0x3e2e147b
 80063f4:	2000000c 	.word	0x2000000c
 80063f8:	40400000 	.word	0x40400000
 80063fc:	20000038 	.word	0x20000038
 8006400:	46bf6800 	.word	0x46bf6800
 8006404:	20000050 	.word	0x20000050
 8006408:	45e5aeb7 	.word	0x45e5aeb7
 800640c:	20000054 	.word	0x20000054
 8006410:	4665aeb7 	.word	0x4665aeb7
 8006414:	20000030 	.word	0x20000030
 8006418:	40e00000 	.word	0x40e00000
 800641c:	20000010 	.word	0x20000010
 8006420:	20000014 	.word	0x20000014
 8006424:	20000058 	.word	0x20000058
 8006428:	3e99999a 	.word	0x3e99999a

0800642c <Adjust_First_Drive>:




// 주행 전 초기값 조정
static void Adjust_First_Drive() {
 800642c:	b5b0      	push	{r4, r5, r7, lr}
 800642e:	b09a      	sub	sp, #104	; 0x68
 8006430:	af00      	add	r7, sp, #0

	t_driveMenu_Int		intValues[] = {
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <Adjust_First_Drive+0x5c>)
 8006434:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8006438:	461d      	mov	r5, r3
 800643a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006442:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "Threshold",			&threshold,			10 },
//			{ "Stop End Mark", 		&stopEndMarkCnt,	1},
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	Adjust_Int_Val(intValues, intValCnt, CUSTOM_FALSE);
 800644c:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
 8006450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006454:	2200      	movs	r2, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f8ee 	bl	8006638 <Adjust_Int_Val>


	t_driveMenu_Float	floatValues[] = {
 800645c:	4a0b      	ldr	r2, [pc, #44]	; (800648c <Adjust_First_Drive+0x60>)
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	4611      	mov	r1, r2
 8006462:	2248      	movs	r2, #72	; 0x48
 8006464:	4618      	mov	r0, r3
 8006466:	f005 f942 	bl	800b6ee <memcpy>
			{ "Pit In Len",			&pitInLen,			0.01f },
			{ "Target Speed",		&targetSpeed_init,	0.05f },
			{ "CurveDecel Coef",	&curveDeceleCoef,	500 },
//			{ "Position Coef",		&positionCoef,		0.000001f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 800646a:	2303      	movs	r3, #3
 800646c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Adjust_Float_Val(floatValues, floatValCnt, CUSTOM_TRUE);
 8006470:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	2201      	movs	r2, #1
 8006478:	4618      	mov	r0, r3
 800647a:	f000 f97b 	bl	8006774 <Adjust_Float_Val>
}
 800647e:	bf00      	nop
 8006480:	3768      	adds	r7, #104	; 0x68
 8006482:	46bd      	mov	sp, r7
 8006484:	bdb0      	pop	{r4, r5, r7, pc}
 8006486:	bf00      	nop
 8006488:	0800dafc 	.word	0x0800dafc
 800648c:	0800db14 	.word	0x0800db14

08006490 <Adjust_Straight_Boost>:



static void Adjust_Straight_Boost() {
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b0a9      	sub	sp, #164	; 0xa4
 8006494:	af00      	add	r7, sp, #0

	float acceleStartLen = acceleStartTick / TICK_PER_M;
 8006496:	4b4c      	ldr	r3, [pc, #304]	; (80065c8 <Adjust_Straight_Boost+0x138>)
 8006498:	ed93 7a00 	vldr	s14, [r3]
 800649c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80065cc <Adjust_Straight_Boost+0x13c>
 80064a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064a4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float deceleEndLen = deceleEndTick / TICK_PER_M;
 80064a8:	4b49      	ldr	r3, [pc, #292]	; (80065d0 <Adjust_Straight_Boost+0x140>)
 80064aa:	ed93 7a00 	vldr	s14, [r3]
 80064ae:	eddf 6a47 	vldr	s13, [pc, #284]	; 80065cc <Adjust_Straight_Boost+0x13c>
 80064b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064b6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	t_driveMenu_Float	floatValues[] = {
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <Adjust_Straight_Boost+0x144>)
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	ca07      	ldmia	r2, {r0, r1, r2}
 80064c0:	c303      	stmia	r3!, {r0, r1}
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	3302      	adds	r3, #2
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	f107 030f 	add.w	r3, r7, #15
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	4b41      	ldr	r3, [pc, #260]	; (80065d8 <Adjust_Straight_Boost+0x148>)
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	4a3f      	ldr	r2, [pc, #252]	; (80065dc <Adjust_Straight_Boost+0x14c>)
 80064de:	f107 031c 	add.w	r3, r7, #28
 80064e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064e6:	6018      	str	r0, [r3, #0]
 80064e8:	3304      	adds	r3, #4
 80064ea:	8019      	strh	r1, [r3, #0]
 80064ec:	3302      	adds	r3, #2
 80064ee:	0c0a      	lsrs	r2, r1, #16
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <Adjust_Straight_Boost+0x150>)
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006500:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8006504:	633b      	str	r3, [r7, #48]	; 0x30
 8006506:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <Adjust_Straight_Boost+0x154>)
 8006508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800650c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006510:	6018      	str	r0, [r3, #0]
 8006512:	3304      	adds	r3, #4
 8006514:	8019      	strh	r1, [r3, #0]
 8006516:	3302      	adds	r3, #2
 8006518:	0c0a      	lsrs	r2, r1, #16
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	4b30      	ldr	r3, [pc, #192]	; (80065e8 <Adjust_Straight_Boost+0x158>)
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006530:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <Adjust_Straight_Boost+0x15c>)
 8006532:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8006536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006538:	c407      	stmia	r4!, {r0, r1, r2}
 800653a:	8023      	strh	r3, [r4, #0]
 800653c:	3402      	adds	r4, #2
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	7023      	strb	r3, [r4, #0]
 8006542:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006548:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <Adjust_Straight_Boost+0x160>)
 800654a:	663b      	str	r3, [r7, #96]	; 0x60
 800654c:	4b29      	ldr	r3, [pc, #164]	; (80065f4 <Adjust_Straight_Boost+0x164>)
 800654e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8006552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006554:	c407      	stmia	r4!, {r0, r1, r2}
 8006556:	7023      	strb	r3, [r4, #0]
 8006558:	f107 0371 	add.w	r3, r7, #113	; 0x71
 800655c:	2200      	movs	r2, #0
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006564:	677b      	str	r3, [r7, #116]	; 0x74
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <Adjust_Straight_Boost+0x168>)
 8006568:	67bb      	str	r3, [r7, #120]	; 0x78
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <Adjust_Straight_Boost+0x16c>)
 800656c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8006570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006572:	c407      	stmia	r4!, {r0, r1, r2}
 8006574:	8023      	strh	r3, [r4, #0]
 8006576:	3402      	adds	r4, #2
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	7023      	strb	r3, [r4, #0]
 800657c:	4b20      	ldr	r3, [pc, #128]	; (8006600 <Adjust_Straight_Boost+0x170>)
 800657e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <Adjust_Straight_Boost+0x168>)
 8006584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			{ "Decele",				&decele_init,		0.25f },
			{ "acceleStart len",	&acceleStartLen,	0.025f },
			{ "decelEnd len",		&deceleEndLen,		0.05f },
			{ "decelEnd ratio",		&deceleEndRatio,	0.05f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 8006588:	2306      	movs	r3, #6
 800658a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Adjust_Float_Val(floatValues, floatValCnt, CUSTOM_FALSE);
 800658e:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	2200      	movs	r2, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f8ec 	bl	8006774 <Adjust_Float_Val>


	acceleStartTick = acceleStartLen * TICK_PER_M;
 800659c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80065a0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80065cc <Adjust_Straight_Boost+0x13c>
 80065a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <Adjust_Straight_Boost+0x138>)
 80065aa:	edc3 7a00 	vstr	s15, [r3]
	deceleEndTick = deceleEndLen * TICK_PER_M;
 80065ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80065b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80065cc <Adjust_Straight_Boost+0x13c>
 80065b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <Adjust_Straight_Boost+0x140>)
 80065bc:	edc3 7a00 	vstr	s15, [r3]

}
 80065c0:	bf00      	nop
 80065c2:	37a4      	adds	r7, #164	; 0xa4
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	20000050 	.word	0x20000050
 80065cc:	478f8d32 	.word	0x478f8d32
 80065d0:	20000054 	.word	0x20000054
 80065d4:	0800db5c 	.word	0x0800db5c
 80065d8:	20000030 	.word	0x20000030
 80065dc:	0800db6c 	.word	0x0800db6c
 80065e0:	20000010 	.word	0x20000010
 80065e4:	0800db7c 	.word	0x0800db7c
 80065e8:	20000014 	.word	0x20000014
 80065ec:	0800db8c 	.word	0x0800db8c
 80065f0:	3ccccccd 	.word	0x3ccccccd
 80065f4:	0800db9c 	.word	0x0800db9c
 80065f8:	3d4ccccd 	.word	0x3d4ccccd
 80065fc:	0800dbac 	.word	0x0800dbac
 8006600:	20000058 	.word	0x20000058

08006604 <Adjust_Curve_Boost>:


static void Adjust_Curve_Boost() {
 8006604:	b5b0      	push	{r4, r5, r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0


	t_driveMenu_Float	floatValues[] = {
 800660a:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <Adjust_Curve_Boost+0x30>)
 800660c:	1d3c      	adds	r4, r7, #4
 800660e:	461d      	mov	r5, r3
 8006610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006614:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006618:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "cu boost V",		&curveBoostSpeed,		0.25f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
	Adjust_Float_Val(floatValues, floatValCnt, CUSTOM_FALSE);
 8006620:	7ff9      	ldrb	r1, [r7, #31]
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	2200      	movs	r2, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f8a4 	bl	8006774 <Adjust_Float_Val>
}
 800662c:	bf00      	nop
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bdb0      	pop	{r4, r5, r7, pc}
 8006634:	0800dbbc 	.word	0x0800dbbc

08006638 <Adjust_Int_Val>:



static void Adjust_Int_Val(t_driveMenu_Int *intValues, uint8_t intValCnt, uint8_t isEnd) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
 8006644:	4613      	mov	r3, r2
 8006646:	70bb      	strb	r3, [r7, #2]

	uint8_t	sw = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < intValCnt; i++) {
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e07f      	b.n	8006752 <Adjust_Int_Val+0x11a>

		Custom_OLED_Clear();
 8006652:	f7fe fdca 	bl	80051ea <Custom_OLED_Clear>

		// 정수 변수 초기화
		if (i < intValCnt) {
 8006656:	7bfa      	ldrb	r2, [r7, #15]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	429a      	cmp	r2, r3
 800665c:	d276      	bcs.n	800674c <Adjust_Int_Val+0x114>

			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800665e:	e06e      	b.n	800673e <Adjust_Int_Val+0x106>

				// OLED에 변수명 변수값 출력
				Custom_OLED_Printf("/2%s", intValues[i].valName);
 8006660:	7bfa      	ldrb	r2, [r7, #15]
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	4619      	mov	r1, r3
 8006672:	483d      	ldr	r0, [pc, #244]	; (8006768 <Adjust_Int_Val+0x130>)
 8006674:	f7fe fe9e 	bl	80053b4 <Custom_OLED_Printf>
				Custom_OLED_Printf("/A/4%5d", *(intValues[i].val));
 8006678:	7bfa      	ldrb	r2, [r7, #15]
 800667a:	4613      	mov	r3, r2
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	4413      	add	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	4836      	ldr	r0, [pc, #216]	; (800676c <Adjust_Int_Val+0x134>)
 8006692:	f7fe fe8f 	bl	80053b4 <Custom_OLED_Printf>

				if (isEnd == CUSTOM_TRUE && i == intValCnt - 1) {
 8006696:	78bb      	ldrb	r3, [r7, #2]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <Adjust_Int_Val+0x74>
 800669c:	7bfa      	ldrb	r2, [r7, #15]
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d102      	bne.n	80066ac <Adjust_Int_Val+0x74>
					Custom_OLED_Printf("/g/0Ready to Drive");
 80066a6:	4832      	ldr	r0, [pc, #200]	; (8006770 <Adjust_Int_Val+0x138>)
 80066a8:	f7fe fe84 	bl	80053b4 <Custom_OLED_Printf>
				}

				// 변수 값 빼기
				if (sw == CUSTOM_SW_1) {
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d121      	bne.n	80066f6 <Adjust_Int_Val+0xbe>
					*(intValues[i].val) -= intValues[i].changeVal;
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	7d1b      	ldrb	r3, [r3, #20]
 80066c4:	b2d9      	uxtb	r1, r3
 80066c6:	7bfa      	ldrb	r2, [r7, #15]
 80066c8:	4613      	mov	r3, r2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	461a      	mov	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4413      	add	r3, r2
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	b2d8      	uxtb	r0, r3
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	4613      	mov	r3, r2
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	4413      	add	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	1a42      	subs	r2, r0, r1
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	e023      	b.n	800673e <Adjust_Int_Val+0x106>
				}
				// 변수값 더하기
				else if (sw == CUSTOM_SW_2) {
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d120      	bne.n	800673e <Adjust_Int_Val+0x106>
					*(intValues[i].val) += intValues[i].changeVal;
 80066fc:	7bfa      	ldrb	r2, [r7, #15]
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	7d1b      	ldrb	r3, [r3, #20]
 800670e:	b2d8      	uxtb	r0, r3
 8006710:	7bfa      	ldrb	r2, [r7, #15]
 8006712:	4613      	mov	r3, r2
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	4413      	add	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2d9      	uxtb	r1, r3
 8006726:	7bfa      	ldrb	r2, [r7, #15]
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4413      	add	r3, r2
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	1842      	adds	r2, r0, r1
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800673e:	f7ff f969 	bl	8005a14 <Custom_Switch_Read>
 8006742:	4603      	mov	r3, r0
 8006744:	73bb      	strb	r3, [r7, #14]
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b04      	cmp	r3, #4
 800674a:	d189      	bne.n	8006660 <Adjust_Int_Val+0x28>
	for (uint8_t i = 0; i < intValCnt; i++) {
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	3301      	adds	r3, #1
 8006750:	73fb      	strb	r3, [r7, #15]
 8006752:	7bfa      	ldrb	r2, [r7, #15]
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	429a      	cmp	r2, r3
 8006758:	f4ff af7b 	bcc.w	8006652 <Adjust_Int_Val+0x1a>
				}
			}
		}
	}

	Custom_OLED_Clear();
 800675c:	f7fe fd45 	bl	80051ea <Custom_OLED_Clear>

}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	0800dbd4 	.word	0x0800dbd4
 800676c:	0800dbdc 	.word	0x0800dbdc
 8006770:	0800dbe4 	.word	0x0800dbe4

08006774 <Adjust_Float_Val>:

static void Adjust_Float_Val(t_driveMenu_Float *floatValues, uint8_t floatValCnt, uint8_t isEnd) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
 8006780:	4613      	mov	r3, r2
 8006782:	70bb      	strb	r3, [r7, #2]

	uint8_t	sw = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0; i < floatValCnt; i++) {
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
 800678c:	e0a2      	b.n	80068d4 <Adjust_Float_Val+0x160>

		Custom_OLED_Clear();
 800678e:	f7fe fd2c 	bl	80051ea <Custom_OLED_Clear>

		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006792:	e094      	b.n	80068be <Adjust_Float_Val+0x14a>

			uint32_t num1 = (uint32_t)(*(floatValues[i].val));
 8006794:	7dfa      	ldrb	r2, [r7, #23]
 8006796:	4613      	mov	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	edd3 7a00 	vldr	s15, [r3]
 80067aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ae:	ee17 3a90 	vmov	r3, s15
 80067b2:	613b      	str	r3, [r7, #16]
			uint32_t num2 = (uint32_t)( *(floatValues[i].val) * 100000 - num1 * 100000 );
 80067b4:	7dfa      	ldrb	r2, [r7, #23]
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80068ec <Adjust_Float_Val+0x178>
 80067ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4a46      	ldr	r2, [pc, #280]	; (80068f0 <Adjust_Float_Val+0x17c>)
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ea:	ee17 3a90 	vmov	r3, s15
 80067ee:	60fb      	str	r3, [r7, #12]

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/2%s", floatValues[i].valName);
 80067f0:	7dfa      	ldrb	r2, [r7, #23]
 80067f2:	4613      	mov	r3, r2
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	4413      	add	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	4619      	mov	r1, r3
 8006802:	483c      	ldr	r0, [pc, #240]	; (80068f4 <Adjust_Float_Val+0x180>)
 8006804:	f7fe fdd6 	bl	80053b4 <Custom_OLED_Printf>
			Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6939      	ldr	r1, [r7, #16]
 800680c:	483a      	ldr	r0, [pc, #232]	; (80068f8 <Adjust_Float_Val+0x184>)
 800680e:	f7fe fdd1 	bl	80053b4 <Custom_OLED_Printf>

			if (isEnd == CUSTOM_TRUE && i == floatValCnt - 1) {
 8006812:	78bb      	ldrb	r3, [r7, #2]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d107      	bne.n	8006828 <Adjust_Float_Val+0xb4>
 8006818:	7dfa      	ldrb	r2, [r7, #23]
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	3b01      	subs	r3, #1
 800681e:	429a      	cmp	r2, r3
 8006820:	d102      	bne.n	8006828 <Adjust_Float_Val+0xb4>
				Custom_OLED_Printf("/g/0Ready to Drive");
 8006822:	4836      	ldr	r0, [pc, #216]	; (80068fc <Adjust_Float_Val+0x188>)
 8006824:	f7fe fdc6 	bl	80053b4 <Custom_OLED_Printf>
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8006828:	7dbb      	ldrb	r3, [r7, #22]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d122      	bne.n	8006874 <Adjust_Float_Val+0x100>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 800682e:	7dfa      	ldrb	r2, [r7, #23]
 8006830:	4613      	mov	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006842:	7dfa      	ldrb	r2, [r7, #23]
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	ed93 7a00 	vldr	s14, [r3]
 8006858:	7dfa      	ldrb	r2, [r7, #23]
 800685a:	4613      	mov	r3, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	4413      	add	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800686e:	edc3 7a00 	vstr	s15, [r3]
 8006872:	e024      	b.n	80068be <Adjust_Float_Val+0x14a>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8006874:	7dbb      	ldrb	r3, [r7, #22]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d121      	bne.n	80068be <Adjust_Float_Val+0x14a>
				*(floatValues[i].val) += floatValues[i].changeVal;
 800687a:	7dfa      	ldrb	r2, [r7, #23]
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	461a      	mov	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	ed93 7a05 	vldr	s14, [r3, #20]
 800688e:	7dfa      	ldrb	r2, [r7, #23]
 8006890:	4613      	mov	r3, r2
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	4413      	add	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	edd3 7a00 	vldr	s15, [r3]
 80068a4:	7dfa      	ldrb	r2, [r7, #23]
 80068a6:	4613      	mov	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ba:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80068be:	f7ff f8a9 	bl	8005a14 <Custom_Switch_Read>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75bb      	strb	r3, [r7, #22]
 80068c6:	7dbb      	ldrb	r3, [r7, #22]
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	f47f af63 	bne.w	8006794 <Adjust_Float_Val+0x20>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	3301      	adds	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
 80068d4:	7dfa      	ldrb	r2, [r7, #23]
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	429a      	cmp	r2, r3
 80068da:	f4ff af58 	bcc.w	800678e <Adjust_Float_Val+0x1a>
			}
		}
	}

	Custom_OLED_Clear();
 80068de:	f7fe fc84 	bl	80051ea <Custom_OLED_Clear>
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	47c35000 	.word	0x47c35000
 80068f0:	000186a0 	.word	0x000186a0
 80068f4:	0800dbd4 	.word	0x0800dbd4
 80068f8:	0800dbf8 	.word	0x0800dbf8
 80068fc:	0800dbe4 	.word	0x0800dbe4

08006900 <Pre_Drive_Var_Init>:



// 주행 전 초기값 대입
void Pre_Drive_Var_Init() {
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
	/*
	 * 인터럽트에서 쓰는 변수
	 */

	// pd 제어에 사용하는 변수 초기화
	levelMaxCCR = TIM10->ARR + 1;
 8006906:	4b6d      	ldr	r3, [pc, #436]	; (8006abc <Pre_Drive_Var_Init+0x1bc>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	3301      	adds	r3, #1
 800690c:	4a6c      	ldr	r2, [pc, #432]	; (8006ac0 <Pre_Drive_Var_Init+0x1c0>)
 800690e:	6013      	str	r3, [r2, #0]
	positionCmdL = 0;
 8006910:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <Pre_Drive_Var_Init+0x1c4>)
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
	positionL = 0;
 8006918:	4b6b      	ldr	r3, [pc, #428]	; (8006ac8 <Pre_Drive_Var_Init+0x1c8>)
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
	positionCmdR = 0;
 8006920:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <Pre_Drive_Var_Init+0x1cc>)
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
	positionR = 0;
 8006928:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <Pre_Drive_Var_Init+0x1d0>)
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
//	prevErrorL = 0;
//	prevErrorR = 0;
//	targetEncoderValueL_cntl = 0;
//	targetEncoderValueR_cntl = 0;
	TIM3->CNT = 0;
 8006930:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <Pre_Drive_Var_Init+0x1d4>)
 8006932:	2200      	movs	r2, #0
 8006934:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8006936:	4b68      	ldr	r3, [pc, #416]	; (8006ad8 <Pre_Drive_Var_Init+0x1d8>)
 8006938:	2200      	movs	r2, #0
 800693a:	625a      	str	r2, [r3, #36]	; 0x24
	prevEncoderValueL = 0;
 800693c:	4b67      	ldr	r3, [pc, #412]	; (8006adc <Pre_Drive_Var_Init+0x1dc>)
 800693e:	2200      	movs	r2, #0
 8006940:	801a      	strh	r2, [r3, #0]
	prevEncoderValueR = 0;
 8006942:	4b67      	ldr	r3, [pc, #412]	; (8006ae0 <Pre_Drive_Var_Init+0x1e0>)
 8006944:	2200      	movs	r2, #0
 8006946:	801a      	strh	r2, [r3, #0]
	pCoef = P_COEF_INIT;
 8006948:	4b66      	ldr	r3, [pc, #408]	; (8006ae4 <Pre_Drive_Var_Init+0x1e4>)
 800694a:	4a67      	ldr	r2, [pc, #412]	; (8006ae8 <Pre_Drive_Var_Init+0x1e8>)
 800694c:	601a      	str	r2, [r3, #0]
	dCoef = D_COEF_INIT;
 800694e:	4b67      	ldr	r3, [pc, #412]	; (8006aec <Pre_Drive_Var_Init+0x1ec>)
 8006950:	4a67      	ldr	r2, [pc, #412]	; (8006af0 <Pre_Drive_Var_Init+0x1f0>)
 8006952:	601a      	str	r2, [r3, #0]

	// 가속도 변수 초기화
	targetAccele = targetAccele_init;
 8006954:	4b67      	ldr	r3, [pc, #412]	; (8006af4 <Pre_Drive_Var_Init+0x1f4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a67      	ldr	r2, [pc, #412]	; (8006af8 <Pre_Drive_Var_Init+0x1f8>)
 800695a:	6013      	str	r3, [r2, #0]
	curAccele = 0;
 800695c:	4b67      	ldr	r3, [pc, #412]	; (8006afc <Pre_Drive_Var_Init+0x1fc>)
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = targetSpeed_init;
 8006964:	4b66      	ldr	r3, [pc, #408]	; (8006b00 <Pre_Drive_Var_Init+0x200>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a66      	ldr	r2, [pc, #408]	; (8006b04 <Pre_Drive_Var_Init+0x204>)
 800696a:	6013      	str	r3, [r2, #0]
	decele = decele_init;
 800696c:	4b66      	ldr	r3, [pc, #408]	; (8006b08 <Pre_Drive_Var_Init+0x208>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a66      	ldr	r2, [pc, #408]	; (8006b0c <Pre_Drive_Var_Init+0x20c>)
 8006972:	6013      	str	r3, [r2, #0]
	curSpeed = MIN_SPEED;
 8006974:	4b66      	ldr	r3, [pc, #408]	; (8006b10 <Pre_Drive_Var_Init+0x210>)
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 800697c:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <Pre_Drive_Var_Init+0x214>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 8006982:	4b65      	ldr	r3, [pc, #404]	; (8006b18 <Pre_Drive_Var_Init+0x218>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
	prevPositionValCmd = 0;
 8006988:	4b64      	ldr	r3, [pc, #400]	; (8006b1c <Pre_Drive_Var_Init+0x21c>)
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]

	// positionVal을 windowing하여 구하는 것에 사용되는 변수 초기화
	positionSum = 0;
 800698e:	4b64      	ldr	r3, [pc, #400]	; (8006b20 <Pre_Drive_Var_Init+0x220>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 8006994:	4b63      	ldr	r3, [pc, #396]	; (8006b24 <Pre_Drive_Var_Init+0x224>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick_L = 0;
 800699a:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <Pre_Drive_Var_Init+0x228>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
	curTick_R = 0;
 80069a0:	4b62      	ldr	r3, [pc, #392]	; (8006b2c <Pre_Drive_Var_Init+0x22c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
	curMarkSamplingTick = (float)(curTick_L + curTick_R) / 2.f;
 80069a6:	4b60      	ldr	r3, [pc, #384]	; (8006b28 <Pre_Drive_Var_Init+0x228>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4b60      	ldr	r3, [pc, #384]	; (8006b2c <Pre_Drive_Var_Init+0x22c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80069bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069c0:	4b5b      	ldr	r3, [pc, #364]	; (8006b30 <Pre_Drive_Var_Init+0x230>)
 80069c2:	edc3 7a00 	vstr	s15, [r3]

	// 2차 주행 inline 관현 값 초기화
	targetInlineVal = 0;
 80069c6:	4b5b      	ldr	r3, [pc, #364]	; (8006b34 <Pre_Drive_Var_Init+0x234>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
	curInlineVal = 0;
 80069cc:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <Pre_Drive_Var_Init+0x238>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
	/*
	 * 주행문에서 쓰는 변수
	 */

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 80069d2:	4b5a      	ldr	r3, [pc, #360]	; (8006b3c <Pre_Drive_Var_Init+0x23c>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]

	// state machine 의 상태 업데이트
	markStateMachine = MARK_STATE_MACHINE_IDLE;
 80069d8:	4b59      	ldr	r3, [pc, #356]	; (8006b40 <Pre_Drive_Var_Init+0x240>)
 80069da:	2200      	movs	r2, #0
 80069dc:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 80069de:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <Pre_Drive_Var_Init+0x244>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	801a      	strh	r2, [r3, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 80069e4:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <Pre_Drive_Var_Init+0x248>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]

	// driveData 인덱스 초기화
	driveDataIdx = 0;
 80069ea:	4b58      	ldr	r3, [pc, #352]	; (8006b4c <Pre_Drive_Var_Init+0x24c>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	801a      	strh	r2, [r3, #0]


	lineMasking = LINE_MASKING_INIT;
 80069f0:	4b57      	ldr	r3, [pc, #348]	; (8006b50 <Pre_Drive_Var_Init+0x250>)
 80069f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80069f6:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = RIGHT_MARK_MASKING_INIT;
 80069f8:	4b56      	ldr	r3, [pc, #344]	; (8006b54 <Pre_Drive_Var_Init+0x254>)
 80069fa:	220e      	movs	r2, #14
 80069fc:	801a      	strh	r2, [r3, #0]
	leftMarkMasking = LEFT_MARK_MASKING_INIT;
 80069fe:	4b56      	ldr	r3, [pc, #344]	; (8006b58 <Pre_Drive_Var_Init+0x258>)
 8006a00:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8006a04:	801a      	strh	r2, [r3, #0]
	bothMarkMasking = RIGHT_MARK_MASKING_INIT | LEFT_MARK_MASKING_INIT;
 8006a06:	4b55      	ldr	r3, [pc, #340]	; (8006b5c <Pre_Drive_Var_Init+0x25c>)
 8006a08:	f247 020e 	movw	r2, #28686	; 0x700e
 8006a0c:	801a      	strh	r2, [r3, #0]
	markAreaMasking = ~(lineMasking << 1 | lineMasking >> 1);
 8006a0e:	4b50      	ldr	r3, [pc, #320]	; (8006b50 <Pre_Drive_Var_Init+0x250>)
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	b21a      	sxth	r2, r3
 8006a16:	4b4e      	ldr	r3, [pc, #312]	; (8006b50 <Pre_Drive_Var_Init+0x250>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	b21b      	sxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <Pre_Drive_Var_Init+0x260>)
 8006a2c:	801a      	strh	r2, [r3, #0]

	// isReadAllMark 값 정상으로 변경
	isReadAllMark = CUSTOM_TRUE;
 8006a2e:	4b4d      	ldr	r3, [pc, #308]	; (8006b64 <Pre_Drive_Var_Init+0x264>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]

	// 부스트 컨트롤 상태 업데이트
	starightBoostCntl = BOOST_CNTL_IDLE;
 8006a34:	4b4c      	ldr	r3, [pc, #304]	; (8006b68 <Pre_Drive_Var_Init+0x268>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]

	curveBoostCntl = BOOST_CNTL_IDLE;
 8006a3a:	4b4c      	ldr	r3, [pc, #304]	; (8006b6c <Pre_Drive_Var_Init+0x26c>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]

	// 커브 인라인 상태 업데이트
	curveInlineCntl = INLINE_CNTL_IDLE;
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <Pre_Drive_Var_Init+0x270>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]

	isLastStraight = CUSTOM_FALSE;
 8006a46:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <Pre_Drive_Var_Init+0x274>)
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]

	Mark_Masking_Init();
 8006a4e:	f7ff fb07 	bl	8006060 <Mark_Masking_Init>

	Mark_Sampling_Reset();
 8006a52:	f7ff fbc7 	bl	80061e4 <Mark_Sampling_Reset>



	for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e014      	b.n	8006a86 <Pre_Drive_Var_Init+0x186>
		t_driveData temp = T_DRIVE_DATA_INIT;
 8006a5c:	1d3b      	adds	r3, r7, #4
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	605a      	str	r2, [r3, #4]
 8006a64:	609a      	str	r2, [r3, #8]

		driveDataBuffer[i] = temp;
 8006a66:	4944      	ldr	r1, [pc, #272]	; (8006b78 <Pre_Drive_Var_Init+0x278>)
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	461c      	mov	r4, r3
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	3301      	adds	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a8c:	d3e6      	bcc.n	8006a5c <Pre_Drive_Var_Init+0x15c>
	}

	// driveData의 0, 1번째 값 초기화
	// 0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠
	// 실질적으로 주행은 1번 인덱스부터 시작
	driveDataBuffer[0].markState = MARK_STRAIGHT;
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	; (8006b78 <Pre_Drive_Var_Init+0x278>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	721a      	strb	r2, [r3, #8]


	for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	e007      	b.n	8006aaa <Pre_Drive_Var_Init+0x1aa>

		crossCntTableBuffer[i] = 0;
 8006a9a:	4a38      	ldr	r2, [pc, #224]	; (8006b7c <Pre_Drive_Var_Init+0x27c>)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b7f      	cmp	r3, #127	; 0x7f
 8006aae:	d9f4      	bls.n	8006a9a <Pre_Drive_Var_Init+0x19a>
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40014400 	.word	0x40014400
 8006ac0:	2000144c 	.word	0x2000144c
 8006ac4:	20001450 	.word	0x20001450
 8006ac8:	20001454 	.word	0x20001454
 8006acc:	20001458 	.word	0x20001458
 8006ad0:	2000145c 	.word	0x2000145c
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	20001460 	.word	0x20001460
 8006ae0:	20001462 	.word	0x20001462
 8006ae4:	20000004 	.word	0x20000004
 8006ae8:	43200000 	.word	0x43200000
 8006aec:	20000008 	.word	0x20000008
 8006af0:	3e83126f 	.word	0x3e83126f
 8006af4:	20000010 	.word	0x20000010
 8006af8:	20000020 	.word	0x20000020
 8006afc:	20000024 	.word	0x20000024
 8006b00:	2000000c 	.word	0x2000000c
 8006b04:	2000002c 	.word	0x2000002c
 8006b08:	20000014 	.word	0x20000014
 8006b0c:	20000028 	.word	0x20000028
 8006b10:	20001478 	.word	0x20001478
 8006b14:	20001464 	.word	0x20001464
 8006b18:	20001468 	.word	0x20001468
 8006b1c:	2000146c 	.word	0x2000146c
 8006b20:	20001470 	.word	0x20001470
 8006b24:	20001474 	.word	0x20001474
 8006b28:	2000147c 	.word	0x2000147c
 8006b2c:	20001480 	.word	0x20001480
 8006b30:	20001484 	.word	0x20001484
 8006b34:	20001488 	.word	0x20001488
 8006b38:	2000148c 	.word	0x2000148c
 8006b3c:	2000003c 	.word	0x2000003c
 8006b40:	20001490 	.word	0x20001490
 8006b44:	200034fc 	.word	0x200034fc
 8006b48:	20003501 	.word	0x20003501
 8006b4c:	200032f8 	.word	0x200032f8
 8006b50:	2000003e 	.word	0x2000003e
 8006b54:	20000040 	.word	0x20000040
 8006b58:	20000042 	.word	0x20000042
 8006b5c:	20000044 	.word	0x20000044
 8006b60:	20000046 	.word	0x20000046
 8006b64:	20000048 	.word	0x20000048
 8006b68:	200014f4 	.word	0x200014f4
 8006b6c:	200014f5 	.word	0x200014f5
 8006b70:	200014f6 	.word	0x200014f6
 8006b74:	20003504 	.word	0x20003504
 8006b78:	200023f8 	.word	0x200023f8
 8006b7c:	200033fc 	.word	0x200033fc

08006b80 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006bb2:	bf00      	nop
 8006bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d1f8      	bne.n	8006bb4 <Custom_Delay_us+0x34>
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff ffcc 	bl	8006b80 <Custom_Delay_us>
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8006bfa:	edc7 0a00 	vstr	s1, [r7]

	targetSpeed = pinSpeed;
 8006bfe:	4a25      	ldr	r2, [pc, #148]	; (8006c94 <Drive_Fit_In+0xa4>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2.f * s);
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c06:	edd3 7a00 	vldr	s15, [r3]
 8006c0a:	ed97 7a00 	vldr	s14, [r7]
 8006c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c12:	4b21      	ldr	r3, [pc, #132]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c14:	edd3 6a00 	vldr	s13, [r3]
 8006c18:	edd7 7a00 	vldr	s15, [r7]
 8006c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2c:	d512      	bpl.n	8006c54 <Drive_Fit_In+0x64>
 8006c2e:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c30:	edd3 7a00 	vldr	s15, [r3]
 8006c34:	ed97 7a00 	vldr	s14, [r7]
 8006c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c3c:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c3e:	edd3 6a00 	vldr	s13, [r3]
 8006c42:	edd7 7a00 	vldr	s15, [r7]
 8006c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	eef1 7a67 	vneg.f32	s15, s15
 8006c52:	e00f      	b.n	8006c74 <Drive_Fit_In+0x84>
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c56:	edd3 7a00 	vldr	s15, [r3]
 8006c5a:	ed97 7a00 	vldr	s14, [r7]
 8006c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <Drive_Fit_In+0xa8>)
 8006c64:	edd3 6a00 	vldr	s13, [r3]
 8006c68:	edd7 7a00 	vldr	s15, [r7]
 8006c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c78:	ee77 6a07 	vadd.f32	s13, s14, s14
 8006c7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <Drive_Fit_In+0xac>)
 8006c82:	ed83 7a00 	vstr	s14, [r3]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000002c 	.word	0x2000002c
 8006c98:	20001478 	.word	0x20001478
 8006c9c:	20000028 	.word	0x20000028

08006ca0 <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End() {
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0

	if (endMarkCnt >= stopEndMarkCnt) {
 8006ca4:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <Is_Drive_End+0x2c>)
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <Is_Drive_End+0x30>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d301      	bcc.n	8006cb4 <Is_Drive_End+0x14>

		return EXIT_ECHO_END_MARK;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e006      	b.n	8006cc2 <Is_Drive_End+0x22>
	}
	if (markState == MARK_LINE_OUT) {
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <Is_Drive_End+0x34>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d101      	bne.n	8006cc0 <Is_Drive_End+0x20>

		return EXIT_ECHO_LINE_OUT;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e000      	b.n	8006cc2 <Is_Drive_End+0x22>
	}

	return EXIT_ECHO_IDLE;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	20003501 	.word	0x20003501
 8006cd0:	20000049 	.word	0x20000049
 8006cd4:	2000003c 	.word	0x2000003c

08006cd8 <Mark_Masking>:



__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]

	lineMasking = markMasking.line_mask[curIrSensorMid];
 8006ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <Mark_Masking+0x68>)
 8006ce8:	3320      	adds	r3, #32
 8006cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <Mark_Masking+0x6c>)
 8006cf2:	801a      	strh	r2, [r3, #0]
	leftMarkMasking = markMasking.left_mask[curIrSensorMid];
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <Mark_Masking+0x68>)
 8006cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <Mark_Masking+0x70>)
 8006d02:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = markMasking.right_mask[curIrSensorMid];
 8006d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d08:	4a0d      	ldr	r2, [pc, #52]	; (8006d40 <Mark_Masking+0x68>)
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <Mark_Masking+0x74>)
 8006d14:	801a      	strh	r2, [r3, #0]
	bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <Mark_Masking+0x70>)
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <Mark_Masking+0x74>)
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <Mark_Masking+0x78>)
 8006d24:	801a      	strh	r2, [r3, #0]

	markAreaMasking = ~lineMasking;
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <Mark_Masking+0x6c>)
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <Mark_Masking+0x7c>)
 8006d30:	801a      	strh	r2, [r3, #0]
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20001494 	.word	0x20001494
 8006d44:	2000003e 	.word	0x2000003e
 8006d48:	20000042 	.word	0x20000042
 8006d4c:	20000040 	.word	0x20000040
 8006d50:	20000044 	.word	0x20000044
 8006d54:	20000046 	.word	0x20000046

08006d58 <Mark_Accumming>:
//}




__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
	// 11 => 0
	// 12 <= 1
	// 13 <= 2
	// 14 <= 3
	// 15 <= 4
	if (curIrSensorMid < 11) {
 8006d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d66:	2b0a      	cmp	r3, #10
 8006d68:	dc17      	bgt.n	8006d9a <Mark_Accumming+0x42>

		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 8006d6a:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <Mark_Accumming+0xbc>)
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	4b29      	ldr	r3, [pc, #164]	; (8006e18 <Mark_Accumming+0xc0>)
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	4013      	ands	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	f1c3 030b 	rsb	r3, r3, #11
 8006d82:	fa42 f303 	asr.w	r3, r2, r3
 8006d86:	b25a      	sxtb	r2, r3
 8006d88:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <Mark_Accumming+0xc4>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <Mark_Accumming+0xc4>)
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e015      	b.n	8006dc6 <Mark_Accumming+0x6e>
	} else {

		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <Mark_Accumming+0xbc>)
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <Mark_Accumming+0xc0>)
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	4013      	ands	r3, r2
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	3b0b      	subs	r3, #11
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	b25a      	sxtb	r2, r3
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <Mark_Accumming+0xc4>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b25b      	sxtb	r3, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <Mark_Accumming+0xc4>)
 8006dc4:	701a      	strb	r2, [r3, #0]
	}


	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <Mark_Accumming+0xbc>)
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <Mark_Accumming+0xc8>)
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <Mark_Accumming+0x8e>

		irSensorStateSum |= 0x80;
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <Mark_Accumming+0xc4>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <Mark_Accumming+0xc4>)
 8006de4:	701a      	strb	r2, [r3, #0]
	}

	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <Mark_Accumming+0xbc>)
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <Mark_Accumming+0xcc>)
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	4013      	ands	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <Mark_Accumming+0xae>

		irSensorStateSum |= 0x01;
 8006df8:	4b08      	ldr	r3, [pc, #32]	; (8006e1c <Mark_Accumming+0xc4>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <Mark_Accumming+0xc4>)
 8006e04:	701a      	strb	r2, [r3, #0]
	}

}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	2000357c 	.word	0x2000357c
 8006e18:	2000003e 	.word	0x2000003e
 8006e1c:	20003502 	.word	0x20003502
 8006e20:	20000042 	.word	0x20000042
 8006e24:	20000040 	.word	0x20000040

08006e28 <Mark_Accumming_Reset>:


__STATIC_INLINE void	Mark_Accumming_Reset() {
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0

	irSensorStateSum = 0x00;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <Mark_Accumming_Reset+0x14>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20003502 	.word	0x20003502

08006e40 <Is_Line_Out>:





__STATIC_INLINE uint8_t	Is_Line_Out() {
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0

	if (irSensorState == 0x00) {
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <Is_Line_Out+0x20>)
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <Is_Line_Out+0x14>
	}

	return CUSTOM_FALSE;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	2000357c 	.word	0x2000357c

08006e64 <Is_Passed_Marker>:




__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0

	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 8006e68:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <Is_Passed_Marker+0x28>)
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <Is_Passed_Marker+0x2c>)
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	4013      	ands	r3, r2
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <Is_Passed_Marker+0x1c>
	}

	return CUSTOM_FALSE;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000357c 	.word	0x2000357c
 8006e90:	20000046 	.word	0x20000046

08006e94 <Mark_Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Mark_Decision() {
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0

	// cross
	if (irSensorStateSum == 0xff) {
 8006e98:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <Mark_Decision+0x78>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2bff      	cmp	r3, #255	; 0xff
 8006e9e:	d103      	bne.n	8006ea8 <Mark_Decision+0x14>

		markState = MARK_CROSS;
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <Mark_Decision+0x7c>)
 8006ea2:	2205      	movs	r2, #5
 8006ea4:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 8006ea6:	e02b      	b.n	8006f00 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <Mark_Decision+0x78>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8006eb0:	2b81      	cmp	r3, #129	; 0x81
 8006eb2:	d103      	bne.n	8006ebc <Mark_Decision+0x28>
		markState = MARK_END;
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <Mark_Decision+0x7c>)
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
}
 8006eba:	e021      	b.n	8006f00 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 8006ebc:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <Mark_Decision+0x78>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da0b      	bge.n	8006ede <Mark_Decision+0x4a>
		if (markState == MARK_CURVE_L) {
 8006ec6:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <Mark_Decision+0x7c>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d103      	bne.n	8006ed6 <Mark_Decision+0x42>
			markState = MARK_STRAIGHT;
 8006ece:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <Mark_Decision+0x7c>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	701a      	strb	r2, [r3, #0]
}
 8006ed4:	e014      	b.n	8006f00 <Mark_Decision+0x6c>
			markState = MARK_CURVE_L;
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <Mark_Decision+0x7c>)
 8006ed8:	2203      	movs	r2, #3
 8006eda:	701a      	strb	r2, [r3, #0]
}
 8006edc:	e010      	b.n	8006f00 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <Mark_Decision+0x78>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <Mark_Decision+0x6c>
		if (markState == MARK_CURVE_R) {
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <Mark_Decision+0x7c>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d103      	bne.n	8006efa <Mark_Decision+0x66>
			markState = MARK_STRAIGHT;
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <Mark_Decision+0x7c>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
}
 8006ef8:	e002      	b.n	8006f00 <Mark_Decision+0x6c>
			markState = MARK_CURVE_R;
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <Mark_Decision+0x7c>)
 8006efc:	2202      	movs	r2, #2
 8006efe:	701a      	strb	r2, [r3, #0]
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20003502 	.word	0x20003502
 8006f10:	2000003c 	.word	0x2000003c

08006f14 <Mark>:





__STATIC_INLINE void	Mark() {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0

	static uint32_t	lineOutStartTime = 0;

	int8_t	curIrSensorMid = curPositionIrSensorMid;
 8006f1a:	4b52      	ldr	r3, [pc, #328]	; (8007064 <Mark+0x150>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]

	Mark_Masking(curIrSensorMid);
 8006f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fed7 	bl	8006cd8 <Mark_Masking>


	switch (markStateMachine) {
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	; (8007068 <Mark+0x154>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	f200 8093 	bhi.w	800705a <Mark+0x146>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <Mark+0x28>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f51 	.word	0x08006f51
 8006f40:	08006fc3 	.word	0x08006fc3
 8006f44:	08006ff1 	.word	0x08006ff1
 8006f48:	08007017 	.word	0x08007017
 8006f4c:	08007023 	.word	0x08007023


		case MARK_STATE_MACHINE_IDLE :

				// 라인 센서 4개 이상 인식
				if (__builtin_popcount(irSensorState & lineMasking) >= 6) {
 8006f50:	4b46      	ldr	r3, [pc, #280]	; (800706c <Mark+0x158>)
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	4b46      	ldr	r3, [pc, #280]	; (8007070 <Mark+0x15c>)
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7f9 fe92 	bl	8000c88 <__popcountsi2>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	dd0a      	ble.n	8006f80 <Mark+0x6c>

					Mark_Accumming_Reset();
 8006f6a:	f7ff ff5d 	bl	8006e28 <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 8006f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fef0 	bl	8006d58 <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_CROSS;
 8006f78:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <Mark+0x154>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
					lineOutStartTime = uwTick;

					markStateMachine = MARK_STATE_MACHINE_LINE_OUT;
				}

				break;
 8006f7e:	e065      	b.n	800704c <Mark+0x138>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 8006f80:	4b3a      	ldr	r3, [pc, #232]	; (800706c <Mark+0x158>)
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	4b3b      	ldr	r3, [pc, #236]	; (8007074 <Mark+0x160>)
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <Mark+0x94>
					Mark_Accumming_Reset();
 8006f92:	f7ff ff49 	bl	8006e28 <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 8006f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fedc 	bl	8006d58 <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_MARKER;
 8006fa0:	4b31      	ldr	r3, [pc, #196]	; (8007068 <Mark+0x154>)
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	701a      	strb	r2, [r3, #0]
				break;
 8006fa6:	e051      	b.n	800704c <Mark+0x138>
				else if (Is_Line_Out()) {
 8006fa8:	f7ff ff4a 	bl	8006e40 <Is_Line_Out>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d04c      	beq.n	800704c <Mark+0x138>
					lineOutStartTime = uwTick;
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <Mark+0x164>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a31      	ldr	r2, [pc, #196]	; (800707c <Mark+0x168>)
 8006fb8:	6013      	str	r3, [r2, #0]
					markStateMachine = MARK_STATE_MACHINE_LINE_OUT;
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <Mark+0x154>)
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	701a      	strb	r2, [r3, #0]
				break;
 8006fc0:	e044      	b.n	800704c <Mark+0x138>


		case MARK_STATE_MACHINE_CROSS:

				// accum
				Mark_Accumming(curIrSensorMid);
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fec6 	bl	8006d58 <Mark_Accumming>

				// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 8006fcc:	4b2c      	ldr	r3, [pc, #176]	; (8007080 <Mark+0x16c>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2bff      	cmp	r3, #255	; 0xff
 8006fd2:	d104      	bne.n	8006fde <Mark+0xca>
 8006fd4:	f7ff ff46 	bl	8006e64 <Is_Passed_Marker>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <Mark+0xd4>
					|| Is_Line_Out() ) {
 8006fde:	f7ff ff2f 	bl	8006e40 <Is_Line_Out>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d033      	beq.n	8007050 <Mark+0x13c>

					markStateMachine = MARK_STATE_MACHINE_DECISION;
 8006fe8:	4b1f      	ldr	r3, [pc, #124]	; (8007068 <Mark+0x154>)
 8006fea:	2203      	movs	r2, #3
 8006fec:	701a      	strb	r2, [r3, #0]
				}

				break;
 8006fee:	e02f      	b.n	8007050 <Mark+0x13c>


		case MARK_STATE_MACHINE_MARKER :

				// accum
				Mark_Accumming(curIrSensorMid);
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff feaf 	bl	8006d58 <Mark_Accumming>

				// 마커 센서가 0개 일 때
				if (Is_Passed_Marker() || Is_Line_Out()) {
 8006ffa:	f7ff ff33 	bl	8006e64 <Is_Passed_Marker>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <Mark+0xfa>
 8007004:	f7ff ff1c 	bl	8006e40 <Is_Line_Out>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d022      	beq.n	8007054 <Mark+0x140>

					markStateMachine = MARK_STATE_MACHINE_DECISION;
 800700e:	4b16      	ldr	r3, [pc, #88]	; (8007068 <Mark+0x154>)
 8007010:	2203      	movs	r2, #3
 8007012:	701a      	strb	r2, [r3, #0]
				}

				break;
 8007014:	e01e      	b.n	8007054 <Mark+0x140>



		case MARK_STATE_MACHINE_DECISION :

				Mark_Decision();
 8007016:	f7ff ff3d 	bl	8006e94 <Mark_Decision>

				markStateMachine = MARK_STATE_MACHINE_IDLE;
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <Mark+0x154>)
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]

				break;
 8007020:	e01b      	b.n	800705a <Mark+0x146>


		case MARK_STATE_MACHINE_LINE_OUT :


				if (!Is_Line_Out()) {
 8007022:	f7ff ff0d 	bl	8006e40 <Is_Line_Out>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <Mark+0x120>

					markStateMachine = MARK_STATE_MACHINE_IDLE;
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <Mark+0x154>)
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {

					markState = MARK_LINE_OUT;
				}

				break ;
 8007032:	e011      	b.n	8007058 <Mark+0x144>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 8007034:	4b11      	ldr	r3, [pc, #68]	; (800707c <Mark+0x168>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800703c:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <Mark+0x164>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d209      	bcs.n	8007058 <Mark+0x144>
					markState = MARK_LINE_OUT;
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <Mark+0x170>)
 8007046:	2206      	movs	r2, #6
 8007048:	701a      	strb	r2, [r3, #0]
				break ;
 800704a:	e005      	b.n	8007058 <Mark+0x144>
				break;
 800704c:	bf00      	nop
 800704e:	e004      	b.n	800705a <Mark+0x146>
				break;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <Mark+0x146>
				break;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <Mark+0x146>
				break ;
 8007058:	bf00      	nop

	}
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	2000001e 	.word	0x2000001e
 8007068:	20001490 	.word	0x20001490
 800706c:	2000357c 	.word	0x2000357c
 8007070:	2000003e 	.word	0x2000003e
 8007074:	20000044 	.word	0x20000044
 8007078:	200002a4 	.word	0x200002a4
 800707c:	20003518 	.word	0x20003518
 8007080:	20003502 	.word	0x20003502
 8007084:	2000003c 	.word	0x2000003c

08007088 <Positioning>:
#include "main.h"
#include "motor.h"



__STATIC_INLINE void	Positioning() {
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0


	int32_t positionSum = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
	int32_t sensorNormValsSum = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]

	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 8007096:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <Positioning+0xbc>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
 800709c:	e017      	b.n	80070ce <Positioning+0x46>

		positionSum += positionTable[i] * sensorNormVals[i];
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	4a29      	ldr	r2, [pc, #164]	; (8007148 <Positioning+0xc0>)
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	79fa      	ldrb	r2, [r7, #7]
 80070a8:	4928      	ldr	r1, [pc, #160]	; (800714c <Positioning+0xc4>)
 80070aa:	5c8a      	ldrb	r2, [r1, r2]
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
		sensorNormValsSum += sensorNormVals[i];
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <Positioning+0xc4>)
 80070bc:	5cd3      	ldrb	r3, [r2, r3]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	3301      	adds	r3, #1
 80070cc:	71fb      	strb	r3, [r7, #7]
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <Positioning+0xc8>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	79fa      	ldrb	r2, [r7, #7]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d9e1      	bls.n	800709e <Positioning+0x16>
	}

	positionVal = positionSum / GET_MAX(sensorNormValsSum, 1);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	bfb8      	it	lt
 80070e0:	2301      	movlt	r3, #1
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80070e8:	4a1a      	ldr	r2, [pc, #104]	; (8007154 <Positioning+0xcc>)
 80070ea:	6013      	str	r3, [r2, #0]


	int8_t	curIrSensorMid = (positionVal + 30000) / 4000;
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <Positioning+0xcc>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80070f4:	3330      	adds	r3, #48	; 0x30
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <Positioning+0xd0>)
 80070f8:	fb82 1203 	smull	r1, r2, r2, r3
 80070fc:	1212      	asrs	r2, r2, #8
 80070fe:	17db      	asrs	r3, r3, #31
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	71bb      	strb	r3, [r7, #6]

	curPositionIrSensorMid = curIrSensorMid;
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <Positioning+0xd4>)
 8007106:	79bb      	ldrb	r3, [r7, #6]
 8007108:	7013      	strb	r3, [r2, #0]

	positionIdxMax = GET_MIN(curIrSensorMid + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 800710a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800710e:	2b0c      	cmp	r3, #12
 8007110:	dc03      	bgt.n	800711a <Positioning+0x92>
 8007112:	79bb      	ldrb	r3, [r7, #6]
 8007114:	3302      	adds	r3, #2
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e000      	b.n	800711c <Positioning+0x94>
 800711a:	230f      	movs	r3, #15
 800711c:	4a0c      	ldr	r2, [pc, #48]	; (8007150 <Positioning+0xc8>)
 800711e:	7013      	strb	r3, [r2, #0]
	positionIdxMin = GET_MAX(curIrSensorMid - WINDOW_SIZE_HALF + 1, 0);
 8007120:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007124:	2b01      	cmp	r3, #1
 8007126:	dd03      	ble.n	8007130 <Positioning+0xa8>
 8007128:	79bb      	ldrb	r3, [r7, #6]
 800712a:	3b01      	subs	r3, #1
 800712c:	b2db      	uxtb	r3, r3
 800712e:	e000      	b.n	8007132 <Positioning+0xaa>
 8007130:	2300      	movs	r3, #0
 8007132:	4a04      	ldr	r2, [pc, #16]	; (8007144 <Positioning+0xbc>)
 8007134:	7013      	strb	r3, [r2, #0]
//	// this!!!
//	if (curInlineVal != 0) {
//		positionIdxMax = GET_MAX(positionIdxMax, IR_SENSOR_LEN - 1 - positionIdxMin);
//		positionIdxMin = GET_MIN(positionIdxMin, IR_SENSOR_LEN - 1 - positionIdxMax);
//	}
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000001d 	.word	0x2000001d
 8007148:	20000080 	.word	0x20000080
 800714c:	2000355c 	.word	0x2000355c
 8007150:	2000001c 	.word	0x2000001c
 8007154:	20001464 	.word	0x20001464
 8007158:	10624dd3 	.word	0x10624dd3
 800715c:	2000001e 	.word	0x2000001e

08007160 <First_Drive>:




//1차 주행
void First_Drive() {
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0

	Custom_OLED_Clear();
 8007166:	f7fe f840 	bl	80051ea <Custom_OLED_Clear>

	isStraightBoostEnabled = 0;
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <First_Drive+0x9c>)
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
	isCurveBoostEnabled = 0;
 8007170:	4b23      	ldr	r3, [pc, #140]	; (8007200 <First_Drive+0xa0>)
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
	isInlineDriveEnabled = 0;
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <First_Drive+0xa4>)
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]

	//주행 전 변수값 초기화
	Pre_Drive_Setting();
 800717c:	f7ff f872 	bl	8006264 <Pre_Drive_Setting>

	uint32_t startTime = uwTick;
 8007180:	4b21      	ldr	r3, [pc, #132]	; (8007208 <First_Drive+0xa8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	617b      	str	r3, [r7, #20]
	uint8_t exitEcho = First_Driving();
 8007186:	f000 f8a7 	bl	80072d8 <First_Driving>
 800718a:	4603      	mov	r3, r0
 800718c:	74fb      	strb	r3, [r7, #19]
	uint32_t endTime = uwTick;
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <First_Drive+0xa8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

	int min = (endTime - startTime) / 1000 / 60;
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	4a1c      	ldr	r2, [pc, #112]	; (800720c <First_Drive+0xac>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	0b9b      	lsrs	r3, r3, #14
 80071a2:	60bb      	str	r3, [r7, #8]
	int sec = (endTime - startTime) / 1000 % 60;
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	4a19      	ldr	r2, [pc, #100]	; (8007210 <First_Drive+0xb0>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	0999      	lsrs	r1, r3, #6
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <First_Drive+0xb4>)
 80071b4:	fba3 2301 	umull	r2, r3, r3, r1
 80071b8:	095a      	lsrs	r2, r3, #5
 80071ba:	4613      	mov	r3, r2
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	1aca      	subs	r2, r1, r3
 80071c4:	607a      	str	r2, [r7, #4]
	int ms = (endTime - startTime) % 1000;
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <First_Drive+0xb0>)
 80071ce:	fba3 1302 	umull	r1, r3, r3, r2
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	603b      	str	r3, [r7, #0]

	Custom_OLED_Printf("/5%d:%d.%d", min, sec, ms);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	480c      	ldr	r0, [pc, #48]	; (8007218 <First_Drive+0xb8>)
 80071e8:	f7fe f8e4 	bl	80053b4 <Custom_OLED_Printf>

	First_Drive_Data_Cntl(exitEcho);
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fa24 	bl	800763c <First_Drive_Data_Cntl>
}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	200034fe 	.word	0x200034fe
 8007200:	200034ff 	.word	0x200034ff
 8007204:	20003500 	.word	0x20003500
 8007208:	200002a4 	.word	0x200002a4
 800720c:	45e7b273 	.word	0x45e7b273
 8007210:	10624dd3 	.word	0x10624dd3
 8007214:	88888889 	.word	0x88888889
 8007218:	0800dc04 	.word	0x0800dc04

0800721c <First_Drive_Read_Map>:

//1차 주행
void First_Drive_Read_Map() {
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0

	Custom_OLED_Clear();
 8007222:	f7fd ffe2 	bl	80051ea <Custom_OLED_Clear>

	isStraightBoostEnabled = 0;
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <First_Drive_Read_Map+0x9c>)
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
	isCurveBoostEnabled = 0;
 800722c:	4b23      	ldr	r3, [pc, #140]	; (80072bc <First_Drive_Read_Map+0xa0>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
	isInlineDriveEnabled = 0;
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <First_Drive_Read_Map+0xa4>)
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]

	//주행 전 변수값 초기화
	Pre_Drive_Read_Map();
 8007238:	f7ff f82c 	bl	8006294 <Pre_Drive_Read_Map>

	uint32_t startTime = uwTick;
 800723c:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <First_Drive_Read_Map+0xa8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	617b      	str	r3, [r7, #20]
	uint8_t exitEcho = First_Driving();
 8007242:	f000 f849 	bl	80072d8 <First_Driving>
 8007246:	4603      	mov	r3, r0
 8007248:	74fb      	strb	r3, [r7, #19]
	uint32_t endTime = uwTick;
 800724a:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <First_Drive_Read_Map+0xa8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

	int min = (endTime - startTime) / 1000 / 60;
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <First_Drive_Read_Map+0xac>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	0b9b      	lsrs	r3, r3, #14
 800725e:	60bb      	str	r3, [r7, #8]
	int sec = (endTime - startTime) / 1000 % 60;
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	4a19      	ldr	r2, [pc, #100]	; (80072cc <First_Drive_Read_Map+0xb0>)
 8007268:	fba2 2303 	umull	r2, r3, r2, r3
 800726c:	0999      	lsrs	r1, r3, #6
 800726e:	4b18      	ldr	r3, [pc, #96]	; (80072d0 <First_Drive_Read_Map+0xb4>)
 8007270:	fba3 2301 	umull	r2, r3, r3, r1
 8007274:	095a      	lsrs	r2, r3, #5
 8007276:	4613      	mov	r3, r2
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	1aca      	subs	r2, r1, r3
 8007280:	607a      	str	r2, [r7, #4]
	int ms = (endTime - startTime) % 1000;
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	4b10      	ldr	r3, [pc, #64]	; (80072cc <First_Drive_Read_Map+0xb0>)
 800728a:	fba3 1302 	umull	r1, r3, r3, r2
 800728e:	099b      	lsrs	r3, r3, #6
 8007290:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	603b      	str	r3, [r7, #0]

	Custom_OLED_Printf("/5%d:%d.%d", min, sec, ms);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	480c      	ldr	r0, [pc, #48]	; (80072d4 <First_Drive_Read_Map+0xb8>)
 80072a4:	f7fe f886 	bl	80053b4 <Custom_OLED_Printf>

	First_Drive_Data_Cntl(exitEcho);
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f9c6 	bl	800763c <First_Drive_Data_Cntl>
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200034fe 	.word	0x200034fe
 80072bc:	200034ff 	.word	0x200034ff
 80072c0:	20003500 	.word	0x20003500
 80072c4:	200002a4 	.word	0x200002a4
 80072c8:	45e7b273 	.word	0x45e7b273
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	88888889 	.word	0x88888889
 80072d4:	0800dc04 	.word	0x0800dc04

080072d8 <First_Driving>:



__STATIC_INLINE uint8_t First_Driving() {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0

	uint8_t exitEcho = EXIT_ECHO_IDLE;
 80072de:	2300      	movs	r3, #0
 80072e0:	71fb      	strb	r3, [r7, #7]


	Sensor_Start();
 80072e2:	f003 fb13 	bl	800a90c <Sensor_Start>
	Positioning();
 80072e6:	f7ff fecf 	bl	8007088 <Positioning>

	Motor_Start();
 80072ea:	f001 ff63 	bl	80091b4 <Motor_Start>
	Speed_Control_Start();
 80072ee:	f001 ffb9 	bl	8009264 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Positioning();
 80072f2:	f7ff fec9 	bl	8007088 <Positioning>

		Mark();
 80072f6:	f7ff fe0d 	bl	8006f14 <Mark>
		First_Drive_Cntl();
 80072fa:	f000 f835 	bl	8007368 <First_Drive_Cntl>


		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End()) ) {
 80072fe:	f7ff fccf 	bl	8006ca0 <Is_Drive_End>
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f2      	beq.n	80072f2 <First_Driving+0x1a>

			Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <First_Driving+0x80>)
 800730e:	edd3 7a00 	vldr	s15, [r3]
 8007312:	eddf 0a12 	vldr	s1, [pc, #72]	; 800735c <First_Driving+0x84>
 8007316:	eeb0 0a67 	vmov.f32	s0, s15
 800731a:	f7ff fc69 	bl	8006bf0 <Drive_Fit_In>

			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 800731e:	e001      	b.n	8007324 <First_Driving+0x4c>
				Positioning();
 8007320:	f7ff feb2 	bl	8007088 <Positioning>
			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <First_Driving+0x88>)
 8007326:	edd3 7a00 	vldr	s15, [r3]
 800732a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007364 <First_Driving+0x8c>
 800732e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007336:	dcf3      	bgt.n	8007320 <First_Driving+0x48>
				//Drive_Speed_Cntl();
			}

			Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 8007338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800733c:	f7ff fc48 	bl	8006bd0 <Custom_Delay_ms>

			break;
 8007340:	bf00      	nop
		}
	}

	Motor_Stop();
 8007342:	f001 ff87 	bl	8009254 <Motor_Stop>
	Speed_Control_Stop();
 8007346:	f001 ff99 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 800734a:	f003 faf7 	bl	800a93c <Sensor_Stop>

	return exitEcho;
 800734e:	79fb      	ldrb	r3, [r7, #7]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	2000004c 	.word	0x2000004c
 800735c:	00000000 	.word	0x00000000
 8007360:	20001478 	.word	0x20001478
 8007364:	3e4ccccd 	.word	0x3e4ccccd

08007368 <First_Drive_Cntl>:





__STATIC_INLINE void First_Drive_Cntl() {
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0



	switch (markState) {
 800736c:	4b5b      	ldr	r3, [pc, #364]	; (80074dc <First_Drive_Cntl+0x174>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	3b01      	subs	r3, #1
 8007372:	2b05      	cmp	r3, #5
 8007374:	f200 80b0 	bhi.w	80074d8 <First_Drive_Cntl+0x170>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <First_Drive_Cntl+0x18>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080074d1 	.word	0x080074d1
 8007384:	080074d1 	.word	0x080074d1
 8007388:	080074d1 	.word	0x080074d1
 800738c:	080073d7 	.word	0x080073d7
 8007390:	08007399 	.word	0x08007399
 8007394:	080074d7 	.word	0x080074d7
			 *    n번째 크로스(crossCnt)		0		1		...		50
			 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
			 *
			 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
			 */
			crossCntTableBuffer[crossCnt] = driveDataIdx + 1;
 8007398:	4b51      	ldr	r3, [pc, #324]	; (80074e0 <First_Drive_Cntl+0x178>)
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	4a51      	ldr	r2, [pc, #324]	; (80074e4 <First_Drive_Cntl+0x17c>)
 800739e:	8812      	ldrh	r2, [r2, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	b299      	uxth	r1, r3
 80073a4:	4b50      	ldr	r3, [pc, #320]	; (80074e8 <First_Drive_Cntl+0x180>)
 80073a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			crossCnt += 1;
 80073aa:	4b4e      	ldr	r3, [pc, #312]	; (80074e4 <First_Drive_Cntl+0x17c>)
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	4b4c      	ldr	r3, [pc, #304]	; (80074e4 <First_Drive_Cntl+0x17c>)
 80073b4:	801a      	strh	r2, [r3, #0]

			// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
//			markState = driveDataBuffer[driveDataIdx].markState;

			// 크로스, 엔드마크는 읽은 후 마커를 강제로 직선으로 변경
			 markState = MARK_STRAIGHT;
 80073b6:	4b49      	ldr	r3, [pc, #292]	; (80074dc <First_Drive_Cntl+0x174>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
			 driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
 80073bc:	4b48      	ldr	r3, [pc, #288]	; (80074e0 <First_Drive_Cntl+0x178>)
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	4a4a      	ldr	r2, [pc, #296]	; (80074ec <First_Drive_Cntl+0x184>)
 80073c4:	460b      	mov	r3, r1
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	440b      	add	r3, r1
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	3308      	adds	r3, #8
 80073d0:	2201      	movs	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]

			break;
 80073d4:	e080      	b.n	80074d8 <First_Drive_Cntl+0x170>



		case MARK_END:

			endMarkCnt++;
 80073d6:	4b46      	ldr	r3, [pc, #280]	; (80074f0 <First_Drive_Cntl+0x188>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	3301      	adds	r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	4b44      	ldr	r3, [pc, #272]	; (80074f0 <First_Drive_Cntl+0x188>)
 80073e0:	701a      	strb	r2, [r3, #0]

			if (endMarkCnt >= stopEndMarkCnt) {
 80073e2:	4b43      	ldr	r3, [pc, #268]	; (80074f0 <First_Drive_Cntl+0x188>)
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	4b43      	ldr	r3, [pc, #268]	; (80074f4 <First_Drive_Cntl+0x18c>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d360      	bcc.n	80074b0 <First_Drive_Cntl+0x148>

				// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
				driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L;
 80073ee:	4b3c      	ldr	r3, [pc, #240]	; (80074e0 <First_Drive_Cntl+0x178>)
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	4b40      	ldr	r3, [pc, #256]	; (80074f8 <First_Drive_Cntl+0x190>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	493c      	ldr	r1, [pc, #240]	; (80074ec <First_Drive_Cntl+0x184>)
 80073fa:	4603      	mov	r3, r0
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4403      	add	r3, r0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	601a      	str	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R;
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <First_Drive_Cntl+0x194>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	4936      	ldr	r1, [pc, #216]	; (80074ec <First_Drive_Cntl+0x184>)
 8007412:	4603      	mov	r3, r0
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4403      	add	r3, r0
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	3304      	adds	r3, #4
 800741e:	601a      	str	r2, [r3, #0]

				// 종료 시점에서의 읽은 크로스의 개수
				driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8007420:	4b30      	ldr	r3, [pc, #192]	; (80074e4 <First_Drive_Cntl+0x17c>)
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	4619      	mov	r1, r3
 800742a:	b2d0      	uxtb	r0, r2
 800742c:	4a2f      	ldr	r2, [pc, #188]	; (80074ec <First_Drive_Cntl+0x184>)
 800742e:	460b      	mov	r3, r1
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	440b      	add	r3, r1
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	3309      	adds	r3, #9
 800743a:	4602      	mov	r2, r0
 800743c:	701a      	strb	r2, [r3, #0]

				driveDataIdx += 1;
 800743e:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007448:	801a      	strh	r2, [r3, #0]

				driveDataBuffer[driveDataIdx].markState = MARK_END;
 800744a:	4b25      	ldr	r3, [pc, #148]	; (80074e0 <First_Drive_Cntl+0x178>)
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	4a26      	ldr	r2, [pc, #152]	; (80074ec <First_Drive_Cntl+0x184>)
 8007452:	460b      	mov	r3, r1
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	440b      	add	r3, r1
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	3308      	adds	r3, #8
 800745e:	2204      	movs	r2, #4
 8007460:	701a      	strb	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <First_Drive_Cntl+0x17c>)
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	4619      	mov	r1, r3
 800746c:	b2d0      	uxtb	r0, r2
 800746e:	4a1f      	ldr	r2, [pc, #124]	; (80074ec <First_Drive_Cntl+0x184>)
 8007470:	460b      	mov	r3, r1
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	440b      	add	r3, r1
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	3309      	adds	r3, #9
 800747c:	4602      	mov	r2, r0
 800747e:	701a      	strb	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_L = 0;
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	4a19      	ldr	r2, [pc, #100]	; (80074ec <First_Drive_Cntl+0x184>)
 8007488:	460b      	mov	r3, r1
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	440b      	add	r3, r1
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_R = 0;
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <First_Drive_Cntl+0x178>)
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	4619      	mov	r1, r3
 800749c:	4a13      	ldr	r2, [pc, #76]	; (80074ec <First_Drive_Cntl+0x184>)
 800749e:	460b      	mov	r3, r1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
				// 크로스, 엔드마크는 읽은 후 마커를 강제로 직선으로 변경
				markState = MARK_STRAIGHT;
				driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
			}

			break;
 80074ae:	e013      	b.n	80074d8 <First_Drive_Cntl+0x170>
				markState = MARK_STRAIGHT;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <First_Drive_Cntl+0x174>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	701a      	strb	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <First_Drive_Cntl+0x178>)
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <First_Drive_Cntl+0x184>)
 80074be:	460b      	mov	r3, r1
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	440b      	add	r3, r1
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	3308      	adds	r3, #8
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
			break;
 80074ce:	e003      	b.n	80074d8 <First_Drive_Cntl+0x170>

		case MARK_STRAIGHT:
		case MARK_CURVE_L:
		case MARK_CURVE_R:

			Set_First_Drive_Data();
 80074d0:	f000 f816 	bl	8007500 <Set_First_Drive_Data>

			break;
 80074d4:	e000      	b.n	80074d8 <First_Drive_Cntl+0x170>
			break;
 80074d6:	bf00      	nop
	}

}
 80074d8:	bf00      	nop
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	2000003c 	.word	0x2000003c
 80074e0:	200032f8 	.word	0x200032f8
 80074e4:	200034fc 	.word	0x200034fc
 80074e8:	200033fc 	.word	0x200033fc
 80074ec:	200023f8 	.word	0x200023f8
 80074f0:	20003501 	.word	0x20003501
 80074f4:	20000049 	.word	0x20000049
 80074f8:	2000147c 	.word	0x2000147c
 80074fc:	20001480 	.word	0x20001480

08007500 <Set_First_Drive_Data>:




__STATIC_INLINE void Set_First_Drive_Data() {
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataBuffer[driveDataIdx].markState) {
 8007504:	4b46      	ldr	r3, [pc, #280]	; (8007620 <Set_First_Drive_Data+0x120>)
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	4619      	mov	r1, r3
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <Set_First_Drive_Data+0x124>)
 800750c:	460b      	mov	r3, r1
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	440b      	add	r3, r1
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	3308      	adds	r3, #8
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	4b43      	ldr	r3, [pc, #268]	; (8007628 <Set_First_Drive_Data+0x128>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d078      	beq.n	8007614 <Set_First_Drive_Data+0x114>

		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
		driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L;
 8007522:	4b3f      	ldr	r3, [pc, #252]	; (8007620 <Set_First_Drive_Data+0x120>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	4b40      	ldr	r3, [pc, #256]	; (800762c <Set_First_Drive_Data+0x12c>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	493d      	ldr	r1, [pc, #244]	; (8007624 <Set_First_Drive_Data+0x124>)
 800752e:	4603      	mov	r3, r0
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4403      	add	r3, r0
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	601a      	str	r2, [r3, #0]
		driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R;
 800753a:	4b39      	ldr	r3, [pc, #228]	; (8007620 <Set_First_Drive_Data+0x120>)
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	4b3b      	ldr	r3, [pc, #236]	; (8007630 <Set_First_Drive_Data+0x130>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4937      	ldr	r1, [pc, #220]	; (8007624 <Set_First_Drive_Data+0x124>)
 8007546:	4603      	mov	r3, r0
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	4403      	add	r3, r0
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3304      	adds	r3, #4
 8007552:	601a      	str	r2, [r3, #0]

		if (driveDataBuffer[driveDataIdx].tickCnt_L > STRAIGHT_ADJUST_TICK
 8007554:	4b32      	ldr	r3, [pc, #200]	; (8007620 <Set_First_Drive_Data+0x120>)
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	4a32      	ldr	r2, [pc, #200]	; (8007624 <Set_First_Drive_Data+0x124>)
 800755c:	460b      	mov	r3, r1
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	440b      	add	r3, r1
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007570:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007634 <Set_First_Drive_Data+0x134>
 8007574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	dd21      	ble.n	80075c2 <Set_First_Drive_Data+0xc2>
			&& driveDataBuffer[driveDataIdx].tickCnt_R  > STRAIGHT_ADJUST_TICK) {
 800757e:	4b28      	ldr	r3, [pc, #160]	; (8007620 <Set_First_Drive_Data+0x120>)
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	4a27      	ldr	r2, [pc, #156]	; (8007624 <Set_First_Drive_Data+0x124>)
 8007586:	460b      	mov	r3, r1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	440b      	add	r3, r1
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	3304      	adds	r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800759c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007634 <Set_First_Drive_Data+0x134>
 80075a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	dd0b      	ble.n	80075c2 <Set_First_Drive_Data+0xc2>

			driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <Set_First_Drive_Data+0x120>)
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <Set_First_Drive_Data+0x124>)
 80075b2:	460b      	mov	r3, r1
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	3308      	adds	r3, #8
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]
		}

		// curTick 초기화
		curTick_L = 0;
 80075c2:	4b1a      	ldr	r3, [pc, #104]	; (800762c <Set_First_Drive_Data+0x12c>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
		curTick_R = 0;
 80075c8:	4b19      	ldr	r3, [pc, #100]	; (8007630 <Set_First_Drive_Data+0x130>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

		// 종료 시점에서의 읽은 크로스의 개수
		driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 80075ce:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <Set_First_Drive_Data+0x138>)
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	4b13      	ldr	r3, [pc, #76]	; (8007620 <Set_First_Drive_Data+0x120>)
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	b2d0      	uxtb	r0, r2
 80075da:	4a12      	ldr	r2, [pc, #72]	; (8007624 <Set_First_Drive_Data+0x124>)
 80075dc:	460b      	mov	r3, r1
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	440b      	add	r3, r1
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	3309      	adds	r3, #9
 80075e8:	4602      	mov	r2, r0
 80075ea:	701a      	strb	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 80075ec:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <Set_First_Drive_Data+0x120>)
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <Set_First_Drive_Data+0x120>)
 80075f6:	801a      	strh	r2, [r3, #0]


		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBuffer[driveDataIdx].markState = markState;
 80075f8:	4b09      	ldr	r3, [pc, #36]	; (8007620 <Set_First_Drive_Data+0x120>)
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <Set_First_Drive_Data+0x128>)
 8007600:	7818      	ldrb	r0, [r3, #0]
 8007602:	4a08      	ldr	r2, [pc, #32]	; (8007624 <Set_First_Drive_Data+0x124>)
 8007604:	460b      	mov	r3, r1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	440b      	add	r3, r1
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	3308      	adds	r3, #8
 8007610:	4602      	mov	r2, r0
 8007612:	701a      	strb	r2, [r3, #0]
	}

}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200032f8 	.word	0x200032f8
 8007624:	200023f8 	.word	0x200023f8
 8007628:	2000003c 	.word	0x2000003c
 800762c:	2000147c 	.word	0x2000147c
 8007630:	20001480 	.word	0x20001480
 8007634:	480f8d32 	.word	0x480f8d32
 8007638:	200034fc 	.word	0x200034fc

0800763c <First_Drive_Data_Cntl>:



static void First_Drive_Data_Cntl(uint8_t exitEcho) {
 800763c:	b580      	push	{r7, lr}
 800763e:	b08e      	sub	sp, #56	; 0x38
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 1;
 8007646:	2301      	movs	r3, #1
 8007648:	86fb      	strh	r3, [r7, #54]	; 0x36
	t_tick markCnt_L = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	633b      	str	r3, [r7, #48]	; 0x30
	t_tick markCnt_R = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t crossCnt = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (exitEcho == EXIT_ECHO_END_MARK) {
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b01      	cmp	r3, #1
 800765c:	f040 8147 	bne.w	80078ee <First_Drive_Data_Cntl+0x2b2>

		// 마크 개수 세기
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8007660:	2301      	movs	r3, #1
 8007662:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007664:	e101      	b.n	800786a <First_Drive_Data_Cntl+0x22e>

			uint16_t curvature = CURVATURE_0;
 8007666:	2300      	movs	r3, #0
 8007668:	853b      	strh	r3, [r7, #40]	; 0x28

			float moveMeterL = (float)driveDataBuffer[i].tickCnt_L / TICK_PER_M;
 800766a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800766c:	49a9      	ldr	r1, [pc, #676]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 800766e:	4613      	mov	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007682:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8007918 <First_Drive_Data_Cntl+0x2dc>
 8007686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800768a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float moveMeterR = (float)driveDataBuffer[i].tickCnt_R / TICK_PER_M;
 800768e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007690:	49a0      	ldr	r1, [pc, #640]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3304      	adds	r3, #4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076a8:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8007918 <First_Drive_Data_Cntl+0x2dc>
 80076ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076b0:	edc7 7a08 	vstr	s15, [r7, #32]

			// 현재상태가 좌측 곡선인 경우
			if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 80076b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80076b6:	4997      	ldr	r1, [pc, #604]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	3308      	adds	r3, #8
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d146      	bne.n	8007758 <First_Drive_Data_Cntl+0x11c>

				markCnt_L += 1;
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	3301      	adds	r3, #1
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30

				float radiosOfCurvature = ROBOT_WIDTH / 2.f * (moveMeterL + moveMeterR) / (moveMeterR - moveMeterL + 1);
 80076d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80076d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80076d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076dc:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 80076e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80076e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80076e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80076ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fc:	edc7 7a04 	vstr	s15, [r7, #16]
				// calculate curvature
				float setaL = moveMeterL / (radiosOfCurvature - ROBOT_WIDTH / 2.f);
 8007700:	edd7 7a04 	vldr	s15, [r7, #16]
 8007704:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 8007708:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800770c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007714:	edc7 7a03 	vstr	s15, [r7, #12]
				float setaR = moveMeterR / (radiosOfCurvature + ROBOT_WIDTH / 2.f);
 8007718:	edd7 7a04 	vldr	s15, [r7, #16]
 800771c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 8007720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007724:	edd7 6a08 	vldr	s13, [r7, #32]
 8007728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772c:	edc7 7a02 	vstr	s15, [r7, #8]

				curvature = 360 * (setaL + setaR) / 2;
 8007730:	ed97 7a03 	vldr	s14, [r7, #12]
 8007734:	edd7 7a02 	vldr	s15, [r7, #8]
 8007738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800773c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8007920 <First_Drive_Data_Cntl+0x2e4>
 8007740:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007744:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800774c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007750:	ee17 3a90 	vmov	r3, s15
 8007754:	853b      	strh	r3, [r7, #40]	; 0x28
 8007756:	e07b      	b.n	8007850 <First_Drive_Data_Cntl+0x214>
			}

			// 현재상태가 우측 곡선인 경우
			else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 8007758:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800775a:	496e      	ldr	r1, [pc, #440]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	440b      	add	r3, r1
 8007766:	3308      	adds	r3, #8
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d146      	bne.n	80077fc <First_Drive_Data_Cntl+0x1c0>

				markCnt_R += 1;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	3301      	adds	r3, #1
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c

				float radiosOfCurvature = ROBOT_WIDTH / 2.f * (moveMeterR + moveMeterL) / (moveMeterL - moveMeterR + 1);
 8007774:	ed97 7a08 	vldr	s14, [r7, #32]
 8007778:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800777c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007780:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 8007784:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007788:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800778c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	edc7 7a07 	vstr	s15, [r7, #28]
				// calculate curvature
				float setaL = moveMeterL / (radiosOfCurvature + ROBOT_WIDTH / 2.f);
 80077a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80077a8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 80077ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80077b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b8:	edc7 7a06 	vstr	s15, [r7, #24]
				float setaR = moveMeterR / (radiosOfCurvature - ROBOT_WIDTH / 2.f);
 80077bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80077c0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800791c <First_Drive_Data_Cntl+0x2e0>
 80077c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80077c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80077cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d0:	edc7 7a05 	vstr	s15, [r7, #20]

				curvature = 360 * (setaL + setaR) / 2;
 80077d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80077d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80077dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8007920 <First_Drive_Data_Cntl+0x2e4>
 80077e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80077ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f4:	ee17 3a90 	vmov	r3, s15
 80077f8:	853b      	strh	r3, [r7, #40]	; 0x28
 80077fa:	e029      	b.n	8007850 <First_Drive_Data_Cntl+0x214>
			}

			// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
			else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 80077fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80077fe:	4945      	ldr	r1, [pc, #276]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 8007800:	4613      	mov	r3, r2
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3308      	adds	r3, #8
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d11e      	bne.n	8007850 <First_Drive_Data_Cntl+0x214>

				// 이전 상태가 좌측 곡선이었을 경우
				if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 8007812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	493f      	ldr	r1, [pc, #252]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 8007818:	4613      	mov	r3, r2
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	440b      	add	r3, r1
 8007822:	3308      	adds	r3, #8
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d103      	bne.n	8007832 <First_Drive_Data_Cntl+0x1f6>
					markCnt_L += 1;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	3301      	adds	r3, #1
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
 8007830:	e00e      	b.n	8007850 <First_Drive_Data_Cntl+0x214>
				}

				// 이전 상태가 우측 곡선이었을 경우
				else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 8007832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007834:	1e5a      	subs	r2, r3, #1
 8007836:	4937      	ldr	r1, [pc, #220]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	3308      	adds	r3, #8
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d102      	bne.n	8007850 <First_Drive_Data_Cntl+0x214>
					markCnt_R += 1;
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	3301      	adds	r3, #1
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
			}

			driveDataBuffer[i].curvature = curvature;
 8007850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007852:	4930      	ldr	r1, [pc, #192]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	330a      	adds	r3, #10
 8007860:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007862:	801a      	strh	r2, [r3, #0]
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8007864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007866:	3301      	adds	r3, #1
 8007868:	86fb      	strh	r3, [r7, #54]	; 0x36
 800786a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800786c:	4929      	ldr	r1, [pc, #164]	; (8007914 <First_Drive_Data_Cntl+0x2d8>)
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	3308      	adds	r3, #8
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <First_Drive_Data_Cntl+0x24e>
 8007880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007882:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007886:	f4ff aeee 	bcc.w	8007666 <First_Drive_Data_Cntl+0x2a>
		}

		for (i = 0; i < MAX_CROSS_CNT && crossCntTableBuffer[i] != 0; i++) {
 800788a:	2300      	movs	r3, #0
 800788c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800788e:	e007      	b.n	80078a0 <First_Drive_Data_Cntl+0x264>

			crossCnt++;
 8007890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007894:	3301      	adds	r3, #1
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for (i = 0; i < MAX_CROSS_CNT && crossCntTableBuffer[i] != 0; i++) {
 800789a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800789c:	3301      	adds	r3, #1
 800789e:	86fb      	strh	r3, [r7, #54]	; 0x36
 80078a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078a2:	2b7f      	cmp	r3, #127	; 0x7f
 80078a4:	d805      	bhi.n	80078b2 <First_Drive_Data_Cntl+0x276>
 80078a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078a8:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <First_Drive_Data_Cntl+0x2e8>)
 80078aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1ee      	bne.n	8007890 <First_Drive_Data_Cntl+0x254>
		}

		Custom_OLED_Clear();
 80078b2:	f7fd fc9a 	bl	80051ea <Custom_OLED_Clear>

		// OLED에 exitEcho 변수명 및 마크 개수 출력
		Custom_OLED_Printf("/0end mark");
 80078b6:	481c      	ldr	r0, [pc, #112]	; (8007928 <First_Drive_Data_Cntl+0x2ec>)
 80078b8:	f7fd fd7c 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 80078bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078be:	481b      	ldr	r0, [pc, #108]	; (800792c <First_Drive_Data_Cntl+0x2f0>)
 80078c0:	f7fd fd78 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 80078c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c6:	481a      	ldr	r0, [pc, #104]	; (8007930 <First_Drive_Data_Cntl+0x2f4>)
 80078c8:	f7fd fd74 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3cross:    %d", crossCnt);
 80078cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078d0:	4619      	mov	r1, r3
 80078d2:	4818      	ldr	r0, [pc, #96]	; (8007934 <First_Drive_Data_Cntl+0x2f8>)
 80078d4:	f7fd fd6e 	bl	80053b4 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 80078d8:	bf00      	nop
 80078da:	f7fe f89b 	bl	8005a14 <Custom_Switch_Read>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d1fa      	bne.n	80078da <First_Drive_Data_Cntl+0x29e>

		First_Drive_Data_Update_Cntl(exitEcho);
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f828 	bl	800793c <First_Drive_Data_Update_Cntl>
 80078ec:	e00b      	b.n	8007906 <First_Drive_Data_Cntl+0x2ca>
	}

	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d108      	bne.n	8007906 <First_Drive_Data_Cntl+0x2ca>

		Custom_OLED_Printf("/0line out");
 80078f4:	4810      	ldr	r0, [pc, #64]	; (8007938 <First_Drive_Data_Cntl+0x2fc>)
 80078f6:	f7fd fd5d 	bl	80053b4 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 80078fa:	bf00      	nop
 80078fc:	f7fe f88a 	bl	8005a14 <Custom_Switch_Read>
 8007900:	4603      	mov	r3, r0
 8007902:	2b04      	cmp	r3, #4
 8007904:	d1fa      	bne.n	80078fc <First_Drive_Data_Cntl+0x2c0>
	}

	Custom_OLED_Clear();
 8007906:	f7fd fc70 	bl	80051ea <Custom_OLED_Clear>
}
 800790a:	bf00      	nop
 800790c:	3738      	adds	r7, #56	; 0x38
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200023f8 	.word	0x200023f8
 8007918:	478f8d32 	.word	0x478f8d32
 800791c:	3dcccccd 	.word	0x3dcccccd
 8007920:	43b40000 	.word	0x43b40000
 8007924:	200033fc 	.word	0x200033fc
 8007928:	0800dc10 	.word	0x0800dc10
 800792c:	0800dc1c 	.word	0x0800dc1c
 8007930:	0800dc2c 	.word	0x0800dc2c
 8007934:	0800dc3c 	.word	0x0800dc3c
 8007938:	0800dc4c 	.word	0x0800dc4c

0800793c <First_Drive_Data_Update_Cntl>:



static void First_Drive_Data_Update_Cntl(uint8_t exitEcho) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]

	uint8_t sw;
	uint8_t isUpdate = CUSTOM_FALSE;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]

	Custom_OLED_Printf("/5update: NO");
 800794a:	484f      	ldr	r0, [pc, #316]	; (8007a88 <First_Drive_Data_Update_Cntl+0x14c>)
 800794c:	f7fd fd32 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007950:	e010      	b.n	8007974 <First_Drive_Data_Update_Cntl+0x38>

		// data 업데이트 함
		if (sw == CUSTOM_SW_1) {
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <First_Drive_Data_Update_Cntl+0x28>
			Custom_OLED_Printf("/5update: YES");
 8007958:	484c      	ldr	r0, [pc, #304]	; (8007a8c <First_Drive_Data_Update_Cntl+0x150>)
 800795a:	f7fd fd2b 	bl	80053b4 <Custom_OLED_Printf>
			isUpdate = CUSTOM_TRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
 8007962:	e007      	b.n	8007974 <First_Drive_Data_Update_Cntl+0x38>
		}

		// data 업데이트 안함
		else if (sw == CUSTOM_SW_2) {
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	2b02      	cmp	r3, #2
 8007968:	d104      	bne.n	8007974 <First_Drive_Data_Update_Cntl+0x38>
			Custom_OLED_Printf("/5update: NO ");
 800796a:	4849      	ldr	r0, [pc, #292]	; (8007a90 <First_Drive_Data_Update_Cntl+0x154>)
 800796c:	f7fd fd22 	bl	80053b4 <Custom_OLED_Printf>
			isUpdate = CUSTOM_FALSE;
 8007970:	2300      	movs	r3, #0
 8007972:	75fb      	strb	r3, [r7, #23]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007974:	f7fe f84e 	bl	8005a14 <Custom_Switch_Read>
 8007978:	4603      	mov	r3, r0
 800797a:	72fb      	strb	r3, [r7, #11]
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d1e7      	bne.n	8007952 <First_Drive_Data_Update_Cntl+0x16>
		}
	}
	Custom_OLED_Clear();
 8007982:	f7fd fc32 	bl	80051ea <Custom_OLED_Clear>

	if (driveData[0].markState == MARK_NONE || isUpdate == CUSTOM_TRUE) {
 8007986:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 8007988:	7a1b      	ldrb	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <First_Drive_Data_Update_Cntl+0x58>
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d175      	bne.n	8007a80 <First_Drive_Data_Update_Cntl+0x144>

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	e05d      	b.n	8007a56 <First_Drive_Data_Update_Cntl+0x11a>
			driveData[i].tickCnt_L = driveDataBuffer[i].tickCnt_L;
 800799a:	493f      	ldr	r1, [pc, #252]	; (8007a98 <First_Drive_Data_Update_Cntl+0x15c>)
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	6819      	ldr	r1, [r3, #0]
 80079aa:	483a      	ldr	r0, [pc, #232]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4613      	mov	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4403      	add	r3, r0
 80079b8:	6019      	str	r1, [r3, #0]
			driveData[i].tickCnt_R = driveDataBuffer[i].tickCnt_R;
 80079ba:	4937      	ldr	r1, [pc, #220]	; (8007a98 <First_Drive_Data_Update_Cntl+0x15c>)
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4613      	mov	r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	440b      	add	r3, r1
 80079c8:	3304      	adds	r3, #4
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	4831      	ldr	r0, [pc, #196]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4613      	mov	r3, r2
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4403      	add	r3, r0
 80079da:	3304      	adds	r3, #4
 80079dc:	6019      	str	r1, [r3, #0]
			driveData[i].markState = driveDataBuffer[i].markState;
 80079de:	492e      	ldr	r1, [pc, #184]	; (8007a98 <First_Drive_Data_Update_Cntl+0x15c>)
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3308      	adds	r3, #8
 80079ee:	7818      	ldrb	r0, [r3, #0]
 80079f0:	4928      	ldr	r1, [pc, #160]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4613      	mov	r3, r2
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	3308      	adds	r3, #8
 8007a00:	4602      	mov	r2, r0
 8007a02:	701a      	strb	r2, [r3, #0]
			driveData[i].crossCnt = driveDataBuffer[i].crossCnt;
 8007a04:	4924      	ldr	r1, [pc, #144]	; (8007a98 <First_Drive_Data_Update_Cntl+0x15c>)
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	3309      	adds	r3, #9
 8007a14:	7818      	ldrb	r0, [r3, #0]
 8007a16:	491f      	ldr	r1, [pc, #124]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	3309      	adds	r3, #9
 8007a26:	4602      	mov	r2, r0
 8007a28:	701a      	strb	r2, [r3, #0]
			driveData[i].curvature = driveDataBuffer[i].curvature;
 8007a2a:	491b      	ldr	r1, [pc, #108]	; (8007a98 <First_Drive_Data_Update_Cntl+0x15c>)
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	330a      	adds	r3, #10
 8007a3a:	8818      	ldrh	r0, [r3, #0]
 8007a3c:	4915      	ldr	r1, [pc, #84]	; (8007a94 <First_Drive_Data_Update_Cntl+0x158>)
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4613      	mov	r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	330a      	adds	r3, #10
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	3301      	adds	r3, #1
 8007a54:	613b      	str	r3, [r7, #16]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007a5c:	d39d      	bcc.n	800799a <First_Drive_Data_Update_Cntl+0x5e>
		}

		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	e00a      	b.n	8007a7a <First_Drive_Data_Update_Cntl+0x13e>

			crossCntTable[i] = crossCntTableBuffer[i];
 8007a64:	4a0d      	ldr	r2, [pc, #52]	; (8007a9c <First_Drive_Data_Update_Cntl+0x160>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <First_Drive_Data_Update_Cntl+0x164>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a7e:	d9f1      	bls.n	8007a64 <First_Drive_Data_Update_Cntl+0x128>
		}
	}
}
 8007a80:	bf00      	nop
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	0800dc58 	.word	0x0800dc58
 8007a8c:	0800dc68 	.word	0x0800dc68
 8007a90:	0800dc78 	.word	0x0800dc78
 8007a94:	200014f8 	.word	0x200014f8
 8007a98:	200023f8 	.word	0x200023f8
 8007a9c:	200033fc 	.word	0x200033fc
 8007aa0:	200032fc 	.word	0x200032fc

08007aa4 <LL_USART_Enable>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60da      	str	r2, [r3, #12]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8007b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8007b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8007b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8007b3a:	bf00      	nop
 8007b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d1f8      	bne.n	8007b3c <Custom_Delay_us+0x34>
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff ffcc 	bl	8007b08 <Custom_Delay_us>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
	uwTick = 0;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <Custom_Delay_Init_SysTick+0x20>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <Custom_Delay_Init_SysTick+0x24>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a05      	ldr	r2, [pc, #20]	; (8007b9c <Custom_Delay_Init_SysTick+0x24>)
 8007b88:	f043 0307 	orr.w	r3, r3, #7
 8007b8c:	6013      	str	r3, [r2, #0]
}
 8007b8e:	bf00      	nop
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	200002a4 	.word	0x200002a4
 8007b9c:	e000e010 	.word	0xe000e010

08007ba0 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8007ba8:	bf00      	nop
 8007baa:	4808      	ldr	r0, [pc, #32]	; (8007bcc <__io_putchar+0x2c>)
 8007bac:	f7ff ff8a 	bl	8007ac4 <LL_USART_IsActiveFlag_TXE>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f9      	beq.n	8007baa <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4803      	ldr	r0, [pc, #12]	; (8007bcc <__io_putchar+0x2c>)
 8007bbe:	f7ff ff94 	bl	8007aea <LL_USART_TransmitData8>
	return ch;
 8007bc2:	687b      	ldr	r3, [r7, #4]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40004400 	.word	0x40004400

08007bd0 <Init>:



void Init() {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b0d2      	sub	sp, #328	; 0x148
 8007bd4:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007bd6:	4b4c      	ldr	r3, [pc, #304]	; (8007d08 <Init+0x138>)
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	4a4b      	ldr	r2, [pc, #300]	; (8007d08 <Init+0x138>)
 8007bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be0:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007be2:	4b4a      	ldr	r3, [pc, #296]	; (8007d0c <Init+0x13c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a49      	ldr	r2, [pc, #292]	; (8007d0c <Init+0x13c>)
 8007be8:	f043 0301 	orr.w	r3, r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 8007bee:	4848      	ldr	r0, [pc, #288]	; (8007d10 <Init+0x140>)
 8007bf0:	f7ff ff58 	bl	8007aa4 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8007bf4:	f7ff ffc0 	bl	8007b78 <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8007bf8:	f7fd fb16 	bl	8005228 <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 8007bfc:	f7fd f946 	bl	8004e8c <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8007c00:	f7fd fb12 	bl	8005228 <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8007c04:	4843      	ldr	r0, [pc, #268]	; (8007d14 <Init+0x144>)
 8007c06:	f7fd fbd5 	bl	80053b4 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8007c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c0e:	f7ff ffa3 	bl	8007b58 <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8007c12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007c16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <Init+0x148>)
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	4611      	mov	r1, r2
 8007c20:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007c24:	461a      	mov	r2, r3
 8007c26:	f003 fd62 	bl	800b6ee <memcpy>
			{ "Drive Data Buf ", Print_Drive_Data_Buffer },
//			{ "Test Velocity  ", Motor_Test_Velocity },
//			{ "Switch Test    ", Switch_Test },
	};

	uint8_t sw = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	uint8_t count = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 8007c36:	2310      	movs	r3, #16
 8007c38:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

	Custom_OLED_Clear();
 8007c3c:	f7fd fad5 	bl	80051ea <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8007c40:	f7fd fad3 	bl	80051ea <Custom_OLED_Clear>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007c44:	e048      	b.n	8007cd8 <Init+0x108>
			Custom_OLED_Printf("%s", menus[count].menuName);
 8007c46:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8007c4a:	1d39      	adds	r1, r7, #4
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	4619      	mov	r1, r3
 8007c58:	4830      	ldr	r0, [pc, #192]	; (8007d1c <Init+0x14c>)
 8007c5a:	f7fd fbab 	bl	80053b4 <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8007c5e:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d10f      	bne.n	8007c86 <Init+0xb6>
				if (count == 0)
 8007c66:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <Init+0xaa>
					count = menuCnt - 1;
 8007c6e:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8007c72:	3b01      	subs	r3, #1
 8007c74:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8007c78:	e02e      	b.n	8007cd8 <Init+0x108>
				else
					count--;
 8007c7a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8007c84:	e028      	b.n	8007cd8 <Init+0x108>
			}
			else if (sw == CUSTOM_SW_2) {
 8007c86:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d110      	bne.n	8007cb0 <Init+0xe0>
				if (count == menuCnt - 1)
 8007c8e:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8007c92:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8007c96:	3b01      	subs	r3, #1
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d103      	bne.n	8007ca4 <Init+0xd4>
					count = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8007ca2:	e019      	b.n	8007cd8 <Init+0x108>
				else
					count++;
 8007ca4:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8007cae:	e013      	b.n	8007cd8 <Init+0x108>
			}
			else if (sw == CUSTOM_SW_1_2) {
 8007cb0:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d102      	bne.n	8007cbe <Init+0xee>
				First_Drive_Read_Map();
 8007cb8:	f7ff fab0 	bl	800721c <First_Drive_Read_Map>
 8007cbc:	e00c      	b.n	8007cd8 <Init+0x108>
			}
			else if (sw == CUSTOM_SW_2_3) {
 8007cbe:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007cc2:	2b06      	cmp	r3, #6
 8007cc4:	d102      	bne.n	8007ccc <Init+0xfc>
				Second_Drive_Quick();
 8007cc6:	f002 fb2d 	bl	800a324 <Second_Drive_Quick>
 8007cca:	e005      	b.n	8007cd8 <Init+0x108>
			}
			else if (sw == CUSTOM_SW_1_3) {
 8007ccc:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007cd0:	2b05      	cmp	r3, #5
 8007cd2:	d101      	bne.n	8007cd8 <Init+0x108>
				Third_Drive_Quick();
 8007cd4:	f002 fb98 	bl	800a408 <Third_Drive_Quick>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007cd8:	f7fd fe9c 	bl	8005a14 <Custom_Switch_Read>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8007ce2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d1ad      	bne.n	8007c46 <Init+0x76>
			}
		}
		menus[count].func();
 8007cea:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8007cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007cf2:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	3310      	adds	r3, #16
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4798      	blx	r3
		Custom_OLED_Clear();
 8007d06:	e79b      	b.n	8007c40 <Init+0x70>
 8007d08:	e000edf0 	.word	0xe000edf0
 8007d0c:	e0001000 	.word	0xe0001000
 8007d10:	40004400 	.word	0x40004400
 8007d14:	0800dc88 	.word	0x0800dc88
 8007d18:	0800dca0 	.word	0x0800dca0
 8007d1c:	0800dc9c 	.word	0x0800dc9c

08007d20 <LL_TIM_EnableCounter>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f043 0201 	orr.w	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <LL_TIM_DisableCounter>:
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f023 0201 	bic.w	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <LL_TIM_CC_EnableChannel>:
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1a      	ldr	r2, [r3, #32]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <LL_TIM_CC_DisableChannel>:
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1a      	ldr	r2, [r3, #32]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	401a      	ands	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <LL_TIM_OC_SetCompareCH2>:
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <Custom_GPIO_Set>:
		uint32_t value) {
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <Custom_GPIO_Set+0x22>
 8007dde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007de2:	e000      	b.n	8007de6 <Custom_GPIO_Set+0x24>
 8007de4:	2100      	movs	r1, #0
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	400b      	ands	r3, r1
 8007dea:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	615a      	str	r2, [r3, #20]
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <Mark_Masking>:
__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
	lineMasking = markMasking.line_mask[curIrSensorMid];
 8007e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0a:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <Mark_Masking+0x68>)
 8007e0c:	3320      	adds	r3, #32
 8007e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <Mark_Masking+0x6c>)
 8007e16:	801a      	strh	r2, [r3, #0]
	leftMarkMasking = markMasking.left_mask[curIrSensorMid];
 8007e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1c:	4a11      	ldr	r2, [pc, #68]	; (8007e64 <Mark_Masking+0x68>)
 8007e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <Mark_Masking+0x70>)
 8007e26:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = markMasking.right_mask[curIrSensorMid];
 8007e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2c:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <Mark_Masking+0x68>)
 8007e2e:	3310      	adds	r3, #16
 8007e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <Mark_Masking+0x74>)
 8007e38:	801a      	strh	r2, [r3, #0]
	bothMarkMasking = leftMarkMasking | rightMarkMasking;
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <Mark_Masking+0x70>)
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <Mark_Masking+0x74>)
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <Mark_Masking+0x78>)
 8007e48:	801a      	strh	r2, [r3, #0]
	markAreaMasking = ~lineMasking;
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <Mark_Masking+0x6c>)
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <Mark_Masking+0x7c>)
 8007e54:	801a      	strh	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20001494 	.word	0x20001494
 8007e68:	2000003e 	.word	0x2000003e
 8007e6c:	20000042 	.word	0x20000042
 8007e70:	20000040 	.word	0x20000040
 8007e74:	20000044 	.word	0x20000044
 8007e78:	20000046 	.word	0x20000046

08007e7c <Mark_Accumming>:
__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid < 11) {
 8007e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8a:	2b0a      	cmp	r3, #10
 8007e8c:	dc17      	bgt.n	8007ebe <Mark_Accumming+0x42>
		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <Mark_Accumming+0xbc>)
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <Mark_Accumming+0xc0>)
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	f1c3 030b 	rsb	r3, r3, #11
 8007ea6:	fa42 f303 	asr.w	r3, r2, r3
 8007eaa:	b25a      	sxtb	r2, r3
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <Mark_Accumming+0xc4>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	b25b      	sxtb	r3, r3
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <Mark_Accumming+0xc4>)
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e015      	b.n	8007eea <Mark_Accumming+0x6e>
		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 8007ebe:	4b1e      	ldr	r3, [pc, #120]	; (8007f38 <Mark_Accumming+0xbc>)
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <Mark_Accumming+0xc0>)
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed2:	3b0b      	subs	r3, #11
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	b25a      	sxtb	r2, r3
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <Mark_Accumming+0xc4>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <Mark_Accumming+0xc4>)
 8007ee8:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 8007eea:	4b13      	ldr	r3, [pc, #76]	; (8007f38 <Mark_Accumming+0xbc>)
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <Mark_Accumming+0xc8>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d006      	beq.n	8007f0a <Mark_Accumming+0x8e>
		irSensorStateSum |= 0x80;
 8007efc:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <Mark_Accumming+0xc4>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <Mark_Accumming+0xc4>)
 8007f08:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <Mark_Accumming+0xbc>)
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <Mark_Accumming+0xcc>)
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	4013      	ands	r3, r2
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <Mark_Accumming+0xae>
		irSensorStateSum |= 0x01;
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <Mark_Accumming+0xc4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f043 0301 	orr.w	r3, r3, #1
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <Mark_Accumming+0xc4>)
 8007f28:	701a      	strb	r2, [r3, #0]
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	2000357c 	.word	0x2000357c
 8007f3c:	2000003e 	.word	0x2000003e
 8007f40:	20003502 	.word	0x20003502
 8007f44:	20000042 	.word	0x20000042
 8007f48:	20000040 	.word	0x20000040

08007f4c <Mark_Accumming_Reset>:
__STATIC_INLINE void	Mark_Accumming_Reset() {
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
	irSensorStateSum = 0x00;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <Mark_Accumming_Reset+0x14>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	701a      	strb	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20003502 	.word	0x20003502

08007f64 <Is_Line_Out>:
__STATIC_INLINE uint8_t	Is_Line_Out() {
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
	if (irSensorState == 0x00) {
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <Is_Line_Out+0x20>)
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <Is_Line_Out+0x14>
	return CUSTOM_FALSE;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2000357c 	.word	0x2000357c

08007f88 <Is_Passed_Marker>:
__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <Is_Passed_Marker+0x28>)
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	4b08      	ldr	r3, [pc, #32]	; (8007fb4 <Is_Passed_Marker+0x2c>)
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	4013      	ands	r3, r2
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <Is_Passed_Marker+0x1c>
	return CUSTOM_FALSE;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	2000357c 	.word	0x2000357c
 8007fb4:	20000046 	.word	0x20000046

08007fb8 <Mark_Decision>:
__STATIC_INLINE void	Mark_Decision() {
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
	if (irSensorStateSum == 0xff) {
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <Mark_Decision+0x78>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2bff      	cmp	r3, #255	; 0xff
 8007fc2:	d103      	bne.n	8007fcc <Mark_Decision+0x14>
		markState = MARK_CROSS;
 8007fc4:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <Mark_Decision+0x7c>)
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	701a      	strb	r2, [r3, #0]
}
 8007fca:	e02b      	b.n	8008024 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 8007fcc:	4b18      	ldr	r3, [pc, #96]	; (8008030 <Mark_Decision+0x78>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8007fd4:	2b81      	cmp	r3, #129	; 0x81
 8007fd6:	d103      	bne.n	8007fe0 <Mark_Decision+0x28>
		markState = MARK_END;
 8007fd8:	4b16      	ldr	r3, [pc, #88]	; (8008034 <Mark_Decision+0x7c>)
 8007fda:	2204      	movs	r2, #4
 8007fdc:	701a      	strb	r2, [r3, #0]
}
 8007fde:	e021      	b.n	8008024 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <Mark_Decision+0x78>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	da0b      	bge.n	8008002 <Mark_Decision+0x4a>
		if (markState == MARK_CURVE_L) {
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <Mark_Decision+0x7c>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d103      	bne.n	8007ffa <Mark_Decision+0x42>
			markState = MARK_STRAIGHT;
 8007ff2:	4b10      	ldr	r3, [pc, #64]	; (8008034 <Mark_Decision+0x7c>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	701a      	strb	r2, [r3, #0]
}
 8007ff8:	e014      	b.n	8008024 <Mark_Decision+0x6c>
			markState = MARK_CURVE_L;
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <Mark_Decision+0x7c>)
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	701a      	strb	r2, [r3, #0]
}
 8008000:	e010      	b.n	8008024 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <Mark_Decision+0x78>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <Mark_Decision+0x6c>
		if (markState == MARK_CURVE_R) {
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <Mark_Decision+0x7c>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d103      	bne.n	800801e <Mark_Decision+0x66>
			markState = MARK_STRAIGHT;
 8008016:	4b07      	ldr	r3, [pc, #28]	; (8008034 <Mark_Decision+0x7c>)
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
}
 800801c:	e002      	b.n	8008024 <Mark_Decision+0x6c>
			markState = MARK_CURVE_R;
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <Mark_Decision+0x7c>)
 8008020:	2202      	movs	r2, #2
 8008022:	701a      	strb	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20003502 	.word	0x20003502
 8008034:	2000003c 	.word	0x2000003c

08008038 <Mark>:
__STATIC_INLINE void	Mark() {
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	int8_t	curIrSensorMid = curPositionIrSensorMid;
 800803e:	4b52      	ldr	r3, [pc, #328]	; (8008188 <Mark+0x150>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
	Mark_Masking(curIrSensorMid);
 8008044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fed7 	bl	8007dfc <Mark_Masking>
	switch (markStateMachine) {
 800804e:	4b4f      	ldr	r3, [pc, #316]	; (800818c <Mark+0x154>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b04      	cmp	r3, #4
 8008054:	f200 8093 	bhi.w	800817e <Mark+0x146>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <Mark+0x28>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008075 	.word	0x08008075
 8008064:	080080e7 	.word	0x080080e7
 8008068:	08008115 	.word	0x08008115
 800806c:	0800813b 	.word	0x0800813b
 8008070:	08008147 	.word	0x08008147
				if (__builtin_popcount(irSensorState & lineMasking) >= 6) {
 8008074:	4b46      	ldr	r3, [pc, #280]	; (8008190 <Mark+0x158>)
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29a      	uxth	r2, r3
 800807a:	4b46      	ldr	r3, [pc, #280]	; (8008194 <Mark+0x15c>)
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	4013      	ands	r3, r2
 8008080:	b29b      	uxth	r3, r3
 8008082:	4618      	mov	r0, r3
 8008084:	f7f8 fe00 	bl	8000c88 <__popcountsi2>
 8008088:	4603      	mov	r3, r0
 800808a:	2b05      	cmp	r3, #5
 800808c:	dd0a      	ble.n	80080a4 <Mark+0x6c>
					Mark_Accumming_Reset();
 800808e:	f7ff ff5d 	bl	8007f4c <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 8008092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fef0 	bl	8007e7c <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_CROSS;
 800809c:	4b3b      	ldr	r3, [pc, #236]	; (800818c <Mark+0x154>)
 800809e:	2201      	movs	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]
				break;
 80080a2:	e065      	b.n	8008170 <Mark+0x138>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 80080a4:	4b3a      	ldr	r3, [pc, #232]	; (8008190 <Mark+0x158>)
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <Mark+0x160>)
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	4013      	ands	r3, r2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <Mark+0x94>
					Mark_Accumming_Reset();
 80080b6:	f7ff ff49 	bl	8007f4c <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 80080ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fedc 	bl	8007e7c <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_MARKER;
 80080c4:	4b31      	ldr	r3, [pc, #196]	; (800818c <Mark+0x154>)
 80080c6:	2202      	movs	r2, #2
 80080c8:	701a      	strb	r2, [r3, #0]
				break;
 80080ca:	e051      	b.n	8008170 <Mark+0x138>
				else if (Is_Line_Out()) {
 80080cc:	f7ff ff4a 	bl	8007f64 <Is_Line_Out>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d04c      	beq.n	8008170 <Mark+0x138>
					lineOutStartTime = uwTick;
 80080d6:	4b31      	ldr	r3, [pc, #196]	; (800819c <Mark+0x164>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a31      	ldr	r2, [pc, #196]	; (80081a0 <Mark+0x168>)
 80080dc:	6013      	str	r3, [r2, #0]
					markStateMachine = MARK_STATE_MACHINE_LINE_OUT;
 80080de:	4b2b      	ldr	r3, [pc, #172]	; (800818c <Mark+0x154>)
 80080e0:	2204      	movs	r2, #4
 80080e2:	701a      	strb	r2, [r3, #0]
				break;
 80080e4:	e044      	b.n	8008170 <Mark+0x138>
				Mark_Accumming(curIrSensorMid);
 80080e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fec6 	bl	8007e7c <Mark_Accumming>
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 80080f0:	4b2c      	ldr	r3, [pc, #176]	; (80081a4 <Mark+0x16c>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2bff      	cmp	r3, #255	; 0xff
 80080f6:	d104      	bne.n	8008102 <Mark+0xca>
 80080f8:	f7ff ff46 	bl	8007f88 <Is_Passed_Marker>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <Mark+0xd4>
					|| Is_Line_Out() ) {
 8008102:	f7ff ff2f 	bl	8007f64 <Is_Line_Out>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d033      	beq.n	8008174 <Mark+0x13c>
					markStateMachine = MARK_STATE_MACHINE_DECISION;
 800810c:	4b1f      	ldr	r3, [pc, #124]	; (800818c <Mark+0x154>)
 800810e:	2203      	movs	r2, #3
 8008110:	701a      	strb	r2, [r3, #0]
				break;
 8008112:	e02f      	b.n	8008174 <Mark+0x13c>
				Mark_Accumming(curIrSensorMid);
 8008114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff feaf 	bl	8007e7c <Mark_Accumming>
				if (Is_Passed_Marker() || Is_Line_Out()) {
 800811e:	f7ff ff33 	bl	8007f88 <Is_Passed_Marker>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <Mark+0xfa>
 8008128:	f7ff ff1c 	bl	8007f64 <Is_Line_Out>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d022      	beq.n	8008178 <Mark+0x140>
					markStateMachine = MARK_STATE_MACHINE_DECISION;
 8008132:	4b16      	ldr	r3, [pc, #88]	; (800818c <Mark+0x154>)
 8008134:	2203      	movs	r2, #3
 8008136:	701a      	strb	r2, [r3, #0]
				break;
 8008138:	e01e      	b.n	8008178 <Mark+0x140>
				Mark_Decision();
 800813a:	f7ff ff3d 	bl	8007fb8 <Mark_Decision>
				markStateMachine = MARK_STATE_MACHINE_IDLE;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <Mark+0x154>)
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
				break;
 8008144:	e01b      	b.n	800817e <Mark+0x146>
				if (!Is_Line_Out()) {
 8008146:	f7ff ff0d 	bl	8007f64 <Is_Line_Out>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <Mark+0x120>
					markStateMachine = MARK_STATE_MACHINE_IDLE;
 8008150:	4b0e      	ldr	r3, [pc, #56]	; (800818c <Mark+0x154>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
				break ;
 8008156:	e011      	b.n	800817c <Mark+0x144>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 8008158:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <Mark+0x168>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8008160:	4b0e      	ldr	r3, [pc, #56]	; (800819c <Mark+0x164>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d209      	bcs.n	800817c <Mark+0x144>
					markState = MARK_LINE_OUT;
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <Mark+0x170>)
 800816a:	2206      	movs	r2, #6
 800816c:	701a      	strb	r2, [r3, #0]
				break ;
 800816e:	e005      	b.n	800817c <Mark+0x144>
				break;
 8008170:	bf00      	nop
 8008172:	e004      	b.n	800817e <Mark+0x146>
				break;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <Mark+0x146>
				break;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <Mark+0x146>
				break ;
 800817c:	bf00      	nop
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000001e 	.word	0x2000001e
 800818c:	20001490 	.word	0x20001490
 8008190:	2000357c 	.word	0x2000357c
 8008194:	2000003e 	.word	0x2000003e
 8008198:	20000044 	.word	0x20000044
 800819c:	200002a4 	.word	0x200002a4
 80081a0:	2000351c 	.word	0x2000351c
 80081a4:	20003502 	.word	0x20003502
 80081a8:	2000003c 	.word	0x2000003c

080081ac <Positioning>:
__STATIC_INLINE void	Positioning() {
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
	int32_t positionSum = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
	int32_t sensorNormValsSum = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 80081ba:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <Positioning+0xbc>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
 80081c0:	e017      	b.n	80081f2 <Positioning+0x46>
		positionSum += positionTable[i] * sensorNormVals[i];
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	4a29      	ldr	r2, [pc, #164]	; (800826c <Positioning+0xc0>)
 80081c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ca:	79fa      	ldrb	r2, [r7, #7]
 80081cc:	4928      	ldr	r1, [pc, #160]	; (8008270 <Positioning+0xc4>)
 80081ce:	5c8a      	ldrb	r2, [r1, r2]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
		sensorNormValsSum += sensorNormVals[i];
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	4a24      	ldr	r2, [pc, #144]	; (8008270 <Positioning+0xc4>)
 80081e0:	5cd3      	ldrb	r3, [r2, r3]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4413      	add	r3, r2
 80081ea:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	3301      	adds	r3, #1
 80081f0:	71fb      	strb	r3, [r7, #7]
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <Positioning+0xc8>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	79fa      	ldrb	r2, [r7, #7]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d9e1      	bls.n	80081c2 <Positioning+0x16>
	positionVal = positionSum / GET_MAX(sensorNormValsSum, 1);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b01      	cmp	r3, #1
 8008202:	bfb8      	it	lt
 8008204:	2301      	movlt	r3, #1
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	fb92 f3f3 	sdiv	r3, r2, r3
 800820c:	4a1a      	ldr	r2, [pc, #104]	; (8008278 <Positioning+0xcc>)
 800820e:	6013      	str	r3, [r2, #0]
	int8_t	curIrSensorMid = (positionVal + 30000) / 4000;
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <Positioning+0xcc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8008218:	3330      	adds	r3, #48	; 0x30
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <Positioning+0xd0>)
 800821c:	fb82 1203 	smull	r1, r2, r2, r3
 8008220:	1212      	asrs	r2, r2, #8
 8008222:	17db      	asrs	r3, r3, #31
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	71bb      	strb	r3, [r7, #6]
	curPositionIrSensorMid = curIrSensorMid;
 8008228:	4a15      	ldr	r2, [pc, #84]	; (8008280 <Positioning+0xd4>)
 800822a:	79bb      	ldrb	r3, [r7, #6]
 800822c:	7013      	strb	r3, [r2, #0]
	positionIdxMax = GET_MIN(curIrSensorMid + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 800822e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008232:	2b0c      	cmp	r3, #12
 8008234:	dc03      	bgt.n	800823e <Positioning+0x92>
 8008236:	79bb      	ldrb	r3, [r7, #6]
 8008238:	3302      	adds	r3, #2
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e000      	b.n	8008240 <Positioning+0x94>
 800823e:	230f      	movs	r3, #15
 8008240:	4a0c      	ldr	r2, [pc, #48]	; (8008274 <Positioning+0xc8>)
 8008242:	7013      	strb	r3, [r2, #0]
	positionIdxMin = GET_MAX(curIrSensorMid - WINDOW_SIZE_HALF + 1, 0);
 8008244:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008248:	2b01      	cmp	r3, #1
 800824a:	dd03      	ble.n	8008254 <Positioning+0xa8>
 800824c:	79bb      	ldrb	r3, [r7, #6]
 800824e:	3b01      	subs	r3, #1
 8008250:	b2db      	uxtb	r3, r3
 8008252:	e000      	b.n	8008256 <Positioning+0xaa>
 8008254:	2300      	movs	r3, #0
 8008256:	4a04      	ldr	r2, [pc, #16]	; (8008268 <Positioning+0xbc>)
 8008258:	7013      	strb	r3, [r2, #0]
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	2000001d 	.word	0x2000001d
 800826c:	20000080 	.word	0x20000080
 8008270:	2000355c 	.word	0x2000355c
 8008274:	2000001c 	.word	0x2000001c
 8008278:	20001464 	.word	0x20001464
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	2000001e 	.word	0x2000001e

08008284 <Sensor_Test_Raw>:
}




void Sensor_Test_Raw() {
 8008284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008286:	b087      	sub	sp, #28
 8008288:	af06      	add	r7, sp, #24
	Sensor_Start();
 800828a:	f002 fb3f 	bl	800a90c <Sensor_Start>
	Custom_OLED_Clear();
 800828e:	f7fc ffac 	bl	80051ea <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8008292:	e053      	b.n	800833c <Sensor_Test_Raw+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8008294:	4b30      	ldr	r3, [pc, #192]	; (8008358 <Sensor_Test_Raw+0xd4>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800829a:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 800829c:	4b2e      	ldr	r3, [pc, #184]	; (8008358 <Sensor_Test_Raw+0xd4>)
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082a2:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80082a4:	4b2c      	ldr	r3, [pc, #176]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082a6:	789b      	ldrb	r3, [r3, #2]
 80082a8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082aa:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082ae:	78db      	ldrb	r3, [r3, #3]
 80082b0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082b2:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082b6:	791b      	ldrb	r3, [r3, #4]
 80082b8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082ba:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80082bc:	4b26      	ldr	r3, [pc, #152]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082be:	795b      	ldrb	r3, [r3, #5]
 80082c0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082c2:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80082c4:	4b24      	ldr	r3, [pc, #144]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082c6:	799b      	ldrb	r3, [r3, #6]
 80082c8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082ca:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 80082cc:	4b22      	ldr	r3, [pc, #136]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082ce:	79db      	ldrb	r3, [r3, #7]
 80082d0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	9403      	str	r4, [sp, #12]
 80082d6:	9002      	str	r0, [sp, #8]
 80082d8:	9101      	str	r1, [sp, #4]
 80082da:	9200      	str	r2, [sp, #0]
 80082dc:	4663      	mov	r3, ip
 80082de:	4632      	mov	r2, r6
 80082e0:	4629      	mov	r1, r5
 80082e2:	481e      	ldr	r0, [pc, #120]	; (800835c <Sensor_Test_Raw+0xd8>)
 80082e4:	f7fd f866 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082ea:	7a1b      	ldrb	r3, [r3, #8]
 80082ec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082ee:	461d      	mov	r5, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80082f0:	4b19      	ldr	r3, [pc, #100]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082f2:	7a5b      	ldrb	r3, [r3, #9]
 80082f4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082f6:	461e      	mov	r6, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 80082f8:	4b17      	ldr	r3, [pc, #92]	; (8008358 <Sensor_Test_Raw+0xd4>)
 80082fa:	7a9b      	ldrb	r3, [r3, #10]
 80082fc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80082fe:	469c      	mov	ip, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8008300:	4b15      	ldr	r3, [pc, #84]	; (8008358 <Sensor_Test_Raw+0xd4>)
 8008302:	7adb      	ldrb	r3, [r3, #11]
 8008304:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008306:	461a      	mov	r2, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8008308:	4b13      	ldr	r3, [pc, #76]	; (8008358 <Sensor_Test_Raw+0xd4>)
 800830a:	7b1b      	ldrb	r3, [r3, #12]
 800830c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800830e:	4619      	mov	r1, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8008310:	4b11      	ldr	r3, [pc, #68]	; (8008358 <Sensor_Test_Raw+0xd4>)
 8008312:	7b5b      	ldrb	r3, [r3, #13]
 8008314:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008316:	4618      	mov	r0, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <Sensor_Test_Raw+0xd4>)
 800831a:	7b9b      	ldrb	r3, [r3, #14]
 800831c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800831e:	461c      	mov	r4, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <Sensor_Test_Raw+0xd4>)
 8008322:	7bdb      	ldrb	r3, [r3, #15]
 8008324:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	9403      	str	r4, [sp, #12]
 800832a:	9002      	str	r0, [sp, #8]
 800832c:	9101      	str	r1, [sp, #4]
 800832e:	9200      	str	r2, [sp, #0]
 8008330:	4663      	mov	r3, ip
 8008332:	4632      	mov	r2, r6
 8008334:	4629      	mov	r1, r5
 8008336:	480a      	ldr	r0, [pc, #40]	; (8008360 <Sensor_Test_Raw+0xdc>)
 8008338:	f7fd f83c 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800833c:	f7fd fb6a 	bl	8005a14 <Custom_Switch_Read>
 8008340:	4603      	mov	r3, r0
 8008342:	2b04      	cmp	r3, #4
 8008344:	d1a6      	bne.n	8008294 <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8008346:	f7fc ff50 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Stop();
 800834a:	f002 faf7 	bl	800a93c <Sensor_Stop>
}
 800834e:	bf00      	nop
 8008350:	3704      	adds	r7, #4
 8008352:	46bd      	mov	sp, r7
 8008354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008356:	bf00      	nop
 8008358:	2000354c 	.word	0x2000354c
 800835c:	0800de7c 	.word	0x0800de7c
 8008360:	0800dea8 	.word	0x0800dea8

08008364 <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8008364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008366:	b087      	sub	sp, #28
 8008368:	af06      	add	r7, sp, #24
	Sensor_Start();
 800836a:	f002 facf 	bl	800a90c <Sensor_Start>
	Custom_OLED_Clear();
 800836e:	f7fc ff3c 	bl	80051ea <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8008372:	e053      	b.n	800841c <Sensor_Test_Normalized+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8008374:	4b30      	ldr	r3, [pc, #192]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800837a:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 800837c:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008382:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8008384:	4b2c      	ldr	r3, [pc, #176]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 8008386:	789b      	ldrb	r3, [r3, #2]
 8008388:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800838a:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 800838c:	4b2a      	ldr	r3, [pc, #168]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 800838e:	78db      	ldrb	r3, [r3, #3]
 8008390:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008392:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8008394:	4b28      	ldr	r3, [pc, #160]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 8008396:	791b      	ldrb	r3, [r3, #4]
 8008398:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800839a:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 800839c:	4b26      	ldr	r3, [pc, #152]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 800839e:	795b      	ldrb	r3, [r3, #5]
 80083a0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083a2:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80083a4:	4b24      	ldr	r3, [pc, #144]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083a6:	799b      	ldrb	r3, [r3, #6]
 80083a8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083aa:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 80083ac:	4b22      	ldr	r3, [pc, #136]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083ae:	79db      	ldrb	r3, [r3, #7]
 80083b0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	9403      	str	r4, [sp, #12]
 80083b6:	9002      	str	r0, [sp, #8]
 80083b8:	9101      	str	r1, [sp, #4]
 80083ba:	9200      	str	r2, [sp, #0]
 80083bc:	4663      	mov	r3, ip
 80083be:	4632      	mov	r2, r6
 80083c0:	4629      	mov	r1, r5
 80083c2:	481e      	ldr	r0, [pc, #120]	; (800843c <Sensor_Test_Normalized+0xd8>)
 80083c4:	f7fc fff6 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80083c8:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083ca:	7a1b      	ldrb	r3, [r3, #8]
 80083cc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083ce:	461d      	mov	r5, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80083d0:	4b19      	ldr	r3, [pc, #100]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083d2:	7a5b      	ldrb	r3, [r3, #9]
 80083d4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083d6:	461e      	mov	r6, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80083d8:	4b17      	ldr	r3, [pc, #92]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083da:	7a9b      	ldrb	r3, [r3, #10]
 80083dc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083de:	469c      	mov	ip, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 80083e0:	4b15      	ldr	r3, [pc, #84]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083e2:	7adb      	ldrb	r3, [r3, #11]
 80083e4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083e6:	461a      	mov	r2, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80083e8:	4b13      	ldr	r3, [pc, #76]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083ee:	4619      	mov	r1, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083f2:	7b5b      	ldrb	r3, [r3, #13]
 80083f4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083f6:	4618      	mov	r0, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 80083fa:	7b9b      	ldrb	r3, [r3, #14]
 80083fc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80083fe:	461c      	mov	r4, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8008400:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <Sensor_Test_Normalized+0xd4>)
 8008402:	7bdb      	ldrb	r3, [r3, #15]
 8008404:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	9403      	str	r4, [sp, #12]
 800840a:	9002      	str	r0, [sp, #8]
 800840c:	9101      	str	r1, [sp, #4]
 800840e:	9200      	str	r2, [sp, #0]
 8008410:	4663      	mov	r3, ip
 8008412:	4632      	mov	r2, r6
 8008414:	4629      	mov	r1, r5
 8008416:	480a      	ldr	r0, [pc, #40]	; (8008440 <Sensor_Test_Normalized+0xdc>)
 8008418:	f7fc ffcc 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800841c:	f7fd fafa 	bl	8005a14 <Custom_Switch_Read>
 8008420:	4603      	mov	r3, r0
 8008422:	2b04      	cmp	r3, #4
 8008424:	d1a6      	bne.n	8008374 <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8008426:	f7fc fee0 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Stop();
 800842a:	f002 fa87 	bl	800a93c <Sensor_Stop>
}
 800842e:	bf00      	nop
 8008430:	3704      	adds	r7, #4
 8008432:	46bd      	mov	sp, r7
 8008434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008436:	bf00      	nop
 8008438:	2000355c 	.word	0x2000355c
 800843c:	0800de7c 	.word	0x0800de7c
 8008440:	0800dea8 	.word	0x0800dea8

08008444 <Sensor_Test_State>:





void Sensor_Test_State() {
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 800844e:	f002 fa5d 	bl	800a90c <Sensor_Start>
	Custom_OLED_Clear();
 8008452:	f7fc feca 	bl	80051ea <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008456:	e0a9      	b.n	80085ac <Sensor_Test_State+0x168>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8008458:	4b5c      	ldr	r3, [pc, #368]	; (80085cc <Sensor_Test_State+0x188>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	4619      	mov	r1, r3
 8008460:	485b      	ldr	r0, [pc, #364]	; (80085d0 <Sensor_Test_State+0x18c>)
 8008462:	f7fc ffa7 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008466:	4b5b      	ldr	r3, [pc, #364]	; (80085d4 <Sensor_Test_State+0x190>)
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	0bdb      	lsrs	r3, r3, #15
 800846e:	b29b      	uxth	r3, r3
 8008470:	f003 0501 	and.w	r5, r3, #1
 8008474:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <Sensor_Test_State+0x190>)
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	0b9b      	lsrs	r3, r3, #14
 800847c:	b29b      	uxth	r3, r3
 800847e:	f003 0601 	and.w	r6, r3, #1
 8008482:	4b54      	ldr	r3, [pc, #336]	; (80085d4 <Sensor_Test_State+0x190>)
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	0b5b      	lsrs	r3, r3, #13
 800848a:	b29b      	uxth	r3, r3
 800848c:	f003 0c01 	and.w	ip, r3, #1
 8008490:	4b50      	ldr	r3, [pc, #320]	; (80085d4 <Sensor_Test_State+0x190>)
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	0b1b      	lsrs	r3, r3, #12
 8008498:	b29b      	uxth	r3, r3
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	4a4d      	ldr	r2, [pc, #308]	; (80085d4 <Sensor_Test_State+0x190>)
 80084a0:	8812      	ldrh	r2, [r2, #0]
 80084a2:	b292      	uxth	r2, r2
 80084a4:	0ad2      	lsrs	r2, r2, #11
 80084a6:	b292      	uxth	r2, r2
 80084a8:	f002 0201 	and.w	r2, r2, #1
 80084ac:	4949      	ldr	r1, [pc, #292]	; (80085d4 <Sensor_Test_State+0x190>)
 80084ae:	8809      	ldrh	r1, [r1, #0]
 80084b0:	b289      	uxth	r1, r1
 80084b2:	0a89      	lsrs	r1, r1, #10
 80084b4:	b289      	uxth	r1, r1
 80084b6:	f001 0101 	and.w	r1, r1, #1
 80084ba:	4846      	ldr	r0, [pc, #280]	; (80085d4 <Sensor_Test_State+0x190>)
 80084bc:	8800      	ldrh	r0, [r0, #0]
 80084be:	b280      	uxth	r0, r0
 80084c0:	0a40      	lsrs	r0, r0, #9
 80084c2:	b280      	uxth	r0, r0
 80084c4:	f000 0001 	and.w	r0, r0, #1
 80084c8:	4c42      	ldr	r4, [pc, #264]	; (80085d4 <Sensor_Test_State+0x190>)
 80084ca:	8824      	ldrh	r4, [r4, #0]
 80084cc:	b2a4      	uxth	r4, r4
 80084ce:	0a24      	lsrs	r4, r4, #8
 80084d0:	b2a4      	uxth	r4, r4
 80084d2:	f004 0401 	and.w	r4, r4, #1
 80084d6:	9404      	str	r4, [sp, #16]
 80084d8:	9003      	str	r0, [sp, #12]
 80084da:	9102      	str	r1, [sp, #8]
 80084dc:	9201      	str	r2, [sp, #4]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4663      	mov	r3, ip
 80084e2:	4632      	mov	r2, r6
 80084e4:	4629      	mov	r1, r5
 80084e6:	483c      	ldr	r0, [pc, #240]	; (80085d8 <Sensor_Test_State+0x194>)
 80084e8:	f7fc ff64 	bl	80053b4 <Custom_OLED_Printf>
			(irSensorState >> 15) & 1, (irSensorState >> 14) & 1, (irSensorState >> 13) & 1, (irSensorState >> 12) & 1, \
			(irSensorState >> 11) & 1, (irSensorState >> 10) & 1, (irSensorState >> 9) & 1, (irSensorState >> 8) & 1);

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80084ec:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <Sensor_Test_State+0x190>)
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	09db      	lsrs	r3, r3, #7
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f003 0501 	and.w	r5, r3, #1
 80084fa:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <Sensor_Test_State+0x190>)
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	099b      	lsrs	r3, r3, #6
 8008502:	b29b      	uxth	r3, r3
 8008504:	f003 0601 	and.w	r6, r3, #1
 8008508:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <Sensor_Test_State+0x190>)
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	095b      	lsrs	r3, r3, #5
 8008510:	b29b      	uxth	r3, r3
 8008512:	f003 0c01 	and.w	ip, r3, #1
 8008516:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <Sensor_Test_State+0x190>)
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	091b      	lsrs	r3, r3, #4
 800851e:	b29b      	uxth	r3, r3
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	4a2b      	ldr	r2, [pc, #172]	; (80085d4 <Sensor_Test_State+0x190>)
 8008526:	8812      	ldrh	r2, [r2, #0]
 8008528:	b292      	uxth	r2, r2
 800852a:	08d2      	lsrs	r2, r2, #3
 800852c:	b292      	uxth	r2, r2
 800852e:	f002 0201 	and.w	r2, r2, #1
 8008532:	4928      	ldr	r1, [pc, #160]	; (80085d4 <Sensor_Test_State+0x190>)
 8008534:	8809      	ldrh	r1, [r1, #0]
 8008536:	b289      	uxth	r1, r1
 8008538:	0889      	lsrs	r1, r1, #2
 800853a:	b289      	uxth	r1, r1
 800853c:	f001 0101 	and.w	r1, r1, #1
 8008540:	4824      	ldr	r0, [pc, #144]	; (80085d4 <Sensor_Test_State+0x190>)
 8008542:	8800      	ldrh	r0, [r0, #0]
 8008544:	b280      	uxth	r0, r0
 8008546:	0840      	lsrs	r0, r0, #1
 8008548:	b280      	uxth	r0, r0
 800854a:	f000 0001 	and.w	r0, r0, #1
			(irSensorState >> 7) & 1, (irSensorState >> 6) & 1, (irSensorState >> 5) & 1, (irSensorState >> 4) & 1, \
			(irSensorState >> 3) & 1, (irSensorState >> 2) & 1, (irSensorState >> 1) & 1, (irSensorState >> 0) & 1);
 800854e:	4c21      	ldr	r4, [pc, #132]	; (80085d4 <Sensor_Test_State+0x190>)
 8008550:	8824      	ldrh	r4, [r4, #0]
 8008552:	b2a4      	uxth	r4, r4
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8008554:	f004 0401 	and.w	r4, r4, #1
 8008558:	9404      	str	r4, [sp, #16]
 800855a:	9003      	str	r0, [sp, #12]
 800855c:	9102      	str	r1, [sp, #8]
 800855e:	9201      	str	r2, [sp, #4]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	4663      	mov	r3, ip
 8008564:	4632      	mov	r2, r6
 8008566:	4629      	mov	r1, r5
 8008568:	481c      	ldr	r0, [pc, #112]	; (80085dc <Sensor_Test_State+0x198>)
 800856a:	f7fc ff23 	bl	80053b4 <Custom_OLED_Printf>


		if (sw == CUSTOM_SW_1) {
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <Sensor_Test_State+0x14a>
			if (threshold > THRESHOLD_MIN) {
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <Sensor_Test_State+0x188>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b0a      	cmp	r3, #10
 800857c:	d916      	bls.n	80085ac <Sensor_Test_State+0x168>
				threshold -= THRESHOLD_CHANGE_VAL;
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <Sensor_Test_State+0x188>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	3b05      	subs	r3, #5
 8008586:	b2da      	uxtb	r2, r3
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <Sensor_Test_State+0x188>)
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e00e      	b.n	80085ac <Sensor_Test_State+0x168>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d10b      	bne.n	80085ac <Sensor_Test_State+0x168>
			if (threshold < THRESHOLD_MAX) {
 8008594:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <Sensor_Test_State+0x188>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2bf4      	cmp	r3, #244	; 0xf4
 800859c:	d806      	bhi.n	80085ac <Sensor_Test_State+0x168>
				threshold += THRESHOLD_CHANGE_VAL;
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <Sensor_Test_State+0x188>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	3305      	adds	r3, #5
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	4b08      	ldr	r3, [pc, #32]	; (80085cc <Sensor_Test_State+0x188>)
 80085aa:	701a      	strb	r2, [r3, #0]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80085ac:	f7fd fa32 	bl	8005a14 <Custom_Switch_Read>
 80085b0:	4603      	mov	r3, r0
 80085b2:	71fb      	strb	r3, [r7, #7]
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	f47f af4e 	bne.w	8008458 <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 80085bc:	f7fc fe15 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Stop();
 80085c0:	f002 f9bc 	bl	800a93c <Sensor_Stop>
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085cc:	2000007c 	.word	0x2000007c
 80085d0:	0800ded4 	.word	0x0800ded4
 80085d4:	2000357c 	.word	0x2000357c
 80085d8:	0800de7c 	.word	0x0800de7c
 80085dc:	0800dea8 	.word	0x0800dea8

080085e0 <Battery_Test_Voltage>:


void Battery_Test_Voltage() {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	Sensor_Start();
 80085e4:	f002 f992 	bl	800a90c <Sensor_Start>
	Custom_OLED_Clear();
 80085e8:	f7fc fdff 	bl	80051ea <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 80085ec:	e009      	b.n	8008602 <Battery_Test_Voltage+0x22>

		Custom_OLED_Printf("/A%5f", sensingVoltage);
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <Battery_Test_Voltage+0x38>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7f7 ffb0 	bl	8000558 <__aeabi_f2d>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4807      	ldr	r0, [pc, #28]	; (800861c <Battery_Test_Voltage+0x3c>)
 80085fe:	f7fc fed9 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8008602:	f7fd fa07 	bl	8005a14 <Custom_Switch_Read>
 8008606:	4603      	mov	r3, r0
 8008608:	2b04      	cmp	r3, #4
 800860a:	d1f0      	bne.n	80085ee <Battery_Test_Voltage+0xe>
	}

	Custom_OLED_Clear();
 800860c:	f7fc fded 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Stop();
 8008610:	f002 f994 	bl	800a93c <Sensor_Stop>
}
 8008614:	bf00      	nop
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20003580 	.word	0x20003580
 800861c:	0800dee8 	.word	0x0800dee8

08008620 <MotorR_Test_Duty>:





void MotorR_Test_Duty() {
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM11);
 8008626:	4859      	ldr	r0, [pc, #356]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008628:	f7ff fb7a 	bl	8007d20 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 800862c:	2101      	movs	r1, #1
 800862e:	4857      	ldr	r0, [pc, #348]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008630:	f7ff fb96 	bl	8007d60 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 8008634:	2100      	movs	r1, #0
 8008636:	4855      	ldr	r0, [pc, #340]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008638:	f7ff fbb5 	bl	8007da6 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM3);
 800863c:	4854      	ldr	r0, [pc, #336]	; (8008790 <MotorR_Test_Duty+0x170>)
 800863e:	f7ff fb6f 	bl	8007d20 <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM11->ARR + 1;
 8008642:	4b52      	ldr	r3, [pc, #328]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008646:	b29b      	uxth	r3, r3
 8008648:	3301      	adds	r3, #1
 800864a:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8008652:	f7fd f9df 	bl	8005a14 <Custom_Switch_Read>
 8008656:	4603      	mov	r3, r0
 8008658:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 800865a:	797b      	ldrb	r3, [r7, #5]
 800865c:	2b04      	cmp	r3, #4
 800865e:	f000 8082 	beq.w	8008766 <MotorR_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8008662:	797b      	ldrb	r3, [r7, #5]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d108      	bne.n	800867a <MotorR_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 8008668:	edd7 7a03 	vldr	s15, [r7, #12]
 800866c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008794 <MotorR_Test_Duty+0x174>
 8008670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008674:	edc7 7a03 	vstr	s15, [r7, #12]
 8008678:	e00a      	b.n	8008690 <MotorR_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 800867a:	797b      	ldrb	r3, [r7, #5]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d107      	bne.n	8008690 <MotorR_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8008680:	edd7 7a03 	vldr	s15, [r7, #12]
 8008684:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008794 <MotorR_Test_Duty+0x174>
 8008688:	ee77 7a87 	vadd.f32	s15, s15, s14
 800868c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800869a:	edd7 7a03 	vldr	s15, [r7, #12]
 800869e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086aa:	d50d      	bpl.n	80086c8 <MotorR_Test_Duty+0xa8>
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	eef1 7a67 	vneg.f32	s15, s15
 80086c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c6:	e00a      	b.n	80086de <MotorR_Test_Duty+0xbe>
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80086d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086de:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 80086e2:	88fb      	ldrh	r3, [r7, #6]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	dd02      	ble.n	80086f0 <MotorR_Test_Duty+0xd0>
		 level = level_max;
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	e004      	b.n	80086fa <MotorR_Test_Duty+0xda>
		} else if (level < 0) {
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da01      	bge.n	80086fa <MotorR_Test_Duty+0xda>
		 level = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM11->CCR1 = level;
 80086fa:	4a24      	ldr	r2, [pc, #144]	; (800878c <MotorR_Test_Duty+0x16c>)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOC, 1 << 4, duty_ratio < 0 ? 1 : 0); // PC4
 8008700:	edd7 7a03 	vldr	s15, [r7, #12]
 8008704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870c:	bf4c      	ite	mi
 800870e:	2301      	movmi	r3, #1
 8008710:	2300      	movpl	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	2110      	movs	r1, #16
 8008718:	481f      	ldr	r0, [pc, #124]	; (8008798 <MotorR_Test_Duty+0x178>)
 800871a:	f7ff fb52 	bl	8007dc2 <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOC, 1 << 5, duty_ratio > 0 ? 1 : 0); // PC5
 800871e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	bfcc      	ite	gt
 800872c:	2301      	movgt	r3, #1
 800872e:	2300      	movle	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	2120      	movs	r1, #32
 8008736:	4818      	ldr	r0, [pc, #96]	; (8008798 <MotorR_Test_Duty+0x178>)
 8008738:	f7ff fb43 	bl	8007dc2 <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7f7 ff0b 	bl	8000558 <__aeabi_f2d>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4815      	ldr	r0, [pc, #84]	; (800879c <MotorR_Test_Duty+0x17c>)
 8008748:	f7fc fe34 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM11->CCR1);
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <MotorR_Test_Duty+0x16c>)
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	4619      	mov	r1, r3
 8008752:	4813      	ldr	r0, [pc, #76]	; (80087a0 <MotorR_Test_Duty+0x180>)
 8008754:	f7fc fe2e 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM3->CNT);
 8008758:	4b0d      	ldr	r3, [pc, #52]	; (8008790 <MotorR_Test_Duty+0x170>)
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	4619      	mov	r1, r3
 800875e:	4811      	ldr	r0, [pc, #68]	; (80087a4 <MotorR_Test_Duty+0x184>)
 8008760:	f7fc fe28 	bl	80053b4 <Custom_OLED_Printf>
	for (;;) {
 8008764:	e775      	b.n	8008652 <MotorR_Test_Duty+0x32>
		 break;
 8008766:	bf00      	nop
	}

	TIM11->CCR1 = 0;
 8008768:	4b08      	ldr	r3, [pc, #32]	; (800878c <MotorR_Test_Duty+0x16c>)
 800876a:	2200      	movs	r2, #0
 800876c:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM11);
 800876e:	4807      	ldr	r0, [pc, #28]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008770:	f7ff fae6 	bl	8007d40 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8008774:	2101      	movs	r1, #1
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <MotorR_Test_Duty+0x16c>)
 8008778:	f7ff fb03 	bl	8007d82 <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM3);
 800877c:	4804      	ldr	r0, [pc, #16]	; (8008790 <MotorR_Test_Duty+0x170>)
 800877e:	f7ff fadf 	bl	8007d40 <LL_TIM_DisableCounter>
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40014800 	.word	0x40014800
 8008790:	40000400 	.word	0x40000400
 8008794:	3dcccccd 	.word	0x3dcccccd
 8008798:	40020800 	.word	0x40020800
 800879c:	0800def0 	.word	0x0800def0
 80087a0:	0800df00 	.word	0x0800df00
 80087a4:	0800df10 	.word	0x0800df10

080087a8 <MotorL_Test_Duty>:


void MotorL_Test_Duty() {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM10);
 80087ae:	4859      	ldr	r0, [pc, #356]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80087b0:	f7ff fab6 	bl	8007d20 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 80087b4:	2101      	movs	r1, #1
 80087b6:	4857      	ldr	r0, [pc, #348]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80087b8:	f7ff fad2 	bl	8007d60 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 80087bc:	2100      	movs	r1, #0
 80087be:	4855      	ldr	r0, [pc, #340]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80087c0:	f7ff faf1 	bl	8007da6 <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM4);
 80087c4:	4854      	ldr	r0, [pc, #336]	; (8008918 <MotorL_Test_Duty+0x170>)
 80087c6:	f7ff faab 	bl	8007d20 <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM10->ARR + 1;
 80087ca:	4b52      	ldr	r3, [pc, #328]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3301      	adds	r3, #1
 80087d2:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	60fb      	str	r3, [r7, #12]


	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 80087da:	f7fd f91b 	bl	8005a14 <Custom_Switch_Read>
 80087de:	4603      	mov	r3, r0
 80087e0:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 80087e2:	797b      	ldrb	r3, [r7, #5]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	f000 8082 	beq.w	80088ee <MotorL_Test_Duty+0x146>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80087ea:	797b      	ldrb	r3, [r7, #5]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d108      	bne.n	8008802 <MotorL_Test_Duty+0x5a>
		 duty_ratio -= 0.1f;
 80087f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80087f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800891c <MotorL_Test_Duty+0x174>
 80087f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087fc:	edc7 7a03 	vstr	s15, [r7, #12]
 8008800:	e00a      	b.n	8008818 <MotorL_Test_Duty+0x70>
		} else if (sw == CUSTOM_SW_2) {
 8008802:	797b      	ldrb	r3, [r7, #5]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d107      	bne.n	8008818 <MotorL_Test_Duty+0x70>
		 duty_ratio += 0.1f;
 8008808:	edd7 7a03 	vldr	s15, [r7, #12]
 800880c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800891c <MotorL_Test_Duty+0x174>
 8008810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008814:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = ABS(duty_ratio * level_max);
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008822:	edd7 7a03 	vldr	s15, [r7, #12]
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800882e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008832:	d50d      	bpl.n	8008850 <MotorL_Test_Duty+0xa8>
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800883e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	eef1 7a67 	vneg.f32	s15, s15
 800884a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800884e:	e00a      	b.n	8008866 <MotorL_Test_Duty+0xbe>
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800885a:	edd7 7a03 	vldr	s15, [r7, #12]
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008866:	edc7 7a02 	vstr	s15, [r7, #8]

		if (level > level_max) {
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	429a      	cmp	r2, r3
 8008870:	dd02      	ble.n	8008878 <MotorL_Test_Duty+0xd0>
		 level = level_max;
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	e004      	b.n	8008882 <MotorL_Test_Duty+0xda>
		} else if (level < 0) {
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	da01      	bge.n	8008882 <MotorL_Test_Duty+0xda>
		 level = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM10->CCR1 = level;
 8008882:	4a24      	ldr	r2, [pc, #144]	; (8008914 <MotorL_Test_Duty+0x16c>)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOB, 1 << 4, duty_ratio > 0 ? 1 : 0); // PB4
 8008888:	edd7 7a03 	vldr	s15, [r7, #12]
 800888c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008894:	bfcc      	ite	gt
 8008896:	2301      	movgt	r3, #1
 8008898:	2300      	movle	r3, #0
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	2110      	movs	r1, #16
 80088a0:	481f      	ldr	r0, [pc, #124]	; (8008920 <MotorL_Test_Duty+0x178>)
 80088a2:	f7ff fa8e 	bl	8007dc2 <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOB, 1 << 5, duty_ratio < 0 ? 1 : 0); // PB5
 80088a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80088aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b2:	bf4c      	ite	mi
 80088b4:	2301      	movmi	r3, #1
 80088b6:	2300      	movpl	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	2120      	movs	r1, #32
 80088be:	4818      	ldr	r0, [pc, #96]	; (8008920 <MotorL_Test_Duty+0x178>)
 80088c0:	f7ff fa7f 	bl	8007dc2 <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7f7 fe47 	bl	8000558 <__aeabi_f2d>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4815      	ldr	r0, [pc, #84]	; (8008924 <MotorL_Test_Duty+0x17c>)
 80088d0:	f7fc fd70 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM10->CCR1);
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	4619      	mov	r1, r3
 80088da:	4813      	ldr	r0, [pc, #76]	; (8008928 <MotorL_Test_Duty+0x180>)
 80088dc:	f7fc fd6a 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM4->CNT);
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <MotorL_Test_Duty+0x170>)
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	4619      	mov	r1, r3
 80088e6:	4811      	ldr	r0, [pc, #68]	; (800892c <MotorL_Test_Duty+0x184>)
 80088e8:	f7fc fd64 	bl	80053b4 <Custom_OLED_Printf>
	for (;;) {
 80088ec:	e775      	b.n	80087da <MotorL_Test_Duty+0x32>
		 break;
 80088ee:	bf00      	nop
	}

	TIM10->CCR1 = 0;
 80088f0:	4b08      	ldr	r3, [pc, #32]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	635a      	str	r2, [r3, #52]	; 0x34
	LL_TIM_DisableCounter(TIM10);
 80088f6:	4807      	ldr	r0, [pc, #28]	; (8008914 <MotorL_Test_Duty+0x16c>)
 80088f8:	f7ff fa22 	bl	8007d40 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 80088fc:	2101      	movs	r1, #1
 80088fe:	4805      	ldr	r0, [pc, #20]	; (8008914 <MotorL_Test_Duty+0x16c>)
 8008900:	f7ff fa3f 	bl	8007d82 <LL_TIM_CC_DisableChannel>

	LL_TIM_DisableCounter(TIM4);
 8008904:	4804      	ldr	r0, [pc, #16]	; (8008918 <MotorL_Test_Duty+0x170>)
 8008906:	f7ff fa1b 	bl	8007d40 <LL_TIM_DisableCounter>
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	40014400 	.word	0x40014400
 8008918:	40000800 	.word	0x40000800
 800891c:	3dcccccd 	.word	0x3dcccccd
 8008920:	40020400 	.word	0x40020400
 8008924:	0800def0 	.word	0x0800def0
 8008928:	0800df00 	.word	0x0800df00
 800892c:	0800df10 	.word	0x0800df10

08008930 <MotorL_Test_PD>:




void MotorL_Test_PD() {
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0

	float coefChangeVal = 5;
 8008936:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <MotorL_Test_PD+0x144>)
 8008938:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 100;
 800893a:	4b4f      	ldr	r3, [pc, #316]	; (8008a78 <MotorL_Test_PD+0x148>)
 800893c:	60bb      	str	r3, [r7, #8]

	Pre_Drive_Var_Init();
 800893e:	f7fd ffdf 	bl	8006900 <Pre_Drive_Var_Init>

	targetSpeed = 0;
 8008942:	4b4e      	ldr	r3, [pc, #312]	; (8008a7c <MotorL_Test_PD+0x14c>)
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	601a      	str	r2, [r3, #0]

	Sensor_Start();
 800894a:	f001 ffdf 	bl	800a90c <Sensor_Start>
	Speed_Control_Start();
 800894e:	f000 fc89 	bl	8009264 <Speed_Control_Start>
	MotorL_Start();
 8008952:	f000 fc03 	bl	800915c <MotorL_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8008956:	f7fd f85d 	bl	8005a14 <Custom_Switch_Read>
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	2b07      	cmp	r3, #7
 8008962:	d07b      	beq.n	8008a5c <MotorL_Test_PD+0x12c>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d10a      	bne.n	8008980 <MotorL_Test_PD+0x50>
			pCoef -= coefChangeVal;
 800896a:	4b45      	ldr	r3, [pc, #276]	; (8008a80 <MotorL_Test_PD+0x150>)
 800896c:	ed93 7a00 	vldr	s14, [r3]
 8008970:	edd7 7a03 	vldr	s15, [r7, #12]
 8008974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008978:	4b41      	ldr	r3, [pc, #260]	; (8008a80 <MotorL_Test_PD+0x150>)
 800897a:	edc3 7a00 	vstr	s15, [r3]
 800897e:	e042      	b.n	8008a06 <MotorL_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_2) {
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d10a      	bne.n	800899c <MotorL_Test_PD+0x6c>
			pCoef += coefChangeVal;
 8008986:	4b3e      	ldr	r3, [pc, #248]	; (8008a80 <MotorL_Test_PD+0x150>)
 8008988:	ed93 7a00 	vldr	s14, [r3]
 800898c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008994:	4b3a      	ldr	r3, [pc, #232]	; (8008a80 <MotorL_Test_PD+0x150>)
 8008996:	edc3 7a00 	vstr	s15, [r3]
 800899a:	e034      	b.n	8008a06 <MotorL_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_1_2) {
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d10e      	bne.n	80089c0 <MotorL_Test_PD+0x90>
			dCoef -= coefChangeVal / 1000.f;
 80089a2:	4b38      	ldr	r3, [pc, #224]	; (8008a84 <MotorL_Test_PD+0x154>)
 80089a4:	ed93 7a00 	vldr	s14, [r3]
 80089a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80089ac:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8008a88 <MotorL_Test_PD+0x158>
 80089b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80089b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089b8:	4b32      	ldr	r3, [pc, #200]	; (8008a84 <MotorL_Test_PD+0x154>)
 80089ba:	edc3 7a00 	vstr	s15, [r3]
 80089be:	e022      	b.n	8008a06 <MotorL_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_2_3) {
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b06      	cmp	r3, #6
 80089c4:	d10e      	bne.n	80089e4 <MotorL_Test_PD+0xb4>
			dCoef += coefChangeVal / 1000.f;
 80089c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80089ca:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008a88 <MotorL_Test_PD+0x158>
 80089ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80089d2:	4b2c      	ldr	r3, [pc, #176]	; (8008a84 <MotorL_Test_PD+0x154>)
 80089d4:	edd3 7a00 	vldr	s15, [r3]
 80089d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089dc:	4b29      	ldr	r3, [pc, #164]	; (8008a84 <MotorL_Test_PD+0x154>)
 80089de:	edc3 7a00 	vstr	s15, [r3]
 80089e2:	e010      	b.n	8008a06 <MotorL_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_3) {
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d10d      	bne.n	8008a06 <MotorL_Test_PD+0xd6>
			positionCmdL += targetChangeVal * RADIAN_PER_TICK;
 80089ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80089ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008a8c <MotorL_Test_PD+0x15c>
 80089f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <MotorL_Test_PD+0x160>)
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a00:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <MotorL_Test_PD+0x160>)
 8008a02:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM10->CCR1);
 8008a06:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <MotorL_Test_PD+0x164>)
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4822      	ldr	r0, [pc, #136]	; (8008a98 <MotorL_Test_PD+0x168>)
 8008a0e:	f7fc fcd1 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM4->CNT);
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <MotorL_Test_PD+0x16c>)
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	4619      	mov	r1, r3
 8008a18:	4821      	ldr	r0, [pc, #132]	; (8008aa0 <MotorL_Test_PD+0x170>)
 8008a1a:	f7fc fccb 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5f", positionCmdL);
 8008a1e:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <MotorL_Test_PD+0x160>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f7 fd98 	bl	8000558 <__aeabi_f2d>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	481d      	ldr	r0, [pc, #116]	; (8008aa4 <MotorL_Test_PD+0x174>)
 8008a2e:	f7fc fcc1 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <MotorL_Test_PD+0x150>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f7 fd8e 	bl	8000558 <__aeabi_f2d>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4819      	ldr	r0, [pc, #100]	; (8008aa8 <MotorL_Test_PD+0x178>)
 8008a42:	f7fc fcb7 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 8008a46:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <MotorL_Test_PD+0x154>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7f7 fd84 	bl	8000558 <__aeabi_f2d>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4815      	ldr	r0, [pc, #84]	; (8008aac <MotorL_Test_PD+0x17c>)
 8008a56:	f7fc fcad 	bl	80053b4 <Custom_OLED_Printf>
	for (;;) {
 8008a5a:	e77c      	b.n	8008956 <MotorL_Test_PD+0x26>
		 break;
 8008a5c:	bf00      	nop

	}

	MotorL_Stop();
 8008a5e:	f000 fbd1 	bl	8009204 <MotorL_Stop>
	Speed_Control_Stop();
 8008a62:	f000 fc0b 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 8008a66:	f001 ff69 	bl	800a93c <Sensor_Stop>
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40a00000 	.word	0x40a00000
 8008a78:	42c80000 	.word	0x42c80000
 8008a7c:	2000002c 	.word	0x2000002c
 8008a80:	20000004 	.word	0x20000004
 8008a84:	20000008 	.word	0x20000008
 8008a88:	447a0000 	.word	0x447a0000
 8008a8c:	3a000000 	.word	0x3a000000
 8008a90:	20001450 	.word	0x20001450
 8008a94:	40014400 	.word	0x40014400
 8008a98:	0800df20 	.word	0x0800df20
 8008a9c:	40000800 	.word	0x40000800
 8008aa0:	0800df30 	.word	0x0800df30
 8008aa4:	0800df40 	.word	0x0800df40
 8008aa8:	0800df50 	.word	0x0800df50
 8008aac:	0800df60 	.word	0x0800df60

08008ab0 <MotorR_Test_PD>:





void MotorR_Test_PD() {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0

	float coefChangeVal = 5;
 8008ab6:	4b4f      	ldr	r3, [pc, #316]	; (8008bf4 <MotorR_Test_PD+0x144>)
 8008ab8:	60fb      	str	r3, [r7, #12]
	float targetChangeVal = 100;
 8008aba:	4b4f      	ldr	r3, [pc, #316]	; (8008bf8 <MotorR_Test_PD+0x148>)
 8008abc:	60bb      	str	r3, [r7, #8]

	Pre_Drive_Var_Init();
 8008abe:	f7fd ff1f 	bl	8006900 <Pre_Drive_Var_Init>

	targetSpeed = 0;
 8008ac2:	4b4e      	ldr	r3, [pc, #312]	; (8008bfc <MotorR_Test_PD+0x14c>)
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]

	Sensor_Start();
 8008aca:	f001 ff1f 	bl	800a90c <Sensor_Start>
	Speed_Control_Start();
 8008ace:	f000 fbc9 	bl	8009264 <Speed_Control_Start>
	MotorR_Start();
 8008ad2:	f000 fb59 	bl	8009188 <MotorR_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8008ad6:	f7fc ff9d 	bl	8005a14 <Custom_Switch_Read>
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_ALL) {
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	2b07      	cmp	r3, #7
 8008ae2:	d07b      	beq.n	8008bdc <MotorR_Test_PD+0x12c>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10a      	bne.n	8008b00 <MotorR_Test_PD+0x50>
			pCoef -= coefChangeVal;
 8008aea:	4b45      	ldr	r3, [pc, #276]	; (8008c00 <MotorR_Test_PD+0x150>)
 8008aec:	ed93 7a00 	vldr	s14, [r3]
 8008af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008af8:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <MotorR_Test_PD+0x150>)
 8008afa:	edc3 7a00 	vstr	s15, [r3]
 8008afe:	e042      	b.n	8008b86 <MotorR_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_2) {
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10a      	bne.n	8008b1c <MotorR_Test_PD+0x6c>
			pCoef += coefChangeVal;
 8008b06:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <MotorR_Test_PD+0x150>)
 8008b08:	ed93 7a00 	vldr	s14, [r3]
 8008b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b14:	4b3a      	ldr	r3, [pc, #232]	; (8008c00 <MotorR_Test_PD+0x150>)
 8008b16:	edc3 7a00 	vstr	s15, [r3]
 8008b1a:	e034      	b.n	8008b86 <MotorR_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_1_2) {
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d10e      	bne.n	8008b40 <MotorR_Test_PD+0x90>
			dCoef -= coefChangeVal / 1000.f;
 8008b22:	4b38      	ldr	r3, [pc, #224]	; (8008c04 <MotorR_Test_PD+0x154>)
 8008b24:	ed93 7a00 	vldr	s14, [r3]
 8008b28:	edd7 6a03 	vldr	s13, [r7, #12]
 8008b2c:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8008c08 <MotorR_Test_PD+0x158>
 8008b30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b38:	4b32      	ldr	r3, [pc, #200]	; (8008c04 <MotorR_Test_PD+0x154>)
 8008b3a:	edc3 7a00 	vstr	s15, [r3]
 8008b3e:	e022      	b.n	8008b86 <MotorR_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_2_3) {
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d10e      	bne.n	8008b64 <MotorR_Test_PD+0xb4>
			dCoef += coefChangeVal / 1000.f;
 8008b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b4a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008c08 <MotorR_Test_PD+0x158>
 8008b4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b52:	4b2c      	ldr	r3, [pc, #176]	; (8008c04 <MotorR_Test_PD+0x154>)
 8008b54:	edd3 7a00 	vldr	s15, [r3]
 8008b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b5c:	4b29      	ldr	r3, [pc, #164]	; (8008c04 <MotorR_Test_PD+0x154>)
 8008b5e:	edc3 7a00 	vstr	s15, [r3]
 8008b62:	e010      	b.n	8008b86 <MotorR_Test_PD+0xd6>
		} else if (sw == CUSTOM_SW_3) {
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d10d      	bne.n	8008b86 <MotorR_Test_PD+0xd6>
			positionCmdR += targetChangeVal * RADIAN_PER_TICK;
 8008b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008b6e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008c0c <MotorR_Test_PD+0x15c>
 8008b72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <MotorR_Test_PD+0x160>)
 8008b78:	edd3 7a00 	vldr	s15, [r3]
 8008b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b80:	4b23      	ldr	r3, [pc, #140]	; (8008c10 <MotorR_Test_PD+0x160>)
 8008b82:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0CCR    : %5d", TIM11->CCR1);
 8008b86:	4b23      	ldr	r3, [pc, #140]	; (8008c14 <MotorR_Test_PD+0x164>)
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4822      	ldr	r0, [pc, #136]	; (8008c18 <MotorR_Test_PD+0x168>)
 8008b8e:	f7fc fc11 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1curECOD: %5d", TIM3->CNT);
 8008b92:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <MotorR_Test_PD+0x16c>)
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	4619      	mov	r1, r3
 8008b98:	4821      	ldr	r0, [pc, #132]	; (8008c20 <MotorR_Test_PD+0x170>)
 8008b9a:	f7fc fc0b 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2tarECOD: %5f", positionCmdR);
 8008b9e:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <MotorR_Test_PD+0x160>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7f7 fcd8 	bl	8000558 <__aeabi_f2d>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	481d      	ldr	r0, [pc, #116]	; (8008c24 <MotorR_Test_PD+0x174>)
 8008bae:	f7fc fc01 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3pCoef  : %5f", pCoef);
 8008bb2:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <MotorR_Test_PD+0x150>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7f7 fcce 	bl	8000558 <__aeabi_f2d>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4819      	ldr	r0, [pc, #100]	; (8008c28 <MotorR_Test_PD+0x178>)
 8008bc2:	f7fc fbf7 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/4dCoef  : %5f", dCoef);
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <MotorR_Test_PD+0x154>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f7 fcc4 	bl	8000558 <__aeabi_f2d>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4815      	ldr	r0, [pc, #84]	; (8008c2c <MotorR_Test_PD+0x17c>)
 8008bd6:	f7fc fbed 	bl	80053b4 <Custom_OLED_Printf>
	for (;;) {
 8008bda:	e77c      	b.n	8008ad6 <MotorR_Test_PD+0x26>
		 break;
 8008bdc:	bf00      	nop

	}
	MotorR_Stop();
 8008bde:	f000 fb25 	bl	800922c <MotorR_Stop>
	Speed_Control_Stop();
 8008be2:	f000 fb4b 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 8008be6:	f001 fea9 	bl	800a93c <Sensor_Stop>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40a00000 	.word	0x40a00000
 8008bf8:	42c80000 	.word	0x42c80000
 8008bfc:	2000002c 	.word	0x2000002c
 8008c00:	20000004 	.word	0x20000004
 8008c04:	20000008 	.word	0x20000008
 8008c08:	447a0000 	.word	0x447a0000
 8008c0c:	3a000000 	.word	0x3a000000
 8008c10:	20001458 	.word	0x20001458
 8008c14:	40014800 	.word	0x40014800
 8008c18:	0800df20 	.word	0x0800df20
 8008c1c:	40000400 	.word	0x40000400
 8008c20:	0800df30 	.word	0x0800df30
 8008c24:	0800df40 	.word	0x0800df40
 8008c28:	0800df50 	.word	0x0800df50
 8008c2c:	0800df60 	.word	0x0800df60

08008c30 <Motor_Test_Speed>:





void Motor_Test_Speed() {
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0

	Pre_Drive_Var_Init();
 8008c36:	f7fd fe63 	bl	8006900 <Pre_Drive_Var_Init>


	// 가속도 변수 초기화
	targetAccele = 1;
 8008c3a:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <Motor_Test_Speed+0xf0>)
 8008c3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c40:	601a      	str	r2, [r3, #0]
	curAccele = 0;
 8008c42:	4b38      	ldr	r3, [pc, #224]	; (8008d24 <Motor_Test_Speed+0xf4>)
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = 0;
 8008c4a:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <Motor_Test_Speed+0xf8>)
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
	decele = 1;
 8008c52:	4b36      	ldr	r3, [pc, #216]	; (8008d2c <Motor_Test_Speed+0xfc>)
 8008c54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c58:	601a      	str	r2, [r3, #0]
	curSpeed = 0;
 8008c5a:	4b35      	ldr	r3, [pc, #212]	; (8008d30 <Motor_Test_Speed+0x100>)
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]


	Motor_Start();
 8008c62:	f000 faa7 	bl	80091b4 <Motor_Start>
	Sensor_Start();
 8008c66:	f001 fe51 	bl	800a90c <Sensor_Start>
	Speed_Control_Start();
 8008c6a:	f000 fafb 	bl	8009264 <Speed_Control_Start>

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8008c6e:	f7fc fed1 	bl	8005a14 <Custom_Switch_Read>
 8008c72:	4603      	mov	r3, r0
 8008c74:	71fb      	strb	r3, [r7, #7]

		if (sw == CUSTOM_SW_3) {
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d045      	beq.n	8008d08 <Motor_Test_Speed+0xd8>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d10a      	bne.n	8008c98 <Motor_Test_Speed+0x68>
			targetSpeed -= 0.1f;
 8008c82:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <Motor_Test_Speed+0xf8>)
 8008c84:	edd3 7a00 	vldr	s15, [r3]
 8008c88:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008d34 <Motor_Test_Speed+0x104>
 8008c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <Motor_Test_Speed+0xf8>)
 8008c92:	edc3 7a00 	vstr	s15, [r3]
 8008c96:	e00c      	b.n	8008cb2 <Motor_Test_Speed+0x82>
		} else if (sw == CUSTOM_SW_2) {
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d109      	bne.n	8008cb2 <Motor_Test_Speed+0x82>
			targetSpeed += 0.1f;
 8008c9e:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <Motor_Test_Speed+0xf8>)
 8008ca0:	edd3 7a00 	vldr	s15, [r3]
 8008ca4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008d34 <Motor_Test_Speed+0x104>
 8008ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <Motor_Test_Speed+0xf8>)
 8008cae:	edc3 7a00 	vstr	s15, [r3]
		}

		Custom_OLED_Printf("/0speed  : %3.2f", curSpeed);
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	; (8008d30 <Motor_Test_Speed+0x100>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f7 fc4e 	bl	8000558 <__aeabi_f2d>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	481d      	ldr	r0, [pc, #116]	; (8008d38 <Motor_Test_Speed+0x108>)
 8008cc2:	f7fc fb77 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR    : %5d", TIM10->CCR1);
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <Motor_Test_Speed+0x10c>)
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cca:	4619      	mov	r1, r3
 8008ccc:	481c      	ldr	r0, [pc, #112]	; (8008d40 <Motor_Test_Speed+0x110>)
 8008cce:	f7fc fb71 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2curECOD: %5d", TIM4->CNT);
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <Motor_Test_Speed+0x114>)
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	481b      	ldr	r0, [pc, #108]	; (8008d48 <Motor_Test_Speed+0x118>)
 8008cda:	f7fc fb6b 	bl	80053b4 <Custom_OLED_Printf>
//		Custom_OLED_Printf("/3tarECOD: %5f", targetEncoderValueL_cntl)
		Custom_OLED_Printf("/5%5f", positionL );
 8008cde:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <Motor_Test_Speed+0x11c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fc38 	bl	8000558 <__aeabi_f2d>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4818      	ldr	r0, [pc, #96]	; (8008d50 <Motor_Test_Speed+0x120>)
 8008cee:	f7fc fb61 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/5%5f", positionCmdL );
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <Motor_Test_Speed+0x124>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7f7 fc2e 	bl	8000558 <__aeabi_f2d>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4813      	ldr	r0, [pc, #76]	; (8008d50 <Motor_Test_Speed+0x120>)
 8008d02:	f7fc fb57 	bl	80053b4 <Custom_OLED_Printf>
	for (;;) {
 8008d06:	e7b2      	b.n	8008c6e <Motor_Test_Speed+0x3e>
		 break;
 8008d08:	bf00      	nop

	}

	Speed_Control_Stop();
 8008d0a:	f000 fab7 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 8008d0e:	f001 fe15 	bl	800a93c <Sensor_Stop>
	Motor_Stop();
 8008d12:	f000 fa9f 	bl	8009254 <Motor_Stop>


}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000020 	.word	0x20000020
 8008d24:	20000024 	.word	0x20000024
 8008d28:	2000002c 	.word	0x2000002c
 8008d2c:	20000028 	.word	0x20000028
 8008d30:	20001478 	.word	0x20001478
 8008d34:	3dcccccd 	.word	0x3dcccccd
 8008d38:	0800df70 	.word	0x0800df70
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	0800df84 	.word	0x0800df84
 8008d44:	40000800 	.word	0x40000800
 8008d48:	0800df94 	.word	0x0800df94
 8008d4c:	20001454 	.word	0x20001454
 8008d50:	0800dfa4 	.word	0x0800dfa4
 8008d54:	20001450 	.word	0x20001450

08008d58 <Drive_Test_Position>:





void Drive_Test_Position() {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	70fb      	strb	r3, [r7, #3]

	uint8_t positioningIdx = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	70bb      	strb	r3, [r7, #2]

	Custom_OLED_Clear();
 8008d66:	f7fc fa40 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Start();
 8008d6a:	f001 fdcf 	bl	800a90c <Sensor_Start>
	Speed_Control_Start();
 8008d6e:	f000 fa79 	bl	8009264 <Speed_Control_Start>

	// 좌우 모터 포지션에 관한 변수
	positionVal = 0;
 8008d72:	4b18      	ldr	r3, [pc, #96]	; (8008dd4 <Drive_Test_Position+0x7c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
	positionCoef = POSITION_COEF_INIT;
 8008d78:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <Drive_Test_Position+0x80>)
 8008d7a:	4a18      	ldr	r2, [pc, #96]	; (8008ddc <Drive_Test_Position+0x84>)
 8008d7c:	601a      	str	r2, [r3, #0]

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008d7e:	e018      	b.n	8008db2 <Drive_Test_Position+0x5a>

		for (int i = 0; i < 8; i++) {
 8008d80:	2300      	movs	r3, #0
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	e006      	b.n	8008d94 <Drive_Test_Position+0x3c>
			Positioning(&positioningIdx);
 8008d86:	1cbb      	adds	r3, r7, #2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fa0f 	bl	80081ac <Positioning>
		for (int i = 0; i < 8; i++) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3301      	adds	r3, #1
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	ddf5      	ble.n	8008d86 <Drive_Test_Position+0x2e>
		}

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Drive_Test_Position+0x7c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	480f      	ldr	r0, [pc, #60]	; (8008de0 <Drive_Test_Position+0x88>)
 8008da2:	f7fc fb07 	bl	80053b4 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1pos:     %7d", limitedPositionVal);
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <Drive_Test_Position+0x8c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	480e      	ldr	r0, [pc, #56]	; (8008de8 <Drive_Test_Position+0x90>)
 8008dae:	f7fc fb01 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008db2:	f7fc fe2f 	bl	8005a14 <Custom_Switch_Read>
 8008db6:	4603      	mov	r3, r0
 8008db8:	70fb      	strb	r3, [r7, #3]
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d1df      	bne.n	8008d80 <Drive_Test_Position+0x28>
	}
	Speed_Control_Stop();
 8008dc0:	f000 fa5c 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 8008dc4:	f001 fdba 	bl	800a93c <Sensor_Stop>
	Custom_OLED_Clear();
 8008dc8:	f7fc fa0f 	bl	80051ea <Custom_OLED_Clear>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20001464 	.word	0x20001464
 8008dd8:	20000018 	.word	0x20000018
 8008ddc:	387ba882 	.word	0x387ba882
 8008de0:	0800dfac 	.word	0x0800dfac
 8008de4:	20001468 	.word	0x20001468
 8008de8:	0800dfbc 	.word	0x0800dfbc

08008dec <Mark_Live_Test>:





void Mark_Live_Test() {
 8008dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	af06      	add	r7, sp, #24
	uint8_t	sw = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 8008df6:	f001 fd89 	bl	800a90c <Sensor_Start>

    Custom_OLED_Clear();
 8008dfa:	f7fc f9f6 	bl	80051ea <Custom_OLED_Clear>

    Pre_Drive_Var_Init();
 8008dfe:	f7fd fd7f 	bl	8006900 <Pre_Drive_Var_Init>

	positionIdxMax = 9;
 8008e02:	4b87      	ldr	r3, [pc, #540]	; (8009020 <Mark_Live_Test+0x234>)
 8008e04:	2209      	movs	r2, #9
 8008e06:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 6;
 8008e08:	4b86      	ldr	r3, [pc, #536]	; (8009024 <Mark_Live_Test+0x238>)
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	701a      	strb	r2, [r3, #0]

    while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8008e0e:	e0f8      	b.n	8009002 <Mark_Live_Test+0x216>

    	Mark();
 8008e10:	f7ff f912 	bl	8008038 <Mark>

    	Positioning();
 8008e14:	f7ff f9ca 	bl	80081ac <Positioning>

        switch (markStateMachine) {
 8008e18:	4b83      	ldr	r3, [pc, #524]	; (8009028 <Mark_Live_Test+0x23c>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d81b      	bhi.n	8008e58 <Mark_Live_Test+0x6c>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <Mark_Live_Test+0x3c>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e39 	.word	0x08008e39
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e49 	.word	0x08008e49
 8008e34:	08008e51 	.word	0x08008e51
        case MARK_STATE_MACHINE_IDLE:
        	Custom_OLED_Printf("/0STATE: IDLE     ");
 8008e38:	487c      	ldr	r0, [pc, #496]	; (800902c <Mark_Live_Test+0x240>)
 8008e3a:	f7fc fabb 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008e3e:	e00f      	b.n	8008e60 <Mark_Live_Test+0x74>
        case MARK_STATE_MACHINE_CROSS:
        	Custom_OLED_Printf("/0STATE: CROSS    ");
 8008e40:	487b      	ldr	r0, [pc, #492]	; (8009030 <Mark_Live_Test+0x244>)
 8008e42:	f7fc fab7 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008e46:	e00b      	b.n	8008e60 <Mark_Live_Test+0x74>
        case MARK_STATE_MACHINE_MARKER:
        	Custom_OLED_Printf("/0STATE: MARK     ");
 8008e48:	487a      	ldr	r0, [pc, #488]	; (8009034 <Mark_Live_Test+0x248>)
 8008e4a:	f7fc fab3 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008e4e:	e007      	b.n	8008e60 <Mark_Live_Test+0x74>
        case MARK_STATE_MACHINE_DECISION:
        	Custom_OLED_Printf("/0STATE: DECISION ");
 8008e50:	4879      	ldr	r0, [pc, #484]	; (8009038 <Mark_Live_Test+0x24c>)
 8008e52:	f7fc faaf 	bl	80053b4 <Custom_OLED_Printf>
        	break;
 8008e56:	e003      	b.n	8008e60 <Mark_Live_Test+0x74>
        default:
        	Custom_OLED_Printf("/0STATE: ------   ");
 8008e58:	4878      	ldr	r0, [pc, #480]	; (800903c <Mark_Live_Test+0x250>)
 8008e5a:	f7fc faab 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008e5e:	bf00      	nop
        }

        switch (markState) {
 8008e60:	4b77      	ldr	r3, [pc, #476]	; (8009040 <Mark_Live_Test+0x254>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d82d      	bhi.n	8008ec4 <Mark_Live_Test+0xd8>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <Mark_Live_Test+0x84>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008e95 	.word	0x08008e95
 8008e78:	08008ea5 	.word	0x08008ea5
 8008e7c:	08008e9d 	.word	0x08008e9d
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008ebd 	.word	0x08008ebd
		case MARK_NONE:
			Custom_OLED_Printf("/1MARK: NONE      ");
 8008e8c:	486d      	ldr	r0, [pc, #436]	; (8009044 <Mark_Live_Test+0x258>)
 8008e8e:	f7fc fa91 	bl	80053b4 <Custom_OLED_Printf>
			break;
 8008e92:	e01b      	b.n	8008ecc <Mark_Live_Test+0xe0>
		case MARK_STRAIGHT:
			Custom_OLED_Printf("/1MARK: STRAIGHT  ");
 8008e94:	486c      	ldr	r0, [pc, #432]	; (8009048 <Mark_Live_Test+0x25c>)
 8008e96:	f7fc fa8d 	bl	80053b4 <Custom_OLED_Printf>
			break;
 8008e9a:	e017      	b.n	8008ecc <Mark_Live_Test+0xe0>
        case MARK_CURVE_L:
        	Custom_OLED_Printf("/1MARK: LEFT      ");
 8008e9c:	486b      	ldr	r0, [pc, #428]	; (800904c <Mark_Live_Test+0x260>)
 8008e9e:	f7fc fa89 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008ea2:	e013      	b.n	8008ecc <Mark_Live_Test+0xe0>
        case MARK_CURVE_R:
        	Custom_OLED_Printf("/1MARK: RIGHT     ");
 8008ea4:	486a      	ldr	r0, [pc, #424]	; (8009050 <Mark_Live_Test+0x264>)
 8008ea6:	f7fc fa85 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008eaa:	e00f      	b.n	8008ecc <Mark_Live_Test+0xe0>
        case MARK_END:
        	Custom_OLED_Printf("/1MARK: END       ");
 8008eac:	4869      	ldr	r0, [pc, #420]	; (8009054 <Mark_Live_Test+0x268>)
 8008eae:	f7fc fa81 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008eb2:	e00b      	b.n	8008ecc <Mark_Live_Test+0xe0>
        case MARK_CROSS:
        	Custom_OLED_Printf("/1MARK: CROSS     ");
 8008eb4:	4868      	ldr	r0, [pc, #416]	; (8009058 <Mark_Live_Test+0x26c>)
 8008eb6:	f7fc fa7d 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008eba:	e007      	b.n	8008ecc <Mark_Live_Test+0xe0>
        case MARK_LINE_OUT:
            Custom_OLED_Printf("/1MARK: LINE OUT  ");
 8008ebc:	4867      	ldr	r0, [pc, #412]	; (800905c <Mark_Live_Test+0x270>)
 8008ebe:	f7fc fa79 	bl	80053b4 <Custom_OLED_Printf>
            break;
 8008ec2:	e003      	b.n	8008ecc <Mark_Live_Test+0xe0>
        default:
        	Custom_OLED_Printf("/1MARK: ------    ");
 8008ec4:	4866      	ldr	r0, [pc, #408]	; (8009060 <Mark_Live_Test+0x274>)
 8008ec6:	f7fc fa75 	bl	80053b4 <Custom_OLED_Printf>
        	break;
 8008eca:	bf00      	nop
        }

    	uint16_t masking = lineMasking;
 8008ecc:	4b65      	ldr	r3, [pc, #404]	; (8009064 <Mark_Live_Test+0x278>)
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	80bb      	strh	r3, [r7, #4]

    	Custom_OLED_Printf("/2%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w",  \
 8008ed2:	88bb      	ldrh	r3, [r7, #4]
 8008ed4:	0bdb      	lsrs	r3, r3, #15
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	f003 0501 	and.w	r5, r3, #1
 8008edc:	88bb      	ldrh	r3, [r7, #4]
 8008ede:	0b9b      	lsrs	r3, r3, #14
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f003 0601 	and.w	r6, r3, #1
 8008ee6:	88bb      	ldrh	r3, [r7, #4]
 8008ee8:	0b5b      	lsrs	r3, r3, #13
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f003 0c01 	and.w	ip, r3, #1
 8008ef0:	88bb      	ldrh	r3, [r7, #4]
 8008ef2:	0b1b      	lsrs	r3, r3, #12
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	88ba      	ldrh	r2, [r7, #4]
 8008efc:	0ad2      	lsrs	r2, r2, #11
 8008efe:	b292      	uxth	r2, r2
 8008f00:	f002 0201 	and.w	r2, r2, #1
 8008f04:	88b9      	ldrh	r1, [r7, #4]
 8008f06:	0a89      	lsrs	r1, r1, #10
 8008f08:	b289      	uxth	r1, r1
 8008f0a:	f001 0101 	and.w	r1, r1, #1
 8008f0e:	88b8      	ldrh	r0, [r7, #4]
 8008f10:	0a40      	lsrs	r0, r0, #9
 8008f12:	b280      	uxth	r0, r0
 8008f14:	f000 0001 	and.w	r0, r0, #1
 8008f18:	88bc      	ldrh	r4, [r7, #4]
 8008f1a:	0a24      	lsrs	r4, r4, #8
 8008f1c:	b2a4      	uxth	r4, r4
 8008f1e:	f004 0401 	and.w	r4, r4, #1
 8008f22:	9404      	str	r4, [sp, #16]
 8008f24:	9003      	str	r0, [sp, #12]
 8008f26:	9102      	str	r1, [sp, #8]
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4663      	mov	r3, ip
 8008f2e:	4632      	mov	r2, r6
 8008f30:	4629      	mov	r1, r5
 8008f32:	484d      	ldr	r0, [pc, #308]	; (8009068 <Mark_Live_Test+0x27c>)
 8008f34:	f7fc fa3e 	bl	80053b4 <Custom_OLED_Printf>
    				(masking >> 15) & 1, (masking >> 14) & 1, (masking >> 13) & 1, (masking >> 12) & 1, \
    				(masking >> 11) & 1, (masking >> 10) & 1, (masking >> 9) & 1, (masking >> 8) & 1);

    	Custom_OLED_Printf("/3%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008f38:	88bb      	ldrh	r3, [r7, #4]
 8008f3a:	09db      	lsrs	r3, r3, #7
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f003 0501 	and.w	r5, r3, #1
 8008f42:	88bb      	ldrh	r3, [r7, #4]
 8008f44:	099b      	lsrs	r3, r3, #6
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f003 0601 	and.w	r6, r3, #1
 8008f4c:	88bb      	ldrh	r3, [r7, #4]
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f003 0c01 	and.w	ip, r3, #1
 8008f56:	88bb      	ldrh	r3, [r7, #4]
 8008f58:	091b      	lsrs	r3, r3, #4
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	88ba      	ldrh	r2, [r7, #4]
 8008f62:	08d2      	lsrs	r2, r2, #3
 8008f64:	b292      	uxth	r2, r2
 8008f66:	f002 0201 	and.w	r2, r2, #1
 8008f6a:	88b9      	ldrh	r1, [r7, #4]
 8008f6c:	0889      	lsrs	r1, r1, #2
 8008f6e:	b289      	uxth	r1, r1
 8008f70:	f001 0101 	and.w	r1, r1, #1
 8008f74:	88b8      	ldrh	r0, [r7, #4]
 8008f76:	0840      	lsrs	r0, r0, #1
 8008f78:	b280      	uxth	r0, r0
 8008f7a:	f000 0001 	and.w	r0, r0, #1
    				(masking >> 7) & 1, (masking >> 6) & 1, (masking >> 5) & 1, (masking >> 4) & 1, \
    				(masking >> 3) & 1, (masking >> 2) & 1, (masking >> 1) & 1, (masking >> 0) & 1);
 8008f7e:	88bc      	ldrh	r4, [r7, #4]
    	Custom_OLED_Printf("/3%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008f80:	f004 0401 	and.w	r4, r4, #1
 8008f84:	9404      	str	r4, [sp, #16]
 8008f86:	9003      	str	r0, [sp, #12]
 8008f88:	9102      	str	r1, [sp, #8]
 8008f8a:	9201      	str	r2, [sp, #4]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4663      	mov	r3, ip
 8008f90:	4632      	mov	r2, r6
 8008f92:	4629      	mov	r1, r5
 8008f94:	4835      	ldr	r0, [pc, #212]	; (800906c <Mark_Live_Test+0x280>)
 8008f96:	f7fc fa0d 	bl	80053b4 <Custom_OLED_Printf>



    	masking = markSampling[0];
 8008f9a:	4b35      	ldr	r3, [pc, #212]	; (8009070 <Mark_Live_Test+0x284>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	80bb      	strh	r3, [r7, #4]

//    	Custom_OLED_Printf("/4%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w",
//    				(masking >> 15) & 1, (masking >> 14) & 1, (masking >> 13) & 1, (masking >> 12) & 1,
//    				(masking >> 11) & 1, (masking >> 10) & 1, (masking >> 9) & 1, (masking >> 8) & 1);

    	Custom_OLED_Printf("/5%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008fa0:	88bb      	ldrh	r3, [r7, #4]
 8008fa2:	09db      	lsrs	r3, r3, #7
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f003 0501 	and.w	r5, r3, #1
 8008faa:	88bb      	ldrh	r3, [r7, #4]
 8008fac:	099b      	lsrs	r3, r3, #6
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f003 0601 	and.w	r6, r3, #1
 8008fb4:	88bb      	ldrh	r3, [r7, #4]
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f003 0c01 	and.w	ip, r3, #1
 8008fbe:	88bb      	ldrh	r3, [r7, #4]
 8008fc0:	091b      	lsrs	r3, r3, #4
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	88ba      	ldrh	r2, [r7, #4]
 8008fca:	08d2      	lsrs	r2, r2, #3
 8008fcc:	b292      	uxth	r2, r2
 8008fce:	f002 0201 	and.w	r2, r2, #1
 8008fd2:	88b9      	ldrh	r1, [r7, #4]
 8008fd4:	0889      	lsrs	r1, r1, #2
 8008fd6:	b289      	uxth	r1, r1
 8008fd8:	f001 0101 	and.w	r1, r1, #1
 8008fdc:	88b8      	ldrh	r0, [r7, #4]
 8008fde:	0840      	lsrs	r0, r0, #1
 8008fe0:	b280      	uxth	r0, r0
 8008fe2:	f000 0001 	and.w	r0, r0, #1
    				(masking >> 7) & 1, (masking >> 6) & 1, (masking >> 5) & 1, (masking >> 4) & 1, \
    				(masking >> 3) & 1, (masking >> 2) & 1, (masking >> 1) & 1, (masking >> 0) & 1);
 8008fe6:	88bc      	ldrh	r4, [r7, #4]
    	Custom_OLED_Printf("/5%x/r%x/w%x/r%x/w%x/r%x/w%x/r%x/w", \
 8008fe8:	f004 0401 	and.w	r4, r4, #1
 8008fec:	9404      	str	r4, [sp, #16]
 8008fee:	9003      	str	r0, [sp, #12]
 8008ff0:	9102      	str	r1, [sp, #8]
 8008ff2:	9201      	str	r2, [sp, #4]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	4663      	mov	r3, ip
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	481d      	ldr	r0, [pc, #116]	; (8009074 <Mark_Live_Test+0x288>)
 8008ffe:	f7fc f9d9 	bl	80053b4 <Custom_OLED_Printf>
    while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8009002:	f7fc fd07 	bl	8005a14 <Custom_Switch_Read>
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2b04      	cmp	r3, #4
 800900e:	f47f aeff 	bne.w	8008e10 <Mark_Live_Test+0x24>
    }

    Sensor_Stop();
 8009012:	f001 fc93 	bl	800a93c <Sensor_Stop>
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901e:	bf00      	nop
 8009020:	2000001c 	.word	0x2000001c
 8009024:	2000001d 	.word	0x2000001d
 8009028:	20001490 	.word	0x20001490
 800902c:	0800dfcc 	.word	0x0800dfcc
 8009030:	0800dfe0 	.word	0x0800dfe0
 8009034:	0800dff4 	.word	0x0800dff4
 8009038:	0800e008 	.word	0x0800e008
 800903c:	0800e01c 	.word	0x0800e01c
 8009040:	2000003c 	.word	0x2000003c
 8009044:	0800e030 	.word	0x0800e030
 8009048:	0800e044 	.word	0x0800e044
 800904c:	0800e058 	.word	0x0800e058
 8009050:	0800e06c 	.word	0x0800e06c
 8009054:	0800e080 	.word	0x0800e080
 8009058:	0800e094 	.word	0x0800e094
 800905c:	0800e0a8 	.word	0x0800e0a8
 8009060:	0800e0bc 	.word	0x0800e0bc
 8009064:	2000003e 	.word	0x2000003e
 8009068:	0800e0d0 	.word	0x0800e0d0
 800906c:	0800e0f4 	.word	0x0800e0f4
 8009070:	2000350c 	.word	0x2000350c
 8009074:	0800e118 	.word	0x0800e118

08009078 <LL_TIM_EnableCounter>:
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f043 0201 	orr.w	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <LL_TIM_DisableCounter>:
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f023 0201 	bic.w	r2, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <LL_TIM_CC_EnableChannel>:
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1a      	ldr	r2, [r3, #32]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <LL_TIM_CC_DisableChannel>:
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1a      	ldr	r2, [r3, #32]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	43db      	mvns	r3, r3
 80090ec:	401a      	ands	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	621a      	str	r2, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <LL_TIM_OC_SetCompareCH2>:
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <LL_TIM_EnableIT_UPDATE>:
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f043 0201 	orr.w	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60da      	str	r2, [r3, #12]
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <LL_TIM_DisableIT_UPDATE>:
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60da      	str	r2, [r3, #12]
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <MotorL_Start>:





void MotorL_Start() {
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0

	// motorL pwm start
	LL_TIM_EnableCounter(TIM10);
 8009160:	4807      	ldr	r0, [pc, #28]	; (8009180 <MotorL_Start+0x24>)
 8009162:	f7ff ff89 	bl	8009078 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8009166:	2101      	movs	r1, #1
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <MotorL_Start+0x24>)
 800916a:	f7ff ffa5 	bl	80090b8 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 800916e:	2100      	movs	r1, #0
 8009170:	4803      	ldr	r0, [pc, #12]	; (8009180 <MotorL_Start+0x24>)
 8009172:	f7ff ffc4 	bl	80090fe <LL_TIM_OC_SetCompareCH2>

	// motorL encoder start
	LL_TIM_EnableCounter(TIM4);
 8009176:	4803      	ldr	r0, [pc, #12]	; (8009184 <MotorL_Start+0x28>)
 8009178:	f7ff ff7e 	bl	8009078 <LL_TIM_EnableCounter>
}
 800917c:	bf00      	nop
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40014400 	.word	0x40014400
 8009184:	40000800 	.word	0x40000800

08009188 <MotorR_Start>:



void MotorR_Start() {
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0

	// motorR pwm start
	LL_TIM_EnableCounter(TIM11);
 800918c:	4807      	ldr	r0, [pc, #28]	; (80091ac <MotorR_Start+0x24>)
 800918e:	f7ff ff73 	bl	8009078 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8009192:	2101      	movs	r1, #1
 8009194:	4805      	ldr	r0, [pc, #20]	; (80091ac <MotorR_Start+0x24>)
 8009196:	f7ff ff8f 	bl	80090b8 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 800919a:	2100      	movs	r1, #0
 800919c:	4803      	ldr	r0, [pc, #12]	; (80091ac <MotorR_Start+0x24>)
 800919e:	f7ff ffae 	bl	80090fe <LL_TIM_OC_SetCompareCH2>

	// motorR encoder start
	LL_TIM_EnableCounter(TIM3);
 80091a2:	4803      	ldr	r0, [pc, #12]	; (80091b0 <MotorR_Start+0x28>)
 80091a4:	f7ff ff68 	bl	8009078 <LL_TIM_EnableCounter>
}
 80091a8:	bf00      	nop
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	40014800 	.word	0x40014800
 80091b0:	40000400 	.word	0x40000400

080091b4 <Motor_Start>:




void Motor_Start() {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0

	MotorL_Start();
 80091b8:	f7ff ffd0 	bl	800915c <MotorL_Start>
	MotorR_Start();
 80091bc:	f7ff ffe4 	bl	8009188 <MotorR_Start>
}
 80091c0:	bf00      	nop
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <MotorL_Power_Off>:





void MotorL_Power_Off() {
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0

	TIM10->CCR1 = 0;
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <MotorL_Power_Off+0x14>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80091ce:	bf00      	nop
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	40014400 	.word	0x40014400

080091dc <MotorR_Power_Off>:


void MotorR_Power_Off() {
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0

	TIM11->CCR1 = 0;
 80091e0:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <MotorR_Power_Off+0x14>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80091e6:	bf00      	nop
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40014800 	.word	0x40014800

080091f4 <Motor_Power_Off>:



void Motor_Power_Off() {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 80091f8:	f7ff ffe4 	bl	80091c4 <MotorL_Power_Off>
	MotorR_Power_Off();
 80091fc:	f7ff ffee 	bl	80091dc <MotorR_Power_Off>
}
 8009200:	bf00      	nop
 8009202:	bd80      	pop	{r7, pc}

08009204 <MotorL_Stop>:





void MotorL_Stop() {
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0

	MotorL_Power_Off();
 8009208:	f7ff ffdc 	bl	80091c4 <MotorL_Power_Off>

	// motorL pwm end
	LL_TIM_DisableCounter(TIM10);
 800920c:	4805      	ldr	r0, [pc, #20]	; (8009224 <MotorL_Stop+0x20>)
 800920e:	f7ff ff43 	bl	8009098 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8009212:	2101      	movs	r1, #1
 8009214:	4803      	ldr	r0, [pc, #12]	; (8009224 <MotorL_Stop+0x20>)
 8009216:	f7ff ff60 	bl	80090da <LL_TIM_CC_DisableChannel>

	// motorL encoder end
	LL_TIM_DisableCounter(TIM4);
 800921a:	4803      	ldr	r0, [pc, #12]	; (8009228 <MotorL_Stop+0x24>)
 800921c:	f7ff ff3c 	bl	8009098 <LL_TIM_DisableCounter>
}
 8009220:	bf00      	nop
 8009222:	bd80      	pop	{r7, pc}
 8009224:	40014400 	.word	0x40014400
 8009228:	40000800 	.word	0x40000800

0800922c <MotorR_Stop>:



void MotorR_Stop() {
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0

	MotorR_Power_Off();
 8009230:	f7ff ffd4 	bl	80091dc <MotorR_Power_Off>

	// motorR pwm end
	LL_TIM_DisableCounter(TIM11);
 8009234:	4805      	ldr	r0, [pc, #20]	; (800924c <MotorR_Stop+0x20>)
 8009236:	f7ff ff2f 	bl	8009098 <LL_TIM_DisableCounter>
	LL_TIM_CC_DisableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 800923a:	2101      	movs	r1, #1
 800923c:	4803      	ldr	r0, [pc, #12]	; (800924c <MotorR_Stop+0x20>)
 800923e:	f7ff ff4c 	bl	80090da <LL_TIM_CC_DisableChannel>

	// motorR encoder end
	LL_TIM_DisableCounter(TIM3);
 8009242:	4803      	ldr	r0, [pc, #12]	; (8009250 <MotorR_Stop+0x24>)
 8009244:	f7ff ff28 	bl	8009098 <LL_TIM_DisableCounter>
}
 8009248:	bf00      	nop
 800924a:	bd80      	pop	{r7, pc}
 800924c:	40014800 	.word	0x40014800
 8009250:	40000400 	.word	0x40000400

08009254 <Motor_Stop>:



void Motor_Stop() {
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0

	MotorL_Stop();
 8009258:	f7ff ffd4 	bl	8009204 <MotorL_Stop>
	MotorR_Stop();
 800925c:	f7ff ffe6 	bl	800922c <MotorR_Stop>
}
 8009260:	bf00      	nop
 8009262:	bd80      	pop	{r7, pc}

08009264 <Speed_Control_Start>:





void Speed_Control_Start(){
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <Speed_Control_Start+0x14>)
 800926a:	f7ff ff05 	bl	8009078 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 800926e:	4802      	ldr	r0, [pc, #8]	; (8009278 <Speed_Control_Start+0x14>)
 8009270:	f7ff ff53 	bl	800911a <LL_TIM_EnableIT_UPDATE>
}
 8009274:	bf00      	nop
 8009276:	bd80      	pop	{r7, pc}
 8009278:	40014000 	.word	0x40014000

0800927c <Speed_Control_Stop>:




void Speed_Control_Stop(){
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 8009280:	4803      	ldr	r0, [pc, #12]	; (8009290 <Speed_Control_Stop+0x14>)
 8009282:	f7ff ff5a 	bl	800913a <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8009286:	4802      	ldr	r0, [pc, #8]	; (8009290 <Speed_Control_Stop+0x14>)
 8009288:	f7ff ff06 	bl	8009098 <LL_TIM_DisableCounter>
}
 800928c:	bf00      	nop
 800928e:	bd80      	pop	{r7, pc}
 8009290:	40014000 	.word	0x40014000

08009294 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800929c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80092a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80092b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80092c6:	bf00      	nop
 80092c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d1f8      	bne.n	80092c8 <Custom_Delay_us+0x34>
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092f2:	fb02 f303 	mul.w	r3, r2, r3
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff ffcc 	bl	8009294 <Custom_Delay_us>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <Drive_Fit_In>:
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	ed87 0a01 	vstr	s0, [r7, #4]
 800930e:	edc7 0a00 	vstr	s1, [r7]
	targetSpeed = pinSpeed;
 8009312:	4a25      	ldr	r2, [pc, #148]	; (80093a8 <Drive_Fit_In+0xa4>)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2.f * s);
 8009318:	4b24      	ldr	r3, [pc, #144]	; (80093ac <Drive_Fit_In+0xa8>)
 800931a:	edd3 7a00 	vldr	s15, [r3]
 800931e:	ed97 7a00 	vldr	s14, [r7]
 8009322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009326:	4b21      	ldr	r3, [pc, #132]	; (80093ac <Drive_Fit_In+0xa8>)
 8009328:	edd3 6a00 	vldr	s13, [r3]
 800932c:	edd7 7a00 	vldr	s15, [r7]
 8009330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	d512      	bpl.n	8009368 <Drive_Fit_In+0x64>
 8009342:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <Drive_Fit_In+0xa8>)
 8009344:	edd3 7a00 	vldr	s15, [r3]
 8009348:	ed97 7a00 	vldr	s14, [r7]
 800934c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009350:	4b16      	ldr	r3, [pc, #88]	; (80093ac <Drive_Fit_In+0xa8>)
 8009352:	edd3 6a00 	vldr	s13, [r3]
 8009356:	edd7 7a00 	vldr	s15, [r7]
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009362:	eef1 7a67 	vneg.f32	s15, s15
 8009366:	e00f      	b.n	8009388 <Drive_Fit_In+0x84>
 8009368:	4b10      	ldr	r3, [pc, #64]	; (80093ac <Drive_Fit_In+0xa8>)
 800936a:	edd3 7a00 	vldr	s15, [r3]
 800936e:	ed97 7a00 	vldr	s14, [r7]
 8009372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009376:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <Drive_Fit_In+0xa8>)
 8009378:	edd3 6a00 	vldr	s13, [r3]
 800937c:	edd7 7a00 	vldr	s15, [r7]
 8009380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009388:	ed97 7a01 	vldr	s14, [r7, #4]
 800938c:	ee77 6a07 	vadd.f32	s13, s14, s14
 8009390:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <Drive_Fit_In+0xac>)
 8009396:	ed83 7a00 	vstr	s14, [r3]
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	2000002c 	.word	0x2000002c
 80093ac:	20001478 	.word	0x20001478
 80093b0:	20000028 	.word	0x20000028

080093b4 <Is_Drive_End>:
__STATIC_INLINE uint8_t	Is_Drive_End() {
 80093b4:	b480      	push	{r7}
 80093b6:	af00      	add	r7, sp, #0
	if (endMarkCnt >= stopEndMarkCnt) {
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <Is_Drive_End+0x2c>)
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <Is_Drive_End+0x30>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d301      	bcc.n	80093c8 <Is_Drive_End+0x14>
		return EXIT_ECHO_END_MARK;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e006      	b.n	80093d6 <Is_Drive_End+0x22>
	if (markState == MARK_LINE_OUT) {
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <Is_Drive_End+0x34>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b06      	cmp	r3, #6
 80093ce:	d101      	bne.n	80093d4 <Is_Drive_End+0x20>
		return EXIT_ECHO_LINE_OUT;
 80093d0:	2302      	movs	r3, #2
 80093d2:	e000      	b.n	80093d6 <Is_Drive_End+0x22>
	return EXIT_ECHO_IDLE;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20003501 	.word	0x20003501
 80093e4:	20000049 	.word	0x20000049
 80093e8:	2000003c 	.word	0x2000003c

080093ec <Inline_Drive>:
#define INC_INLINE_DERIVE_H_

#include <config.h>
#include "main.h"

__STATIC_INLINE void Inline_Drive() {
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0

	if (!isInlineDriveEnabled) {
 80093f0:	4b5d      	ldr	r3, [pc, #372]	; (8009568 <Inline_Drive+0x17c>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80af 	beq.w	8009558 <Inline_Drive+0x16c>
		return;
	}

	if (isLastStraight) {
 80093fa:	4b5c      	ldr	r3, [pc, #368]	; (800956c <Inline_Drive+0x180>)
 80093fc:	edd3 7a00 	vldr	s15, [r3]
 8009400:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009408:	d003      	beq.n	8009412 <Inline_Drive+0x26>
		targetInlineVal = 0;
 800940a:	4b59      	ldr	r3, [pc, #356]	; (8009570 <Inline_Drive+0x184>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
		return;
 8009410:	e0a5      	b.n	800955e <Inline_Drive+0x172>
	}

	if (driveData[driveDataIdx].tickCnt_L > curTick_L + INLINE_POSITIONING_TICK
 8009412:	4b58      	ldr	r3, [pc, #352]	; (8009574 <Inline_Drive+0x188>)
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	4a57      	ldr	r2, [pc, #348]	; (8009578 <Inline_Drive+0x18c>)
 800941a:	460b      	mov	r3, r1
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	440b      	add	r3, r1
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800942e:	4b53      	ldr	r3, [pc, #332]	; (800957c <Inline_Drive+0x190>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800943a:	eddf 6a51 	vldr	s13, [pc, #324]	; 8009580 <Inline_Drive+0x194>
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	dd1d      	ble.n	8009488 <Inline_Drive+0x9c>
		&& driveData[driveDataIdx].tickCnt_R > curTick_R + INLINE_POSITIONING_TICK) {
 800944c:	4b49      	ldr	r3, [pc, #292]	; (8009574 <Inline_Drive+0x188>)
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	4a49      	ldr	r2, [pc, #292]	; (8009578 <Inline_Drive+0x18c>)
 8009454:	460b      	mov	r3, r1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	440b      	add	r3, r1
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	3304      	adds	r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800946a:	4b46      	ldr	r3, [pc, #280]	; (8009584 <Inline_Drive+0x198>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009476:	eddf 6a42 	vldr	s13, [pc, #264]	; 8009580 <Inline_Drive+0x194>
 800947a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009486:	dc69      	bgt.n	800955c <Inline_Drive+0x170>

		return;
	}

	if (driveData[driveDataIdx + 1].markState == MARK_CURVE_R) {
 8009488:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <Inline_Drive+0x188>)
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	493a      	ldr	r1, [pc, #232]	; (8009578 <Inline_Drive+0x18c>)
 8009490:	4613      	mov	r3, r2
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	3308      	adds	r3, #8
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d103      	bne.n	80094aa <Inline_Drive+0xbe>

		targetInlineVal = -1 * ABS_INLINE_TARGET_POSITION;
 80094a2:	4b33      	ldr	r3, [pc, #204]	; (8009570 <Inline_Drive+0x184>)
 80094a4:	4a38      	ldr	r2, [pc, #224]	; (8009588 <Inline_Drive+0x19c>)
 80094a6:	601a      	str	r2, [r3, #0]
		return;
 80094a8:	e059      	b.n	800955e <Inline_Drive+0x172>
	}

	if (driveData[driveDataIdx + 1].markState == MARK_CURVE_L) {
 80094aa:	4b32      	ldr	r3, [pc, #200]	; (8009574 <Inline_Drive+0x188>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	4931      	ldr	r1, [pc, #196]	; (8009578 <Inline_Drive+0x18c>)
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	3308      	adds	r3, #8
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d104      	bne.n	80094ce <Inline_Drive+0xe2>

		targetInlineVal = ABS_INLINE_TARGET_POSITION;
 80094c4:	4b2a      	ldr	r3, [pc, #168]	; (8009570 <Inline_Drive+0x184>)
 80094c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80094ca:	601a      	str	r2, [r3, #0]
		return;
 80094cc:	e047      	b.n	800955e <Inline_Drive+0x172>
	}

	if (driveData[driveDataIdx + 1].markState == MARK_STRAIGHT) {
 80094ce:	4b29      	ldr	r3, [pc, #164]	; (8009574 <Inline_Drive+0x188>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	4928      	ldr	r1, [pc, #160]	; (8009578 <Inline_Drive+0x18c>)
 80094d6:	4613      	mov	r3, r2
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	3308      	adds	r3, #8
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d13a      	bne.n	800955e <Inline_Drive+0x172>

		if (driveData[driveDataIdx].crossCnt != driveData[driveDataIdx + 1].crossCnt) {
 80094e8:	4b22      	ldr	r3, [pc, #136]	; (8009574 <Inline_Drive+0x188>)
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	4a22      	ldr	r2, [pc, #136]	; (8009578 <Inline_Drive+0x18c>)
 80094f0:	460b      	mov	r3, r1
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	440b      	add	r3, r1
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	3309      	adds	r3, #9
 80094fc:	7819      	ldrb	r1, [r3, #0]
 80094fe:	4b1d      	ldr	r3, [pc, #116]	; (8009574 <Inline_Drive+0x188>)
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	481c      	ldr	r0, [pc, #112]	; (8009578 <Inline_Drive+0x18c>)
 8009506:	4613      	mov	r3, r2
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4403      	add	r3, r0
 8009510:	3309      	adds	r3, #9
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	4299      	cmp	r1, r3
 8009516:	d003      	beq.n	8009520 <Inline_Drive+0x134>

			targetInlineVal = 0;
 8009518:	4b15      	ldr	r3, [pc, #84]	; (8009570 <Inline_Drive+0x184>)
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
			return;
 800951e:	e01e      	b.n	800955e <Inline_Drive+0x172>
		}

		if (driveData[driveDataIdx].markState != driveData[driveDataIdx + 2].markState) {
 8009520:	4b14      	ldr	r3, [pc, #80]	; (8009574 <Inline_Drive+0x188>)
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	4619      	mov	r1, r3
 8009526:	4a14      	ldr	r2, [pc, #80]	; (8009578 <Inline_Drive+0x18c>)
 8009528:	460b      	mov	r3, r1
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	440b      	add	r3, r1
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	3308      	adds	r3, #8
 8009534:	7819      	ldrb	r1, [r3, #0]
 8009536:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <Inline_Drive+0x188>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	1c9a      	adds	r2, r3, #2
 800953c:	480e      	ldr	r0, [pc, #56]	; (8009578 <Inline_Drive+0x18c>)
 800953e:	4613      	mov	r3, r2
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4403      	add	r3, r0
 8009548:	3308      	adds	r3, #8
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4299      	cmp	r1, r3
 800954e:	d006      	beq.n	800955e <Inline_Drive+0x172>

			targetInlineVal = 0;
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <Inline_Drive+0x184>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
			return;
 8009556:	e002      	b.n	800955e <Inline_Drive+0x172>
		return;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <Inline_Drive+0x172>
		return;
 800955c:	bf00      	nop
		}
	}
}
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20003500 	.word	0x20003500
 800956c:	20003504 	.word	0x20003504
 8009570:	20001488 	.word	0x20001488
 8009574:	200032f8 	.word	0x200032f8
 8009578:	200014f8 	.word	0x200014f8
 800957c:	2000147c 	.word	0x2000147c
 8009580:	46154b29 	.word	0x46154b29
 8009584:	20001480 	.word	0x20001480
 8009588:	ffffe0c0 	.word	0xffffe0c0

0800958c <Mark_Masking>:
__STATIC_INLINE void	Mark_Masking(int8_t curIrSensorMid) {
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	71fb      	strb	r3, [r7, #7]
	lineMasking = markMasking.line_mask[curIrSensorMid];
 8009596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800959a:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <Mark_Masking+0x68>)
 800959c:	3320      	adds	r3, #32
 800959e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <Mark_Masking+0x6c>)
 80095a6:	801a      	strh	r2, [r3, #0]
	leftMarkMasking = markMasking.left_mask[curIrSensorMid];
 80095a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ac:	4a11      	ldr	r2, [pc, #68]	; (80095f4 <Mark_Masking+0x68>)
 80095ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	4b11      	ldr	r3, [pc, #68]	; (80095fc <Mark_Masking+0x70>)
 80095b6:	801a      	strh	r2, [r3, #0]
	rightMarkMasking = markMasking.right_mask[curIrSensorMid];
 80095b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095bc:	4a0d      	ldr	r2, [pc, #52]	; (80095f4 <Mark_Masking+0x68>)
 80095be:	3310      	adds	r3, #16
 80095c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <Mark_Masking+0x74>)
 80095c8:	801a      	strh	r2, [r3, #0]
	bothMarkMasking = leftMarkMasking | rightMarkMasking;
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <Mark_Masking+0x70>)
 80095cc:	881a      	ldrh	r2, [r3, #0]
 80095ce:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <Mark_Masking+0x74>)
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <Mark_Masking+0x78>)
 80095d8:	801a      	strh	r2, [r3, #0]
	markAreaMasking = ~lineMasking;
 80095da:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <Mark_Masking+0x6c>)
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	43db      	mvns	r3, r3
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <Mark_Masking+0x7c>)
 80095e4:	801a      	strh	r2, [r3, #0]
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20001494 	.word	0x20001494
 80095f8:	2000003e 	.word	0x2000003e
 80095fc:	20000042 	.word	0x20000042
 8009600:	20000040 	.word	0x20000040
 8009604:	20000044 	.word	0x20000044
 8009608:	20000046 	.word	0x20000046

0800960c <Mark_Accumming>:
__STATIC_INLINE void	Mark_Accumming(int8_t curIrSensorMid) {
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
	if (curIrSensorMid < 11) {
 8009616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800961a:	2b0a      	cmp	r3, #10
 800961c:	dc17      	bgt.n	800964e <Mark_Accumming+0x42>
		irSensorStateSum |= (irSensorState & lineMasking) >> (11 - curIrSensorMid);
 800961e:	4b2a      	ldr	r3, [pc, #168]	; (80096c8 <Mark_Accumming+0xbc>)
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b29a      	uxth	r2, r3
 8009624:	4b29      	ldr	r3, [pc, #164]	; (80096cc <Mark_Accumming+0xc0>)
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	4013      	ands	r3, r2
 800962a:	b29b      	uxth	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009632:	f1c3 030b 	rsb	r3, r3, #11
 8009636:	fa42 f303 	asr.w	r3, r2, r3
 800963a:	b25a      	sxtb	r2, r3
 800963c:	4b24      	ldr	r3, [pc, #144]	; (80096d0 <Mark_Accumming+0xc4>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b25b      	sxtb	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b25b      	sxtb	r3, r3
 8009646:	b2da      	uxtb	r2, r3
 8009648:	4b21      	ldr	r3, [pc, #132]	; (80096d0 <Mark_Accumming+0xc4>)
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e015      	b.n	800967a <Mark_Accumming+0x6e>
		irSensorStateSum |= (irSensorState & lineMasking) << (curIrSensorMid - 11);
 800964e:	4b1e      	ldr	r3, [pc, #120]	; (80096c8 <Mark_Accumming+0xbc>)
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29a      	uxth	r2, r3
 8009654:	4b1d      	ldr	r3, [pc, #116]	; (80096cc <Mark_Accumming+0xc0>)
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	4013      	ands	r3, r2
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009662:	3b0b      	subs	r3, #11
 8009664:	fa02 f303 	lsl.w	r3, r2, r3
 8009668:	b25a      	sxtb	r2, r3
 800966a:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <Mark_Accumming+0xc4>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	b25b      	sxtb	r3, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	b25b      	sxtb	r3, r3
 8009674:	b2da      	uxtb	r2, r3
 8009676:	4b16      	ldr	r3, [pc, #88]	; (80096d0 <Mark_Accumming+0xc4>)
 8009678:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & leftMarkMasking) != 0) {
 800967a:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <Mark_Accumming+0xbc>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	4b14      	ldr	r3, [pc, #80]	; (80096d4 <Mark_Accumming+0xc8>)
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	4013      	ands	r3, r2
 8009686:	b29b      	uxth	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d006      	beq.n	800969a <Mark_Accumming+0x8e>
		irSensorStateSum |= 0x80;
 800968c:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <Mark_Accumming+0xc4>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009694:	b2da      	uxtb	r2, r3
 8009696:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <Mark_Accumming+0xc4>)
 8009698:	701a      	strb	r2, [r3, #0]
	if ( __builtin_popcount(irSensorState & rightMarkMasking) != 0) {
 800969a:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <Mark_Accumming+0xbc>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b29a      	uxth	r2, r3
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <Mark_Accumming+0xcc>)
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	4013      	ands	r3, r2
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <Mark_Accumming+0xae>
		irSensorStateSum |= 0x01;
 80096ac:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <Mark_Accumming+0xc4>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <Mark_Accumming+0xc4>)
 80096b8:	701a      	strb	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	2000357c 	.word	0x2000357c
 80096cc:	2000003e 	.word	0x2000003e
 80096d0:	20003502 	.word	0x20003502
 80096d4:	20000042 	.word	0x20000042
 80096d8:	20000040 	.word	0x20000040

080096dc <Mark_Accumming_Reset>:
__STATIC_INLINE void	Mark_Accumming_Reset() {
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
	irSensorStateSum = 0x00;
 80096e0:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <Mark_Accumming_Reset+0x14>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20003502 	.word	0x20003502

080096f4 <Is_Line_Out>:
__STATIC_INLINE uint8_t	Is_Line_Out() {
 80096f4:	b480      	push	{r7}
 80096f6:	af00      	add	r7, sp, #0
	if (irSensorState == 0x00) {
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <Is_Line_Out+0x20>)
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <Is_Line_Out+0x12>
		return CUSTOM_TRUE;
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <Is_Line_Out+0x14>
	return CUSTOM_FALSE;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	2000357c 	.word	0x2000357c

08009718 <Is_Passed_Marker>:
__STATIC_INLINE uint8_t	Is_Passed_Marker() {
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
	if ( __builtin_popcount(irSensorState & markAreaMasking) == 0 ) {
 800971c:	4b08      	ldr	r3, [pc, #32]	; (8009740 <Is_Passed_Marker+0x28>)
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29a      	uxth	r2, r3
 8009722:	4b08      	ldr	r3, [pc, #32]	; (8009744 <Is_Passed_Marker+0x2c>)
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	4013      	ands	r3, r2
 8009728:	b29b      	uxth	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <Is_Passed_Marker+0x1a>
		return CUSTOM_TRUE;
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <Is_Passed_Marker+0x1c>
	return CUSTOM_FALSE;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	2000357c 	.word	0x2000357c
 8009744:	20000046 	.word	0x20000046

08009748 <Mark_Decision>:
__STATIC_INLINE void	Mark_Decision() {
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
	if (irSensorStateSum == 0xff) {
 800974c:	4b1c      	ldr	r3, [pc, #112]	; (80097c0 <Mark_Decision+0x78>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2bff      	cmp	r3, #255	; 0xff
 8009752:	d103      	bne.n	800975c <Mark_Decision+0x14>
		markState = MARK_CROSS;
 8009754:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <Mark_Decision+0x7c>)
 8009756:	2205      	movs	r2, #5
 8009758:	701a      	strb	r2, [r3, #0]
}
 800975a:	e02b      	b.n	80097b4 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x81) == 0x81) {
 800975c:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <Mark_Decision+0x78>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8009764:	2b81      	cmp	r3, #129	; 0x81
 8009766:	d103      	bne.n	8009770 <Mark_Decision+0x28>
		markState = MARK_END;
 8009768:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <Mark_Decision+0x7c>)
 800976a:	2204      	movs	r2, #4
 800976c:	701a      	strb	r2, [r3, #0]
}
 800976e:	e021      	b.n	80097b4 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x80) == 0x80) {
 8009770:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <Mark_Decision+0x78>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	b25b      	sxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	da0b      	bge.n	8009792 <Mark_Decision+0x4a>
		if (markState == MARK_CURVE_L) {
 800977a:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <Mark_Decision+0x7c>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d103      	bne.n	800978a <Mark_Decision+0x42>
			markState = MARK_STRAIGHT;
 8009782:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <Mark_Decision+0x7c>)
 8009784:	2201      	movs	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
}
 8009788:	e014      	b.n	80097b4 <Mark_Decision+0x6c>
			markState = MARK_CURVE_L;
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <Mark_Decision+0x7c>)
 800978c:	2203      	movs	r2, #3
 800978e:	701a      	strb	r2, [r3, #0]
}
 8009790:	e010      	b.n	80097b4 <Mark_Decision+0x6c>
	else if ((irSensorStateSum & 0x01) == 0x01) {
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <Mark_Decision+0x78>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <Mark_Decision+0x6c>
		if (markState == MARK_CURVE_R) {
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <Mark_Decision+0x7c>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d103      	bne.n	80097ae <Mark_Decision+0x66>
			markState = MARK_STRAIGHT;
 80097a6:	4b07      	ldr	r3, [pc, #28]	; (80097c4 <Mark_Decision+0x7c>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
}
 80097ac:	e002      	b.n	80097b4 <Mark_Decision+0x6c>
			markState = MARK_CURVE_R;
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <Mark_Decision+0x7c>)
 80097b0:	2202      	movs	r2, #2
 80097b2:	701a      	strb	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20003502 	.word	0x20003502
 80097c4:	2000003c 	.word	0x2000003c

080097c8 <Mark>:
__STATIC_INLINE void	Mark() {
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
	int8_t	curIrSensorMid = curPositionIrSensorMid;
 80097ce:	4b52      	ldr	r3, [pc, #328]	; (8009918 <Mark+0x150>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
	Mark_Masking(curIrSensorMid);
 80097d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fed7 	bl	800958c <Mark_Masking>
	switch (markStateMachine) {
 80097de:	4b4f      	ldr	r3, [pc, #316]	; (800991c <Mark+0x154>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	f200 8093 	bhi.w	800990e <Mark+0x146>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <Mark+0x28>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009805 	.word	0x08009805
 80097f4:	08009877 	.word	0x08009877
 80097f8:	080098a5 	.word	0x080098a5
 80097fc:	080098cb 	.word	0x080098cb
 8009800:	080098d7 	.word	0x080098d7
				if (__builtin_popcount(irSensorState & lineMasking) >= 6) {
 8009804:	4b46      	ldr	r3, [pc, #280]	; (8009920 <Mark+0x158>)
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29a      	uxth	r2, r3
 800980a:	4b46      	ldr	r3, [pc, #280]	; (8009924 <Mark+0x15c>)
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	4013      	ands	r3, r2
 8009810:	b29b      	uxth	r3, r3
 8009812:	4618      	mov	r0, r3
 8009814:	f7f7 fa38 	bl	8000c88 <__popcountsi2>
 8009818:	4603      	mov	r3, r0
 800981a:	2b05      	cmp	r3, #5
 800981c:	dd0a      	ble.n	8009834 <Mark+0x6c>
					Mark_Accumming_Reset();
 800981e:	f7ff ff5d 	bl	80096dc <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 8009822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff fef0 	bl	800960c <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_CROSS;
 800982c:	4b3b      	ldr	r3, [pc, #236]	; (800991c <Mark+0x154>)
 800982e:	2201      	movs	r2, #1
 8009830:	701a      	strb	r2, [r3, #0]
				break;
 8009832:	e065      	b.n	8009900 <Mark+0x138>
				else if (__builtin_popcount(irSensorState & bothMarkMasking) >= 1) {
 8009834:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <Mark+0x158>)
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29a      	uxth	r2, r3
 800983a:	4b3b      	ldr	r3, [pc, #236]	; (8009928 <Mark+0x160>)
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	4013      	ands	r3, r2
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <Mark+0x94>
					Mark_Accumming_Reset();
 8009846:	f7ff ff49 	bl	80096dc <Mark_Accumming_Reset>
					Mark_Accumming(curIrSensorMid);
 800984a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff fedc 	bl	800960c <Mark_Accumming>
					markStateMachine = MARK_STATE_MACHINE_MARKER;
 8009854:	4b31      	ldr	r3, [pc, #196]	; (800991c <Mark+0x154>)
 8009856:	2202      	movs	r2, #2
 8009858:	701a      	strb	r2, [r3, #0]
				break;
 800985a:	e051      	b.n	8009900 <Mark+0x138>
				else if (Is_Line_Out()) {
 800985c:	f7ff ff4a 	bl	80096f4 <Is_Line_Out>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d04c      	beq.n	8009900 <Mark+0x138>
					lineOutStartTime = uwTick;
 8009866:	4b31      	ldr	r3, [pc, #196]	; (800992c <Mark+0x164>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a31      	ldr	r2, [pc, #196]	; (8009930 <Mark+0x168>)
 800986c:	6013      	str	r3, [r2, #0]
					markStateMachine = MARK_STATE_MACHINE_LINE_OUT;
 800986e:	4b2b      	ldr	r3, [pc, #172]	; (800991c <Mark+0x154>)
 8009870:	2204      	movs	r2, #4
 8009872:	701a      	strb	r2, [r3, #0]
				break;
 8009874:	e044      	b.n	8009900 <Mark+0x138>
				Mark_Accumming(curIrSensorMid);
 8009876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff fec6 	bl	800960c <Mark_Accumming>
				if ( (irSensorStateSum == 0xff && Is_Passed_Marker()) \
 8009880:	4b2c      	ldr	r3, [pc, #176]	; (8009934 <Mark+0x16c>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d104      	bne.n	8009892 <Mark+0xca>
 8009888:	f7ff ff46 	bl	8009718 <Is_Passed_Marker>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <Mark+0xd4>
					|| Is_Line_Out() ) {
 8009892:	f7ff ff2f 	bl	80096f4 <Is_Line_Out>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d033      	beq.n	8009904 <Mark+0x13c>
					markStateMachine = MARK_STATE_MACHINE_DECISION;
 800989c:	4b1f      	ldr	r3, [pc, #124]	; (800991c <Mark+0x154>)
 800989e:	2203      	movs	r2, #3
 80098a0:	701a      	strb	r2, [r3, #0]
				break;
 80098a2:	e02f      	b.n	8009904 <Mark+0x13c>
				Mark_Accumming(curIrSensorMid);
 80098a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff feaf 	bl	800960c <Mark_Accumming>
				if (Is_Passed_Marker() || Is_Line_Out()) {
 80098ae:	f7ff ff33 	bl	8009718 <Is_Passed_Marker>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <Mark+0xfa>
 80098b8:	f7ff ff1c 	bl	80096f4 <Is_Line_Out>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d022      	beq.n	8009908 <Mark+0x140>
					markStateMachine = MARK_STATE_MACHINE_DECISION;
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <Mark+0x154>)
 80098c4:	2203      	movs	r2, #3
 80098c6:	701a      	strb	r2, [r3, #0]
				break;
 80098c8:	e01e      	b.n	8009908 <Mark+0x140>
				Mark_Decision();
 80098ca:	f7ff ff3d 	bl	8009748 <Mark_Decision>
				markStateMachine = MARK_STATE_MACHINE_IDLE;
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <Mark+0x154>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
				break;
 80098d4:	e01b      	b.n	800990e <Mark+0x146>
				if (!Is_Line_Out()) {
 80098d6:	f7ff ff0d 	bl	80096f4 <Is_Line_Out>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <Mark+0x120>
					markStateMachine = MARK_STATE_MACHINE_IDLE;
 80098e0:	4b0e      	ldr	r3, [pc, #56]	; (800991c <Mark+0x154>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
				break ;
 80098e6:	e011      	b.n	800990c <Mark+0x144>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 80098e8:	4b11      	ldr	r3, [pc, #68]	; (8009930 <Mark+0x168>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80098f0:	4b0e      	ldr	r3, [pc, #56]	; (800992c <Mark+0x164>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d209      	bcs.n	800990c <Mark+0x144>
					markState = MARK_LINE_OUT;
 80098f8:	4b0f      	ldr	r3, [pc, #60]	; (8009938 <Mark+0x170>)
 80098fa:	2206      	movs	r2, #6
 80098fc:	701a      	strb	r2, [r3, #0]
				break ;
 80098fe:	e005      	b.n	800990c <Mark+0x144>
				break;
 8009900:	bf00      	nop
 8009902:	e004      	b.n	800990e <Mark+0x146>
				break;
 8009904:	bf00      	nop
 8009906:	e002      	b.n	800990e <Mark+0x146>
				break;
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <Mark+0x146>
				break ;
 800990c:	bf00      	nop
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	2000001e 	.word	0x2000001e
 800991c:	20001490 	.word	0x20001490
 8009920:	2000357c 	.word	0x2000357c
 8009924:	2000003e 	.word	0x2000003e
 8009928:	20000044 	.word	0x20000044
 800992c:	200002a4 	.word	0x200002a4
 8009930:	20003520 	.word	0x20003520
 8009934:	20003502 	.word	0x20003502
 8009938:	2000003c 	.word	0x2000003c

0800993c <Positioning>:
__STATIC_INLINE void	Positioning() {
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
	int32_t positionSum = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
	int32_t sensorNormValsSum = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 800994a:	4b2b      	ldr	r3, [pc, #172]	; (80099f8 <Positioning+0xbc>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	e017      	b.n	8009982 <Positioning+0x46>
		positionSum += positionTable[i] * sensorNormVals[i];
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	4a29      	ldr	r2, [pc, #164]	; (80099fc <Positioning+0xc0>)
 8009956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800995a:	79fa      	ldrb	r2, [r7, #7]
 800995c:	4928      	ldr	r1, [pc, #160]	; (8009a00 <Positioning+0xc4>)
 800995e:	5c8a      	ldrb	r2, [r1, r2]
 8009960:	b2d2      	uxtb	r2, r2
 8009962:	fb02 f303 	mul.w	r3, r2, r3
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
		sensorNormValsSum += sensorNormVals[i];
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	4a24      	ldr	r2, [pc, #144]	; (8009a00 <Positioning+0xc4>)
 8009970:	5cd3      	ldrb	r3, [r2, r3]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	461a      	mov	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = positionIdxMin; i < positionIdxMax + 1; i++) {
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	3301      	adds	r3, #1
 8009980:	71fb      	strb	r3, [r7, #7]
 8009982:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <Positioning+0xc8>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	79fa      	ldrb	r2, [r7, #7]
 800998a:	429a      	cmp	r2, r3
 800998c:	d9e1      	bls.n	8009952 <Positioning+0x16>
	positionVal = positionSum / GET_MAX(sensorNormValsSum, 1);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b01      	cmp	r3, #1
 8009992:	bfb8      	it	lt
 8009994:	2301      	movlt	r3, #1
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	fb92 f3f3 	sdiv	r3, r2, r3
 800999c:	4a1a      	ldr	r2, [pc, #104]	; (8009a08 <Positioning+0xcc>)
 800999e:	6013      	str	r3, [r2, #0]
	int8_t	curIrSensorMid = (positionVal + 30000) / 4000;
 80099a0:	4b19      	ldr	r3, [pc, #100]	; (8009a08 <Positioning+0xcc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80099a8:	3330      	adds	r3, #48	; 0x30
 80099aa:	4a18      	ldr	r2, [pc, #96]	; (8009a0c <Positioning+0xd0>)
 80099ac:	fb82 1203 	smull	r1, r2, r2, r3
 80099b0:	1212      	asrs	r2, r2, #8
 80099b2:	17db      	asrs	r3, r3, #31
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	71bb      	strb	r3, [r7, #6]
	curPositionIrSensorMid = curIrSensorMid;
 80099b8:	4a15      	ldr	r2, [pc, #84]	; (8009a10 <Positioning+0xd4>)
 80099ba:	79bb      	ldrb	r3, [r7, #6]
 80099bc:	7013      	strb	r3, [r2, #0]
	positionIdxMax = GET_MIN(curIrSensorMid + WINDOW_SIZE_HALF, IR_SENSOR_LEN - 1);
 80099be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099c2:	2b0c      	cmp	r3, #12
 80099c4:	dc03      	bgt.n	80099ce <Positioning+0x92>
 80099c6:	79bb      	ldrb	r3, [r7, #6]
 80099c8:	3302      	adds	r3, #2
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e000      	b.n	80099d0 <Positioning+0x94>
 80099ce:	230f      	movs	r3, #15
 80099d0:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <Positioning+0xc8>)
 80099d2:	7013      	strb	r3, [r2, #0]
	positionIdxMin = GET_MAX(curIrSensorMid - WINDOW_SIZE_HALF + 1, 0);
 80099d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	dd03      	ble.n	80099e4 <Positioning+0xa8>
 80099dc:	79bb      	ldrb	r3, [r7, #6]
 80099de:	3b01      	subs	r3, #1
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	e000      	b.n	80099e6 <Positioning+0xaa>
 80099e4:	2300      	movs	r3, #0
 80099e6:	4a04      	ldr	r2, [pc, #16]	; (80099f8 <Positioning+0xbc>)
 80099e8:	7013      	strb	r3, [r2, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	2000001d 	.word	0x2000001d
 80099fc:	20000080 	.word	0x20000080
 8009a00:	2000355c 	.word	0x2000355c
 8009a04:	2000001c 	.word	0x2000001c
 8009a08:	20001464 	.word	0x20001464
 8009a0c:	10624dd3 	.word	0x10624dd3
 8009a10:	2000001e 	.word	0x2000001e

08009a14 <Curve_Boost>:
#define INC_CURVE_BOOST_H_

#include <config.h>
#include "main.h"

__STATIC_INLINE void Curve_Boost() {
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
	static float	finalDeceleEndTick_L;
	static float	finalDeceleEndTick_R;


	// 직선 가속
	switch (curveBoostCntl) {
 8009a18:	4bbf      	ldr	r3, [pc, #764]	; (8009d18 <Curve_Boost+0x304>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	f200 81a6 	bhi.w	8009d6e <Curve_Boost+0x35a>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <Curve_Boost+0x14>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a39 	.word	0x08009a39
 8009a2c:	08009c07 	.word	0x08009c07
 8009a30:	08009c53 	.word	0x08009c53
 8009a34:	08009cd9 	.word	0x08009cd9

			// 초기 상태
			case BOOST_CNTL_IDLE :

					// 최적화 레벨이 직선 가속 이상 일 때
					if (isCurveBoostEnabled) {
 8009a38:	4bb8      	ldr	r3, [pc, #736]	; (8009d1c <Curve_Boost+0x308>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 8195 	beq.w	8009d6c <Curve_Boost+0x358>


						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 8009a42:	4bb7      	ldr	r3, [pc, #732]	; (8009d20 <Curve_Boost+0x30c>)
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	4619      	mov	r1, r3
 8009a48:	4ab6      	ldr	r2, [pc, #728]	; (8009d24 <Curve_Boost+0x310>)
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	440b      	add	r3, r1
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_L);
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a5e:	4bb0      	ldr	r3, [pc, #704]	; (8009d20 <Curve_Boost+0x30c>)
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	4aaf      	ldr	r2, [pc, #700]	; (8009d24 <Curve_Boost+0x310>)
 8009a66:	460b      	mov	r3, r1
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	440b      	add	r3, r1
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009a7a:	4bab      	ldr	r3, [pc, #684]	; (8009d28 <Curve_Boost+0x314>)
 8009a7c:	edd3 7a00 	vldr	s15, [r3]
 8009a80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009a84:	4ba9      	ldr	r3, [pc, #676]	; (8009d2c <Curve_Boost+0x318>)
 8009a86:	edd3 7a00 	vldr	s15, [r3]
 8009a8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a92:	dd03      	ble.n	8009a9c <Curve_Boost+0x88>
 8009a94:	4ba5      	ldr	r3, [pc, #660]	; (8009d2c <Curve_Boost+0x318>)
 8009a96:	edd3 7a00 	vldr	s15, [r3]
 8009a9a:	e012      	b.n	8009ac2 <Curve_Boost+0xae>
 8009a9c:	4ba0      	ldr	r3, [pc, #640]	; (8009d20 <Curve_Boost+0x30c>)
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4aa0      	ldr	r2, [pc, #640]	; (8009d24 <Curve_Boost+0x310>)
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	440b      	add	r3, r1
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	ee07 3a90 	vmov	s15, r3
 8009ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ab8:	4b9b      	ldr	r3, [pc, #620]	; (8009d28 <Curve_Boost+0x314>)
 8009aba:	edd3 7a00 	vldr	s15, [r3]
 8009abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 8009ac6:	4b9a      	ldr	r3, [pc, #616]	; (8009d30 <Curve_Boost+0x31c>)
 8009ac8:	edc3 7a00 	vstr	s15, [r3]

						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 8009acc:	4b94      	ldr	r3, [pc, #592]	; (8009d20 <Curve_Boost+0x30c>)
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4a94      	ldr	r2, [pc, #592]	; (8009d24 <Curve_Boost+0x310>)
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	440b      	add	r3, r1
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_R);
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009aea:	4b8d      	ldr	r3, [pc, #564]	; (8009d20 <Curve_Boost+0x30c>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	4619      	mov	r1, r3
 8009af0:	4a8c      	ldr	r2, [pc, #560]	; (8009d24 <Curve_Boost+0x310>)
 8009af2:	460b      	mov	r3, r1
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	440b      	add	r3, r1
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	3304      	adds	r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b08:	4b87      	ldr	r3, [pc, #540]	; (8009d28 <Curve_Boost+0x314>)
 8009b0a:	edd3 7a00 	vldr	s15, [r3]
 8009b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009b12:	4b86      	ldr	r3, [pc, #536]	; (8009d2c <Curve_Boost+0x318>)
 8009b14:	edd3 7a00 	vldr	s15, [r3]
 8009b18:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b20:	dd03      	ble.n	8009b2a <Curve_Boost+0x116>
 8009b22:	4b82      	ldr	r3, [pc, #520]	; (8009d2c <Curve_Boost+0x318>)
 8009b24:	edd3 7a00 	vldr	s15, [r3]
 8009b28:	e013      	b.n	8009b52 <Curve_Boost+0x13e>
 8009b2a:	4b7d      	ldr	r3, [pc, #500]	; (8009d20 <Curve_Boost+0x30c>)
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4a7c      	ldr	r2, [pc, #496]	; (8009d24 <Curve_Boost+0x310>)
 8009b32:	460b      	mov	r3, r1
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	440b      	add	r3, r1
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	ee07 3a90 	vmov	s15, r3
 8009b44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b48:	4b77      	ldr	r3, [pc, #476]	; (8009d28 <Curve_Boost+0x314>)
 8009b4a:	edd3 7a00 	vldr	s15, [r3]
 8009b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b52:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 8009b56:	4b77      	ldr	r3, [pc, #476]	; (8009d34 <Curve_Boost+0x320>)
 8009b58:	edc3 7a00 	vstr	s15, [r3]

						// 최소 부스트 거리 이상일 때
						if (curTick_L + curTick_R  < finalDeceleEndTick_L + finalDeceleEndTick_R -  2 * MIN_CURVE_BOOST_TICK) {
 8009b5c:	4b76      	ldr	r3, [pc, #472]	; (8009d38 <Curve_Boost+0x324>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	4b76      	ldr	r3, [pc, #472]	; (8009d3c <Curve_Boost+0x328>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4413      	add	r3, r2
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b6e:	4b70      	ldr	r3, [pc, #448]	; (8009d30 <Curve_Boost+0x31c>)
 8009b70:	edd3 6a00 	vldr	s13, [r3]
 8009b74:	4b6f      	ldr	r3, [pc, #444]	; (8009d34 <Curve_Boost+0x320>)
 8009b76:	edd3 7a00 	vldr	s15, [r3]
 8009b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8009d40 <Curve_Boost+0x32c>
 8009b82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8e:	d400      	bmi.n	8009b92 <Curve_Boost+0x17e>

							curveBoostCntl = BOOST_CNTL_ACCELE;
						}
					}

					break ;
 8009b90:	e0ec      	b.n	8009d6c <Curve_Boost+0x358>
							deceleEndTickCoef = 2 * decele / TICK_PER_M;
 8009b92:	4b6c      	ldr	r3, [pc, #432]	; (8009d44 <Curve_Boost+0x330>)
 8009b94:	edd3 7a00 	vldr	s15, [r3]
 8009b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009b9c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8009d48 <Curve_Boost+0x334>
 8009ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ba4:	4b69      	ldr	r3, [pc, #420]	; (8009d4c <Curve_Boost+0x338>)
 8009ba6:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009baa:	4b68      	ldr	r3, [pc, #416]	; (8009d4c <Curve_Boost+0x338>)
 8009bac:	ed93 7a00 	vldr	s14, [r3]
 8009bb0:	4b5f      	ldr	r3, [pc, #380]	; (8009d30 <Curve_Boost+0x31c>)
 8009bb2:	edd3 7a00 	vldr	s15, [r3]
 8009bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 8009bba:	4b65      	ldr	r3, [pc, #404]	; (8009d50 <Curve_Boost+0x33c>)
 8009bbc:	edd3 6a00 	vldr	s13, [r3]
 8009bc0:	4b63      	ldr	r3, [pc, #396]	; (8009d50 <Curve_Boost+0x33c>)
 8009bc2:	edd3 7a00 	vldr	s15, [r3]
 8009bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bca:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009bce:	4b61      	ldr	r3, [pc, #388]	; (8009d54 <Curve_Boost+0x340>)
 8009bd0:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009bd4:	4b5d      	ldr	r3, [pc, #372]	; (8009d4c <Curve_Boost+0x338>)
 8009bd6:	ed93 7a00 	vldr	s14, [r3]
 8009bda:	4b56      	ldr	r3, [pc, #344]	; (8009d34 <Curve_Boost+0x320>)
 8009bdc:	edd3 7a00 	vldr	s15, [r3]
 8009be0:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 8009be4:	4b5a      	ldr	r3, [pc, #360]	; (8009d50 <Curve_Boost+0x33c>)
 8009be6:	edd3 6a00 	vldr	s13, [r3]
 8009bea:	4b59      	ldr	r3, [pc, #356]	; (8009d50 <Curve_Boost+0x33c>)
 8009bec:	edd3 7a00 	vldr	s15, [r3]
 8009bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009bf8:	4b57      	ldr	r3, [pc, #348]	; (8009d58 <Curve_Boost+0x344>)
 8009bfa:	edc3 7a00 	vstr	s15, [r3]
							curveBoostCntl = BOOST_CNTL_ACCELE;
 8009bfe:	4b46      	ldr	r3, [pc, #280]	; (8009d18 <Curve_Boost+0x304>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	701a      	strb	r2, [r3, #0]
					break ;
 8009c04:	e0b2      	b.n	8009d6c <Curve_Boost+0x358>

			// 부스트 가속 컨드롤
			case BOOST_CNTL_ACCELE :

					// 직선 구간 진입 후 ACCELE_START_TICK만큼 지났을 때 부스트
					if (curTick_L > acceleStartTick \
 8009c06:	4b4c      	ldr	r3, [pc, #304]	; (8009d38 <Curve_Boost+0x324>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c12:	4b52      	ldr	r3, [pc, #328]	; (8009d5c <Curve_Boost+0x348>)
 8009c14:	edd3 7a00 	vldr	s15, [r3]
 8009c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	dc00      	bgt.n	8009c24 <Curve_Boost+0x210>
						targetSpeed = curveBoostSpeed;

						curveBoostCntl = BOOST_CNTL_DECELE;
					}

					break;
 8009c22:	e0a4      	b.n	8009d6e <Curve_Boost+0x35a>
					 && curTick_R > acceleStartTick) {
 8009c24:	4b45      	ldr	r3, [pc, #276]	; (8009d3c <Curve_Boost+0x328>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c30:	4b4a      	ldr	r3, [pc, #296]	; (8009d5c <Curve_Boost+0x348>)
 8009c32:	edd3 7a00 	vldr	s15, [r3]
 8009c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	dc00      	bgt.n	8009c42 <Curve_Boost+0x22e>
					break;
 8009c40:	e095      	b.n	8009d6e <Curve_Boost+0x35a>
						targetSpeed = curveBoostSpeed;
 8009c42:	4b47      	ldr	r3, [pc, #284]	; (8009d60 <Curve_Boost+0x34c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a47      	ldr	r2, [pc, #284]	; (8009d64 <Curve_Boost+0x350>)
 8009c48:	6013      	str	r3, [r2, #0]
						curveBoostCntl = BOOST_CNTL_DECELE;
 8009c4a:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <Curve_Boost+0x304>)
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	701a      	strb	r2, [r3, #0]
					break;
 8009c50:	e08d      	b.n	8009d6e <Curve_Boost+0x35a>
					 * 	 <= (curSpeed * curSpeed - targetSpeed_init * targetSpeed_init) / (2 * decele) (감속도를 토대로 감속하는데에 필요한 감속거리)
					 *
					 * 위의 원본 식에서 고정된 값을 상수로 만든 뒤, 나눗셈을 없애면 식이 밑의 식이 도출됨
					 */

					if (deceleEndTickCoef_L < curSpeed * curSpeed + curTick_L * deceleEndTickCoef \
 8009c52:	4b45      	ldr	r3, [pc, #276]	; (8009d68 <Curve_Boost+0x354>)
 8009c54:	ed93 7a00 	vldr	s14, [r3]
 8009c58:	4b43      	ldr	r3, [pc, #268]	; (8009d68 <Curve_Boost+0x354>)
 8009c5a:	edd3 7a00 	vldr	s15, [r3]
 8009c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c62:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <Curve_Boost+0x324>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009c6e:	4b37      	ldr	r3, [pc, #220]	; (8009d4c <Curve_Boost+0x338>)
 8009c70:	edd3 7a00 	vldr	s15, [r3]
 8009c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c7c:	4b35      	ldr	r3, [pc, #212]	; (8009d54 <Curve_Boost+0x340>)
 8009c7e:	edd3 7a00 	vldr	s15, [r3]
 8009c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8a:	dc1d      	bgt.n	8009cc8 <Curve_Boost+0x2b4>
					 || deceleEndTickCoef_R < curSpeed * curSpeed + curTick_R * deceleEndTickCoef) {
 8009c8c:	4b36      	ldr	r3, [pc, #216]	; (8009d68 <Curve_Boost+0x354>)
 8009c8e:	ed93 7a00 	vldr	s14, [r3]
 8009c92:	4b35      	ldr	r3, [pc, #212]	; (8009d68 <Curve_Boost+0x354>)
 8009c94:	edd3 7a00 	vldr	s15, [r3]
 8009c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c9c:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <Curve_Boost+0x328>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ca8:	4b28      	ldr	r3, [pc, #160]	; (8009d4c <Curve_Boost+0x338>)
 8009caa:	edd3 7a00 	vldr	s15, [r3]
 8009cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cb6:	4b28      	ldr	r3, [pc, #160]	; (8009d58 <Curve_Boost+0x344>)
 8009cb8:	edd3 7a00 	vldr	s15, [r3]
 8009cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	dc00      	bgt.n	8009cc8 <Curve_Boost+0x2b4>
						targetSpeed = targetSpeed_init;

						curveBoostCntl = BOOST_CNTL_END;
					}

					break ;
 8009cc6:	e052      	b.n	8009d6e <Curve_Boost+0x35a>
						targetSpeed = targetSpeed_init;
 8009cc8:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <Curve_Boost+0x33c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	; (8009d64 <Curve_Boost+0x350>)
 8009cce:	6013      	str	r3, [r2, #0]
						curveBoostCntl = BOOST_CNTL_END;
 8009cd0:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <Curve_Boost+0x304>)
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	701a      	strb	r2, [r3, #0]
					break ;
 8009cd6:	e04a      	b.n	8009d6e <Curve_Boost+0x35a>

			// 부스트가 종료되었을 때
			case BOOST_CNTL_END :

					// 직선이 10cm 남았을 경우
					if (curTick_L + curTick_R > finalDeceleEndTick_L + finalDeceleEndTick_R -  2 * MIN_CURVE_BOOST_TICK) {
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <Curve_Boost+0x324>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <Curve_Boost+0x328>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cea:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <Curve_Boost+0x31c>)
 8009cec:	edd3 6a00 	vldr	s13, [r3]
 8009cf0:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <Curve_Boost+0x320>)
 8009cf2:	edd3 7a00 	vldr	s15, [r3]
 8009cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfa:	eddf 6a11 	vldr	s13, [pc, #68]	; 8009d40 <Curve_Boost+0x32c>
 8009cfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0a:	dc00      	bgt.n	8009d0e <Curve_Boost+0x2fa>


						curveBoostCntl = BOOST_CNTL_IDLE;
					}

					break ;
 8009d0c:	e02f      	b.n	8009d6e <Curve_Boost+0x35a>
						curveBoostCntl = BOOST_CNTL_IDLE;
 8009d0e:	4b02      	ldr	r3, [pc, #8]	; (8009d18 <Curve_Boost+0x304>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
					break ;
 8009d14:	e02b      	b.n	8009d6e <Curve_Boost+0x35a>
 8009d16:	bf00      	nop
 8009d18:	200014f5 	.word	0x200014f5
 8009d1c:	200034ff 	.word	0x200034ff
 8009d20:	200032f8 	.word	0x200032f8
 8009d24:	200014f8 	.word	0x200014f8
 8009d28:	20000058 	.word	0x20000058
 8009d2c:	20000054 	.word	0x20000054
 8009d30:	20003538 	.word	0x20003538
 8009d34:	2000353c 	.word	0x2000353c
 8009d38:	2000147c 	.word	0x2000147c
 8009d3c:	20001480 	.word	0x20001480
 8009d40:	482c4309 	.word	0x482c4309
 8009d44:	20000028 	.word	0x20000028
 8009d48:	478f8d32 	.word	0x478f8d32
 8009d4c:	20003540 	.word	0x20003540
 8009d50:	2000000c 	.word	0x2000000c
 8009d54:	20003544 	.word	0x20003544
 8009d58:	20003548 	.word	0x20003548
 8009d5c:	20000050 	.word	0x20000050
 8009d60:	20000034 	.word	0x20000034
 8009d64:	2000002c 	.word	0x2000002c
 8009d68:	20001478 	.word	0x20001478
					break ;
 8009d6c:	bf00      	nop
	}
}
 8009d6e:	bf00      	nop
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <Straight_Boost>:

#include <config.h>
#include "main.h"


__STATIC_INLINE void Straight_Boost() {
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
	static float	finalDeceleEndTick_L;
	static float	finalDeceleEndTick_R;


	// 직선 가속
	switch (starightBoostCntl) {
 8009d7c:	4bb2      	ldr	r3, [pc, #712]	; (800a048 <Straight_Boost+0x2d0>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	f200 8232 	bhi.w	800a1ea <Straight_Boost+0x472>
 8009d86:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <Straight_Boost+0x14>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009ffb 	.word	0x08009ffb
 8009d94:	0800a0a1 	.word	0x0800a0a1
 8009d98:	0800a13f 	.word	0x0800a13f
			// 초기 상태
			case BOOST_CNTL_IDLE :


					// 최적화 레벨이 직선 가속 이상 일 때
					if (isStraightBoostEnabled) {
 8009d9c:	4bab      	ldr	r3, [pc, #684]	; (800a04c <Straight_Boost+0x2d4>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 8221 	beq.w	800a1e8 <Straight_Boost+0x470>


						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 8009da6:	4baa      	ldr	r3, [pc, #680]	; (800a050 <Straight_Boost+0x2d8>)
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	4619      	mov	r1, r3
 8009dac:	4aa9      	ldr	r2, [pc, #676]	; (800a054 <Straight_Boost+0x2dc>)
 8009dae:	460b      	mov	r3, r1
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	440b      	add	r3, r1
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_L);
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dc2:	4ba3      	ldr	r3, [pc, #652]	; (800a050 <Straight_Boost+0x2d8>)
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4aa2      	ldr	r2, [pc, #648]	; (800a054 <Straight_Boost+0x2dc>)
 8009dca:	460b      	mov	r3, r1
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	440b      	add	r3, r1
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009dde:	4b9e      	ldr	r3, [pc, #632]	; (800a058 <Straight_Boost+0x2e0>)
 8009de0:	edd3 7a00 	vldr	s15, [r3]
 8009de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009de8:	4b9c      	ldr	r3, [pc, #624]	; (800a05c <Straight_Boost+0x2e4>)
 8009dea:	edd3 7a00 	vldr	s15, [r3]
 8009dee:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df6:	dd03      	ble.n	8009e00 <Straight_Boost+0x88>
 8009df8:	4b98      	ldr	r3, [pc, #608]	; (800a05c <Straight_Boost+0x2e4>)
 8009dfa:	edd3 7a00 	vldr	s15, [r3]
 8009dfe:	e012      	b.n	8009e26 <Straight_Boost+0xae>
 8009e00:	4b93      	ldr	r3, [pc, #588]	; (800a050 <Straight_Boost+0x2d8>)
 8009e02:	881b      	ldrh	r3, [r3, #0]
 8009e04:	4619      	mov	r1, r3
 8009e06:	4a93      	ldr	r2, [pc, #588]	; (800a054 <Straight_Boost+0x2dc>)
 8009e08:	460b      	mov	r3, r1
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	440b      	add	r3, r1
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	ee07 3a90 	vmov	s15, r3
 8009e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e1c:	4b8e      	ldr	r3, [pc, #568]	; (800a058 <Straight_Boost+0x2e0>)
 8009e1e:	edd3 7a00 	vldr	s15, [r3]
 8009e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e26:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_L =	driveData[driveDataIdx].tickCnt_L \
 8009e2a:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <Straight_Boost+0x2e8>)
 8009e2c:	edc3 7a00 	vstr	s15, [r3]

						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 8009e30:	4b87      	ldr	r3, [pc, #540]	; (800a050 <Straight_Boost+0x2d8>)
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	4a87      	ldr	r2, [pc, #540]	; (800a054 <Straight_Boost+0x2dc>)
 8009e38:	460b      	mov	r3, r1
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	440b      	add	r3, r1
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	3304      	adds	r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
												- GET_MIN(deceleEndTick, deceleEndRatio * driveData[driveDataIdx].tickCnt_R);
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e4e:	4b80      	ldr	r3, [pc, #512]	; (800a050 <Straight_Boost+0x2d8>)
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	4619      	mov	r1, r3
 8009e54:	4a7f      	ldr	r2, [pc, #508]	; (800a054 <Straight_Boost+0x2dc>)
 8009e56:	460b      	mov	r3, r1
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	440b      	add	r3, r1
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	3304      	adds	r3, #4
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e6c:	4b7a      	ldr	r3, [pc, #488]	; (800a058 <Straight_Boost+0x2e0>)
 8009e6e:	edd3 7a00 	vldr	s15, [r3]
 8009e72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009e76:	4b79      	ldr	r3, [pc, #484]	; (800a05c <Straight_Boost+0x2e4>)
 8009e78:	edd3 7a00 	vldr	s15, [r3]
 8009e7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e84:	dd03      	ble.n	8009e8e <Straight_Boost+0x116>
 8009e86:	4b75      	ldr	r3, [pc, #468]	; (800a05c <Straight_Boost+0x2e4>)
 8009e88:	edd3 7a00 	vldr	s15, [r3]
 8009e8c:	e013      	b.n	8009eb6 <Straight_Boost+0x13e>
 8009e8e:	4b70      	ldr	r3, [pc, #448]	; (800a050 <Straight_Boost+0x2d8>)
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	4619      	mov	r1, r3
 8009e94:	4a6f      	ldr	r2, [pc, #444]	; (800a054 <Straight_Boost+0x2dc>)
 8009e96:	460b      	mov	r3, r1
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	440b      	add	r3, r1
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eac:	4b6a      	ldr	r3, [pc, #424]	; (800a058 <Straight_Boost+0x2e0>)
 8009eae:	edd3 7a00 	vldr	s15, [r3]
 8009eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
						finalDeceleEndTick_R =	driveData[driveDataIdx].tickCnt_R \
 8009eba:	4b6a      	ldr	r3, [pc, #424]	; (800a064 <Straight_Boost+0x2ec>)
 8009ebc:	edc3 7a00 	vstr	s15, [r3]

						// 최소 부스트 거리 이상일 때
						if (curTick_L < driveData[driveDataIdx].tickCnt_L - MIN_STRAIGHT_BOOST_TICK \
 8009ec0:	4b69      	ldr	r3, [pc, #420]	; (800a068 <Straight_Boost+0x2f0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	ee07 3a90 	vmov	s15, r3
 8009ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ecc:	4b60      	ldr	r3, [pc, #384]	; (800a050 <Straight_Boost+0x2d8>)
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4a60      	ldr	r2, [pc, #384]	; (800a054 <Straight_Boost+0x2dc>)
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	440b      	add	r3, r1
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ee8:	eddf 6a60 	vldr	s13, [pc, #384]	; 800a06c <Straight_Boost+0x2f4>
 8009eec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	d400      	bmi.n	8009efc <Straight_Boost+0x184>

							starightBoostCntl = BOOST_CNTL_ACCELE;
						}
					}

					break ;
 8009efa:	e175      	b.n	800a1e8 <Straight_Boost+0x470>
							&& curTick_R < driveData[driveDataIdx].tickCnt_R - MIN_STRAIGHT_BOOST_TICK)  {
 8009efc:	4b5c      	ldr	r3, [pc, #368]	; (800a070 <Straight_Boost+0x2f8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f08:	4b51      	ldr	r3, [pc, #324]	; (800a050 <Straight_Boost+0x2d8>)
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4a51      	ldr	r2, [pc, #324]	; (800a054 <Straight_Boost+0x2dc>)
 8009f10:	460b      	mov	r3, r1
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	440b      	add	r3, r1
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f26:	eddf 6a51 	vldr	s13, [pc, #324]	; 800a06c <Straight_Boost+0x2f4>
 8009f2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f36:	d400      	bmi.n	8009f3a <Straight_Boost+0x1c2>
					break ;
 8009f38:	e156      	b.n	800a1e8 <Straight_Boost+0x470>
							deceleEndTickCoef = 2 * decele / TICK_PER_M;
 8009f3a:	4b4e      	ldr	r3, [pc, #312]	; (800a074 <Straight_Boost+0x2fc>)
 8009f3c:	edd3 7a00 	vldr	s15, [r3]
 8009f40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009f44:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800a078 <Straight_Boost+0x300>
 8009f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f4c:	4b4b      	ldr	r3, [pc, #300]	; (800a07c <Straight_Boost+0x304>)
 8009f4e:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009f52:	4b4a      	ldr	r3, [pc, #296]	; (800a07c <Straight_Boost+0x304>)
 8009f54:	ed93 7a00 	vldr	s14, [r3]
 8009f58:	4b41      	ldr	r3, [pc, #260]	; (800a060 <Straight_Boost+0x2e8>)
 8009f5a:	edd3 7a00 	vldr	s15, [r3]
 8009f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 8009f62:	4b47      	ldr	r3, [pc, #284]	; (800a080 <Straight_Boost+0x308>)
 8009f64:	edd3 6a00 	vldr	s13, [r3]
 8009f68:	4b45      	ldr	r3, [pc, #276]	; (800a080 <Straight_Boost+0x308>)
 8009f6a:	edd3 7a00 	vldr	s15, [r3]
 8009f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f72:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009f76:	4b43      	ldr	r3, [pc, #268]	; (800a084 <Straight_Boost+0x30c>)
 8009f78:	edc3 7a00 	vstr	s15, [r3]
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009f7c:	4b3f      	ldr	r3, [pc, #252]	; (800a07c <Straight_Boost+0x304>)
 8009f7e:	ed93 7a00 	vldr	s14, [r3]
 8009f82:	4b38      	ldr	r3, [pc, #224]	; (800a064 <Straight_Boost+0x2ec>)
 8009f84:	edd3 7a00 	vldr	s15, [r3]
 8009f88:	ee27 7a27 	vmul.f32	s14, s14, s15
													+ targetSpeed_init * targetSpeed_init;
 8009f8c:	4b3c      	ldr	r3, [pc, #240]	; (800a080 <Straight_Boost+0x308>)
 8009f8e:	edd3 6a00 	vldr	s13, [r3]
 8009f92:	4b3b      	ldr	r3, [pc, #236]	; (800a080 <Straight_Boost+0x308>)
 8009f94:	edd3 7a00 	vldr	s15, [r3]
 8009f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
							deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009fa0:	4b39      	ldr	r3, [pc, #228]	; (800a088 <Straight_Boost+0x310>)
 8009fa2:	edc3 7a00 	vstr	s15, [r3]
							if (isLastStraight) {
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <Straight_Boost+0x314>)
 8009fa8:	edd3 7a00 	vldr	s15, [r3]
 8009fac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb4:	d01d      	beq.n	8009ff2 <Straight_Boost+0x27a>
								deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009fb6:	4b31      	ldr	r3, [pc, #196]	; (800a07c <Straight_Boost+0x304>)
 8009fb8:	ed93 7a00 	vldr	s14, [r3]
 8009fbc:	4b28      	ldr	r3, [pc, #160]	; (800a060 <Straight_Boost+0x2e8>)
 8009fbe:	edd3 7a00 	vldr	s15, [r3]
 8009fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
														+ LAST_STRAIGHT_TARGET_SPEED * LAST_STRAIGHT_TARGET_SPEED;
 8009fc6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a090 <Straight_Boost+0x318>
 8009fca:	ee77 7a87 	vadd.f32	s15, s15, s14
								deceleEndTickCoef_L =	deceleEndTickCoef * finalDeceleEndTick_L \
 8009fce:	4b2d      	ldr	r3, [pc, #180]	; (800a084 <Straight_Boost+0x30c>)
 8009fd0:	edc3 7a00 	vstr	s15, [r3]
								deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009fd4:	4b29      	ldr	r3, [pc, #164]	; (800a07c <Straight_Boost+0x304>)
 8009fd6:	ed93 7a00 	vldr	s14, [r3]
 8009fda:	4b22      	ldr	r3, [pc, #136]	; (800a064 <Straight_Boost+0x2ec>)
 8009fdc:	edd3 7a00 	vldr	s15, [r3]
 8009fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
														+ LAST_STRAIGHT_TARGET_SPEED * LAST_STRAIGHT_TARGET_SPEED;
 8009fe4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a090 <Straight_Boost+0x318>
 8009fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
								deceleEndTickCoef_R =	deceleEndTickCoef * finalDeceleEndTick_R \
 8009fec:	4b26      	ldr	r3, [pc, #152]	; (800a088 <Straight_Boost+0x310>)
 8009fee:	edc3 7a00 	vstr	s15, [r3]
							starightBoostCntl = BOOST_CNTL_ACCELE;
 8009ff2:	4b15      	ldr	r3, [pc, #84]	; (800a048 <Straight_Boost+0x2d0>)
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	701a      	strb	r2, [r3, #0]
					break ;
 8009ff8:	e0f6      	b.n	800a1e8 <Straight_Boost+0x470>

			// 부스트 가속 컨드롤
			case BOOST_CNTL_ACCELE :

					// 직선 구간 진입 후 ACCELE_START_TICK만큼 지났을 때 부스트
					if (curTick_L > acceleStartTick \
 8009ffa:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <Straight_Boost+0x2f0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <Straight_Boost+0x31c>)
 800a008:	edd3 7a00 	vldr	s15, [r3]
 800a00c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a014:	dc00      	bgt.n	800a018 <Straight_Boost+0x2a0>
						targetSpeed = starightBoostSpeed;

						starightBoostCntl = BOOST_CNTL_DECELE;
					}

					break;
 800a016:	e0e8      	b.n	800a1ea <Straight_Boost+0x472>
					 && curTick_R > acceleStartTick) {
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <Straight_Boost+0x2f8>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a024:	4b1b      	ldr	r3, [pc, #108]	; (800a094 <Straight_Boost+0x31c>)
 800a026:	edd3 7a00 	vldr	s15, [r3]
 800a02a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a032:	dc00      	bgt.n	800a036 <Straight_Boost+0x2be>
					break;
 800a034:	e0d9      	b.n	800a1ea <Straight_Boost+0x472>
						targetSpeed = starightBoostSpeed;
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <Straight_Boost+0x320>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a18      	ldr	r2, [pc, #96]	; (800a09c <Straight_Boost+0x324>)
 800a03c:	6013      	str	r3, [r2, #0]
						starightBoostCntl = BOOST_CNTL_DECELE;
 800a03e:	4b02      	ldr	r3, [pc, #8]	; (800a048 <Straight_Boost+0x2d0>)
 800a040:	2202      	movs	r2, #2
 800a042:	701a      	strb	r2, [r3, #0]
					break;
 800a044:	e0d1      	b.n	800a1ea <Straight_Boost+0x472>
 800a046:	bf00      	nop
 800a048:	200014f4 	.word	0x200014f4
 800a04c:	200034fe 	.word	0x200034fe
 800a050:	200032f8 	.word	0x200032f8
 800a054:	200014f8 	.word	0x200014f8
 800a058:	20000058 	.word	0x20000058
 800a05c:	20000054 	.word	0x20000054
 800a060:	20003524 	.word	0x20003524
 800a064:	20003528 	.word	0x20003528
 800a068:	2000147c 	.word	0x2000147c
 800a06c:	45e5aeb7 	.word	0x45e5aeb7
 800a070:	20001480 	.word	0x20001480
 800a074:	20000028 	.word	0x20000028
 800a078:	478f8d32 	.word	0x478f8d32
 800a07c:	2000352c 	.word	0x2000352c
 800a080:	2000000c 	.word	0x2000000c
 800a084:	20003530 	.word	0x20003530
 800a088:	20003534 	.word	0x20003534
 800a08c:	20003504 	.word	0x20003504
 800a090:	40d851ea 	.word	0x40d851ea
 800a094:	20000050 	.word	0x20000050
 800a098:	20000030 	.word	0x20000030
 800a09c:	2000002c 	.word	0x2000002c
					 * 	 <= (curSpeed * curSpeed - targetSpeed_init * targetSpeed_init) / (2 * decele) (감속도를 토대로 감속하는데에 필요한 감속거리)
					 *
					 * 위의 원본 식에서 고정된 값을 상수로 만든 뒤, 나눗셈을 없애면 식이 밑의 식이 도출됨
					 */

					if (deceleEndTickCoef_L < curSpeed * curSpeed + curTick_L * deceleEndTickCoef \
 800a0a0:	4b54      	ldr	r3, [pc, #336]	; (800a1f4 <Straight_Boost+0x47c>)
 800a0a2:	ed93 7a00 	vldr	s14, [r3]
 800a0a6:	4b53      	ldr	r3, [pc, #332]	; (800a1f4 <Straight_Boost+0x47c>)
 800a0a8:	edd3 7a00 	vldr	s15, [r3]
 800a0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0b0:	4b51      	ldr	r3, [pc, #324]	; (800a1f8 <Straight_Boost+0x480>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	ee07 3a90 	vmov	s15, r3
 800a0b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0bc:	4b4f      	ldr	r3, [pc, #316]	; (800a1fc <Straight_Boost+0x484>)
 800a0be:	edd3 7a00 	vldr	s15, [r3]
 800a0c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0ca:	4b4d      	ldr	r3, [pc, #308]	; (800a200 <Straight_Boost+0x488>)
 800a0cc:	edd3 7a00 	vldr	s15, [r3]
 800a0d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d8:	dc1d      	bgt.n	800a116 <Straight_Boost+0x39e>
					 || deceleEndTickCoef_R < curSpeed * curSpeed + curTick_R * deceleEndTickCoef) {
 800a0da:	4b46      	ldr	r3, [pc, #280]	; (800a1f4 <Straight_Boost+0x47c>)
 800a0dc:	ed93 7a00 	vldr	s14, [r3]
 800a0e0:	4b44      	ldr	r3, [pc, #272]	; (800a1f4 <Straight_Boost+0x47c>)
 800a0e2:	edd3 7a00 	vldr	s15, [r3]
 800a0e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0ea:	4b46      	ldr	r3, [pc, #280]	; (800a204 <Straight_Boost+0x48c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0f6:	4b41      	ldr	r3, [pc, #260]	; (800a1fc <Straight_Boost+0x484>)
 800a0f8:	edd3 7a00 	vldr	s15, [r3]
 800a0fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a100:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a104:	4b40      	ldr	r3, [pc, #256]	; (800a208 <Straight_Boost+0x490>)
 800a106:	edd3 7a00 	vldr	s15, [r3]
 800a10a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	dc00      	bgt.n	800a116 <Straight_Boost+0x39e>


						starightBoostCntl = BOOST_CNTL_END;
					}

					break ;
 800a114:	e069      	b.n	800a1ea <Straight_Boost+0x472>
						if (!isLastStraight) {
 800a116:	4b3d      	ldr	r3, [pc, #244]	; (800a20c <Straight_Boost+0x494>)
 800a118:	edd3 7a00 	vldr	s15, [r3]
 800a11c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a124:	d104      	bne.n	800a130 <Straight_Boost+0x3b8>
							targetSpeed = targetSpeed_init;
 800a126:	4b3a      	ldr	r3, [pc, #232]	; (800a210 <Straight_Boost+0x498>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a3a      	ldr	r2, [pc, #232]	; (800a214 <Straight_Boost+0x49c>)
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	e002      	b.n	800a136 <Straight_Boost+0x3be>
							targetSpeed = LAST_STRAIGHT_TARGET_SPEED;
 800a130:	4b38      	ldr	r3, [pc, #224]	; (800a214 <Straight_Boost+0x49c>)
 800a132:	4a39      	ldr	r2, [pc, #228]	; (800a218 <Straight_Boost+0x4a0>)
 800a134:	601a      	str	r2, [r3, #0]
						starightBoostCntl = BOOST_CNTL_END;
 800a136:	4b39      	ldr	r3, [pc, #228]	; (800a21c <Straight_Boost+0x4a4>)
 800a138:	2203      	movs	r2, #3
 800a13a:	701a      	strb	r2, [r3, #0]
					break ;
 800a13c:	e055      	b.n	800a1ea <Straight_Boost+0x472>

			// 부스트가 종료되었을 때
			case BOOST_CNTL_END :

					// 직선이 다시 가속 안할 정도로 남았을 경우
					if (curTick_L > driveData[driveDataIdx].tickCnt_L - MIN_STRAIGHT_BOOST_TICK \
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <Straight_Boost+0x480>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a14a:	4b35      	ldr	r3, [pc, #212]	; (800a220 <Straight_Boost+0x4a8>)
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	4619      	mov	r1, r3
 800a150:	4a34      	ldr	r2, [pc, #208]	; (800a224 <Straight_Boost+0x4ac>)
 800a152:	460b      	mov	r3, r1
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	440b      	add	r3, r1
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a166:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a228 <Straight_Boost+0x4b0>
 800a16a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a16e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	dc1e      	bgt.n	800a1b6 <Straight_Boost+0x43e>
					 || curTick_R > driveData[driveDataIdx].tickCnt_R - MIN_STRAIGHT_BOOST_TICK) {
 800a178:	4b22      	ldr	r3, [pc, #136]	; (800a204 <Straight_Boost+0x48c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	ee07 3a90 	vmov	s15, r3
 800a180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a184:	4b26      	ldr	r3, [pc, #152]	; (800a220 <Straight_Boost+0x4a8>)
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	4619      	mov	r1, r3
 800a18a:	4a26      	ldr	r2, [pc, #152]	; (800a224 <Straight_Boost+0x4ac>)
 800a18c:	460b      	mov	r3, r1
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	440b      	add	r3, r1
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	3304      	adds	r3, #4
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1a2:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a228 <Straight_Boost+0x4b0>
 800a1a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a1aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	dc00      	bgt.n	800a1b6 <Straight_Boost+0x43e>
						}

						starightBoostCntl = BOOST_CNTL_IDLE;
					}

					break ;
 800a1b4:	e019      	b.n	800a1ea <Straight_Boost+0x472>
						crossCnt = driveData[driveDataIdx].crossCnt;
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <Straight_Boost+0x4a8>)
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4a19      	ldr	r2, [pc, #100]	; (800a224 <Straight_Boost+0x4ac>)
 800a1be:	460b      	mov	r3, r1
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	440b      	add	r3, r1
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3309      	adds	r3, #9
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	4b17      	ldr	r3, [pc, #92]	; (800a22c <Straight_Boost+0x4b4>)
 800a1d0:	801a      	strh	r2, [r3, #0]
						if (markStateMachine == MARK_STATE_MACHINE_CROSS) {
 800a1d2:	4b17      	ldr	r3, [pc, #92]	; (800a230 <Straight_Boost+0x4b8>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d102      	bne.n	800a1e0 <Straight_Boost+0x468>
							markStateMachine = MARK_STATE_MACHINE_IDLE;
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <Straight_Boost+0x4b8>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
						starightBoostCntl = BOOST_CNTL_IDLE;
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <Straight_Boost+0x4a4>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
					break ;
 800a1e6:	e000      	b.n	800a1ea <Straight_Boost+0x472>
					break ;
 800a1e8:	bf00      	nop
	}
}
 800a1ea:	bf00      	nop
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	20001478 	.word	0x20001478
 800a1f8:	2000147c 	.word	0x2000147c
 800a1fc:	2000352c 	.word	0x2000352c
 800a200:	20003530 	.word	0x20003530
 800a204:	20001480 	.word	0x20001480
 800a208:	20003534 	.word	0x20003534
 800a20c:	20003504 	.word	0x20003504
 800a210:	2000000c 	.word	0x2000000c
 800a214:	2000002c 	.word	0x2000002c
 800a218:	40266666 	.word	0x40266666
 800a21c:	200014f4 	.word	0x200014f4
 800a220:	200032f8 	.word	0x200032f8
 800a224:	200014f8 	.word	0x200014f8
 800a228:	45e5aeb7 	.word	0x45e5aeb7
 800a22c:	200034fc 	.word	0x200034fc
 800a230:	20001490 	.word	0x20001490

0800a234 <Second_Drive>:




//2차 주행
void Second_Drive() {
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0

	uint32_t startTime = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
	uint32_t endTime = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a242:	f7fa ffd2 	bl	80051ea <Custom_OLED_Clear>

	isStraightBoostEnabled = 1;
 800a246:	4b2d      	ldr	r3, [pc, #180]	; (800a2fc <Second_Drive+0xc8>)
 800a248:	2201      	movs	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]


	//주행 전 변수값 초기화
	Drive_Optimize_Setting();
 800a24c:	f7fb fff0 	bl	8006230 <Drive_Optimize_Setting>
	Pre_Drive_Setting();
 800a250:	f7fc f808 	bl	8006264 <Pre_Drive_Setting>

	startTime = uwTick;
 800a254:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <Second_Drive+0xcc>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	617b      	str	r3, [r7, #20]

	uint8_t exitEcho = Second_Driving();
 800a25a:	f000 f947 	bl	800a4ec <Second_Driving>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]

	endTime = uwTick;
 800a262:	4b27      	ldr	r3, [pc, #156]	; (800a300 <Second_Drive+0xcc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a268:	f7fa ffbf 	bl	80051ea <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d103      	bne.n	800a27a <Second_Drive+0x46>
		Custom_OLED_Printf("/0end mark");
 800a272:	4824      	ldr	r0, [pc, #144]	; (800a304 <Second_Drive+0xd0>)
 800a274:	f7fb f89e 	bl	80053b4 <Custom_OLED_Printf>
 800a278:	e002      	b.n	800a280 <Second_Drive+0x4c>
	}
	else {
		Custom_OLED_Printf("/0line out");
 800a27a:	4823      	ldr	r0, [pc, #140]	; (800a308 <Second_Drive+0xd4>)
 800a27c:	f7fb f89a 	bl	80053b4 <Custom_OLED_Printf>
	}

	Custom_OLED_Printf("/1cross: %u", crossCnt);
 800a280:	4b22      	ldr	r3, [pc, #136]	; (800a30c <Second_Drive+0xd8>)
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	4619      	mov	r1, r3
 800a286:	4822      	ldr	r0, [pc, #136]	; (800a310 <Second_Drive+0xdc>)
 800a288:	f7fb f894 	bl	80053b4 <Custom_OLED_Printf>

	int min = (endTime - startTime) / 1000 / 60;
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	4a20      	ldr	r2, [pc, #128]	; (800a314 <Second_Drive+0xe0>)
 800a294:	fba2 2303 	umull	r2, r3, r2, r3
 800a298:	0b9b      	lsrs	r3, r3, #14
 800a29a:	60bb      	str	r3, [r7, #8]
	int sec = (endTime - startTime) / 1000 % 60;
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	4a1d      	ldr	r2, [pc, #116]	; (800a318 <Second_Drive+0xe4>)
 800a2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a8:	0999      	lsrs	r1, r3, #6
 800a2aa:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <Second_Drive+0xe8>)
 800a2ac:	fba3 2301 	umull	r2, r3, r3, r1
 800a2b0:	095a      	lsrs	r2, r3, #5
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	1aca      	subs	r2, r1, r3
 800a2bc:	607a      	str	r2, [r7, #4]
	int ms = (endTime - startTime) % 1000;
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	1ad2      	subs	r2, r2, r3
 800a2c4:	4b14      	ldr	r3, [pc, #80]	; (800a318 <Second_Drive+0xe4>)
 800a2c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a2ca:	099b      	lsrs	r3, r3, #6
 800a2cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a2d0:	fb01 f303 	mul.w	r3, r1, r3
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	603b      	str	r3, [r7, #0]

	Custom_OLED_Printf("/5%d:%d.%d", min, sec, ms);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	4810      	ldr	r0, [pc, #64]	; (800a320 <Second_Drive+0xec>)
 800a2e0:	f7fb f868 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 800a2e4:	bf00      	nop
 800a2e6:	f7fb fb95 	bl	8005a14 <Custom_Switch_Read>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d1fa      	bne.n	800a2e6 <Second_Drive+0xb2>
	Custom_OLED_Clear();
 800a2f0:	f7fa ff7b 	bl	80051ea <Custom_OLED_Clear>
}
 800a2f4:	bf00      	nop
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	200034fe 	.word	0x200034fe
 800a300:	200002a4 	.word	0x200002a4
 800a304:	0800e13c 	.word	0x0800e13c
 800a308:	0800e148 	.word	0x0800e148
 800a30c:	200034fc 	.word	0x200034fc
 800a310:	0800e154 	.word	0x0800e154
 800a314:	45e7b273 	.word	0x45e7b273
 800a318:	10624dd3 	.word	0x10624dd3
 800a31c:	88888889 	.word	0x88888889
 800a320:	0800e160 	.word	0x0800e160

0800a324 <Second_Drive_Quick>:


//2차 주행
void Second_Drive_Quick() {
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0

	uint32_t startTime = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	617b      	str	r3, [r7, #20]
	uint32_t endTime = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a332:	f7fa ff5a 	bl	80051ea <Custom_OLED_Clear>


	//주행 전 변수값 초기화
	Pre_Drive_Second_Quick();
 800a336:	f7fb ffcd 	bl	80062d4 <Pre_Drive_Second_Quick>

	startTime = uwTick;
 800a33a:	4b2a      	ldr	r3, [pc, #168]	; (800a3e4 <Second_Drive_Quick+0xc0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	617b      	str	r3, [r7, #20]

	uint8_t exitEcho = Second_Driving();
 800a340:	f000 f8d4 	bl	800a4ec <Second_Driving>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]

	endTime = uwTick;
 800a348:	4b26      	ldr	r3, [pc, #152]	; (800a3e4 <Second_Drive_Quick+0xc0>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a34e:	f7fa ff4c 	bl	80051ea <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d103      	bne.n	800a360 <Second_Drive_Quick+0x3c>
		Custom_OLED_Printf("/0end mark");
 800a358:	4823      	ldr	r0, [pc, #140]	; (800a3e8 <Second_Drive_Quick+0xc4>)
 800a35a:	f7fb f82b 	bl	80053b4 <Custom_OLED_Printf>
 800a35e:	e002      	b.n	800a366 <Second_Drive_Quick+0x42>
	}
	else {
		Custom_OLED_Printf("/0line out");
 800a360:	4822      	ldr	r0, [pc, #136]	; (800a3ec <Second_Drive_Quick+0xc8>)
 800a362:	f7fb f827 	bl	80053b4 <Custom_OLED_Printf>
	}

	Custom_OLED_Printf("/1cross: %u", crossCnt);
 800a366:	4b22      	ldr	r3, [pc, #136]	; (800a3f0 <Second_Drive_Quick+0xcc>)
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	4619      	mov	r1, r3
 800a36c:	4821      	ldr	r0, [pc, #132]	; (800a3f4 <Second_Drive_Quick+0xd0>)
 800a36e:	f7fb f821 	bl	80053b4 <Custom_OLED_Printf>

	int min = (endTime - startTime) / 1000 / 60;
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <Second_Drive_Quick+0xd4>)
 800a37a:	fba2 2303 	umull	r2, r3, r2, r3
 800a37e:	0b9b      	lsrs	r3, r3, #14
 800a380:	60bb      	str	r3, [r7, #8]
	int sec = (endTime - startTime) / 1000 % 60;
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	4a1c      	ldr	r2, [pc, #112]	; (800a3fc <Second_Drive_Quick+0xd8>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	0999      	lsrs	r1, r3, #6
 800a390:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <Second_Drive_Quick+0xdc>)
 800a392:	fba3 2301 	umull	r2, r3, r3, r1
 800a396:	095a      	lsrs	r2, r3, #5
 800a398:	4613      	mov	r3, r2
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	1aca      	subs	r2, r1, r3
 800a3a2:	607a      	str	r2, [r7, #4]
	int ms = (endTime - startTime) % 1000;
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	1ad2      	subs	r2, r2, r3
 800a3aa:	4b14      	ldr	r3, [pc, #80]	; (800a3fc <Second_Drive_Quick+0xd8>)
 800a3ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b0:	099b      	lsrs	r3, r3, #6
 800a3b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	603b      	str	r3, [r7, #0]

	Custom_OLED_Printf("/5%d:%d.%d", min, sec, ms);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	480f      	ldr	r0, [pc, #60]	; (800a404 <Second_Drive_Quick+0xe0>)
 800a3c6:	f7fa fff5 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 800a3ca:	bf00      	nop
 800a3cc:	f7fb fb22 	bl	8005a14 <Custom_Switch_Read>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d1fa      	bne.n	800a3cc <Second_Drive_Quick+0xa8>
	Custom_OLED_Clear();
 800a3d6:	f7fa ff08 	bl	80051ea <Custom_OLED_Clear>
}
 800a3da:	bf00      	nop
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200002a4 	.word	0x200002a4
 800a3e8:	0800e13c 	.word	0x0800e13c
 800a3ec:	0800e148 	.word	0x0800e148
 800a3f0:	200034fc 	.word	0x200034fc
 800a3f4:	0800e154 	.word	0x0800e154
 800a3f8:	45e7b273 	.word	0x45e7b273
 800a3fc:	10624dd3 	.word	0x10624dd3
 800a400:	88888889 	.word	0x88888889
 800a404:	0800e160 	.word	0x0800e160

0800a408 <Third_Drive_Quick>:


//2차 주행
void Third_Drive_Quick() {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0

	uint32_t startTime = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]
	uint32_t endTime = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a416:	f7fa fee8 	bl	80051ea <Custom_OLED_Clear>


	//주행 전 변수값 초기화
	Pre_Drive_Third_Quick();
 800a41a:	f7fb ffb1 	bl	8006380 <Pre_Drive_Third_Quick>

	startTime = uwTick;
 800a41e:	4b2a      	ldr	r3, [pc, #168]	; (800a4c8 <Third_Drive_Quick+0xc0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	617b      	str	r3, [r7, #20]

	uint8_t exitEcho = Second_Driving();
 800a424:	f000 f862 	bl	800a4ec <Second_Driving>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]

	endTime = uwTick;
 800a42c:	4b26      	ldr	r3, [pc, #152]	; (800a4c8 <Third_Drive_Quick+0xc0>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	613b      	str	r3, [r7, #16]

	Custom_OLED_Clear();
 800a432:	f7fa feda 	bl	80051ea <Custom_OLED_Clear>

	if (exitEcho == EXIT_ECHO_END_MARK) {
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d103      	bne.n	800a444 <Third_Drive_Quick+0x3c>
		Custom_OLED_Printf("/0end mark");
 800a43c:	4823      	ldr	r0, [pc, #140]	; (800a4cc <Third_Drive_Quick+0xc4>)
 800a43e:	f7fa ffb9 	bl	80053b4 <Custom_OLED_Printf>
 800a442:	e002      	b.n	800a44a <Third_Drive_Quick+0x42>
	}
	else {
		Custom_OLED_Printf("/0line out");
 800a444:	4822      	ldr	r0, [pc, #136]	; (800a4d0 <Third_Drive_Quick+0xc8>)
 800a446:	f7fa ffb5 	bl	80053b4 <Custom_OLED_Printf>
	}

	Custom_OLED_Printf("/1cross: %u", crossCnt);
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <Third_Drive_Quick+0xcc>)
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	4619      	mov	r1, r3
 800a450:	4821      	ldr	r0, [pc, #132]	; (800a4d8 <Third_Drive_Quick+0xd0>)
 800a452:	f7fa ffaf 	bl	80053b4 <Custom_OLED_Printf>

	int min = (endTime - startTime) / 1000 / 60;
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	4a1f      	ldr	r2, [pc, #124]	; (800a4dc <Third_Drive_Quick+0xd4>)
 800a45e:	fba2 2303 	umull	r2, r3, r2, r3
 800a462:	0b9b      	lsrs	r3, r3, #14
 800a464:	60bb      	str	r3, [r7, #8]
	int sec = (endTime - startTime) / 1000 % 60;
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	4a1c      	ldr	r2, [pc, #112]	; (800a4e0 <Third_Drive_Quick+0xd8>)
 800a46e:	fba2 2303 	umull	r2, r3, r2, r3
 800a472:	0999      	lsrs	r1, r3, #6
 800a474:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <Third_Drive_Quick+0xdc>)
 800a476:	fba3 2301 	umull	r2, r3, r3, r1
 800a47a:	095a      	lsrs	r2, r3, #5
 800a47c:	4613      	mov	r3, r2
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	1aca      	subs	r2, r1, r3
 800a486:	607a      	str	r2, [r7, #4]
	int ms = (endTime - startTime) % 1000;
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	1ad2      	subs	r2, r2, r3
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <Third_Drive_Quick+0xd8>)
 800a490:	fba3 1302 	umull	r1, r3, r3, r2
 800a494:	099b      	lsrs	r3, r3, #6
 800a496:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	603b      	str	r3, [r7, #0]

	Custom_OLED_Printf("/5%d:%d.%d", min, sec, ms);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	480f      	ldr	r0, [pc, #60]	; (800a4e8 <Third_Drive_Quick+0xe0>)
 800a4aa:	f7fa ff83 	bl	80053b4 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != Custom_Switch_Read());
 800a4ae:	bf00      	nop
 800a4b0:	f7fb fab0 	bl	8005a14 <Custom_Switch_Read>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d1fa      	bne.n	800a4b0 <Third_Drive_Quick+0xa8>
	Custom_OLED_Clear();
 800a4ba:	f7fa fe96 	bl	80051ea <Custom_OLED_Clear>
}
 800a4be:	bf00      	nop
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200002a4 	.word	0x200002a4
 800a4cc:	0800e13c 	.word	0x0800e13c
 800a4d0:	0800e148 	.word	0x0800e148
 800a4d4:	200034fc 	.word	0x200034fc
 800a4d8:	0800e154 	.word	0x0800e154
 800a4dc:	45e7b273 	.word	0x45e7b273
 800a4e0:	10624dd3 	.word	0x10624dd3
 800a4e4:	88888889 	.word	0x88888889
 800a4e8:	0800e160 	.word	0x0800e160

0800a4ec <Second_Driving>:


__STATIC_INLINE uint8_t	Second_Driving() {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0

	uint8_t	exitEcho = EXIT_ECHO_IDLE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 800a4f6:	f000 fa09 	bl	800a90c <Sensor_Start>
	Positioning();
 800a4fa:	f7ff fa1f 	bl	800993c <Positioning>
	Motor_Start();
 800a4fe:	f7fe fe59 	bl	80091b4 <Motor_Start>
	Speed_Control_Start();
 800a502:	f7fe feaf 	bl	8009264 <Speed_Control_Start>

	while (1) {

		//Drive_Test_Info_Oled();

		Positioning();
 800a506:	f7ff fa19 	bl	800993c <Positioning>

		Mark();
 800a50a:	f7ff f95d 	bl	80097c8 <Mark>
		Second_Drive_Cntl();
 800a50e:	f000 f837 	bl	800a580 <Second_Drive_Cntl>

		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End(exitEcho)) ) {
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	4618      	mov	r0, r3
 800a516:	f7fe ff4d 	bl	80093b4 <Is_Drive_End>
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d0f0      	beq.n	800a506 <Second_Driving+0x1a>

			Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <Second_Driving+0x84>)
 800a526:	edd3 7a00 	vldr	s15, [r3]
 800a52a:	eddf 0a12 	vldr	s1, [pc, #72]	; 800a574 <Second_Driving+0x88>
 800a52e:	eeb0 0a67 	vmov.f32	s0, s15
 800a532:	f7fe fee7 	bl	8009304 <Drive_Fit_In>

			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 800a536:	e001      	b.n	800a53c <Second_Driving+0x50>
				Positioning();
 800a538:	f7ff fa00 	bl	800993c <Positioning>
			while (curSpeed > DRIVE_END_DELAY_SPEED) {
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <Second_Driving+0x8c>)
 800a53e:	edd3 7a00 	vldr	s15, [r3]
 800a542:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a57c <Second_Driving+0x90>
 800a546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54e:	dcf3      	bgt.n	800a538 <Second_Driving+0x4c>
				//Drive_Speed_Cntl();
			}

			Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 800a550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a554:	f7fe fec6 	bl	80092e4 <Custom_Delay_ms>
			break;
 800a558:	bf00      	nop
		}
	}

	Motor_Stop();
 800a55a:	f7fe fe7b 	bl	8009254 <Motor_Stop>
	Speed_Control_Stop();
 800a55e:	f7fe fe8d 	bl	800927c <Speed_Control_Stop>
	Sensor_Stop();
 800a562:	f000 f9eb 	bl	800a93c <Sensor_Stop>

	return exitEcho;
 800a566:	79fb      	ldrb	r3, [r7, #7]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	2000004c 	.word	0x2000004c
 800a574:	00000000 	.word	0x00000000
 800a578:	20001478 	.word	0x20001478
 800a57c:	3e4ccccd 	.word	0x3e4ccccd

0800a580 <Second_Drive_Cntl>:


__STATIC_INLINE void Second_Drive_Cntl() {
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0




	switch (markState) {
 800a584:	4b3f      	ldr	r3, [pc, #252]	; (800a684 <Second_Drive_Cntl+0x104>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	3b01      	subs	r3, #1
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d877      	bhi.n	800a67e <Second_Drive_Cntl+0xfe>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <Second_Drive_Cntl+0x14>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a649 	.word	0x0800a649
 800a598:	0800a65f 	.word	0x0800a65f
 800a59c:	0800a65f 	.word	0x0800a65f
 800a5a0:	0800a61d 	.word	0x0800a61d
 800a5a4:	0800a5ad 	.word	0x0800a5ad
 800a5a8:	0800a675 	.word	0x0800a675


		case MARK_CROSS:

			// 마크 복구
			if (isReadAllMark == CUSTOM_FALSE) {
 800a5ac:	4b36      	ldr	r3, [pc, #216]	; (800a688 <Second_Drive_Cntl+0x108>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d11d      	bne.n	800a5f0 <Second_Drive_Cntl+0x70>

				// crossCntTable의 crossCnt 번째의 인덱스가 비어있지 않음 경우
				if (crossCntTable[crossCnt] != 0) {
 800a5b4:	4b35      	ldr	r3, [pc, #212]	; (800a68c <Second_Drive_Cntl+0x10c>)
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4b35      	ldr	r3, [pc, #212]	; (800a690 <Second_Drive_Cntl+0x110>)
 800a5bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d015      	beq.n	800a5f0 <Second_Drive_Cntl+0x70>
					 *    n번째 크로스(crossCnt)		0		1		...		50
					 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
					 *
					 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
					 */
					driveDataIdx = crossCntTable[crossCnt] - 1;
 800a5c4:	4b31      	ldr	r3, [pc, #196]	; (800a68c <Second_Drive_Cntl+0x10c>)
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4b31      	ldr	r3, [pc, #196]	; (800a690 <Second_Drive_Cntl+0x110>)
 800a5cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <Second_Drive_Cntl+0x114>)
 800a5d6:	801a      	strh	r2, [r3, #0]

					// 부스트, 인라인 주행 컨트롤 변수 초기화
					starightBoostCntl = BOOST_CNTL_IDLE;
 800a5d8:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <Second_Drive_Cntl+0x118>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
					curveBoostCntl = BOOST_CNTL_IDLE;
 800a5de:	4b2f      	ldr	r3, [pc, #188]	; (800a69c <Second_Drive_Cntl+0x11c>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
					curveInlineCntl = INLINE_CNTL_IDLE;
 800a5e4:	4b2e      	ldr	r3, [pc, #184]	; (800a6a0 <Second_Drive_Cntl+0x120>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]

					// isReadAllMark update
					isReadAllMark = CUSTOM_TRUE;
 800a5ea:	4b27      	ldr	r3, [pc, #156]	; (800a688 <Second_Drive_Cntl+0x108>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	701a      	strb	r2, [r3, #0]
				}
			}

			crossCnt += 1;
 800a5f0:	4b26      	ldr	r3, [pc, #152]	; (800a68c <Second_Drive_Cntl+0x10c>)
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	4b24      	ldr	r3, [pc, #144]	; (800a68c <Second_Drive_Cntl+0x10c>)
 800a5fa:	801a      	strh	r2, [r3, #0]


			// 크로스, 엔드마크는 읽은 후 마커를 강제로 직선으로 변경
			markState = MARK_STRAIGHT;
 800a5fc:	4b21      	ldr	r3, [pc, #132]	; (800a684 <Second_Drive_Cntl+0x104>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	701a      	strb	r2, [r3, #0]
			driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <Second_Drive_Cntl+0x114>)
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	4619      	mov	r1, r3
 800a608:	4a26      	ldr	r2, [pc, #152]	; (800a6a4 <Second_Drive_Cntl+0x124>)
 800a60a:	460b      	mov	r3, r1
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	440b      	add	r3, r1
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	3308      	adds	r3, #8
 800a616:	2201      	movs	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]

			break;
 800a61a:	e030      	b.n	800a67e <Second_Drive_Cntl+0xfe>



		case MARK_END:

			endMarkCnt++;
 800a61c:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <Second_Drive_Cntl+0x128>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	4b20      	ldr	r3, [pc, #128]	; (800a6a8 <Second_Drive_Cntl+0x128>)
 800a626:	701a      	strb	r2, [r3, #0]

			// 크로스, 엔드마크는 읽은 후 마커를 강제로 직선으로 변경
			markState = MARK_STRAIGHT;
 800a628:	4b16      	ldr	r3, [pc, #88]	; (800a684 <Second_Drive_Cntl+0x104>)
 800a62a:	2201      	movs	r2, #1
 800a62c:	701a      	strb	r2, [r3, #0]
			driveDataBuffer[driveDataIdx].markState = MARK_STRAIGHT;
 800a62e:	4b19      	ldr	r3, [pc, #100]	; (800a694 <Second_Drive_Cntl+0x114>)
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	4619      	mov	r1, r3
 800a634:	4a1b      	ldr	r2, [pc, #108]	; (800a6a4 <Second_Drive_Cntl+0x124>)
 800a636:	460b      	mov	r3, r1
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	440b      	add	r3, r1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	3308      	adds	r3, #8
 800a642:	2201      	movs	r2, #1
 800a644:	701a      	strb	r2, [r3, #0]


			break;
 800a646:	e01a      	b.n	800a67e <Second_Drive_Cntl+0xfe>



		case MARK_STRAIGHT:

			Set_Second_Drive_Data();
 800a648:	f000 f830 	bl	800a6ac <Set_Second_Drive_Data>

			if (isReadAllMark == CUSTOM_TRUE) {
 800a64c:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <Second_Drive_Cntl+0x108>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d111      	bne.n	800a678 <Second_Drive_Cntl+0xf8>

				// 직선가속
				Straight_Boost();
 800a654:	f7ff fb90 	bl	8009d78 <Straight_Boost>

//				Prepare_Inline();

				Inline_Drive();
 800a658:	f7fe fec8 	bl	80093ec <Inline_Drive>
			}

			break;
 800a65c:	e00c      	b.n	800a678 <Second_Drive_Cntl+0xf8>


		case MARK_CURVE_L:
		case MARK_CURVE_R:

			Set_Second_Drive_Data();
 800a65e:	f000 f825 	bl	800a6ac <Set_Second_Drive_Data>


			if (isReadAllMark == CUSTOM_TRUE) {
 800a662:	4b09      	ldr	r3, [pc, #36]	; (800a688 <Second_Drive_Cntl+0x108>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d108      	bne.n	800a67c <Second_Drive_Cntl+0xfc>

				Curve_Boost();
 800a66a:	f7ff f9d3 	bl	8009a14 <Curve_Boost>

				// 곡선 인라인
//				Restore_Inline();

				Inline_Drive();
 800a66e:	f7fe febd 	bl	80093ec <Inline_Drive>
			}
			break;
 800a672:	e003      	b.n	800a67c <Second_Drive_Cntl+0xfc>
			break;
 800a674:	bf00      	nop
 800a676:	e002      	b.n	800a67e <Second_Drive_Cntl+0xfe>
			break;
 800a678:	bf00      	nop
 800a67a:	e000      	b.n	800a67e <Second_Drive_Cntl+0xfe>
			break;
 800a67c:	bf00      	nop
	}
}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	2000003c 	.word	0x2000003c
 800a688:	20000048 	.word	0x20000048
 800a68c:	200034fc 	.word	0x200034fc
 800a690:	200032fc 	.word	0x200032fc
 800a694:	200032f8 	.word	0x200032f8
 800a698:	200014f4 	.word	0x200014f4
 800a69c:	200014f5 	.word	0x200014f5
 800a6a0:	200014f6 	.word	0x200014f6
 800a6a4:	200023f8 	.word	0x200023f8
 800a6a8:	20003501 	.word	0x20003501

0800a6ac <Set_Second_Drive_Data>:




__STATIC_INLINE void Set_Second_Drive_Data() {
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0

	// markState가 변경되었을 경우
	if (markState != driveDataBuffer[driveDataIdx].markState) {
 800a6b0:	4b3b      	ldr	r3, [pc, #236]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4a3b      	ldr	r2, [pc, #236]	; (800a7a4 <Set_Second_Drive_Data+0xf8>)
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	440b      	add	r3, r1
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <Set_Second_Drive_Data+0xfc>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d062      	beq.n	800a794 <Set_Second_Drive_Data+0xe8>
		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
//		driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L;
//		driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R;

		// curTick 초기화
		curTick_L = 0;
 800a6ce:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <Set_Second_Drive_Data+0x100>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	601a      	str	r2, [r3, #0]
		curTick_R = 0;
 800a6d4:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <Set_Second_Drive_Data+0x104>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]

		// 종료 시점에서의 읽은 크로스의 개수
		driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 800a6da:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <Set_Second_Drive_Data+0x108>)
 800a6dc:	881a      	ldrh	r2, [r3, #0]
 800a6de:	4b30      	ldr	r3, [pc, #192]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	b2d0      	uxtb	r0, r2
 800a6e6:	4a2f      	ldr	r2, [pc, #188]	; (800a7a4 <Set_Second_Drive_Data+0xf8>)
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	440b      	add	r3, r1
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3309      	adds	r3, #9
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	701a      	strb	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 800a6f8:	4b29      	ldr	r3, [pc, #164]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	4b27      	ldr	r3, [pc, #156]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a702:	801a      	strh	r2, [r3, #0]


		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBuffer[driveDataIdx].markState = markState;
 800a704:	4b26      	ldr	r3, [pc, #152]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	4619      	mov	r1, r3
 800a70a:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <Set_Second_Drive_Data+0xfc>)
 800a70c:	7818      	ldrb	r0, [r3, #0]
 800a70e:	4a25      	ldr	r2, [pc, #148]	; (800a7a4 <Set_Second_Drive_Data+0xf8>)
 800a710:	460b      	mov	r3, r1
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	440b      	add	r3, r1
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	3308      	adds	r3, #8
 800a71c:	4602      	mov	r2, r0
 800a71e:	701a      	strb	r2, [r3, #0]





		isLastStraight = CUSTOM_FALSE;
 800a720:	4b25      	ldr	r3, [pc, #148]	; (800a7b8 <Set_Second_Drive_Data+0x10c>)
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
		if (driveData[driveDataIdx + 1].markState == MARK_END) {
 800a728:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	4923      	ldr	r1, [pc, #140]	; (800a7bc <Set_Second_Drive_Data+0x110>)
 800a730:	4613      	mov	r3, r2
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	3308      	adds	r3, #8
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d106      	bne.n	800a750 <Set_Second_Drive_Data+0xa4>

			isLastStraight = CUSTOM_TRUE;
 800a742:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <Set_Second_Drive_Data+0x10c>)
 800a744:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a748:	601a      	str	r2, [r3, #0]
			targetInlineVal = 0;
 800a74a:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <Set_Second_Drive_Data+0x114>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]
		}



		starightBoostCntl = BOOST_CNTL_IDLE;
 800a750:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <Set_Second_Drive_Data+0x118>)
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
		curveBoostCntl = BOOST_CNTL_IDLE;
 800a756:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <Set_Second_Drive_Data+0x11c>)
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
		curveInlineCntl = INLINE_CNTL_IDLE;
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <Set_Second_Drive_Data+0x120>)
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]

		targetSpeed = targetSpeed_init;
 800a762:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <Set_Second_Drive_Data+0x124>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a1b      	ldr	r2, [pc, #108]	; (800a7d4 <Set_Second_Drive_Data+0x128>)
 800a768:	6013      	str	r3, [r2, #0]



		// 주행중 markState와 1차 주행에서 저장된 markState가 동일하지 않다면 비정상적으로 읽었다고 판단
		if (markState != driveData[driveDataIdx].markState) {
 800a76a:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <Set_Second_Drive_Data+0xf4>)
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	4619      	mov	r1, r3
 800a770:	4a12      	ldr	r2, [pc, #72]	; (800a7bc <Set_Second_Drive_Data+0x110>)
 800a772:	460b      	mov	r3, r1
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	440b      	add	r3, r1
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	3308      	adds	r3, #8
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <Set_Second_Drive_Data+0xfc>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d005      	beq.n	800a794 <Set_Second_Drive_Data+0xe8>

			// 마크 인식 정상 여부를 업데이트
			isReadAllMark = CUSTOM_FALSE;
 800a788:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <Set_Second_Drive_Data+0x12c>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]

			targetInlineVal = 0;
 800a78e:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <Set_Second_Drive_Data+0x114>)
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]
		}
	}

}
 800a794:	bf00      	nop
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	200032f8 	.word	0x200032f8
 800a7a4:	200023f8 	.word	0x200023f8
 800a7a8:	2000003c 	.word	0x2000003c
 800a7ac:	2000147c 	.word	0x2000147c
 800a7b0:	20001480 	.word	0x20001480
 800a7b4:	200034fc 	.word	0x200034fc
 800a7b8:	20003504 	.word	0x20003504
 800a7bc:	200014f8 	.word	0x200014f8
 800a7c0:	20001488 	.word	0x20001488
 800a7c4:	200014f4 	.word	0x200014f4
 800a7c8:	200014f5 	.word	0x200014f5
 800a7cc:	200014f6 	.word	0x200014f6
 800a7d0:	2000000c 	.word	0x2000000c
 800a7d4:	2000002c 	.word	0x2000002c
 800a7d8:	20000048 	.word	0x20000048

0800a7dc <LL_ADC_Enable>:
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f043 0201 	orr.w	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	609a      	str	r2, [r3, #8]
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <LL_ADC_Disable>:
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f023 0201 	bic.w	r2, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	609a      	str	r2, [r3, #8]
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <LL_TIM_EnableCounter>:
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f043 0201 	orr.w	r2, r3, #1
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	601a      	str	r2, [r3, #0]
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <LL_TIM_DisableCounter>:
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f023 0201 	bic.w	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	601a      	str	r2, [r3, #0]
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LL_TIM_EnableIT_UPDATE>:
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f043 0201 	orr.w	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <LL_TIM_DisableIT_UPDATE>:
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f023 0201 	bic.w	r2, r3, #1
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800a8a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800a8ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a8b8:	f023 0301 	bic.w	r3, r3, #1
 800a8bc:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 800a8be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a8c8:	f043 0301 	orr.w	r3, r3, #1
 800a8cc:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 800a8ce:	bf00      	nop
 800a8d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d1f8      	bne.n	800a8d0 <Custom_Delay_us+0x34>
}
 800a8de:	bf00      	nop
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff ffcc 	bl	800a89c <Custom_Delay_us>
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <Sensor_Start>:





void Sensor_Start() {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0

	LL_ADC_Enable(ADC1);
 800a910:	4808      	ldr	r0, [pc, #32]	; (800a934 <Sensor_Start+0x28>)
 800a912:	f7ff ff63 	bl	800a7dc <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 800a916:	200a      	movs	r0, #10
 800a918:	f7ff ffe8 	bl	800a8ec <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 800a91c:	4806      	ldr	r0, [pc, #24]	; (800a938 <Sensor_Start+0x2c>)
 800a91e:	f7ff ff7d 	bl	800a81c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 800a922:	4805      	ldr	r0, [pc, #20]	; (800a938 <Sensor_Start+0x2c>)
 800a924:	f7ff ff9a 	bl	800a85c <LL_TIM_EnableIT_UPDATE>
	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 800a928:	200a      	movs	r0, #10
 800a92a:	f7ff ffdf 	bl	800a8ec <Custom_Delay_ms>
}
 800a92e:	bf00      	nop
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	40012000 	.word	0x40012000
 800a938:	40000c00 	.word	0x40000c00

0800a93c <Sensor_Stop>:




void Sensor_Stop() {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 800a940:	4808      	ldr	r0, [pc, #32]	; (800a964 <Sensor_Stop+0x28>)
 800a942:	f7ff ff5b 	bl	800a7fc <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 800a946:	4808      	ldr	r0, [pc, #32]	; (800a968 <Sensor_Stop+0x2c>)
 800a948:	f7ff ff78 	bl	800a83c <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 800a94c:	4806      	ldr	r0, [pc, #24]	; (800a968 <Sensor_Stop+0x2c>)
 800a94e:	f7ff ff95 	bl	800a87c <LL_TIM_DisableIT_UPDATE>

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <Sensor_Stop+0x30>)
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	4a05      	ldr	r2, [pc, #20]	; (800a96c <Sensor_Stop+0x30>)
 800a958:	f023 0308 	bic.w	r3, r3, #8
 800a95c:	6153      	str	r3, [r2, #20]
}
 800a95e:	bf00      	nop
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	40012000 	.word	0x40012000
 800a968:	40000c00 	.word	0x40000c00
 800a96c:	40020800 	.word	0x40020800

0800a970 <Sensor_Calibration>:





void Sensor_Calibration() {
 800a970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a972:	b089      	sub	sp, #36	; 0x24
 800a974:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800a97a:	2300      	movs	r3, #0
 800a97c:	71fb      	strb	r3, [r7, #7]
 800a97e:	e00a      	b.n	800a996 <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	4a92      	ldr	r2, [pc, #584]	; (800abcc <Sensor_Calibration+0x25c>)
 800a984:	2100      	movs	r1, #0
 800a986:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	4a91      	ldr	r2, [pc, #580]	; (800abd0 <Sensor_Calibration+0x260>)
 800a98c:	2100      	movs	r1, #0
 800a98e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	3301      	adds	r3, #1
 800a994:	71fb      	strb	r3, [r7, #7]
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	2b0f      	cmp	r3, #15
 800a99a:	d9f1      	bls.n	800a980 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 800a99c:	f7ff ffb6 	bl	800a90c <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 800a9a0:	f7fa fc23 	bl	80051ea <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800a9a4:	e06e      	b.n	800aa84 <Sensor_Calibration+0x114>
		Custom_OLED_Printf("/0Black Max");
 800a9a6:	488b      	ldr	r0, [pc, #556]	; (800abd4 <Sensor_Calibration+0x264>)
 800a9a8:	f7fa fd04 	bl	80053b4 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	71bb      	strb	r3, [r7, #6]
 800a9b0:	e011      	b.n	800a9d6 <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 800a9b2:	79bb      	ldrb	r3, [r7, #6]
 800a9b4:	4a86      	ldr	r2, [pc, #536]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9b6:	5cd3      	ldrb	r3, [r2, r3]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	79ba      	ldrb	r2, [r7, #6]
 800a9bc:	4986      	ldr	r1, [pc, #536]	; (800abd8 <Sensor_Calibration+0x268>)
 800a9be:	5c8a      	ldrb	r2, [r1, r2]
 800a9c0:	70fa      	strb	r2, [r7, #3]
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d903      	bls.n	800a9d0 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 800a9c8:	79bb      	ldrb	r3, [r7, #6]
 800a9ca:	4981      	ldr	r1, [pc, #516]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9cc:	78fa      	ldrb	r2, [r7, #3]
 800a9ce:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800a9d0:	79bb      	ldrb	r3, [r7, #6]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	71bb      	strb	r3, [r7, #6]
 800a9d6:	79bb      	ldrb	r3, [r7, #6]
 800a9d8:	2b0f      	cmp	r3, #15
 800a9da:	d9ea      	bls.n	800a9b2 <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800a9dc:	4b7c      	ldr	r3, [pc, #496]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800a9e2:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800a9e4:	4b7a      	ldr	r3, [pc, #488]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800a9ea:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800a9ec:	4b78      	ldr	r3, [pc, #480]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9ee:	789b      	ldrb	r3, [r3, #2]
 800a9f0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800a9f2:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800a9f4:	4b76      	ldr	r3, [pc, #472]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9f6:	78db      	ldrb	r3, [r3, #3]
 800a9f8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800a9fa:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800a9fc:	4b74      	ldr	r3, [pc, #464]	; (800abd0 <Sensor_Calibration+0x260>)
 800a9fe:	791b      	ldrb	r3, [r3, #4]
 800aa00:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa02:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800aa04:	4b72      	ldr	r3, [pc, #456]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa06:	795b      	ldrb	r3, [r3, #5]
 800aa08:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa0a:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800aa0c:	4b70      	ldr	r3, [pc, #448]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa0e:	799b      	ldrb	r3, [r3, #6]
 800aa10:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa12:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800aa14:	4b6e      	ldr	r3, [pc, #440]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa16:	79db      	ldrb	r3, [r3, #7]
 800aa18:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	9403      	str	r4, [sp, #12]
 800aa1e:	9002      	str	r0, [sp, #8]
 800aa20:	9101      	str	r1, [sp, #4]
 800aa22:	9200      	str	r2, [sp, #0]
 800aa24:	4663      	mov	r3, ip
 800aa26:	4632      	mov	r2, r6
 800aa28:	4629      	mov	r1, r5
 800aa2a:	486c      	ldr	r0, [pc, #432]	; (800abdc <Sensor_Calibration+0x26c>)
 800aa2c:	f7fa fcc2 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 800aa30:	4b67      	ldr	r3, [pc, #412]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa32:	7a1b      	ldrb	r3, [r3, #8]
 800aa34:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa36:	461d      	mov	r5, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 800aa38:	4b65      	ldr	r3, [pc, #404]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa3a:	7a5b      	ldrb	r3, [r3, #9]
 800aa3c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa3e:	461e      	mov	r6, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 800aa40:	4b63      	ldr	r3, [pc, #396]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa42:	7a9b      	ldrb	r3, [r3, #10]
 800aa44:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa46:	469c      	mov	ip, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 800aa48:	4b61      	ldr	r3, [pc, #388]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa4a:	7adb      	ldrb	r3, [r3, #11]
 800aa4c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa4e:	461a      	mov	r2, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 800aa50:	4b5f      	ldr	r3, [pc, #380]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa52:	7b1b      	ldrb	r3, [r3, #12]
 800aa54:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa56:	4619      	mov	r1, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 800aa58:	4b5d      	ldr	r3, [pc, #372]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa5a:	7b5b      	ldrb	r3, [r3, #13]
 800aa5c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa5e:	4618      	mov	r0, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 800aa60:	4b5b      	ldr	r3, [pc, #364]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa62:	7b9b      	ldrb	r3, [r3, #14]
 800aa64:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa66:	461c      	mov	r4, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 800aa68:	4b59      	ldr	r3, [pc, #356]	; (800abd0 <Sensor_Calibration+0x260>)
 800aa6a:	7bdb      	ldrb	r3, [r3, #15]
 800aa6c:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aa6e:	9304      	str	r3, [sp, #16]
 800aa70:	9403      	str	r4, [sp, #12]
 800aa72:	9002      	str	r0, [sp, #8]
 800aa74:	9101      	str	r1, [sp, #4]
 800aa76:	9200      	str	r2, [sp, #0]
 800aa78:	4663      	mov	r3, ip
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4858      	ldr	r0, [pc, #352]	; (800abe0 <Sensor_Calibration+0x270>)
 800aa80:	f7fa fc98 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800aa84:	f7fa ffc6 	bl	8005a14 <Custom_Switch_Read>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	d18b      	bne.n	800a9a6 <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 800aa8e:	f7fa fbac 	bl	80051ea <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800aa92:	e06e      	b.n	800ab72 <Sensor_Calibration+0x202>
		Custom_OLED_Printf("/0White Max");
 800aa94:	4853      	ldr	r0, [pc, #332]	; (800abe4 <Sensor_Calibration+0x274>)
 800aa96:	f7fa fc8d 	bl	80053b4 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	717b      	strb	r3, [r7, #5]
 800aa9e:	e011      	b.n	800aac4 <Sensor_Calibration+0x154>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 800aaa0:	797b      	ldrb	r3, [r7, #5]
 800aaa2:	4a4a      	ldr	r2, [pc, #296]	; (800abcc <Sensor_Calibration+0x25c>)
 800aaa4:	5cd3      	ldrb	r3, [r2, r3]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	797a      	ldrb	r2, [r7, #5]
 800aaaa:	494b      	ldr	r1, [pc, #300]	; (800abd8 <Sensor_Calibration+0x268>)
 800aaac:	5c8a      	ldrb	r2, [r1, r2]
 800aaae:	70fa      	strb	r2, [r7, #3]
 800aab0:	78fa      	ldrb	r2, [r7, #3]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d903      	bls.n	800aabe <Sensor_Calibration+0x14e>
				whiteMaxs[i] = tmp;
 800aab6:	797b      	ldrb	r3, [r7, #5]
 800aab8:	4944      	ldr	r1, [pc, #272]	; (800abcc <Sensor_Calibration+0x25c>)
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800aabe:	797b      	ldrb	r3, [r7, #5]
 800aac0:	3301      	adds	r3, #1
 800aac2:	717b      	strb	r3, [r7, #5]
 800aac4:	797b      	ldrb	r3, [r7, #5]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d9ea      	bls.n	800aaa0 <Sensor_Calibration+0x130>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800aaca:	4b40      	ldr	r3, [pc, #256]	; (800abcc <Sensor_Calibration+0x25c>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aad0:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800aad2:	4b3e      	ldr	r3, [pc, #248]	; (800abcc <Sensor_Calibration+0x25c>)
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aad8:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800aada:	4b3c      	ldr	r3, [pc, #240]	; (800abcc <Sensor_Calibration+0x25c>)
 800aadc:	789b      	ldrb	r3, [r3, #2]
 800aade:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aae0:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800aae2:	4b3a      	ldr	r3, [pc, #232]	; (800abcc <Sensor_Calibration+0x25c>)
 800aae4:	78db      	ldrb	r3, [r3, #3]
 800aae6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aae8:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800aaea:	4b38      	ldr	r3, [pc, #224]	; (800abcc <Sensor_Calibration+0x25c>)
 800aaec:	791b      	ldrb	r3, [r3, #4]
 800aaee:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aaf0:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800aaf2:	4b36      	ldr	r3, [pc, #216]	; (800abcc <Sensor_Calibration+0x25c>)
 800aaf4:	795b      	ldrb	r3, [r3, #5]
 800aaf6:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800aaf8:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800aafa:	4b34      	ldr	r3, [pc, #208]	; (800abcc <Sensor_Calibration+0x25c>)
 800aafc:	799b      	ldrb	r3, [r3, #6]
 800aafe:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab00:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800ab02:	4b32      	ldr	r3, [pc, #200]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab04:	79db      	ldrb	r3, [r3, #7]
 800ab06:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab08:	9304      	str	r3, [sp, #16]
 800ab0a:	9403      	str	r4, [sp, #12]
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	9101      	str	r1, [sp, #4]
 800ab10:	9200      	str	r2, [sp, #0]
 800ab12:	4663      	mov	r3, ip
 800ab14:	4632      	mov	r2, r6
 800ab16:	4629      	mov	r1, r5
 800ab18:	4830      	ldr	r0, [pc, #192]	; (800abdc <Sensor_Calibration+0x26c>)
 800ab1a:	f7fa fc4b 	bl	80053b4 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 800ab1e:	4b2b      	ldr	r3, [pc, #172]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab20:	7a1b      	ldrb	r3, [r3, #8]
 800ab22:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab24:	461d      	mov	r5, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 800ab26:	4b29      	ldr	r3, [pc, #164]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab28:	7a5b      	ldrb	r3, [r3, #9]
 800ab2a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab2c:	461e      	mov	r6, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 800ab2e:	4b27      	ldr	r3, [pc, #156]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab30:	7a9b      	ldrb	r3, [r3, #10]
 800ab32:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab34:	469c      	mov	ip, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 800ab36:	4b25      	ldr	r3, [pc, #148]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab38:	7adb      	ldrb	r3, [r3, #11]
 800ab3a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab3c:	461a      	mov	r2, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 800ab3e:	4b23      	ldr	r3, [pc, #140]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab40:	7b1b      	ldrb	r3, [r3, #12]
 800ab42:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab44:	4619      	mov	r1, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 800ab46:	4b21      	ldr	r3, [pc, #132]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab48:	7b5b      	ldrb	r3, [r3, #13]
 800ab4a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab4c:	4618      	mov	r0, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 800ab4e:	4b1f      	ldr	r3, [pc, #124]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab50:	7b9b      	ldrb	r3, [r3, #14]
 800ab52:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab54:	461c      	mov	r4, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab58:	7bdb      	ldrb	r3, [r3, #15]
 800ab5a:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	9403      	str	r4, [sp, #12]
 800ab60:	9002      	str	r0, [sp, #8]
 800ab62:	9101      	str	r1, [sp, #4]
 800ab64:	9200      	str	r2, [sp, #0]
 800ab66:	4663      	mov	r3, ip
 800ab68:	4632      	mov	r2, r6
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	481c      	ldr	r0, [pc, #112]	; (800abe0 <Sensor_Calibration+0x270>)
 800ab6e:	f7fa fc21 	bl	80053b4 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800ab72:	f7fa ff4f 	bl	8005a14 <Custom_Switch_Read>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	d18b      	bne.n	800aa94 <Sensor_Calibration+0x124>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	713b      	strb	r3, [r7, #4]
 800ab80:	e019      	b.n	800abb6 <Sensor_Calibration+0x246>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 800ab82:	793b      	ldrb	r3, [r7, #4]
 800ab84:	4a11      	ldr	r2, [pc, #68]	; (800abcc <Sensor_Calibration+0x25c>)
 800ab86:	5cd3      	ldrb	r3, [r2, r3]
 800ab88:	b2d9      	uxtb	r1, r3
 800ab8a:	793b      	ldrb	r3, [r7, #4]
 800ab8c:	4a10      	ldr	r2, [pc, #64]	; (800abd0 <Sensor_Calibration+0x260>)
 800ab8e:	5cd3      	ldrb	r3, [r2, r3]
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	793b      	ldrb	r3, [r7, #4]
 800ab94:	1a8a      	subs	r2, r1, r2
 800ab96:	b2d1      	uxtb	r1, r2
 800ab98:	4a13      	ldr	r2, [pc, #76]	; (800abe8 <Sensor_Calibration+0x278>)
 800ab9a:	54d1      	strb	r1, [r2, r3]
		if (normalizeCoef[i] == 0) {
 800ab9c:	793b      	ldrb	r3, [r7, #4]
 800ab9e:	4a12      	ldr	r2, [pc, #72]	; (800abe8 <Sensor_Calibration+0x278>)
 800aba0:	5cd3      	ldrb	r3, [r2, r3]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <Sensor_Calibration+0x240>
			normalizeCoef[i] = 1;
 800aba8:	793b      	ldrb	r3, [r7, #4]
 800abaa:	4a0f      	ldr	r2, [pc, #60]	; (800abe8 <Sensor_Calibration+0x278>)
 800abac:	2101      	movs	r1, #1
 800abae:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < IR_SENSOR_LEN; i++) {
 800abb0:	793b      	ldrb	r3, [r7, #4]
 800abb2:	3301      	adds	r3, #1
 800abb4:	713b      	strb	r3, [r7, #4]
 800abb6:	793b      	ldrb	r3, [r7, #4]
 800abb8:	2b0f      	cmp	r3, #15
 800abba:	d9e2      	bls.n	800ab82 <Sensor_Calibration+0x212>
		}
	}

	Custom_OLED_Clear();
 800abbc:	f7fa fb15 	bl	80051ea <Custom_OLED_Clear>
	Sensor_Stop();
 800abc0:	f7ff febc 	bl	800a93c <Sensor_Stop>
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abcc:	2000005c 	.word	0x2000005c
 800abd0:	2000006c 	.word	0x2000006c
 800abd4:	0800e16c 	.word	0x0800e16c
 800abd8:	2000354c 	.word	0x2000354c
 800abdc:	0800e178 	.word	0x0800e178
 800abe0:	0800e1a4 	.word	0x0800e1a4
 800abe4:	0800e1d0 	.word	0x0800e1d0
 800abe8:	2000356c 	.word	0x2000356c

0800abec <__cvt>:
 800abec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	ec55 4b10 	vmov	r4, r5, d0
 800abf4:	2d00      	cmp	r5, #0
 800abf6:	460e      	mov	r6, r1
 800abf8:	4619      	mov	r1, r3
 800abfa:	462b      	mov	r3, r5
 800abfc:	bfbb      	ittet	lt
 800abfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac02:	461d      	movlt	r5, r3
 800ac04:	2300      	movge	r3, #0
 800ac06:	232d      	movlt	r3, #45	; 0x2d
 800ac08:	700b      	strb	r3, [r1, #0]
 800ac0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac10:	4691      	mov	r9, r2
 800ac12:	f023 0820 	bic.w	r8, r3, #32
 800ac16:	bfbc      	itt	lt
 800ac18:	4622      	movlt	r2, r4
 800ac1a:	4614      	movlt	r4, r2
 800ac1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac20:	d005      	beq.n	800ac2e <__cvt+0x42>
 800ac22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac26:	d100      	bne.n	800ac2a <__cvt+0x3e>
 800ac28:	3601      	adds	r6, #1
 800ac2a:	2102      	movs	r1, #2
 800ac2c:	e000      	b.n	800ac30 <__cvt+0x44>
 800ac2e:	2103      	movs	r1, #3
 800ac30:	ab03      	add	r3, sp, #12
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	ab02      	add	r3, sp, #8
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	ec45 4b10 	vmov	d0, r4, r5
 800ac3c:	4653      	mov	r3, sl
 800ac3e:	4632      	mov	r2, r6
 800ac40:	f000 fdee 	bl	800b820 <_dtoa_r>
 800ac44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac48:	4607      	mov	r7, r0
 800ac4a:	d102      	bne.n	800ac52 <__cvt+0x66>
 800ac4c:	f019 0f01 	tst.w	r9, #1
 800ac50:	d022      	beq.n	800ac98 <__cvt+0xac>
 800ac52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac56:	eb07 0906 	add.w	r9, r7, r6
 800ac5a:	d110      	bne.n	800ac7e <__cvt+0x92>
 800ac5c:	783b      	ldrb	r3, [r7, #0]
 800ac5e:	2b30      	cmp	r3, #48	; 0x30
 800ac60:	d10a      	bne.n	800ac78 <__cvt+0x8c>
 800ac62:	2200      	movs	r2, #0
 800ac64:	2300      	movs	r3, #0
 800ac66:	4620      	mov	r0, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f7f5 ff35 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac6e:	b918      	cbnz	r0, 800ac78 <__cvt+0x8c>
 800ac70:	f1c6 0601 	rsb	r6, r6, #1
 800ac74:	f8ca 6000 	str.w	r6, [sl]
 800ac78:	f8da 3000 	ldr.w	r3, [sl]
 800ac7c:	4499      	add	r9, r3
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	f7f5 ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac8a:	b108      	cbz	r0, 800ac90 <__cvt+0xa4>
 800ac8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac90:	2230      	movs	r2, #48	; 0x30
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	454b      	cmp	r3, r9
 800ac96:	d307      	bcc.n	800aca8 <__cvt+0xbc>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac9c:	1bdb      	subs	r3, r3, r7
 800ac9e:	4638      	mov	r0, r7
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	b004      	add	sp, #16
 800aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca8:	1c59      	adds	r1, r3, #1
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	e7f0      	b.n	800ac92 <__cvt+0xa6>

0800acb0 <__exponent>:
 800acb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acb2:	4603      	mov	r3, r0
 800acb4:	2900      	cmp	r1, #0
 800acb6:	bfb8      	it	lt
 800acb8:	4249      	neglt	r1, r1
 800acba:	f803 2b02 	strb.w	r2, [r3], #2
 800acbe:	bfb4      	ite	lt
 800acc0:	222d      	movlt	r2, #45	; 0x2d
 800acc2:	222b      	movge	r2, #43	; 0x2b
 800acc4:	2909      	cmp	r1, #9
 800acc6:	7042      	strb	r2, [r0, #1]
 800acc8:	dd2a      	ble.n	800ad20 <__exponent+0x70>
 800acca:	f10d 0207 	add.w	r2, sp, #7
 800acce:	4617      	mov	r7, r2
 800acd0:	260a      	movs	r6, #10
 800acd2:	4694      	mov	ip, r2
 800acd4:	fb91 f5f6 	sdiv	r5, r1, r6
 800acd8:	fb06 1415 	mls	r4, r6, r5, r1
 800acdc:	3430      	adds	r4, #48	; 0x30
 800acde:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ace2:	460c      	mov	r4, r1
 800ace4:	2c63      	cmp	r4, #99	; 0x63
 800ace6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800acea:	4629      	mov	r1, r5
 800acec:	dcf1      	bgt.n	800acd2 <__exponent+0x22>
 800acee:	3130      	adds	r1, #48	; 0x30
 800acf0:	f1ac 0402 	sub.w	r4, ip, #2
 800acf4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800acf8:	1c41      	adds	r1, r0, #1
 800acfa:	4622      	mov	r2, r4
 800acfc:	42ba      	cmp	r2, r7
 800acfe:	d30a      	bcc.n	800ad16 <__exponent+0x66>
 800ad00:	f10d 0209 	add.w	r2, sp, #9
 800ad04:	eba2 020c 	sub.w	r2, r2, ip
 800ad08:	42bc      	cmp	r4, r7
 800ad0a:	bf88      	it	hi
 800ad0c:	2200      	movhi	r2, #0
 800ad0e:	4413      	add	r3, r2
 800ad10:	1a18      	subs	r0, r3, r0
 800ad12:	b003      	add	sp, #12
 800ad14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad16:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ad1e:	e7ed      	b.n	800acfc <__exponent+0x4c>
 800ad20:	2330      	movs	r3, #48	; 0x30
 800ad22:	3130      	adds	r1, #48	; 0x30
 800ad24:	7083      	strb	r3, [r0, #2]
 800ad26:	70c1      	strb	r1, [r0, #3]
 800ad28:	1d03      	adds	r3, r0, #4
 800ad2a:	e7f1      	b.n	800ad10 <__exponent+0x60>

0800ad2c <_printf_float>:
 800ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	ed2d 8b02 	vpush	{d8}
 800ad34:	b08d      	sub	sp, #52	; 0x34
 800ad36:	460c      	mov	r4, r1
 800ad38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad3c:	4616      	mov	r6, r2
 800ad3e:	461f      	mov	r7, r3
 800ad40:	4605      	mov	r5, r0
 800ad42:	f000 fca3 	bl	800b68c <_localeconv_r>
 800ad46:	f8d0 a000 	ldr.w	sl, [r0]
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	f7f5 fa98 	bl	8000280 <strlen>
 800ad50:	2300      	movs	r3, #0
 800ad52:	930a      	str	r3, [sp, #40]	; 0x28
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	9305      	str	r3, [sp, #20]
 800ad58:	f8d8 3000 	ldr.w	r3, [r8]
 800ad5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad60:	3307      	adds	r3, #7
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	f103 0208 	add.w	r2, r3, #8
 800ad6a:	f8c8 2000 	str.w	r2, [r8]
 800ad6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad76:	9307      	str	r3, [sp, #28]
 800ad78:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad7c:	ee08 0a10 	vmov	s16, r0
 800ad80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ad84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad88:	4b9e      	ldr	r3, [pc, #632]	; (800b004 <_printf_float+0x2d8>)
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad8e:	f7f5 fed5 	bl	8000b3c <__aeabi_dcmpun>
 800ad92:	bb88      	cbnz	r0, 800adf8 <_printf_float+0xcc>
 800ad94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad98:	4b9a      	ldr	r3, [pc, #616]	; (800b004 <_printf_float+0x2d8>)
 800ad9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad9e:	f7f5 feaf 	bl	8000b00 <__aeabi_dcmple>
 800ada2:	bb48      	cbnz	r0, 800adf8 <_printf_float+0xcc>
 800ada4:	2200      	movs	r2, #0
 800ada6:	2300      	movs	r3, #0
 800ada8:	4640      	mov	r0, r8
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 fe9e 	bl	8000aec <__aeabi_dcmplt>
 800adb0:	b110      	cbz	r0, 800adb8 <_printf_float+0x8c>
 800adb2:	232d      	movs	r3, #45	; 0x2d
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	4a93      	ldr	r2, [pc, #588]	; (800b008 <_printf_float+0x2dc>)
 800adba:	4b94      	ldr	r3, [pc, #592]	; (800b00c <_printf_float+0x2e0>)
 800adbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800adc0:	bf94      	ite	ls
 800adc2:	4690      	movls	r8, r2
 800adc4:	4698      	movhi	r8, r3
 800adc6:	2303      	movs	r3, #3
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	9b05      	ldr	r3, [sp, #20]
 800adcc:	f023 0304 	bic.w	r3, r3, #4
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	f04f 0900 	mov.w	r9, #0
 800add6:	9700      	str	r7, [sp, #0]
 800add8:	4633      	mov	r3, r6
 800adda:	aa0b      	add	r2, sp, #44	; 0x2c
 800addc:	4621      	mov	r1, r4
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 f9da 	bl	800b198 <_printf_common>
 800ade4:	3001      	adds	r0, #1
 800ade6:	f040 8090 	bne.w	800af0a <_printf_float+0x1de>
 800adea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adee:	b00d      	add	sp, #52	; 0x34
 800adf0:	ecbd 8b02 	vpop	{d8}
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	4642      	mov	r2, r8
 800adfa:	464b      	mov	r3, r9
 800adfc:	4640      	mov	r0, r8
 800adfe:	4649      	mov	r1, r9
 800ae00:	f7f5 fe9c 	bl	8000b3c <__aeabi_dcmpun>
 800ae04:	b140      	cbz	r0, 800ae18 <_printf_float+0xec>
 800ae06:	464b      	mov	r3, r9
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfbc      	itt	lt
 800ae0c:	232d      	movlt	r3, #45	; 0x2d
 800ae0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae12:	4a7f      	ldr	r2, [pc, #508]	; (800b010 <_printf_float+0x2e4>)
 800ae14:	4b7f      	ldr	r3, [pc, #508]	; (800b014 <_printf_float+0x2e8>)
 800ae16:	e7d1      	b.n	800adbc <_printf_float+0x90>
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ae1e:	9206      	str	r2, [sp, #24]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	d13f      	bne.n	800aea4 <_printf_float+0x178>
 800ae24:	2306      	movs	r3, #6
 800ae26:	6063      	str	r3, [r4, #4]
 800ae28:	9b05      	ldr	r3, [sp, #20]
 800ae2a:	6861      	ldr	r1, [r4, #4]
 800ae2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ae30:	2300      	movs	r3, #0
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	ab0a      	add	r3, sp, #40	; 0x28
 800ae36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ae3a:	ab09      	add	r3, sp, #36	; 0x24
 800ae3c:	ec49 8b10 	vmov	d0, r8, r9
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7ff fecf 	bl	800abec <__cvt>
 800ae4e:	9b06      	ldr	r3, [sp, #24]
 800ae50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae52:	2b47      	cmp	r3, #71	; 0x47
 800ae54:	4680      	mov	r8, r0
 800ae56:	d108      	bne.n	800ae6a <_printf_float+0x13e>
 800ae58:	1cc8      	adds	r0, r1, #3
 800ae5a:	db02      	blt.n	800ae62 <_printf_float+0x136>
 800ae5c:	6863      	ldr	r3, [r4, #4]
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	dd41      	ble.n	800aee6 <_printf_float+0x1ba>
 800ae62:	f1ab 0302 	sub.w	r3, fp, #2
 800ae66:	fa5f fb83 	uxtb.w	fp, r3
 800ae6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae6e:	d820      	bhi.n	800aeb2 <_printf_float+0x186>
 800ae70:	3901      	subs	r1, #1
 800ae72:	465a      	mov	r2, fp
 800ae74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae78:	9109      	str	r1, [sp, #36]	; 0x24
 800ae7a:	f7ff ff19 	bl	800acb0 <__exponent>
 800ae7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae80:	1813      	adds	r3, r2, r0
 800ae82:	2a01      	cmp	r2, #1
 800ae84:	4681      	mov	r9, r0
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	dc02      	bgt.n	800ae90 <_printf_float+0x164>
 800ae8a:	6822      	ldr	r2, [r4, #0]
 800ae8c:	07d2      	lsls	r2, r2, #31
 800ae8e:	d501      	bpl.n	800ae94 <_printf_float+0x168>
 800ae90:	3301      	adds	r3, #1
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d09c      	beq.n	800add6 <_printf_float+0xaa>
 800ae9c:	232d      	movs	r3, #45	; 0x2d
 800ae9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aea2:	e798      	b.n	800add6 <_printf_float+0xaa>
 800aea4:	9a06      	ldr	r2, [sp, #24]
 800aea6:	2a47      	cmp	r2, #71	; 0x47
 800aea8:	d1be      	bne.n	800ae28 <_printf_float+0xfc>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1bc      	bne.n	800ae28 <_printf_float+0xfc>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e7b9      	b.n	800ae26 <_printf_float+0xfa>
 800aeb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aeb6:	d118      	bne.n	800aeea <_printf_float+0x1be>
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	dd0b      	ble.n	800aed6 <_printf_float+0x1aa>
 800aebe:	6121      	str	r1, [r4, #16]
 800aec0:	b913      	cbnz	r3, 800aec8 <_printf_float+0x19c>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	07d0      	lsls	r0, r2, #31
 800aec6:	d502      	bpl.n	800aece <_printf_float+0x1a2>
 800aec8:	3301      	adds	r3, #1
 800aeca:	440b      	add	r3, r1
 800aecc:	6123      	str	r3, [r4, #16]
 800aece:	65a1      	str	r1, [r4, #88]	; 0x58
 800aed0:	f04f 0900 	mov.w	r9, #0
 800aed4:	e7de      	b.n	800ae94 <_printf_float+0x168>
 800aed6:	b913      	cbnz	r3, 800aede <_printf_float+0x1b2>
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	07d2      	lsls	r2, r2, #31
 800aedc:	d501      	bpl.n	800aee2 <_printf_float+0x1b6>
 800aede:	3302      	adds	r3, #2
 800aee0:	e7f4      	b.n	800aecc <_printf_float+0x1a0>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e7f2      	b.n	800aecc <_printf_float+0x1a0>
 800aee6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	4299      	cmp	r1, r3
 800aeee:	db05      	blt.n	800aefc <_printf_float+0x1d0>
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	6121      	str	r1, [r4, #16]
 800aef4:	07d8      	lsls	r0, r3, #31
 800aef6:	d5ea      	bpl.n	800aece <_printf_float+0x1a2>
 800aef8:	1c4b      	adds	r3, r1, #1
 800aefa:	e7e7      	b.n	800aecc <_printf_float+0x1a0>
 800aefc:	2900      	cmp	r1, #0
 800aefe:	bfd4      	ite	le
 800af00:	f1c1 0202 	rsble	r2, r1, #2
 800af04:	2201      	movgt	r2, #1
 800af06:	4413      	add	r3, r2
 800af08:	e7e0      	b.n	800aecc <_printf_float+0x1a0>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	055a      	lsls	r2, r3, #21
 800af0e:	d407      	bmi.n	800af20 <_printf_float+0x1f4>
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	4642      	mov	r2, r8
 800af14:	4631      	mov	r1, r6
 800af16:	4628      	mov	r0, r5
 800af18:	47b8      	blx	r7
 800af1a:	3001      	adds	r0, #1
 800af1c:	d12c      	bne.n	800af78 <_printf_float+0x24c>
 800af1e:	e764      	b.n	800adea <_printf_float+0xbe>
 800af20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af24:	f240 80e0 	bls.w	800b0e8 <_printf_float+0x3bc>
 800af28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af2c:	2200      	movs	r2, #0
 800af2e:	2300      	movs	r3, #0
 800af30:	f7f5 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	d034      	beq.n	800afa2 <_printf_float+0x276>
 800af38:	4a37      	ldr	r2, [pc, #220]	; (800b018 <_printf_float+0x2ec>)
 800af3a:	2301      	movs	r3, #1
 800af3c:	4631      	mov	r1, r6
 800af3e:	4628      	mov	r0, r5
 800af40:	47b8      	blx	r7
 800af42:	3001      	adds	r0, #1
 800af44:	f43f af51 	beq.w	800adea <_printf_float+0xbe>
 800af48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af4c:	429a      	cmp	r2, r3
 800af4e:	db02      	blt.n	800af56 <_printf_float+0x22a>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	07d8      	lsls	r0, r3, #31
 800af54:	d510      	bpl.n	800af78 <_printf_float+0x24c>
 800af56:	ee18 3a10 	vmov	r3, s16
 800af5a:	4652      	mov	r2, sl
 800af5c:	4631      	mov	r1, r6
 800af5e:	4628      	mov	r0, r5
 800af60:	47b8      	blx	r7
 800af62:	3001      	adds	r0, #1
 800af64:	f43f af41 	beq.w	800adea <_printf_float+0xbe>
 800af68:	f04f 0800 	mov.w	r8, #0
 800af6c:	f104 091a 	add.w	r9, r4, #26
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	3b01      	subs	r3, #1
 800af74:	4543      	cmp	r3, r8
 800af76:	dc09      	bgt.n	800af8c <_printf_float+0x260>
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	079b      	lsls	r3, r3, #30
 800af7c:	f100 8107 	bmi.w	800b18e <_printf_float+0x462>
 800af80:	68e0      	ldr	r0, [r4, #12]
 800af82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af84:	4298      	cmp	r0, r3
 800af86:	bfb8      	it	lt
 800af88:	4618      	movlt	r0, r3
 800af8a:	e730      	b.n	800adee <_printf_float+0xc2>
 800af8c:	2301      	movs	r3, #1
 800af8e:	464a      	mov	r2, r9
 800af90:	4631      	mov	r1, r6
 800af92:	4628      	mov	r0, r5
 800af94:	47b8      	blx	r7
 800af96:	3001      	adds	r0, #1
 800af98:	f43f af27 	beq.w	800adea <_printf_float+0xbe>
 800af9c:	f108 0801 	add.w	r8, r8, #1
 800afa0:	e7e6      	b.n	800af70 <_printf_float+0x244>
 800afa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	dc39      	bgt.n	800b01c <_printf_float+0x2f0>
 800afa8:	4a1b      	ldr	r2, [pc, #108]	; (800b018 <_printf_float+0x2ec>)
 800afaa:	2301      	movs	r3, #1
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f af19 	beq.w	800adea <_printf_float+0xbe>
 800afb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800afbc:	4313      	orrs	r3, r2
 800afbe:	d102      	bne.n	800afc6 <_printf_float+0x29a>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	07d9      	lsls	r1, r3, #31
 800afc4:	d5d8      	bpl.n	800af78 <_printf_float+0x24c>
 800afc6:	ee18 3a10 	vmov	r3, s16
 800afca:	4652      	mov	r2, sl
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	f43f af09 	beq.w	800adea <_printf_float+0xbe>
 800afd8:	f04f 0900 	mov.w	r9, #0
 800afdc:	f104 0a1a 	add.w	sl, r4, #26
 800afe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe2:	425b      	negs	r3, r3
 800afe4:	454b      	cmp	r3, r9
 800afe6:	dc01      	bgt.n	800afec <_printf_float+0x2c0>
 800afe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afea:	e792      	b.n	800af12 <_printf_float+0x1e6>
 800afec:	2301      	movs	r3, #1
 800afee:	4652      	mov	r2, sl
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	f43f aef7 	beq.w	800adea <_printf_float+0xbe>
 800affc:	f109 0901 	add.w	r9, r9, #1
 800b000:	e7ee      	b.n	800afe0 <_printf_float+0x2b4>
 800b002:	bf00      	nop
 800b004:	7fefffff 	.word	0x7fefffff
 800b008:	0800e494 	.word	0x0800e494
 800b00c:	0800e498 	.word	0x0800e498
 800b010:	0800e49c 	.word	0x0800e49c
 800b014:	0800e4a0 	.word	0x0800e4a0
 800b018:	0800e4a4 	.word	0x0800e4a4
 800b01c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b01e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b020:	429a      	cmp	r2, r3
 800b022:	bfa8      	it	ge
 800b024:	461a      	movge	r2, r3
 800b026:	2a00      	cmp	r2, #0
 800b028:	4691      	mov	r9, r2
 800b02a:	dc37      	bgt.n	800b09c <_printf_float+0x370>
 800b02c:	f04f 0b00 	mov.w	fp, #0
 800b030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b034:	f104 021a 	add.w	r2, r4, #26
 800b038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	eba3 0309 	sub.w	r3, r3, r9
 800b040:	455b      	cmp	r3, fp
 800b042:	dc33      	bgt.n	800b0ac <_printf_float+0x380>
 800b044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b048:	429a      	cmp	r2, r3
 800b04a:	db3b      	blt.n	800b0c4 <_printf_float+0x398>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	07da      	lsls	r2, r3, #31
 800b050:	d438      	bmi.n	800b0c4 <_printf_float+0x398>
 800b052:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b056:	eba2 0903 	sub.w	r9, r2, r3
 800b05a:	9b05      	ldr	r3, [sp, #20]
 800b05c:	1ad2      	subs	r2, r2, r3
 800b05e:	4591      	cmp	r9, r2
 800b060:	bfa8      	it	ge
 800b062:	4691      	movge	r9, r2
 800b064:	f1b9 0f00 	cmp.w	r9, #0
 800b068:	dc35      	bgt.n	800b0d6 <_printf_float+0x3aa>
 800b06a:	f04f 0800 	mov.w	r8, #0
 800b06e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b072:	f104 0a1a 	add.w	sl, r4, #26
 800b076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	eba3 0309 	sub.w	r3, r3, r9
 800b080:	4543      	cmp	r3, r8
 800b082:	f77f af79 	ble.w	800af78 <_printf_float+0x24c>
 800b086:	2301      	movs	r3, #1
 800b088:	4652      	mov	r2, sl
 800b08a:	4631      	mov	r1, r6
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b8      	blx	r7
 800b090:	3001      	adds	r0, #1
 800b092:	f43f aeaa 	beq.w	800adea <_printf_float+0xbe>
 800b096:	f108 0801 	add.w	r8, r8, #1
 800b09a:	e7ec      	b.n	800b076 <_printf_float+0x34a>
 800b09c:	4613      	mov	r3, r2
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	47b8      	blx	r7
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d1c0      	bne.n	800b02c <_printf_float+0x300>
 800b0aa:	e69e      	b.n	800adea <_printf_float+0xbe>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	9205      	str	r2, [sp, #20]
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f ae97 	beq.w	800adea <_printf_float+0xbe>
 800b0bc:	9a05      	ldr	r2, [sp, #20]
 800b0be:	f10b 0b01 	add.w	fp, fp, #1
 800b0c2:	e7b9      	b.n	800b038 <_printf_float+0x30c>
 800b0c4:	ee18 3a10 	vmov	r3, s16
 800b0c8:	4652      	mov	r2, sl
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d1be      	bne.n	800b052 <_printf_float+0x326>
 800b0d4:	e689      	b.n	800adea <_printf_float+0xbe>
 800b0d6:	9a05      	ldr	r2, [sp, #20]
 800b0d8:	464b      	mov	r3, r9
 800b0da:	4442      	add	r2, r8
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d1c1      	bne.n	800b06a <_printf_float+0x33e>
 800b0e6:	e680      	b.n	800adea <_printf_float+0xbe>
 800b0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ea:	2a01      	cmp	r2, #1
 800b0ec:	dc01      	bgt.n	800b0f2 <_printf_float+0x3c6>
 800b0ee:	07db      	lsls	r3, r3, #31
 800b0f0:	d53a      	bpl.n	800b168 <_printf_float+0x43c>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	47b8      	blx	r7
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f43f ae74 	beq.w	800adea <_printf_float+0xbe>
 800b102:	ee18 3a10 	vmov	r3, s16
 800b106:	4652      	mov	r2, sl
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f ae6b 	beq.w	800adea <_printf_float+0xbe>
 800b114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b120:	f7f5 fcda 	bl	8000ad8 <__aeabi_dcmpeq>
 800b124:	b9d8      	cbnz	r0, 800b15e <_printf_float+0x432>
 800b126:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b12a:	f108 0201 	add.w	r2, r8, #1
 800b12e:	4631      	mov	r1, r6
 800b130:	4628      	mov	r0, r5
 800b132:	47b8      	blx	r7
 800b134:	3001      	adds	r0, #1
 800b136:	d10e      	bne.n	800b156 <_printf_float+0x42a>
 800b138:	e657      	b.n	800adea <_printf_float+0xbe>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4631      	mov	r1, r6
 800b140:	4628      	mov	r0, r5
 800b142:	47b8      	blx	r7
 800b144:	3001      	adds	r0, #1
 800b146:	f43f ae50 	beq.w	800adea <_printf_float+0xbe>
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b150:	3b01      	subs	r3, #1
 800b152:	4543      	cmp	r3, r8
 800b154:	dcf1      	bgt.n	800b13a <_printf_float+0x40e>
 800b156:	464b      	mov	r3, r9
 800b158:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b15c:	e6da      	b.n	800af14 <_printf_float+0x1e8>
 800b15e:	f04f 0800 	mov.w	r8, #0
 800b162:	f104 0a1a 	add.w	sl, r4, #26
 800b166:	e7f2      	b.n	800b14e <_printf_float+0x422>
 800b168:	2301      	movs	r3, #1
 800b16a:	4642      	mov	r2, r8
 800b16c:	e7df      	b.n	800b12e <_printf_float+0x402>
 800b16e:	2301      	movs	r3, #1
 800b170:	464a      	mov	r2, r9
 800b172:	4631      	mov	r1, r6
 800b174:	4628      	mov	r0, r5
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	f43f ae36 	beq.w	800adea <_printf_float+0xbe>
 800b17e:	f108 0801 	add.w	r8, r8, #1
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b186:	1a5b      	subs	r3, r3, r1
 800b188:	4543      	cmp	r3, r8
 800b18a:	dcf0      	bgt.n	800b16e <_printf_float+0x442>
 800b18c:	e6f8      	b.n	800af80 <_printf_float+0x254>
 800b18e:	f04f 0800 	mov.w	r8, #0
 800b192:	f104 0919 	add.w	r9, r4, #25
 800b196:	e7f4      	b.n	800b182 <_printf_float+0x456>

0800b198 <_printf_common>:
 800b198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b19c:	4616      	mov	r6, r2
 800b19e:	4699      	mov	r9, r3
 800b1a0:	688a      	ldr	r2, [r1, #8]
 800b1a2:	690b      	ldr	r3, [r1, #16]
 800b1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	bfb8      	it	lt
 800b1ac:	4613      	movlt	r3, r2
 800b1ae:	6033      	str	r3, [r6, #0]
 800b1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	b10a      	cbz	r2, 800b1be <_printf_common+0x26>
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	6033      	str	r3, [r6, #0]
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	0699      	lsls	r1, r3, #26
 800b1c2:	bf42      	ittt	mi
 800b1c4:	6833      	ldrmi	r3, [r6, #0]
 800b1c6:	3302      	addmi	r3, #2
 800b1c8:	6033      	strmi	r3, [r6, #0]
 800b1ca:	6825      	ldr	r5, [r4, #0]
 800b1cc:	f015 0506 	ands.w	r5, r5, #6
 800b1d0:	d106      	bne.n	800b1e0 <_printf_common+0x48>
 800b1d2:	f104 0a19 	add.w	sl, r4, #25
 800b1d6:	68e3      	ldr	r3, [r4, #12]
 800b1d8:	6832      	ldr	r2, [r6, #0]
 800b1da:	1a9b      	subs	r3, r3, r2
 800b1dc:	42ab      	cmp	r3, r5
 800b1de:	dc26      	bgt.n	800b22e <_printf_common+0x96>
 800b1e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1e4:	1e13      	subs	r3, r2, #0
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	bf18      	it	ne
 800b1ea:	2301      	movne	r3, #1
 800b1ec:	0692      	lsls	r2, r2, #26
 800b1ee:	d42b      	bmi.n	800b248 <_printf_common+0xb0>
 800b1f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	47c0      	blx	r8
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	d01e      	beq.n	800b23c <_printf_common+0xa4>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	f003 0306 	and.w	r3, r3, #6
 800b206:	2b04      	cmp	r3, #4
 800b208:	bf02      	ittt	eq
 800b20a:	68e5      	ldreq	r5, [r4, #12]
 800b20c:	6833      	ldreq	r3, [r6, #0]
 800b20e:	1aed      	subeq	r5, r5, r3
 800b210:	68a3      	ldr	r3, [r4, #8]
 800b212:	bf0c      	ite	eq
 800b214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b218:	2500      	movne	r5, #0
 800b21a:	4293      	cmp	r3, r2
 800b21c:	bfc4      	itt	gt
 800b21e:	1a9b      	subgt	r3, r3, r2
 800b220:	18ed      	addgt	r5, r5, r3
 800b222:	2600      	movs	r6, #0
 800b224:	341a      	adds	r4, #26
 800b226:	42b5      	cmp	r5, r6
 800b228:	d11a      	bne.n	800b260 <_printf_common+0xc8>
 800b22a:	2000      	movs	r0, #0
 800b22c:	e008      	b.n	800b240 <_printf_common+0xa8>
 800b22e:	2301      	movs	r3, #1
 800b230:	4652      	mov	r2, sl
 800b232:	4649      	mov	r1, r9
 800b234:	4638      	mov	r0, r7
 800b236:	47c0      	blx	r8
 800b238:	3001      	adds	r0, #1
 800b23a:	d103      	bne.n	800b244 <_printf_common+0xac>
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b244:	3501      	adds	r5, #1
 800b246:	e7c6      	b.n	800b1d6 <_printf_common+0x3e>
 800b248:	18e1      	adds	r1, r4, r3
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	2030      	movs	r0, #48	; 0x30
 800b24e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b252:	4422      	add	r2, r4
 800b254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b25c:	3302      	adds	r3, #2
 800b25e:	e7c7      	b.n	800b1f0 <_printf_common+0x58>
 800b260:	2301      	movs	r3, #1
 800b262:	4622      	mov	r2, r4
 800b264:	4649      	mov	r1, r9
 800b266:	4638      	mov	r0, r7
 800b268:	47c0      	blx	r8
 800b26a:	3001      	adds	r0, #1
 800b26c:	d0e6      	beq.n	800b23c <_printf_common+0xa4>
 800b26e:	3601      	adds	r6, #1
 800b270:	e7d9      	b.n	800b226 <_printf_common+0x8e>
	...

0800b274 <_printf_i>:
 800b274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	7e0f      	ldrb	r7, [r1, #24]
 800b27a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b27c:	2f78      	cmp	r7, #120	; 0x78
 800b27e:	4691      	mov	r9, r2
 800b280:	4680      	mov	r8, r0
 800b282:	460c      	mov	r4, r1
 800b284:	469a      	mov	sl, r3
 800b286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b28a:	d807      	bhi.n	800b29c <_printf_i+0x28>
 800b28c:	2f62      	cmp	r7, #98	; 0x62
 800b28e:	d80a      	bhi.n	800b2a6 <_printf_i+0x32>
 800b290:	2f00      	cmp	r7, #0
 800b292:	f000 80d4 	beq.w	800b43e <_printf_i+0x1ca>
 800b296:	2f58      	cmp	r7, #88	; 0x58
 800b298:	f000 80c0 	beq.w	800b41c <_printf_i+0x1a8>
 800b29c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2a4:	e03a      	b.n	800b31c <_printf_i+0xa8>
 800b2a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2aa:	2b15      	cmp	r3, #21
 800b2ac:	d8f6      	bhi.n	800b29c <_printf_i+0x28>
 800b2ae:	a101      	add	r1, pc, #4	; (adr r1, 800b2b4 <_printf_i+0x40>)
 800b2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2b4:	0800b30d 	.word	0x0800b30d
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b29d 	.word	0x0800b29d
 800b2c0:	0800b29d 	.word	0x0800b29d
 800b2c4:	0800b29d 	.word	0x0800b29d
 800b2c8:	0800b29d 	.word	0x0800b29d
 800b2cc:	0800b321 	.word	0x0800b321
 800b2d0:	0800b29d 	.word	0x0800b29d
 800b2d4:	0800b29d 	.word	0x0800b29d
 800b2d8:	0800b29d 	.word	0x0800b29d
 800b2dc:	0800b29d 	.word	0x0800b29d
 800b2e0:	0800b425 	.word	0x0800b425
 800b2e4:	0800b34d 	.word	0x0800b34d
 800b2e8:	0800b3df 	.word	0x0800b3df
 800b2ec:	0800b29d 	.word	0x0800b29d
 800b2f0:	0800b29d 	.word	0x0800b29d
 800b2f4:	0800b447 	.word	0x0800b447
 800b2f8:	0800b29d 	.word	0x0800b29d
 800b2fc:	0800b34d 	.word	0x0800b34d
 800b300:	0800b29d 	.word	0x0800b29d
 800b304:	0800b29d 	.word	0x0800b29d
 800b308:	0800b3e7 	.word	0x0800b3e7
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	1d1a      	adds	r2, r3, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	602a      	str	r2, [r5, #0]
 800b314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b31c:	2301      	movs	r3, #1
 800b31e:	e09f      	b.n	800b460 <_printf_i+0x1ec>
 800b320:	6820      	ldr	r0, [r4, #0]
 800b322:	682b      	ldr	r3, [r5, #0]
 800b324:	0607      	lsls	r7, r0, #24
 800b326:	f103 0104 	add.w	r1, r3, #4
 800b32a:	6029      	str	r1, [r5, #0]
 800b32c:	d501      	bpl.n	800b332 <_printf_i+0xbe>
 800b32e:	681e      	ldr	r6, [r3, #0]
 800b330:	e003      	b.n	800b33a <_printf_i+0xc6>
 800b332:	0646      	lsls	r6, r0, #25
 800b334:	d5fb      	bpl.n	800b32e <_printf_i+0xba>
 800b336:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	da03      	bge.n	800b346 <_printf_i+0xd2>
 800b33e:	232d      	movs	r3, #45	; 0x2d
 800b340:	4276      	negs	r6, r6
 800b342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b346:	485a      	ldr	r0, [pc, #360]	; (800b4b0 <_printf_i+0x23c>)
 800b348:	230a      	movs	r3, #10
 800b34a:	e012      	b.n	800b372 <_printf_i+0xfe>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	6820      	ldr	r0, [r4, #0]
 800b350:	1d19      	adds	r1, r3, #4
 800b352:	6029      	str	r1, [r5, #0]
 800b354:	0605      	lsls	r5, r0, #24
 800b356:	d501      	bpl.n	800b35c <_printf_i+0xe8>
 800b358:	681e      	ldr	r6, [r3, #0]
 800b35a:	e002      	b.n	800b362 <_printf_i+0xee>
 800b35c:	0641      	lsls	r1, r0, #25
 800b35e:	d5fb      	bpl.n	800b358 <_printf_i+0xe4>
 800b360:	881e      	ldrh	r6, [r3, #0]
 800b362:	4853      	ldr	r0, [pc, #332]	; (800b4b0 <_printf_i+0x23c>)
 800b364:	2f6f      	cmp	r7, #111	; 0x6f
 800b366:	bf0c      	ite	eq
 800b368:	2308      	moveq	r3, #8
 800b36a:	230a      	movne	r3, #10
 800b36c:	2100      	movs	r1, #0
 800b36e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b372:	6865      	ldr	r5, [r4, #4]
 800b374:	60a5      	str	r5, [r4, #8]
 800b376:	2d00      	cmp	r5, #0
 800b378:	bfa2      	ittt	ge
 800b37a:	6821      	ldrge	r1, [r4, #0]
 800b37c:	f021 0104 	bicge.w	r1, r1, #4
 800b380:	6021      	strge	r1, [r4, #0]
 800b382:	b90e      	cbnz	r6, 800b388 <_printf_i+0x114>
 800b384:	2d00      	cmp	r5, #0
 800b386:	d04b      	beq.n	800b420 <_printf_i+0x1ac>
 800b388:	4615      	mov	r5, r2
 800b38a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b38e:	fb03 6711 	mls	r7, r3, r1, r6
 800b392:	5dc7      	ldrb	r7, [r0, r7]
 800b394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b398:	4637      	mov	r7, r6
 800b39a:	42bb      	cmp	r3, r7
 800b39c:	460e      	mov	r6, r1
 800b39e:	d9f4      	bls.n	800b38a <_printf_i+0x116>
 800b3a0:	2b08      	cmp	r3, #8
 800b3a2:	d10b      	bne.n	800b3bc <_printf_i+0x148>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	07de      	lsls	r6, r3, #31
 800b3a8:	d508      	bpl.n	800b3bc <_printf_i+0x148>
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	6861      	ldr	r1, [r4, #4]
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	bfde      	ittt	le
 800b3b2:	2330      	movle	r3, #48	; 0x30
 800b3b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b3bc:	1b52      	subs	r2, r2, r5
 800b3be:	6122      	str	r2, [r4, #16]
 800b3c0:	f8cd a000 	str.w	sl, [sp]
 800b3c4:	464b      	mov	r3, r9
 800b3c6:	aa03      	add	r2, sp, #12
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	f7ff fee4 	bl	800b198 <_printf_common>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d14a      	bne.n	800b46a <_printf_i+0x1f6>
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d8:	b004      	add	sp, #16
 800b3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	f043 0320 	orr.w	r3, r3, #32
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	4833      	ldr	r0, [pc, #204]	; (800b4b4 <_printf_i+0x240>)
 800b3e8:	2778      	movs	r7, #120	; 0x78
 800b3ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	6829      	ldr	r1, [r5, #0]
 800b3f2:	061f      	lsls	r7, r3, #24
 800b3f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3f8:	d402      	bmi.n	800b400 <_printf_i+0x18c>
 800b3fa:	065f      	lsls	r7, r3, #25
 800b3fc:	bf48      	it	mi
 800b3fe:	b2b6      	uxthmi	r6, r6
 800b400:	07df      	lsls	r7, r3, #31
 800b402:	bf48      	it	mi
 800b404:	f043 0320 	orrmi.w	r3, r3, #32
 800b408:	6029      	str	r1, [r5, #0]
 800b40a:	bf48      	it	mi
 800b40c:	6023      	strmi	r3, [r4, #0]
 800b40e:	b91e      	cbnz	r6, 800b418 <_printf_i+0x1a4>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	f023 0320 	bic.w	r3, r3, #32
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	2310      	movs	r3, #16
 800b41a:	e7a7      	b.n	800b36c <_printf_i+0xf8>
 800b41c:	4824      	ldr	r0, [pc, #144]	; (800b4b0 <_printf_i+0x23c>)
 800b41e:	e7e4      	b.n	800b3ea <_printf_i+0x176>
 800b420:	4615      	mov	r5, r2
 800b422:	e7bd      	b.n	800b3a0 <_printf_i+0x12c>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	6826      	ldr	r6, [r4, #0]
 800b428:	6961      	ldr	r1, [r4, #20]
 800b42a:	1d18      	adds	r0, r3, #4
 800b42c:	6028      	str	r0, [r5, #0]
 800b42e:	0635      	lsls	r5, r6, #24
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	d501      	bpl.n	800b438 <_printf_i+0x1c4>
 800b434:	6019      	str	r1, [r3, #0]
 800b436:	e002      	b.n	800b43e <_printf_i+0x1ca>
 800b438:	0670      	lsls	r0, r6, #25
 800b43a:	d5fb      	bpl.n	800b434 <_printf_i+0x1c0>
 800b43c:	8019      	strh	r1, [r3, #0]
 800b43e:	2300      	movs	r3, #0
 800b440:	6123      	str	r3, [r4, #16]
 800b442:	4615      	mov	r5, r2
 800b444:	e7bc      	b.n	800b3c0 <_printf_i+0x14c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	1d1a      	adds	r2, r3, #4
 800b44a:	602a      	str	r2, [r5, #0]
 800b44c:	681d      	ldr	r5, [r3, #0]
 800b44e:	6862      	ldr	r2, [r4, #4]
 800b450:	2100      	movs	r1, #0
 800b452:	4628      	mov	r0, r5
 800b454:	f7f4 fec4 	bl	80001e0 <memchr>
 800b458:	b108      	cbz	r0, 800b45e <_printf_i+0x1ea>
 800b45a:	1b40      	subs	r0, r0, r5
 800b45c:	6060      	str	r0, [r4, #4]
 800b45e:	6863      	ldr	r3, [r4, #4]
 800b460:	6123      	str	r3, [r4, #16]
 800b462:	2300      	movs	r3, #0
 800b464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b468:	e7aa      	b.n	800b3c0 <_printf_i+0x14c>
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	462a      	mov	r2, r5
 800b46e:	4649      	mov	r1, r9
 800b470:	4640      	mov	r0, r8
 800b472:	47d0      	blx	sl
 800b474:	3001      	adds	r0, #1
 800b476:	d0ad      	beq.n	800b3d4 <_printf_i+0x160>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	079b      	lsls	r3, r3, #30
 800b47c:	d413      	bmi.n	800b4a6 <_printf_i+0x232>
 800b47e:	68e0      	ldr	r0, [r4, #12]
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	4298      	cmp	r0, r3
 800b484:	bfb8      	it	lt
 800b486:	4618      	movlt	r0, r3
 800b488:	e7a6      	b.n	800b3d8 <_printf_i+0x164>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4632      	mov	r2, r6
 800b48e:	4649      	mov	r1, r9
 800b490:	4640      	mov	r0, r8
 800b492:	47d0      	blx	sl
 800b494:	3001      	adds	r0, #1
 800b496:	d09d      	beq.n	800b3d4 <_printf_i+0x160>
 800b498:	3501      	adds	r5, #1
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	9903      	ldr	r1, [sp, #12]
 800b49e:	1a5b      	subs	r3, r3, r1
 800b4a0:	42ab      	cmp	r3, r5
 800b4a2:	dcf2      	bgt.n	800b48a <_printf_i+0x216>
 800b4a4:	e7eb      	b.n	800b47e <_printf_i+0x20a>
 800b4a6:	2500      	movs	r5, #0
 800b4a8:	f104 0619 	add.w	r6, r4, #25
 800b4ac:	e7f5      	b.n	800b49a <_printf_i+0x226>
 800b4ae:	bf00      	nop
 800b4b0:	0800e4a6 	.word	0x0800e4a6
 800b4b4:	0800e4b7 	.word	0x0800e4b7

0800b4b8 <std>:
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	b510      	push	{r4, lr}
 800b4bc:	4604      	mov	r4, r0
 800b4be:	e9c0 3300 	strd	r3, r3, [r0]
 800b4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4c6:	6083      	str	r3, [r0, #8]
 800b4c8:	8181      	strh	r1, [r0, #12]
 800b4ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b4cc:	81c2      	strh	r2, [r0, #14]
 800b4ce:	6183      	str	r3, [r0, #24]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	2208      	movs	r2, #8
 800b4d4:	305c      	adds	r0, #92	; 0x5c
 800b4d6:	f000 f8d1 	bl	800b67c <memset>
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <std+0x58>)
 800b4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b4de:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <std+0x5c>)
 800b4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4e2:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <std+0x60>)
 800b4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4e6:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <std+0x64>)
 800b4e8:	6323      	str	r3, [r4, #48]	; 0x30
 800b4ea:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <std+0x68>)
 800b4ec:	6224      	str	r4, [r4, #32]
 800b4ee:	429c      	cmp	r4, r3
 800b4f0:	d006      	beq.n	800b500 <std+0x48>
 800b4f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b4f6:	4294      	cmp	r4, r2
 800b4f8:	d002      	beq.n	800b500 <std+0x48>
 800b4fa:	33d0      	adds	r3, #208	; 0xd0
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	d105      	bne.n	800b50c <std+0x54>
 800b500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f000 b8ee 	b.w	800b6e8 <__retarget_lock_init_recursive>
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	bf00      	nop
 800b510:	0800d071 	.word	0x0800d071
 800b514:	0800d093 	.word	0x0800d093
 800b518:	0800d0cb 	.word	0x0800d0cb
 800b51c:	0800d0ef 	.word	0x0800d0ef
 800b520:	20003584 	.word	0x20003584

0800b524 <stdio_exit_handler>:
 800b524:	4a02      	ldr	r2, [pc, #8]	; (800b530 <stdio_exit_handler+0xc>)
 800b526:	4903      	ldr	r1, [pc, #12]	; (800b534 <stdio_exit_handler+0x10>)
 800b528:	4803      	ldr	r0, [pc, #12]	; (800b538 <stdio_exit_handler+0x14>)
 800b52a:	f000 b869 	b.w	800b600 <_fwalk_sglue>
 800b52e:	bf00      	nop
 800b530:	200000c0 	.word	0x200000c0
 800b534:	0800c911 	.word	0x0800c911
 800b538:	200000cc 	.word	0x200000cc

0800b53c <cleanup_stdio>:
 800b53c:	6841      	ldr	r1, [r0, #4]
 800b53e:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <cleanup_stdio+0x34>)
 800b540:	4299      	cmp	r1, r3
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	d001      	beq.n	800b54c <cleanup_stdio+0x10>
 800b548:	f001 f9e2 	bl	800c910 <_fflush_r>
 800b54c:	68a1      	ldr	r1, [r4, #8]
 800b54e:	4b09      	ldr	r3, [pc, #36]	; (800b574 <cleanup_stdio+0x38>)
 800b550:	4299      	cmp	r1, r3
 800b552:	d002      	beq.n	800b55a <cleanup_stdio+0x1e>
 800b554:	4620      	mov	r0, r4
 800b556:	f001 f9db 	bl	800c910 <_fflush_r>
 800b55a:	68e1      	ldr	r1, [r4, #12]
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <cleanup_stdio+0x3c>)
 800b55e:	4299      	cmp	r1, r3
 800b560:	d004      	beq.n	800b56c <cleanup_stdio+0x30>
 800b562:	4620      	mov	r0, r4
 800b564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b568:	f001 b9d2 	b.w	800c910 <_fflush_r>
 800b56c:	bd10      	pop	{r4, pc}
 800b56e:	bf00      	nop
 800b570:	20003584 	.word	0x20003584
 800b574:	200035ec 	.word	0x200035ec
 800b578:	20003654 	.word	0x20003654

0800b57c <global_stdio_init.part.0>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <global_stdio_init.part.0+0x30>)
 800b580:	4c0b      	ldr	r4, [pc, #44]	; (800b5b0 <global_stdio_init.part.0+0x34>)
 800b582:	4a0c      	ldr	r2, [pc, #48]	; (800b5b4 <global_stdio_init.part.0+0x38>)
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	4620      	mov	r0, r4
 800b588:	2200      	movs	r2, #0
 800b58a:	2104      	movs	r1, #4
 800b58c:	f7ff ff94 	bl	800b4b8 <std>
 800b590:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b594:	2201      	movs	r2, #1
 800b596:	2109      	movs	r1, #9
 800b598:	f7ff ff8e 	bl	800b4b8 <std>
 800b59c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a6:	2112      	movs	r1, #18
 800b5a8:	f7ff bf86 	b.w	800b4b8 <std>
 800b5ac:	200036bc 	.word	0x200036bc
 800b5b0:	20003584 	.word	0x20003584
 800b5b4:	0800b525 	.word	0x0800b525

0800b5b8 <__sfp_lock_acquire>:
 800b5b8:	4801      	ldr	r0, [pc, #4]	; (800b5c0 <__sfp_lock_acquire+0x8>)
 800b5ba:	f000 b896 	b.w	800b6ea <__retarget_lock_acquire_recursive>
 800b5be:	bf00      	nop
 800b5c0:	200036c1 	.word	0x200036c1

0800b5c4 <__sfp_lock_release>:
 800b5c4:	4801      	ldr	r0, [pc, #4]	; (800b5cc <__sfp_lock_release+0x8>)
 800b5c6:	f000 b891 	b.w	800b6ec <__retarget_lock_release_recursive>
 800b5ca:	bf00      	nop
 800b5cc:	200036c1 	.word	0x200036c1

0800b5d0 <__sinit>:
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	f7ff fff0 	bl	800b5b8 <__sfp_lock_acquire>
 800b5d8:	6a23      	ldr	r3, [r4, #32]
 800b5da:	b11b      	cbz	r3, 800b5e4 <__sinit+0x14>
 800b5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e0:	f7ff bff0 	b.w	800b5c4 <__sfp_lock_release>
 800b5e4:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <__sinit+0x28>)
 800b5e6:	6223      	str	r3, [r4, #32]
 800b5e8:	4b04      	ldr	r3, [pc, #16]	; (800b5fc <__sinit+0x2c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f5      	bne.n	800b5dc <__sinit+0xc>
 800b5f0:	f7ff ffc4 	bl	800b57c <global_stdio_init.part.0>
 800b5f4:	e7f2      	b.n	800b5dc <__sinit+0xc>
 800b5f6:	bf00      	nop
 800b5f8:	0800b53d 	.word	0x0800b53d
 800b5fc:	200036bc 	.word	0x200036bc

0800b600 <_fwalk_sglue>:
 800b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b604:	4607      	mov	r7, r0
 800b606:	4688      	mov	r8, r1
 800b608:	4614      	mov	r4, r2
 800b60a:	2600      	movs	r6, #0
 800b60c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b610:	f1b9 0901 	subs.w	r9, r9, #1
 800b614:	d505      	bpl.n	800b622 <_fwalk_sglue+0x22>
 800b616:	6824      	ldr	r4, [r4, #0]
 800b618:	2c00      	cmp	r4, #0
 800b61a:	d1f7      	bne.n	800b60c <_fwalk_sglue+0xc>
 800b61c:	4630      	mov	r0, r6
 800b61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d907      	bls.n	800b638 <_fwalk_sglue+0x38>
 800b628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b62c:	3301      	adds	r3, #1
 800b62e:	d003      	beq.n	800b638 <_fwalk_sglue+0x38>
 800b630:	4629      	mov	r1, r5
 800b632:	4638      	mov	r0, r7
 800b634:	47c0      	blx	r8
 800b636:	4306      	orrs	r6, r0
 800b638:	3568      	adds	r5, #104	; 0x68
 800b63a:	e7e9      	b.n	800b610 <_fwalk_sglue+0x10>

0800b63c <_vsiprintf_r>:
 800b63c:	b500      	push	{lr}
 800b63e:	b09b      	sub	sp, #108	; 0x6c
 800b640:	9100      	str	r1, [sp, #0]
 800b642:	9104      	str	r1, [sp, #16]
 800b644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b648:	9105      	str	r1, [sp, #20]
 800b64a:	9102      	str	r1, [sp, #8]
 800b64c:	4905      	ldr	r1, [pc, #20]	; (800b664 <_vsiprintf_r+0x28>)
 800b64e:	9103      	str	r1, [sp, #12]
 800b650:	4669      	mov	r1, sp
 800b652:	f000 ff31 	bl	800c4b8 <_svfiprintf_r>
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	b01b      	add	sp, #108	; 0x6c
 800b65e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b662:	bf00      	nop
 800b664:	ffff0208 	.word	0xffff0208

0800b668 <vsiprintf>:
 800b668:	4613      	mov	r3, r2
 800b66a:	460a      	mov	r2, r1
 800b66c:	4601      	mov	r1, r0
 800b66e:	4802      	ldr	r0, [pc, #8]	; (800b678 <vsiprintf+0x10>)
 800b670:	6800      	ldr	r0, [r0, #0]
 800b672:	f7ff bfe3 	b.w	800b63c <_vsiprintf_r>
 800b676:	bf00      	nop
 800b678:	20000118 	.word	0x20000118

0800b67c <memset>:
 800b67c:	4402      	add	r2, r0
 800b67e:	4603      	mov	r3, r0
 800b680:	4293      	cmp	r3, r2
 800b682:	d100      	bne.n	800b686 <memset+0xa>
 800b684:	4770      	bx	lr
 800b686:	f803 1b01 	strb.w	r1, [r3], #1
 800b68a:	e7f9      	b.n	800b680 <memset+0x4>

0800b68c <_localeconv_r>:
 800b68c:	4800      	ldr	r0, [pc, #0]	; (800b690 <_localeconv_r+0x4>)
 800b68e:	4770      	bx	lr
 800b690:	2000020c 	.word	0x2000020c

0800b694 <__errno>:
 800b694:	4b01      	ldr	r3, [pc, #4]	; (800b69c <__errno+0x8>)
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000118 	.word	0x20000118

0800b6a0 <__libc_init_array>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4d0d      	ldr	r5, [pc, #52]	; (800b6d8 <__libc_init_array+0x38>)
 800b6a4:	4c0d      	ldr	r4, [pc, #52]	; (800b6dc <__libc_init_array+0x3c>)
 800b6a6:	1b64      	subs	r4, r4, r5
 800b6a8:	10a4      	asrs	r4, r4, #2
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	42a6      	cmp	r6, r4
 800b6ae:	d109      	bne.n	800b6c4 <__libc_init_array+0x24>
 800b6b0:	4d0b      	ldr	r5, [pc, #44]	; (800b6e0 <__libc_init_array+0x40>)
 800b6b2:	4c0c      	ldr	r4, [pc, #48]	; (800b6e4 <__libc_init_array+0x44>)
 800b6b4:	f002 f920 	bl	800d8f8 <_init>
 800b6b8:	1b64      	subs	r4, r4, r5
 800b6ba:	10a4      	asrs	r4, r4, #2
 800b6bc:	2600      	movs	r6, #0
 800b6be:	42a6      	cmp	r6, r4
 800b6c0:	d105      	bne.n	800b6ce <__libc_init_array+0x2e>
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}
 800b6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c8:	4798      	blx	r3
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	e7ee      	b.n	800b6ac <__libc_init_array+0xc>
 800b6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d2:	4798      	blx	r3
 800b6d4:	3601      	adds	r6, #1
 800b6d6:	e7f2      	b.n	800b6be <__libc_init_array+0x1e>
 800b6d8:	0800e80c 	.word	0x0800e80c
 800b6dc:	0800e80c 	.word	0x0800e80c
 800b6e0:	0800e80c 	.word	0x0800e80c
 800b6e4:	0800e810 	.word	0x0800e810

0800b6e8 <__retarget_lock_init_recursive>:
 800b6e8:	4770      	bx	lr

0800b6ea <__retarget_lock_acquire_recursive>:
 800b6ea:	4770      	bx	lr

0800b6ec <__retarget_lock_release_recursive>:
 800b6ec:	4770      	bx	lr

0800b6ee <memcpy>:
 800b6ee:	440a      	add	r2, r1
 800b6f0:	4291      	cmp	r1, r2
 800b6f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b6f6:	d100      	bne.n	800b6fa <memcpy+0xc>
 800b6f8:	4770      	bx	lr
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b700:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b704:	4291      	cmp	r1, r2
 800b706:	d1f9      	bne.n	800b6fc <memcpy+0xe>
 800b708:	bd10      	pop	{r4, pc}

0800b70a <quorem>:
 800b70a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70e:	6903      	ldr	r3, [r0, #16]
 800b710:	690c      	ldr	r4, [r1, #16]
 800b712:	42a3      	cmp	r3, r4
 800b714:	4607      	mov	r7, r0
 800b716:	db7e      	blt.n	800b816 <quorem+0x10c>
 800b718:	3c01      	subs	r4, #1
 800b71a:	f101 0814 	add.w	r8, r1, #20
 800b71e:	f100 0514 	add.w	r5, r0, #20
 800b722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b72c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b730:	3301      	adds	r3, #1
 800b732:	429a      	cmp	r2, r3
 800b734:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b73c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b740:	d331      	bcc.n	800b7a6 <quorem+0x9c>
 800b742:	f04f 0e00 	mov.w	lr, #0
 800b746:	4640      	mov	r0, r8
 800b748:	46ac      	mov	ip, r5
 800b74a:	46f2      	mov	sl, lr
 800b74c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b750:	b293      	uxth	r3, r2
 800b752:	fb06 e303 	mla	r3, r6, r3, lr
 800b756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b75a:	0c1a      	lsrs	r2, r3, #16
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	ebaa 0303 	sub.w	r3, sl, r3
 800b762:	f8dc a000 	ldr.w	sl, [ip]
 800b766:	fa13 f38a 	uxtah	r3, r3, sl
 800b76a:	fb06 220e 	mla	r2, r6, lr, r2
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	9b00      	ldr	r3, [sp, #0]
 800b772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b776:	b292      	uxth	r2, r2
 800b778:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b77c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b780:	f8bd 3000 	ldrh.w	r3, [sp]
 800b784:	4581      	cmp	r9, r0
 800b786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b78a:	f84c 3b04 	str.w	r3, [ip], #4
 800b78e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b792:	d2db      	bcs.n	800b74c <quorem+0x42>
 800b794:	f855 300b 	ldr.w	r3, [r5, fp]
 800b798:	b92b      	cbnz	r3, 800b7a6 <quorem+0x9c>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	429d      	cmp	r5, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	d32c      	bcc.n	800b7fe <quorem+0xf4>
 800b7a4:	613c      	str	r4, [r7, #16]
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f001 fb62 	bl	800ce70 <__mcmp>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	db22      	blt.n	800b7f6 <quorem+0xec>
 800b7b0:	3601      	adds	r6, #1
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7ba:	f8d1 c000 	ldr.w	ip, [r1]
 800b7be:	b293      	uxth	r3, r2
 800b7c0:	1ac3      	subs	r3, r0, r3
 800b7c2:	0c12      	lsrs	r2, r2, #16
 800b7c4:	fa13 f38c 	uxtah	r3, r3, ip
 800b7c8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b7cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7d6:	45c1      	cmp	r9, r8
 800b7d8:	f841 3b04 	str.w	r3, [r1], #4
 800b7dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7e0:	d2e9      	bcs.n	800b7b6 <quorem+0xac>
 800b7e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ea:	b922      	cbnz	r2, 800b7f6 <quorem+0xec>
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	429d      	cmp	r5, r3
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	d30a      	bcc.n	800b80a <quorem+0x100>
 800b7f4:	613c      	str	r4, [r7, #16]
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	b003      	add	sp, #12
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	6812      	ldr	r2, [r2, #0]
 800b800:	3b04      	subs	r3, #4
 800b802:	2a00      	cmp	r2, #0
 800b804:	d1ce      	bne.n	800b7a4 <quorem+0x9a>
 800b806:	3c01      	subs	r4, #1
 800b808:	e7c9      	b.n	800b79e <quorem+0x94>
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	3b04      	subs	r3, #4
 800b80e:	2a00      	cmp	r2, #0
 800b810:	d1f0      	bne.n	800b7f4 <quorem+0xea>
 800b812:	3c01      	subs	r4, #1
 800b814:	e7eb      	b.n	800b7ee <quorem+0xe4>
 800b816:	2000      	movs	r0, #0
 800b818:	e7ee      	b.n	800b7f8 <quorem+0xee>
 800b81a:	0000      	movs	r0, r0
 800b81c:	0000      	movs	r0, r0
	...

0800b820 <_dtoa_r>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	ed2d 8b04 	vpush	{d8-d9}
 800b828:	69c5      	ldr	r5, [r0, #28]
 800b82a:	b093      	sub	sp, #76	; 0x4c
 800b82c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b830:	ec57 6b10 	vmov	r6, r7, d0
 800b834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b838:	9107      	str	r1, [sp, #28]
 800b83a:	4604      	mov	r4, r0
 800b83c:	920a      	str	r2, [sp, #40]	; 0x28
 800b83e:	930d      	str	r3, [sp, #52]	; 0x34
 800b840:	b975      	cbnz	r5, 800b860 <_dtoa_r+0x40>
 800b842:	2010      	movs	r0, #16
 800b844:	f000 ff36 	bl	800c6b4 <malloc>
 800b848:	4602      	mov	r2, r0
 800b84a:	61e0      	str	r0, [r4, #28]
 800b84c:	b920      	cbnz	r0, 800b858 <_dtoa_r+0x38>
 800b84e:	4bae      	ldr	r3, [pc, #696]	; (800bb08 <_dtoa_r+0x2e8>)
 800b850:	21ef      	movs	r1, #239	; 0xef
 800b852:	48ae      	ldr	r0, [pc, #696]	; (800bb0c <_dtoa_r+0x2ec>)
 800b854:	f001 fcee 	bl	800d234 <__assert_func>
 800b858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b85c:	6005      	str	r5, [r0, #0]
 800b85e:	60c5      	str	r5, [r0, #12]
 800b860:	69e3      	ldr	r3, [r4, #28]
 800b862:	6819      	ldr	r1, [r3, #0]
 800b864:	b151      	cbz	r1, 800b87c <_dtoa_r+0x5c>
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	604a      	str	r2, [r1, #4]
 800b86a:	2301      	movs	r3, #1
 800b86c:	4093      	lsls	r3, r2
 800b86e:	608b      	str	r3, [r1, #8]
 800b870:	4620      	mov	r0, r4
 800b872:	f001 f8c1 	bl	800c9f8 <_Bfree>
 800b876:	69e3      	ldr	r3, [r4, #28]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	1e3b      	subs	r3, r7, #0
 800b87e:	bfbb      	ittet	lt
 800b880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b884:	9303      	strlt	r3, [sp, #12]
 800b886:	2300      	movge	r3, #0
 800b888:	2201      	movlt	r2, #1
 800b88a:	bfac      	ite	ge
 800b88c:	f8c8 3000 	strge.w	r3, [r8]
 800b890:	f8c8 2000 	strlt.w	r2, [r8]
 800b894:	4b9e      	ldr	r3, [pc, #632]	; (800bb10 <_dtoa_r+0x2f0>)
 800b896:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b89a:	ea33 0308 	bics.w	r3, r3, r8
 800b89e:	d11b      	bne.n	800b8d8 <_dtoa_r+0xb8>
 800b8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b8ac:	4333      	orrs	r3, r6
 800b8ae:	f000 8593 	beq.w	800c3d8 <_dtoa_r+0xbb8>
 800b8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8b4:	b963      	cbnz	r3, 800b8d0 <_dtoa_r+0xb0>
 800b8b6:	4b97      	ldr	r3, [pc, #604]	; (800bb14 <_dtoa_r+0x2f4>)
 800b8b8:	e027      	b.n	800b90a <_dtoa_r+0xea>
 800b8ba:	4b97      	ldr	r3, [pc, #604]	; (800bb18 <_dtoa_r+0x2f8>)
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	9800      	ldr	r0, [sp, #0]
 800b8c6:	b013      	add	sp, #76	; 0x4c
 800b8c8:	ecbd 8b04 	vpop	{d8-d9}
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	4b90      	ldr	r3, [pc, #576]	; (800bb14 <_dtoa_r+0x2f4>)
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	3303      	adds	r3, #3
 800b8d6:	e7f3      	b.n	800b8c0 <_dtoa_r+0xa0>
 800b8d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	ec51 0b17 	vmov	r0, r1, d7
 800b8e2:	eeb0 8a47 	vmov.f32	s16, s14
 800b8e6:	eef0 8a67 	vmov.f32	s17, s15
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f7f5 f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8f0:	4681      	mov	r9, r0
 800b8f2:	b160      	cbz	r0, 800b90e <_dtoa_r+0xee>
 800b8f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8568 	beq.w	800c3d2 <_dtoa_r+0xbb2>
 800b902:	4b86      	ldr	r3, [pc, #536]	; (800bb1c <_dtoa_r+0x2fc>)
 800b904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	3b01      	subs	r3, #1
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	e7da      	b.n	800b8c4 <_dtoa_r+0xa4>
 800b90e:	aa10      	add	r2, sp, #64	; 0x40
 800b910:	a911      	add	r1, sp, #68	; 0x44
 800b912:	4620      	mov	r0, r4
 800b914:	eeb0 0a48 	vmov.f32	s0, s16
 800b918:	eef0 0a68 	vmov.f32	s1, s17
 800b91c:	f001 fb4e 	bl	800cfbc <__d2b>
 800b920:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b924:	4682      	mov	sl, r0
 800b926:	2d00      	cmp	r5, #0
 800b928:	d07f      	beq.n	800ba2a <_dtoa_r+0x20a>
 800b92a:	ee18 3a90 	vmov	r3, s17
 800b92e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b932:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b936:	ec51 0b18 	vmov	r0, r1, d8
 800b93a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b93e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b942:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b946:	4619      	mov	r1, r3
 800b948:	2200      	movs	r2, #0
 800b94a:	4b75      	ldr	r3, [pc, #468]	; (800bb20 <_dtoa_r+0x300>)
 800b94c:	f7f4 fca4 	bl	8000298 <__aeabi_dsub>
 800b950:	a367      	add	r3, pc, #412	; (adr r3, 800baf0 <_dtoa_r+0x2d0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fe57 	bl	8000608 <__aeabi_dmul>
 800b95a:	a367      	add	r3, pc, #412	; (adr r3, 800baf8 <_dtoa_r+0x2d8>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f7f4 fc9c 	bl	800029c <__adddf3>
 800b964:	4606      	mov	r6, r0
 800b966:	4628      	mov	r0, r5
 800b968:	460f      	mov	r7, r1
 800b96a:	f7f4 fde3 	bl	8000534 <__aeabi_i2d>
 800b96e:	a364      	add	r3, pc, #400	; (adr r3, 800bb00 <_dtoa_r+0x2e0>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f7f4 fe48 	bl	8000608 <__aeabi_dmul>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4630      	mov	r0, r6
 800b97e:	4639      	mov	r1, r7
 800b980:	f7f4 fc8c 	bl	800029c <__adddf3>
 800b984:	4606      	mov	r6, r0
 800b986:	460f      	mov	r7, r1
 800b988:	f7f5 f8ee 	bl	8000b68 <__aeabi_d2iz>
 800b98c:	2200      	movs	r2, #0
 800b98e:	4683      	mov	fp, r0
 800b990:	2300      	movs	r3, #0
 800b992:	4630      	mov	r0, r6
 800b994:	4639      	mov	r1, r7
 800b996:	f7f5 f8a9 	bl	8000aec <__aeabi_dcmplt>
 800b99a:	b148      	cbz	r0, 800b9b0 <_dtoa_r+0x190>
 800b99c:	4658      	mov	r0, fp
 800b99e:	f7f4 fdc9 	bl	8000534 <__aeabi_i2d>
 800b9a2:	4632      	mov	r2, r6
 800b9a4:	463b      	mov	r3, r7
 800b9a6:	f7f5 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9aa:	b908      	cbnz	r0, 800b9b0 <_dtoa_r+0x190>
 800b9ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b9b0:	f1bb 0f16 	cmp.w	fp, #22
 800b9b4:	d857      	bhi.n	800ba66 <_dtoa_r+0x246>
 800b9b6:	4b5b      	ldr	r3, [pc, #364]	; (800bb24 <_dtoa_r+0x304>)
 800b9b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	ec51 0b18 	vmov	r0, r1, d8
 800b9c4:	f7f5 f892 	bl	8000aec <__aeabi_dcmplt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d04e      	beq.n	800ba6a <_dtoa_r+0x24a>
 800b9cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9d6:	1b5b      	subs	r3, r3, r5
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	bf45      	ittet	mi
 800b9dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9e0:	9305      	strmi	r3, [sp, #20]
 800b9e2:	2300      	movpl	r3, #0
 800b9e4:	2300      	movmi	r3, #0
 800b9e6:	9206      	str	r2, [sp, #24]
 800b9e8:	bf54      	ite	pl
 800b9ea:	9305      	strpl	r3, [sp, #20]
 800b9ec:	9306      	strmi	r3, [sp, #24]
 800b9ee:	f1bb 0f00 	cmp.w	fp, #0
 800b9f2:	db3c      	blt.n	800ba6e <_dtoa_r+0x24e>
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9fa:	445b      	add	r3, fp
 800b9fc:	9306      	str	r3, [sp, #24]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9308      	str	r3, [sp, #32]
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	d868      	bhi.n	800bada <_dtoa_r+0x2ba>
 800ba08:	2b05      	cmp	r3, #5
 800ba0a:	bfc4      	itt	gt
 800ba0c:	3b04      	subgt	r3, #4
 800ba0e:	9307      	strgt	r3, [sp, #28]
 800ba10:	9b07      	ldr	r3, [sp, #28]
 800ba12:	f1a3 0302 	sub.w	r3, r3, #2
 800ba16:	bfcc      	ite	gt
 800ba18:	2500      	movgt	r5, #0
 800ba1a:	2501      	movle	r5, #1
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	f200 8085 	bhi.w	800bb2c <_dtoa_r+0x30c>
 800ba22:	e8df f003 	tbb	[pc, r3]
 800ba26:	3b2e      	.short	0x3b2e
 800ba28:	5839      	.short	0x5839
 800ba2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba2e:	441d      	add	r5, r3
 800ba30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	bfc1      	itttt	gt
 800ba38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba3c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ba44:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ba48:	bfd6      	itet	le
 800ba4a:	f1c3 0320 	rsble	r3, r3, #32
 800ba4e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba52:	fa06 f003 	lslle.w	r0, r6, r3
 800ba56:	f7f4 fd5d 	bl	8000514 <__aeabi_ui2d>
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ba60:	3d01      	subs	r5, #1
 800ba62:	920e      	str	r2, [sp, #56]	; 0x38
 800ba64:	e76f      	b.n	800b946 <_dtoa_r+0x126>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7b3      	b.n	800b9d2 <_dtoa_r+0x1b2>
 800ba6a:	900c      	str	r0, [sp, #48]	; 0x30
 800ba6c:	e7b2      	b.n	800b9d4 <_dtoa_r+0x1b4>
 800ba6e:	9b05      	ldr	r3, [sp, #20]
 800ba70:	eba3 030b 	sub.w	r3, r3, fp
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	f1cb 0300 	rsb	r3, fp, #0
 800ba7a:	9308      	str	r3, [sp, #32]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba80:	e7bf      	b.n	800ba02 <_dtoa_r+0x1e2>
 800ba82:	2300      	movs	r3, #0
 800ba84:	9309      	str	r3, [sp, #36]	; 0x24
 800ba86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	dc52      	bgt.n	800bb32 <_dtoa_r+0x312>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	9304      	str	r3, [sp, #16]
 800ba92:	461a      	mov	r2, r3
 800ba94:	920a      	str	r2, [sp, #40]	; 0x28
 800ba96:	e00b      	b.n	800bab0 <_dtoa_r+0x290>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7f3      	b.n	800ba84 <_dtoa_r+0x264>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9309      	str	r3, [sp, #36]	; 0x24
 800baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa2:	445b      	add	r3, fp
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	3301      	adds	r3, #1
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	bfb8      	it	lt
 800baae:	2301      	movlt	r3, #1
 800bab0:	69e0      	ldr	r0, [r4, #28]
 800bab2:	2100      	movs	r1, #0
 800bab4:	2204      	movs	r2, #4
 800bab6:	f102 0614 	add.w	r6, r2, #20
 800baba:	429e      	cmp	r6, r3
 800babc:	d93d      	bls.n	800bb3a <_dtoa_r+0x31a>
 800babe:	6041      	str	r1, [r0, #4]
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 ff59 	bl	800c978 <_Balloc>
 800bac6:	9000      	str	r0, [sp, #0]
 800bac8:	2800      	cmp	r0, #0
 800baca:	d139      	bne.n	800bb40 <_dtoa_r+0x320>
 800bacc:	4b16      	ldr	r3, [pc, #88]	; (800bb28 <_dtoa_r+0x308>)
 800bace:	4602      	mov	r2, r0
 800bad0:	f240 11af 	movw	r1, #431	; 0x1af
 800bad4:	e6bd      	b.n	800b852 <_dtoa_r+0x32>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e7e1      	b.n	800ba9e <_dtoa_r+0x27e>
 800bada:	2501      	movs	r5, #1
 800badc:	2300      	movs	r3, #0
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	9509      	str	r5, [sp, #36]	; 0x24
 800bae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	2200      	movs	r2, #0
 800baec:	2312      	movs	r3, #18
 800baee:	e7d1      	b.n	800ba94 <_dtoa_r+0x274>
 800baf0:	636f4361 	.word	0x636f4361
 800baf4:	3fd287a7 	.word	0x3fd287a7
 800baf8:	8b60c8b3 	.word	0x8b60c8b3
 800bafc:	3fc68a28 	.word	0x3fc68a28
 800bb00:	509f79fb 	.word	0x509f79fb
 800bb04:	3fd34413 	.word	0x3fd34413
 800bb08:	0800e4d5 	.word	0x0800e4d5
 800bb0c:	0800e4ec 	.word	0x0800e4ec
 800bb10:	7ff00000 	.word	0x7ff00000
 800bb14:	0800e4d1 	.word	0x0800e4d1
 800bb18:	0800e4c8 	.word	0x0800e4c8
 800bb1c:	0800e4a5 	.word	0x0800e4a5
 800bb20:	3ff80000 	.word	0x3ff80000
 800bb24:	0800e5e8 	.word	0x0800e5e8
 800bb28:	0800e544 	.word	0x0800e544
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb30:	e7d7      	b.n	800bae2 <_dtoa_r+0x2c2>
 800bb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	e7ba      	b.n	800bab0 <_dtoa_r+0x290>
 800bb3a:	3101      	adds	r1, #1
 800bb3c:	0052      	lsls	r2, r2, #1
 800bb3e:	e7ba      	b.n	800bab6 <_dtoa_r+0x296>
 800bb40:	69e3      	ldr	r3, [r4, #28]
 800bb42:	9a00      	ldr	r2, [sp, #0]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	2b0e      	cmp	r3, #14
 800bb4a:	f200 80a8 	bhi.w	800bc9e <_dtoa_r+0x47e>
 800bb4e:	2d00      	cmp	r5, #0
 800bb50:	f000 80a5 	beq.w	800bc9e <_dtoa_r+0x47e>
 800bb54:	f1bb 0f00 	cmp.w	fp, #0
 800bb58:	dd38      	ble.n	800bbcc <_dtoa_r+0x3ac>
 800bb5a:	4bc0      	ldr	r3, [pc, #768]	; (800be5c <_dtoa_r+0x63c>)
 800bb5c:	f00b 020f 	and.w	r2, fp, #15
 800bb60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb68:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb70:	d019      	beq.n	800bba6 <_dtoa_r+0x386>
 800bb72:	4bbb      	ldr	r3, [pc, #748]	; (800be60 <_dtoa_r+0x640>)
 800bb74:	ec51 0b18 	vmov	r0, r1, d8
 800bb78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb7c:	f7f4 fe6e 	bl	800085c <__aeabi_ddiv>
 800bb80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb84:	f008 080f 	and.w	r8, r8, #15
 800bb88:	2503      	movs	r5, #3
 800bb8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800be60 <_dtoa_r+0x640>
 800bb8e:	f1b8 0f00 	cmp.w	r8, #0
 800bb92:	d10a      	bne.n	800bbaa <_dtoa_r+0x38a>
 800bb94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb98:	4632      	mov	r2, r6
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	f7f4 fe5e 	bl	800085c <__aeabi_ddiv>
 800bba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bba4:	e02b      	b.n	800bbfe <_dtoa_r+0x3de>
 800bba6:	2502      	movs	r5, #2
 800bba8:	e7ef      	b.n	800bb8a <_dtoa_r+0x36a>
 800bbaa:	f018 0f01 	tst.w	r8, #1
 800bbae:	d008      	beq.n	800bbc2 <_dtoa_r+0x3a2>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bbb8:	f7f4 fd26 	bl	8000608 <__aeabi_dmul>
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bbc6:	f109 0908 	add.w	r9, r9, #8
 800bbca:	e7e0      	b.n	800bb8e <_dtoa_r+0x36e>
 800bbcc:	f000 809f 	beq.w	800bd0e <_dtoa_r+0x4ee>
 800bbd0:	f1cb 0600 	rsb	r6, fp, #0
 800bbd4:	4ba1      	ldr	r3, [pc, #644]	; (800be5c <_dtoa_r+0x63c>)
 800bbd6:	4fa2      	ldr	r7, [pc, #648]	; (800be60 <_dtoa_r+0x640>)
 800bbd8:	f006 020f 	and.w	r2, r6, #15
 800bbdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	ec51 0b18 	vmov	r0, r1, d8
 800bbe8:	f7f4 fd0e 	bl	8000608 <__aeabi_dmul>
 800bbec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf0:	1136      	asrs	r6, r6, #4
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2502      	movs	r5, #2
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	d17e      	bne.n	800bcf8 <_dtoa_r+0x4d8>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1d0      	bne.n	800bba0 <_dtoa_r+0x380>
 800bbfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 8084 	beq.w	800bd12 <_dtoa_r+0x4f2>
 800bc0a:	4b96      	ldr	r3, [pc, #600]	; (800be64 <_dtoa_r+0x644>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4649      	mov	r1, r9
 800bc12:	f7f4 ff6b 	bl	8000aec <__aeabi_dcmplt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d07b      	beq.n	800bd12 <_dtoa_r+0x4f2>
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d078      	beq.n	800bd12 <_dtoa_r+0x4f2>
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dd39      	ble.n	800bc9a <_dtoa_r+0x47a>
 800bc26:	4b90      	ldr	r3, [pc, #576]	; (800be68 <_dtoa_r+0x648>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fceb 	bl	8000608 <__aeabi_dmul>
 800bc32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc36:	9e01      	ldr	r6, [sp, #4]
 800bc38:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7f4 fc76 	bl	8000534 <__aeabi_i2d>
 800bc48:	4642      	mov	r2, r8
 800bc4a:	464b      	mov	r3, r9
 800bc4c:	f7f4 fcdc 	bl	8000608 <__aeabi_dmul>
 800bc50:	4b86      	ldr	r3, [pc, #536]	; (800be6c <_dtoa_r+0x64c>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	f7f4 fb22 	bl	800029c <__adddf3>
 800bc58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d158      	bne.n	800bd18 <_dtoa_r+0x4f8>
 800bc66:	4b82      	ldr	r3, [pc, #520]	; (800be70 <_dtoa_r+0x650>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	f7f4 fb13 	bl	8000298 <__aeabi_dsub>
 800bc72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc76:	4680      	mov	r8, r0
 800bc78:	4689      	mov	r9, r1
 800bc7a:	f7f4 ff55 	bl	8000b28 <__aeabi_dcmpgt>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f040 8296 	bne.w	800c1b0 <_dtoa_r+0x990>
 800bc84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 ff2c 	bl	8000aec <__aeabi_dcmplt>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f040 8289 	bne.w	800c1ac <_dtoa_r+0x98c>
 800bc9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f2c0 814e 	blt.w	800bf42 <_dtoa_r+0x722>
 800bca6:	f1bb 0f0e 	cmp.w	fp, #14
 800bcaa:	f300 814a 	bgt.w	800bf42 <_dtoa_r+0x722>
 800bcae:	4b6b      	ldr	r3, [pc, #428]	; (800be5c <_dtoa_r+0x63c>)
 800bcb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f280 80dc 	bge.w	800be78 <_dtoa_r+0x658>
 800bcc0:	9b04      	ldr	r3, [sp, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f300 80d8 	bgt.w	800be78 <_dtoa_r+0x658>
 800bcc8:	f040 826f 	bne.w	800c1aa <_dtoa_r+0x98a>
 800bccc:	4b68      	ldr	r3, [pc, #416]	; (800be70 <_dtoa_r+0x650>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcdc:	f7f4 ff1a 	bl	8000b14 <__aeabi_dcmpge>
 800bce0:	9e04      	ldr	r6, [sp, #16]
 800bce2:	4637      	mov	r7, r6
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f040 8245 	bne.w	800c174 <_dtoa_r+0x954>
 800bcea:	9d00      	ldr	r5, [sp, #0]
 800bcec:	2331      	movs	r3, #49	; 0x31
 800bcee:	f805 3b01 	strb.w	r3, [r5], #1
 800bcf2:	f10b 0b01 	add.w	fp, fp, #1
 800bcf6:	e241      	b.n	800c17c <_dtoa_r+0x95c>
 800bcf8:	07f2      	lsls	r2, r6, #31
 800bcfa:	d505      	bpl.n	800bd08 <_dtoa_r+0x4e8>
 800bcfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd00:	f7f4 fc82 	bl	8000608 <__aeabi_dmul>
 800bd04:	3501      	adds	r5, #1
 800bd06:	2301      	movs	r3, #1
 800bd08:	1076      	asrs	r6, r6, #1
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	e773      	b.n	800bbf6 <_dtoa_r+0x3d6>
 800bd0e:	2502      	movs	r5, #2
 800bd10:	e775      	b.n	800bbfe <_dtoa_r+0x3de>
 800bd12:	9e04      	ldr	r6, [sp, #16]
 800bd14:	465f      	mov	r7, fp
 800bd16:	e792      	b.n	800bc3e <_dtoa_r+0x41e>
 800bd18:	9900      	ldr	r1, [sp, #0]
 800bd1a:	4b50      	ldr	r3, [pc, #320]	; (800be5c <_dtoa_r+0x63c>)
 800bd1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd20:	4431      	add	r1, r6
 800bd22:	9102      	str	r1, [sp, #8]
 800bd24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd26:	eeb0 9a47 	vmov.f32	s18, s14
 800bd2a:	eef0 9a67 	vmov.f32	s19, s15
 800bd2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d044      	beq.n	800bdc4 <_dtoa_r+0x5a4>
 800bd3a:	494e      	ldr	r1, [pc, #312]	; (800be74 <_dtoa_r+0x654>)
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7f4 fd8d 	bl	800085c <__aeabi_ddiv>
 800bd42:	ec53 2b19 	vmov	r2, r3, d9
 800bd46:	f7f4 faa7 	bl	8000298 <__aeabi_dsub>
 800bd4a:	9d00      	ldr	r5, [sp, #0]
 800bd4c:	ec41 0b19 	vmov	d9, r0, r1
 800bd50:	4649      	mov	r1, r9
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7f4 ff08 	bl	8000b68 <__aeabi_d2iz>
 800bd58:	4606      	mov	r6, r0
 800bd5a:	f7f4 fbeb 	bl	8000534 <__aeabi_i2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	f7f4 fa97 	bl	8000298 <__aeabi_dsub>
 800bd6a:	3630      	adds	r6, #48	; 0x30
 800bd6c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd70:	ec53 2b19 	vmov	r2, r3, d9
 800bd74:	4680      	mov	r8, r0
 800bd76:	4689      	mov	r9, r1
 800bd78:	f7f4 feb8 	bl	8000aec <__aeabi_dcmplt>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d164      	bne.n	800be4a <_dtoa_r+0x62a>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	4937      	ldr	r1, [pc, #220]	; (800be64 <_dtoa_r+0x644>)
 800bd86:	2000      	movs	r0, #0
 800bd88:	f7f4 fa86 	bl	8000298 <__aeabi_dsub>
 800bd8c:	ec53 2b19 	vmov	r2, r3, d9
 800bd90:	f7f4 feac 	bl	8000aec <__aeabi_dcmplt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	f040 80b6 	bne.w	800bf06 <_dtoa_r+0x6e6>
 800bd9a:	9b02      	ldr	r3, [sp, #8]
 800bd9c:	429d      	cmp	r5, r3
 800bd9e:	f43f af7c 	beq.w	800bc9a <_dtoa_r+0x47a>
 800bda2:	4b31      	ldr	r3, [pc, #196]	; (800be68 <_dtoa_r+0x648>)
 800bda4:	ec51 0b19 	vmov	r0, r1, d9
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f7f4 fc2d 	bl	8000608 <__aeabi_dmul>
 800bdae:	4b2e      	ldr	r3, [pc, #184]	; (800be68 <_dtoa_r+0x648>)
 800bdb0:	ec41 0b19 	vmov	d9, r0, r1
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7f4 fc25 	bl	8000608 <__aeabi_dmul>
 800bdbe:	4680      	mov	r8, r0
 800bdc0:	4689      	mov	r9, r1
 800bdc2:	e7c5      	b.n	800bd50 <_dtoa_r+0x530>
 800bdc4:	ec51 0b17 	vmov	r0, r1, d7
 800bdc8:	f7f4 fc1e 	bl	8000608 <__aeabi_dmul>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	9d00      	ldr	r5, [sp, #0]
 800bdd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdd2:	ec41 0b19 	vmov	d9, r0, r1
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	f7f4 fec5 	bl	8000b68 <__aeabi_d2iz>
 800bdde:	4606      	mov	r6, r0
 800bde0:	f7f4 fba8 	bl	8000534 <__aeabi_i2d>
 800bde4:	3630      	adds	r6, #48	; 0x30
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	4640      	mov	r0, r8
 800bdec:	4649      	mov	r1, r9
 800bdee:	f7f4 fa53 	bl	8000298 <__aeabi_dsub>
 800bdf2:	f805 6b01 	strb.w	r6, [r5], #1
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	429d      	cmp	r5, r3
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	4689      	mov	r9, r1
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	d124      	bne.n	800be4e <_dtoa_r+0x62e>
 800be04:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <_dtoa_r+0x654>)
 800be06:	ec51 0b19 	vmov	r0, r1, d9
 800be0a:	f7f4 fa47 	bl	800029c <__adddf3>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4640      	mov	r0, r8
 800be14:	4649      	mov	r1, r9
 800be16:	f7f4 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d173      	bne.n	800bf06 <_dtoa_r+0x6e6>
 800be1e:	ec53 2b19 	vmov	r2, r3, d9
 800be22:	4914      	ldr	r1, [pc, #80]	; (800be74 <_dtoa_r+0x654>)
 800be24:	2000      	movs	r0, #0
 800be26:	f7f4 fa37 	bl	8000298 <__aeabi_dsub>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	f7f4 fe5b 	bl	8000aec <__aeabi_dcmplt>
 800be36:	2800      	cmp	r0, #0
 800be38:	f43f af2f 	beq.w	800bc9a <_dtoa_r+0x47a>
 800be3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be3e:	1e6b      	subs	r3, r5, #1
 800be40:	930f      	str	r3, [sp, #60]	; 0x3c
 800be42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be46:	2b30      	cmp	r3, #48	; 0x30
 800be48:	d0f8      	beq.n	800be3c <_dtoa_r+0x61c>
 800be4a:	46bb      	mov	fp, r7
 800be4c:	e04a      	b.n	800bee4 <_dtoa_r+0x6c4>
 800be4e:	4b06      	ldr	r3, [pc, #24]	; (800be68 <_dtoa_r+0x648>)
 800be50:	f7f4 fbda 	bl	8000608 <__aeabi_dmul>
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	e7bd      	b.n	800bdd6 <_dtoa_r+0x5b6>
 800be5a:	bf00      	nop
 800be5c:	0800e5e8 	.word	0x0800e5e8
 800be60:	0800e5c0 	.word	0x0800e5c0
 800be64:	3ff00000 	.word	0x3ff00000
 800be68:	40240000 	.word	0x40240000
 800be6c:	401c0000 	.word	0x401c0000
 800be70:	40140000 	.word	0x40140000
 800be74:	3fe00000 	.word	0x3fe00000
 800be78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be7c:	9d00      	ldr	r5, [sp, #0]
 800be7e:	4642      	mov	r2, r8
 800be80:	464b      	mov	r3, r9
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 fce9 	bl	800085c <__aeabi_ddiv>
 800be8a:	f7f4 fe6d 	bl	8000b68 <__aeabi_d2iz>
 800be8e:	9001      	str	r0, [sp, #4]
 800be90:	f7f4 fb50 	bl	8000534 <__aeabi_i2d>
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	f7f4 fbb6 	bl	8000608 <__aeabi_dmul>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4630      	mov	r0, r6
 800bea2:	4639      	mov	r1, r7
 800bea4:	f7f4 f9f8 	bl	8000298 <__aeabi_dsub>
 800bea8:	9e01      	ldr	r6, [sp, #4]
 800beaa:	9f04      	ldr	r7, [sp, #16]
 800beac:	3630      	adds	r6, #48	; 0x30
 800beae:	f805 6b01 	strb.w	r6, [r5], #1
 800beb2:	9e00      	ldr	r6, [sp, #0]
 800beb4:	1bae      	subs	r6, r5, r6
 800beb6:	42b7      	cmp	r7, r6
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	d134      	bne.n	800bf28 <_dtoa_r+0x708>
 800bebe:	f7f4 f9ed 	bl	800029c <__adddf3>
 800bec2:	4642      	mov	r2, r8
 800bec4:	464b      	mov	r3, r9
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	f7f4 fe2d 	bl	8000b28 <__aeabi_dcmpgt>
 800bece:	b9c8      	cbnz	r0, 800bf04 <_dtoa_r+0x6e4>
 800bed0:	4642      	mov	r2, r8
 800bed2:	464b      	mov	r3, r9
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 800bedc:	b110      	cbz	r0, 800bee4 <_dtoa_r+0x6c4>
 800bede:	9b01      	ldr	r3, [sp, #4]
 800bee0:	07db      	lsls	r3, r3, #31
 800bee2:	d40f      	bmi.n	800bf04 <_dtoa_r+0x6e4>
 800bee4:	4651      	mov	r1, sl
 800bee6:	4620      	mov	r0, r4
 800bee8:	f000 fd86 	bl	800c9f8 <_Bfree>
 800beec:	2300      	movs	r3, #0
 800beee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bef0:	702b      	strb	r3, [r5, #0]
 800bef2:	f10b 0301 	add.w	r3, fp, #1
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800befa:	2b00      	cmp	r3, #0
 800befc:	f43f ace2 	beq.w	800b8c4 <_dtoa_r+0xa4>
 800bf00:	601d      	str	r5, [r3, #0]
 800bf02:	e4df      	b.n	800b8c4 <_dtoa_r+0xa4>
 800bf04:	465f      	mov	r7, fp
 800bf06:	462b      	mov	r3, r5
 800bf08:	461d      	mov	r5, r3
 800bf0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf0e:	2a39      	cmp	r2, #57	; 0x39
 800bf10:	d106      	bne.n	800bf20 <_dtoa_r+0x700>
 800bf12:	9a00      	ldr	r2, [sp, #0]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d1f7      	bne.n	800bf08 <_dtoa_r+0x6e8>
 800bf18:	9900      	ldr	r1, [sp, #0]
 800bf1a:	2230      	movs	r2, #48	; 0x30
 800bf1c:	3701      	adds	r7, #1
 800bf1e:	700a      	strb	r2, [r1, #0]
 800bf20:	781a      	ldrb	r2, [r3, #0]
 800bf22:	3201      	adds	r2, #1
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e790      	b.n	800be4a <_dtoa_r+0x62a>
 800bf28:	4ba3      	ldr	r3, [pc, #652]	; (800c1b8 <_dtoa_r+0x998>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f7f4 fb6c 	bl	8000608 <__aeabi_dmul>
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	4606      	mov	r6, r0
 800bf36:	460f      	mov	r7, r1
 800bf38:	f7f4 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d09e      	beq.n	800be7e <_dtoa_r+0x65e>
 800bf40:	e7d0      	b.n	800bee4 <_dtoa_r+0x6c4>
 800bf42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	f000 80ca 	beq.w	800c0de <_dtoa_r+0x8be>
 800bf4a:	9a07      	ldr	r2, [sp, #28]
 800bf4c:	2a01      	cmp	r2, #1
 800bf4e:	f300 80ad 	bgt.w	800c0ac <_dtoa_r+0x88c>
 800bf52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf54:	2a00      	cmp	r2, #0
 800bf56:	f000 80a5 	beq.w	800c0a4 <_dtoa_r+0x884>
 800bf5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf5e:	9e08      	ldr	r6, [sp, #32]
 800bf60:	9d05      	ldr	r5, [sp, #20]
 800bf62:	9a05      	ldr	r2, [sp, #20]
 800bf64:	441a      	add	r2, r3
 800bf66:	9205      	str	r2, [sp, #20]
 800bf68:	9a06      	ldr	r2, [sp, #24]
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	441a      	add	r2, r3
 800bf6e:	4620      	mov	r0, r4
 800bf70:	9206      	str	r2, [sp, #24]
 800bf72:	f000 fdf7 	bl	800cb64 <__i2b>
 800bf76:	4607      	mov	r7, r0
 800bf78:	b165      	cbz	r5, 800bf94 <_dtoa_r+0x774>
 800bf7a:	9b06      	ldr	r3, [sp, #24]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd09      	ble.n	800bf94 <_dtoa_r+0x774>
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	9a05      	ldr	r2, [sp, #20]
 800bf84:	bfa8      	it	ge
 800bf86:	462b      	movge	r3, r5
 800bf88:	1ad2      	subs	r2, r2, r3
 800bf8a:	9205      	str	r2, [sp, #20]
 800bf8c:	9a06      	ldr	r2, [sp, #24]
 800bf8e:	1aed      	subs	r5, r5, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	9306      	str	r3, [sp, #24]
 800bf94:	9b08      	ldr	r3, [sp, #32]
 800bf96:	b1f3      	cbz	r3, 800bfd6 <_dtoa_r+0x7b6>
 800bf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 80a3 	beq.w	800c0e6 <_dtoa_r+0x8c6>
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	dd10      	ble.n	800bfc6 <_dtoa_r+0x7a6>
 800bfa4:	4639      	mov	r1, r7
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fe9b 	bl	800cce4 <__pow5mult>
 800bfae:	4652      	mov	r2, sl
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4607      	mov	r7, r0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fdeb 	bl	800cb90 <__multiply>
 800bfba:	4651      	mov	r1, sl
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 fd1a 	bl	800c9f8 <_Bfree>
 800bfc4:	46c2      	mov	sl, r8
 800bfc6:	9b08      	ldr	r3, [sp, #32]
 800bfc8:	1b9a      	subs	r2, r3, r6
 800bfca:	d004      	beq.n	800bfd6 <_dtoa_r+0x7b6>
 800bfcc:	4651      	mov	r1, sl
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 fe88 	bl	800cce4 <__pow5mult>
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 fdc3 	bl	800cb64 <__i2b>
 800bfde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	f340 8081 	ble.w	800c0ea <_dtoa_r+0x8ca>
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4601      	mov	r1, r0
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 fe79 	bl	800cce4 <__pow5mult>
 800bff2:	9b07      	ldr	r3, [sp, #28]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	4606      	mov	r6, r0
 800bff8:	dd7a      	ble.n	800c0f0 <_dtoa_r+0x8d0>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	6933      	ldr	r3, [r6, #16]
 800c000:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c004:	6918      	ldr	r0, [r3, #16]
 800c006:	f000 fd5f 	bl	800cac8 <__hi0bits>
 800c00a:	f1c0 0020 	rsb	r0, r0, #32
 800c00e:	9b06      	ldr	r3, [sp, #24]
 800c010:	4418      	add	r0, r3
 800c012:	f010 001f 	ands.w	r0, r0, #31
 800c016:	f000 8094 	beq.w	800c142 <_dtoa_r+0x922>
 800c01a:	f1c0 0320 	rsb	r3, r0, #32
 800c01e:	2b04      	cmp	r3, #4
 800c020:	f340 8085 	ble.w	800c12e <_dtoa_r+0x90e>
 800c024:	9b05      	ldr	r3, [sp, #20]
 800c026:	f1c0 001c 	rsb	r0, r0, #28
 800c02a:	4403      	add	r3, r0
 800c02c:	9305      	str	r3, [sp, #20]
 800c02e:	9b06      	ldr	r3, [sp, #24]
 800c030:	4403      	add	r3, r0
 800c032:	4405      	add	r5, r0
 800c034:	9306      	str	r3, [sp, #24]
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dd05      	ble.n	800c048 <_dtoa_r+0x828>
 800c03c:	4651      	mov	r1, sl
 800c03e:	461a      	mov	r2, r3
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fea9 	bl	800cd98 <__lshift>
 800c046:	4682      	mov	sl, r0
 800c048:	9b06      	ldr	r3, [sp, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd05      	ble.n	800c05a <_dtoa_r+0x83a>
 800c04e:	4631      	mov	r1, r6
 800c050:	461a      	mov	r2, r3
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fea0 	bl	800cd98 <__lshift>
 800c058:	4606      	mov	r6, r0
 800c05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d072      	beq.n	800c146 <_dtoa_r+0x926>
 800c060:	4631      	mov	r1, r6
 800c062:	4650      	mov	r0, sl
 800c064:	f000 ff04 	bl	800ce70 <__mcmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	da6c      	bge.n	800c146 <_dtoa_r+0x926>
 800c06c:	2300      	movs	r3, #0
 800c06e:	4651      	mov	r1, sl
 800c070:	220a      	movs	r2, #10
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fce2 	bl	800ca3c <__multadd>
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c07e:	4682      	mov	sl, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 81b0 	beq.w	800c3e6 <_dtoa_r+0xbc6>
 800c086:	2300      	movs	r3, #0
 800c088:	4639      	mov	r1, r7
 800c08a:	220a      	movs	r2, #10
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 fcd5 	bl	800ca3c <__multadd>
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	4607      	mov	r7, r0
 800c098:	f300 8096 	bgt.w	800c1c8 <_dtoa_r+0x9a8>
 800c09c:	9b07      	ldr	r3, [sp, #28]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	dc59      	bgt.n	800c156 <_dtoa_r+0x936>
 800c0a2:	e091      	b.n	800c1c8 <_dtoa_r+0x9a8>
 800c0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0aa:	e758      	b.n	800bf5e <_dtoa_r+0x73e>
 800c0ac:	9b04      	ldr	r3, [sp, #16]
 800c0ae:	1e5e      	subs	r6, r3, #1
 800c0b0:	9b08      	ldr	r3, [sp, #32]
 800c0b2:	42b3      	cmp	r3, r6
 800c0b4:	bfbf      	itttt	lt
 800c0b6:	9b08      	ldrlt	r3, [sp, #32]
 800c0b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c0ba:	9608      	strlt	r6, [sp, #32]
 800c0bc:	1af3      	sublt	r3, r6, r3
 800c0be:	bfb4      	ite	lt
 800c0c0:	18d2      	addlt	r2, r2, r3
 800c0c2:	1b9e      	subge	r6, r3, r6
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	bfbc      	itt	lt
 800c0c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c0ca:	2600      	movlt	r6, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfb7      	itett	lt
 800c0d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c0d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c0d8:	1a9d      	sublt	r5, r3, r2
 800c0da:	2300      	movlt	r3, #0
 800c0dc:	e741      	b.n	800bf62 <_dtoa_r+0x742>
 800c0de:	9e08      	ldr	r6, [sp, #32]
 800c0e0:	9d05      	ldr	r5, [sp, #20]
 800c0e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0e4:	e748      	b.n	800bf78 <_dtoa_r+0x758>
 800c0e6:	9a08      	ldr	r2, [sp, #32]
 800c0e8:	e770      	b.n	800bfcc <_dtoa_r+0x7ac>
 800c0ea:	9b07      	ldr	r3, [sp, #28]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	dc19      	bgt.n	800c124 <_dtoa_r+0x904>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	b9bb      	cbnz	r3, 800c124 <_dtoa_r+0x904>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0fa:	b99b      	cbnz	r3, 800c124 <_dtoa_r+0x904>
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c102:	0d1b      	lsrs	r3, r3, #20
 800c104:	051b      	lsls	r3, r3, #20
 800c106:	b183      	cbz	r3, 800c12a <_dtoa_r+0x90a>
 800c108:	9b05      	ldr	r3, [sp, #20]
 800c10a:	3301      	adds	r3, #1
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	3301      	adds	r3, #1
 800c112:	9306      	str	r3, [sp, #24]
 800c114:	f04f 0801 	mov.w	r8, #1
 800c118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f47f af6f 	bne.w	800bffe <_dtoa_r+0x7de>
 800c120:	2001      	movs	r0, #1
 800c122:	e774      	b.n	800c00e <_dtoa_r+0x7ee>
 800c124:	f04f 0800 	mov.w	r8, #0
 800c128:	e7f6      	b.n	800c118 <_dtoa_r+0x8f8>
 800c12a:	4698      	mov	r8, r3
 800c12c:	e7f4      	b.n	800c118 <_dtoa_r+0x8f8>
 800c12e:	d082      	beq.n	800c036 <_dtoa_r+0x816>
 800c130:	9a05      	ldr	r2, [sp, #20]
 800c132:	331c      	adds	r3, #28
 800c134:	441a      	add	r2, r3
 800c136:	9205      	str	r2, [sp, #20]
 800c138:	9a06      	ldr	r2, [sp, #24]
 800c13a:	441a      	add	r2, r3
 800c13c:	441d      	add	r5, r3
 800c13e:	9206      	str	r2, [sp, #24]
 800c140:	e779      	b.n	800c036 <_dtoa_r+0x816>
 800c142:	4603      	mov	r3, r0
 800c144:	e7f4      	b.n	800c130 <_dtoa_r+0x910>
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	dc37      	bgt.n	800c1bc <_dtoa_r+0x99c>
 800c14c:	9b07      	ldr	r3, [sp, #28]
 800c14e:	2b02      	cmp	r3, #2
 800c150:	dd34      	ble.n	800c1bc <_dtoa_r+0x99c>
 800c152:	9b04      	ldr	r3, [sp, #16]
 800c154:	9301      	str	r3, [sp, #4]
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	b963      	cbnz	r3, 800c174 <_dtoa_r+0x954>
 800c15a:	4631      	mov	r1, r6
 800c15c:	2205      	movs	r2, #5
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 fc6c 	bl	800ca3c <__multadd>
 800c164:	4601      	mov	r1, r0
 800c166:	4606      	mov	r6, r0
 800c168:	4650      	mov	r0, sl
 800c16a:	f000 fe81 	bl	800ce70 <__mcmp>
 800c16e:	2800      	cmp	r0, #0
 800c170:	f73f adbb 	bgt.w	800bcea <_dtoa_r+0x4ca>
 800c174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c176:	9d00      	ldr	r5, [sp, #0]
 800c178:	ea6f 0b03 	mvn.w	fp, r3
 800c17c:	f04f 0800 	mov.w	r8, #0
 800c180:	4631      	mov	r1, r6
 800c182:	4620      	mov	r0, r4
 800c184:	f000 fc38 	bl	800c9f8 <_Bfree>
 800c188:	2f00      	cmp	r7, #0
 800c18a:	f43f aeab 	beq.w	800bee4 <_dtoa_r+0x6c4>
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	d005      	beq.n	800c1a0 <_dtoa_r+0x980>
 800c194:	45b8      	cmp	r8, r7
 800c196:	d003      	beq.n	800c1a0 <_dtoa_r+0x980>
 800c198:	4641      	mov	r1, r8
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 fc2c 	bl	800c9f8 <_Bfree>
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fc28 	bl	800c9f8 <_Bfree>
 800c1a8:	e69c      	b.n	800bee4 <_dtoa_r+0x6c4>
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	e7e1      	b.n	800c174 <_dtoa_r+0x954>
 800c1b0:	46bb      	mov	fp, r7
 800c1b2:	4637      	mov	r7, r6
 800c1b4:	e599      	b.n	800bcea <_dtoa_r+0x4ca>
 800c1b6:	bf00      	nop
 800c1b8:	40240000 	.word	0x40240000
 800c1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 80c8 	beq.w	800c354 <_dtoa_r+0xb34>
 800c1c4:	9b04      	ldr	r3, [sp, #16]
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	dd05      	ble.n	800c1d8 <_dtoa_r+0x9b8>
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 fde1 	bl	800cd98 <__lshift>
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	f1b8 0f00 	cmp.w	r8, #0
 800c1dc:	d05b      	beq.n	800c296 <_dtoa_r+0xa76>
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 fbc9 	bl	800c978 <_Balloc>
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	b928      	cbnz	r0, 800c1f6 <_dtoa_r+0x9d6>
 800c1ea:	4b83      	ldr	r3, [pc, #524]	; (800c3f8 <_dtoa_r+0xbd8>)
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c1f2:	f7ff bb2e 	b.w	800b852 <_dtoa_r+0x32>
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	3202      	adds	r2, #2
 800c1fa:	0092      	lsls	r2, r2, #2
 800c1fc:	f107 010c 	add.w	r1, r7, #12
 800c200:	300c      	adds	r0, #12
 800c202:	f7ff fa74 	bl	800b6ee <memcpy>
 800c206:	2201      	movs	r2, #1
 800c208:	4629      	mov	r1, r5
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 fdc4 	bl	800cd98 <__lshift>
 800c210:	9b00      	ldr	r3, [sp, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21a:	4413      	add	r3, r2
 800c21c:	9308      	str	r3, [sp, #32]
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	f003 0301 	and.w	r3, r3, #1
 800c224:	46b8      	mov	r8, r7
 800c226:	9306      	str	r3, [sp, #24]
 800c228:	4607      	mov	r7, r0
 800c22a:	9b04      	ldr	r3, [sp, #16]
 800c22c:	4631      	mov	r1, r6
 800c22e:	3b01      	subs	r3, #1
 800c230:	4650      	mov	r0, sl
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	f7ff fa69 	bl	800b70a <quorem>
 800c238:	4641      	mov	r1, r8
 800c23a:	9002      	str	r0, [sp, #8]
 800c23c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c240:	4650      	mov	r0, sl
 800c242:	f000 fe15 	bl	800ce70 <__mcmp>
 800c246:	463a      	mov	r2, r7
 800c248:	9005      	str	r0, [sp, #20]
 800c24a:	4631      	mov	r1, r6
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fe2b 	bl	800cea8 <__mdiff>
 800c252:	68c2      	ldr	r2, [r0, #12]
 800c254:	4605      	mov	r5, r0
 800c256:	bb02      	cbnz	r2, 800c29a <_dtoa_r+0xa7a>
 800c258:	4601      	mov	r1, r0
 800c25a:	4650      	mov	r0, sl
 800c25c:	f000 fe08 	bl	800ce70 <__mcmp>
 800c260:	4602      	mov	r2, r0
 800c262:	4629      	mov	r1, r5
 800c264:	4620      	mov	r0, r4
 800c266:	9209      	str	r2, [sp, #36]	; 0x24
 800c268:	f000 fbc6 	bl	800c9f8 <_Bfree>
 800c26c:	9b07      	ldr	r3, [sp, #28]
 800c26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c270:	9d04      	ldr	r5, [sp, #16]
 800c272:	ea43 0102 	orr.w	r1, r3, r2
 800c276:	9b06      	ldr	r3, [sp, #24]
 800c278:	4319      	orrs	r1, r3
 800c27a:	d110      	bne.n	800c29e <_dtoa_r+0xa7e>
 800c27c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c280:	d029      	beq.n	800c2d6 <_dtoa_r+0xab6>
 800c282:	9b05      	ldr	r3, [sp, #20]
 800c284:	2b00      	cmp	r3, #0
 800c286:	dd02      	ble.n	800c28e <_dtoa_r+0xa6e>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	f883 9000 	strb.w	r9, [r3]
 800c294:	e774      	b.n	800c180 <_dtoa_r+0x960>
 800c296:	4638      	mov	r0, r7
 800c298:	e7ba      	b.n	800c210 <_dtoa_r+0x9f0>
 800c29a:	2201      	movs	r2, #1
 800c29c:	e7e1      	b.n	800c262 <_dtoa_r+0xa42>
 800c29e:	9b05      	ldr	r3, [sp, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	db04      	blt.n	800c2ae <_dtoa_r+0xa8e>
 800c2a4:	9907      	ldr	r1, [sp, #28]
 800c2a6:	430b      	orrs	r3, r1
 800c2a8:	9906      	ldr	r1, [sp, #24]
 800c2aa:	430b      	orrs	r3, r1
 800c2ac:	d120      	bne.n	800c2f0 <_dtoa_r+0xad0>
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	dded      	ble.n	800c28e <_dtoa_r+0xa6e>
 800c2b2:	4651      	mov	r1, sl
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fd6e 	bl	800cd98 <__lshift>
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4682      	mov	sl, r0
 800c2c0:	f000 fdd6 	bl	800ce70 <__mcmp>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	dc03      	bgt.n	800c2d0 <_dtoa_r+0xab0>
 800c2c8:	d1e1      	bne.n	800c28e <_dtoa_r+0xa6e>
 800c2ca:	f019 0f01 	tst.w	r9, #1
 800c2ce:	d0de      	beq.n	800c28e <_dtoa_r+0xa6e>
 800c2d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2d4:	d1d8      	bne.n	800c288 <_dtoa_r+0xa68>
 800c2d6:	9a01      	ldr	r2, [sp, #4]
 800c2d8:	2339      	movs	r3, #57	; 0x39
 800c2da:	7013      	strb	r3, [r2, #0]
 800c2dc:	462b      	mov	r3, r5
 800c2de:	461d      	mov	r5, r3
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2e6:	2a39      	cmp	r2, #57	; 0x39
 800c2e8:	d06c      	beq.n	800c3c4 <_dtoa_r+0xba4>
 800c2ea:	3201      	adds	r2, #1
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	e747      	b.n	800c180 <_dtoa_r+0x960>
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	dd07      	ble.n	800c304 <_dtoa_r+0xae4>
 800c2f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2f8:	d0ed      	beq.n	800c2d6 <_dtoa_r+0xab6>
 800c2fa:	9a01      	ldr	r2, [sp, #4]
 800c2fc:	f109 0301 	add.w	r3, r9, #1
 800c300:	7013      	strb	r3, [r2, #0]
 800c302:	e73d      	b.n	800c180 <_dtoa_r+0x960>
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	9a08      	ldr	r2, [sp, #32]
 800c308:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d043      	beq.n	800c398 <_dtoa_r+0xb78>
 800c310:	4651      	mov	r1, sl
 800c312:	2300      	movs	r3, #0
 800c314:	220a      	movs	r2, #10
 800c316:	4620      	mov	r0, r4
 800c318:	f000 fb90 	bl	800ca3c <__multadd>
 800c31c:	45b8      	cmp	r8, r7
 800c31e:	4682      	mov	sl, r0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	f04f 020a 	mov.w	r2, #10
 800c328:	4641      	mov	r1, r8
 800c32a:	4620      	mov	r0, r4
 800c32c:	d107      	bne.n	800c33e <_dtoa_r+0xb1e>
 800c32e:	f000 fb85 	bl	800ca3c <__multadd>
 800c332:	4680      	mov	r8, r0
 800c334:	4607      	mov	r7, r0
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	3301      	adds	r3, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	e775      	b.n	800c22a <_dtoa_r+0xa0a>
 800c33e:	f000 fb7d 	bl	800ca3c <__multadd>
 800c342:	4639      	mov	r1, r7
 800c344:	4680      	mov	r8, r0
 800c346:	2300      	movs	r3, #0
 800c348:	220a      	movs	r2, #10
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fb76 	bl	800ca3c <__multadd>
 800c350:	4607      	mov	r7, r0
 800c352:	e7f0      	b.n	800c336 <_dtoa_r+0xb16>
 800c354:	9b04      	ldr	r3, [sp, #16]
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	9d00      	ldr	r5, [sp, #0]
 800c35a:	4631      	mov	r1, r6
 800c35c:	4650      	mov	r0, sl
 800c35e:	f7ff f9d4 	bl	800b70a <quorem>
 800c362:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	f805 9b01 	strb.w	r9, [r5], #1
 800c36c:	1aea      	subs	r2, r5, r3
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	4293      	cmp	r3, r2
 800c372:	dd07      	ble.n	800c384 <_dtoa_r+0xb64>
 800c374:	4651      	mov	r1, sl
 800c376:	2300      	movs	r3, #0
 800c378:	220a      	movs	r2, #10
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 fb5e 	bl	800ca3c <__multadd>
 800c380:	4682      	mov	sl, r0
 800c382:	e7ea      	b.n	800c35a <_dtoa_r+0xb3a>
 800c384:	9b01      	ldr	r3, [sp, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	bfc8      	it	gt
 800c38a:	461d      	movgt	r5, r3
 800c38c:	9b00      	ldr	r3, [sp, #0]
 800c38e:	bfd8      	it	le
 800c390:	2501      	movle	r5, #1
 800c392:	441d      	add	r5, r3
 800c394:	f04f 0800 	mov.w	r8, #0
 800c398:	4651      	mov	r1, sl
 800c39a:	2201      	movs	r2, #1
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 fcfb 	bl	800cd98 <__lshift>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4682      	mov	sl, r0
 800c3a6:	f000 fd63 	bl	800ce70 <__mcmp>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	dc96      	bgt.n	800c2dc <_dtoa_r+0xabc>
 800c3ae:	d102      	bne.n	800c3b6 <_dtoa_r+0xb96>
 800c3b0:	f019 0f01 	tst.w	r9, #1
 800c3b4:	d192      	bne.n	800c2dc <_dtoa_r+0xabc>
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	461d      	mov	r5, r3
 800c3ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3be:	2a30      	cmp	r2, #48	; 0x30
 800c3c0:	d0fa      	beq.n	800c3b8 <_dtoa_r+0xb98>
 800c3c2:	e6dd      	b.n	800c180 <_dtoa_r+0x960>
 800c3c4:	9a00      	ldr	r2, [sp, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d189      	bne.n	800c2de <_dtoa_r+0xabe>
 800c3ca:	f10b 0b01 	add.w	fp, fp, #1
 800c3ce:	2331      	movs	r3, #49	; 0x31
 800c3d0:	e796      	b.n	800c300 <_dtoa_r+0xae0>
 800c3d2:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <_dtoa_r+0xbdc>)
 800c3d4:	f7ff ba99 	b.w	800b90a <_dtoa_r+0xea>
 800c3d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f47f aa6d 	bne.w	800b8ba <_dtoa_r+0x9a>
 800c3e0:	4b07      	ldr	r3, [pc, #28]	; (800c400 <_dtoa_r+0xbe0>)
 800c3e2:	f7ff ba92 	b.w	800b90a <_dtoa_r+0xea>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	dcb5      	bgt.n	800c358 <_dtoa_r+0xb38>
 800c3ec:	9b07      	ldr	r3, [sp, #28]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	f73f aeb1 	bgt.w	800c156 <_dtoa_r+0x936>
 800c3f4:	e7b0      	b.n	800c358 <_dtoa_r+0xb38>
 800c3f6:	bf00      	nop
 800c3f8:	0800e544 	.word	0x0800e544
 800c3fc:	0800e4a4 	.word	0x0800e4a4
 800c400:	0800e4c8 	.word	0x0800e4c8

0800c404 <__ssputs_r>:
 800c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c408:	688e      	ldr	r6, [r1, #8]
 800c40a:	461f      	mov	r7, r3
 800c40c:	42be      	cmp	r6, r7
 800c40e:	680b      	ldr	r3, [r1, #0]
 800c410:	4682      	mov	sl, r0
 800c412:	460c      	mov	r4, r1
 800c414:	4690      	mov	r8, r2
 800c416:	d82c      	bhi.n	800c472 <__ssputs_r+0x6e>
 800c418:	898a      	ldrh	r2, [r1, #12]
 800c41a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c41e:	d026      	beq.n	800c46e <__ssputs_r+0x6a>
 800c420:	6965      	ldr	r5, [r4, #20]
 800c422:	6909      	ldr	r1, [r1, #16]
 800c424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c428:	eba3 0901 	sub.w	r9, r3, r1
 800c42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c430:	1c7b      	adds	r3, r7, #1
 800c432:	444b      	add	r3, r9
 800c434:	106d      	asrs	r5, r5, #1
 800c436:	429d      	cmp	r5, r3
 800c438:	bf38      	it	cc
 800c43a:	461d      	movcc	r5, r3
 800c43c:	0553      	lsls	r3, r2, #21
 800c43e:	d527      	bpl.n	800c490 <__ssputs_r+0x8c>
 800c440:	4629      	mov	r1, r5
 800c442:	f000 f95f 	bl	800c704 <_malloc_r>
 800c446:	4606      	mov	r6, r0
 800c448:	b360      	cbz	r0, 800c4a4 <__ssputs_r+0xa0>
 800c44a:	6921      	ldr	r1, [r4, #16]
 800c44c:	464a      	mov	r2, r9
 800c44e:	f7ff f94e 	bl	800b6ee <memcpy>
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c45c:	81a3      	strh	r3, [r4, #12]
 800c45e:	6126      	str	r6, [r4, #16]
 800c460:	6165      	str	r5, [r4, #20]
 800c462:	444e      	add	r6, r9
 800c464:	eba5 0509 	sub.w	r5, r5, r9
 800c468:	6026      	str	r6, [r4, #0]
 800c46a:	60a5      	str	r5, [r4, #8]
 800c46c:	463e      	mov	r6, r7
 800c46e:	42be      	cmp	r6, r7
 800c470:	d900      	bls.n	800c474 <__ssputs_r+0x70>
 800c472:	463e      	mov	r6, r7
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	4632      	mov	r2, r6
 800c478:	4641      	mov	r1, r8
 800c47a:	f000 fe6b 	bl	800d154 <memmove>
 800c47e:	68a3      	ldr	r3, [r4, #8]
 800c480:	1b9b      	subs	r3, r3, r6
 800c482:	60a3      	str	r3, [r4, #8]
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	4433      	add	r3, r6
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	2000      	movs	r0, #0
 800c48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c490:	462a      	mov	r2, r5
 800c492:	f000 fe30 	bl	800d0f6 <_realloc_r>
 800c496:	4606      	mov	r6, r0
 800c498:	2800      	cmp	r0, #0
 800c49a:	d1e0      	bne.n	800c45e <__ssputs_r+0x5a>
 800c49c:	6921      	ldr	r1, [r4, #16]
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f000 fefc 	bl	800d29c <_free_r>
 800c4a4:	230c      	movs	r3, #12
 800c4a6:	f8ca 3000 	str.w	r3, [sl]
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4b6:	e7e9      	b.n	800c48c <__ssputs_r+0x88>

0800c4b8 <_svfiprintf_r>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	4698      	mov	r8, r3
 800c4be:	898b      	ldrh	r3, [r1, #12]
 800c4c0:	061b      	lsls	r3, r3, #24
 800c4c2:	b09d      	sub	sp, #116	; 0x74
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	d50e      	bpl.n	800c4ea <_svfiprintf_r+0x32>
 800c4cc:	690b      	ldr	r3, [r1, #16]
 800c4ce:	b963      	cbnz	r3, 800c4ea <_svfiprintf_r+0x32>
 800c4d0:	2140      	movs	r1, #64	; 0x40
 800c4d2:	f000 f917 	bl	800c704 <_malloc_r>
 800c4d6:	6028      	str	r0, [r5, #0]
 800c4d8:	6128      	str	r0, [r5, #16]
 800c4da:	b920      	cbnz	r0, 800c4e6 <_svfiprintf_r+0x2e>
 800c4dc:	230c      	movs	r3, #12
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e4:	e0d0      	b.n	800c688 <_svfiprintf_r+0x1d0>
 800c4e6:	2340      	movs	r3, #64	; 0x40
 800c4e8:	616b      	str	r3, [r5, #20]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ee:	2320      	movs	r3, #32
 800c4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f8:	2330      	movs	r3, #48	; 0x30
 800c4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c6a0 <_svfiprintf_r+0x1e8>
 800c4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c502:	f04f 0901 	mov.w	r9, #1
 800c506:	4623      	mov	r3, r4
 800c508:	469a      	mov	sl, r3
 800c50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50e:	b10a      	cbz	r2, 800c514 <_svfiprintf_r+0x5c>
 800c510:	2a25      	cmp	r2, #37	; 0x25
 800c512:	d1f9      	bne.n	800c508 <_svfiprintf_r+0x50>
 800c514:	ebba 0b04 	subs.w	fp, sl, r4
 800c518:	d00b      	beq.n	800c532 <_svfiprintf_r+0x7a>
 800c51a:	465b      	mov	r3, fp
 800c51c:	4622      	mov	r2, r4
 800c51e:	4629      	mov	r1, r5
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff ff6f 	bl	800c404 <__ssputs_r>
 800c526:	3001      	adds	r0, #1
 800c528:	f000 80a9 	beq.w	800c67e <_svfiprintf_r+0x1c6>
 800c52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c52e:	445a      	add	r2, fp
 800c530:	9209      	str	r2, [sp, #36]	; 0x24
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 80a1 	beq.w	800c67e <_svfiprintf_r+0x1c6>
 800c53c:	2300      	movs	r3, #0
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c546:	f10a 0a01 	add.w	sl, sl, #1
 800c54a:	9304      	str	r3, [sp, #16]
 800c54c:	9307      	str	r3, [sp, #28]
 800c54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c552:	931a      	str	r3, [sp, #104]	; 0x68
 800c554:	4654      	mov	r4, sl
 800c556:	2205      	movs	r2, #5
 800c558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55c:	4850      	ldr	r0, [pc, #320]	; (800c6a0 <_svfiprintf_r+0x1e8>)
 800c55e:	f7f3 fe3f 	bl	80001e0 <memchr>
 800c562:	9a04      	ldr	r2, [sp, #16]
 800c564:	b9d8      	cbnz	r0, 800c59e <_svfiprintf_r+0xe6>
 800c566:	06d0      	lsls	r0, r2, #27
 800c568:	bf44      	itt	mi
 800c56a:	2320      	movmi	r3, #32
 800c56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c570:	0711      	lsls	r1, r2, #28
 800c572:	bf44      	itt	mi
 800c574:	232b      	movmi	r3, #43	; 0x2b
 800c576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c57a:	f89a 3000 	ldrb.w	r3, [sl]
 800c57e:	2b2a      	cmp	r3, #42	; 0x2a
 800c580:	d015      	beq.n	800c5ae <_svfiprintf_r+0xf6>
 800c582:	9a07      	ldr	r2, [sp, #28]
 800c584:	4654      	mov	r4, sl
 800c586:	2000      	movs	r0, #0
 800c588:	f04f 0c0a 	mov.w	ip, #10
 800c58c:	4621      	mov	r1, r4
 800c58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c592:	3b30      	subs	r3, #48	; 0x30
 800c594:	2b09      	cmp	r3, #9
 800c596:	d94d      	bls.n	800c634 <_svfiprintf_r+0x17c>
 800c598:	b1b0      	cbz	r0, 800c5c8 <_svfiprintf_r+0x110>
 800c59a:	9207      	str	r2, [sp, #28]
 800c59c:	e014      	b.n	800c5c8 <_svfiprintf_r+0x110>
 800c59e:	eba0 0308 	sub.w	r3, r0, r8
 800c5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	46a2      	mov	sl, r4
 800c5ac:	e7d2      	b.n	800c554 <_svfiprintf_r+0x9c>
 800c5ae:	9b03      	ldr	r3, [sp, #12]
 800c5b0:	1d19      	adds	r1, r3, #4
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	9103      	str	r1, [sp, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bfbb      	ittet	lt
 800c5ba:	425b      	neglt	r3, r3
 800c5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5c0:	9307      	strge	r3, [sp, #28]
 800c5c2:	9307      	strlt	r3, [sp, #28]
 800c5c4:	bfb8      	it	lt
 800c5c6:	9204      	strlt	r2, [sp, #16]
 800c5c8:	7823      	ldrb	r3, [r4, #0]
 800c5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c5cc:	d10c      	bne.n	800c5e8 <_svfiprintf_r+0x130>
 800c5ce:	7863      	ldrb	r3, [r4, #1]
 800c5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d2:	d134      	bne.n	800c63e <_svfiprintf_r+0x186>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	1d1a      	adds	r2, r3, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	9203      	str	r2, [sp, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	bfb8      	it	lt
 800c5e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c5e4:	3402      	adds	r4, #2
 800c5e6:	9305      	str	r3, [sp, #20]
 800c5e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6b0 <_svfiprintf_r+0x1f8>
 800c5ec:	7821      	ldrb	r1, [r4, #0]
 800c5ee:	2203      	movs	r2, #3
 800c5f0:	4650      	mov	r0, sl
 800c5f2:	f7f3 fdf5 	bl	80001e0 <memchr>
 800c5f6:	b138      	cbz	r0, 800c608 <_svfiprintf_r+0x150>
 800c5f8:	9b04      	ldr	r3, [sp, #16]
 800c5fa:	eba0 000a 	sub.w	r0, r0, sl
 800c5fe:	2240      	movs	r2, #64	; 0x40
 800c600:	4082      	lsls	r2, r0
 800c602:	4313      	orrs	r3, r2
 800c604:	3401      	adds	r4, #1
 800c606:	9304      	str	r3, [sp, #16]
 800c608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60c:	4825      	ldr	r0, [pc, #148]	; (800c6a4 <_svfiprintf_r+0x1ec>)
 800c60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c612:	2206      	movs	r2, #6
 800c614:	f7f3 fde4 	bl	80001e0 <memchr>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d038      	beq.n	800c68e <_svfiprintf_r+0x1d6>
 800c61c:	4b22      	ldr	r3, [pc, #136]	; (800c6a8 <_svfiprintf_r+0x1f0>)
 800c61e:	bb1b      	cbnz	r3, 800c668 <_svfiprintf_r+0x1b0>
 800c620:	9b03      	ldr	r3, [sp, #12]
 800c622:	3307      	adds	r3, #7
 800c624:	f023 0307 	bic.w	r3, r3, #7
 800c628:	3308      	adds	r3, #8
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62e:	4433      	add	r3, r6
 800c630:	9309      	str	r3, [sp, #36]	; 0x24
 800c632:	e768      	b.n	800c506 <_svfiprintf_r+0x4e>
 800c634:	fb0c 3202 	mla	r2, ip, r2, r3
 800c638:	460c      	mov	r4, r1
 800c63a:	2001      	movs	r0, #1
 800c63c:	e7a6      	b.n	800c58c <_svfiprintf_r+0xd4>
 800c63e:	2300      	movs	r3, #0
 800c640:	3401      	adds	r4, #1
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	4619      	mov	r1, r3
 800c646:	f04f 0c0a 	mov.w	ip, #10
 800c64a:	4620      	mov	r0, r4
 800c64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c650:	3a30      	subs	r2, #48	; 0x30
 800c652:	2a09      	cmp	r2, #9
 800c654:	d903      	bls.n	800c65e <_svfiprintf_r+0x1a6>
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0c6      	beq.n	800c5e8 <_svfiprintf_r+0x130>
 800c65a:	9105      	str	r1, [sp, #20]
 800c65c:	e7c4      	b.n	800c5e8 <_svfiprintf_r+0x130>
 800c65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c662:	4604      	mov	r4, r0
 800c664:	2301      	movs	r3, #1
 800c666:	e7f0      	b.n	800c64a <_svfiprintf_r+0x192>
 800c668:	ab03      	add	r3, sp, #12
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4b0f      	ldr	r3, [pc, #60]	; (800c6ac <_svfiprintf_r+0x1f4>)
 800c670:	a904      	add	r1, sp, #16
 800c672:	4638      	mov	r0, r7
 800c674:	f7fe fb5a 	bl	800ad2c <_printf_float>
 800c678:	1c42      	adds	r2, r0, #1
 800c67a:	4606      	mov	r6, r0
 800c67c:	d1d6      	bne.n	800c62c <_svfiprintf_r+0x174>
 800c67e:	89ab      	ldrh	r3, [r5, #12]
 800c680:	065b      	lsls	r3, r3, #25
 800c682:	f53f af2d 	bmi.w	800c4e0 <_svfiprintf_r+0x28>
 800c686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c688:	b01d      	add	sp, #116	; 0x74
 800c68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68e:	ab03      	add	r3, sp, #12
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	462a      	mov	r2, r5
 800c694:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <_svfiprintf_r+0x1f4>)
 800c696:	a904      	add	r1, sp, #16
 800c698:	4638      	mov	r0, r7
 800c69a:	f7fe fdeb 	bl	800b274 <_printf_i>
 800c69e:	e7eb      	b.n	800c678 <_svfiprintf_r+0x1c0>
 800c6a0:	0800e555 	.word	0x0800e555
 800c6a4:	0800e55f 	.word	0x0800e55f
 800c6a8:	0800ad2d 	.word	0x0800ad2d
 800c6ac:	0800c405 	.word	0x0800c405
 800c6b0:	0800e55b 	.word	0x0800e55b

0800c6b4 <malloc>:
 800c6b4:	4b02      	ldr	r3, [pc, #8]	; (800c6c0 <malloc+0xc>)
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	f000 b823 	b.w	800c704 <_malloc_r>
 800c6be:	bf00      	nop
 800c6c0:	20000118 	.word	0x20000118

0800c6c4 <sbrk_aligned>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	4e0e      	ldr	r6, [pc, #56]	; (800c700 <sbrk_aligned+0x3c>)
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	6831      	ldr	r1, [r6, #0]
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	b911      	cbnz	r1, 800c6d6 <sbrk_aligned+0x12>
 800c6d0:	f000 fd8e 	bl	800d1f0 <_sbrk_r>
 800c6d4:	6030      	str	r0, [r6, #0]
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f000 fd89 	bl	800d1f0 <_sbrk_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d00a      	beq.n	800c6f8 <sbrk_aligned+0x34>
 800c6e2:	1cc4      	adds	r4, r0, #3
 800c6e4:	f024 0403 	bic.w	r4, r4, #3
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d007      	beq.n	800c6fc <sbrk_aligned+0x38>
 800c6ec:	1a21      	subs	r1, r4, r0
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f000 fd7e 	bl	800d1f0 <_sbrk_r>
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d101      	bne.n	800c6fc <sbrk_aligned+0x38>
 800c6f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	200036c8 	.word	0x200036c8

0800c704 <_malloc_r>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	1ccd      	adds	r5, r1, #3
 800c70a:	f025 0503 	bic.w	r5, r5, #3
 800c70e:	3508      	adds	r5, #8
 800c710:	2d0c      	cmp	r5, #12
 800c712:	bf38      	it	cc
 800c714:	250c      	movcc	r5, #12
 800c716:	2d00      	cmp	r5, #0
 800c718:	4607      	mov	r7, r0
 800c71a:	db01      	blt.n	800c720 <_malloc_r+0x1c>
 800c71c:	42a9      	cmp	r1, r5
 800c71e:	d905      	bls.n	800c72c <_malloc_r+0x28>
 800c720:	230c      	movs	r3, #12
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	2600      	movs	r6, #0
 800c726:	4630      	mov	r0, r6
 800c728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c800 <_malloc_r+0xfc>
 800c730:	f000 f916 	bl	800c960 <__malloc_lock>
 800c734:	f8d8 3000 	ldr.w	r3, [r8]
 800c738:	461c      	mov	r4, r3
 800c73a:	bb5c      	cbnz	r4, 800c794 <_malloc_r+0x90>
 800c73c:	4629      	mov	r1, r5
 800c73e:	4638      	mov	r0, r7
 800c740:	f7ff ffc0 	bl	800c6c4 <sbrk_aligned>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	4604      	mov	r4, r0
 800c748:	d155      	bne.n	800c7f6 <_malloc_r+0xf2>
 800c74a:	f8d8 4000 	ldr.w	r4, [r8]
 800c74e:	4626      	mov	r6, r4
 800c750:	2e00      	cmp	r6, #0
 800c752:	d145      	bne.n	800c7e0 <_malloc_r+0xdc>
 800c754:	2c00      	cmp	r4, #0
 800c756:	d048      	beq.n	800c7ea <_malloc_r+0xe6>
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	4631      	mov	r1, r6
 800c75c:	4638      	mov	r0, r7
 800c75e:	eb04 0903 	add.w	r9, r4, r3
 800c762:	f000 fd45 	bl	800d1f0 <_sbrk_r>
 800c766:	4581      	cmp	r9, r0
 800c768:	d13f      	bne.n	800c7ea <_malloc_r+0xe6>
 800c76a:	6821      	ldr	r1, [r4, #0]
 800c76c:	1a6d      	subs	r5, r5, r1
 800c76e:	4629      	mov	r1, r5
 800c770:	4638      	mov	r0, r7
 800c772:	f7ff ffa7 	bl	800c6c4 <sbrk_aligned>
 800c776:	3001      	adds	r0, #1
 800c778:	d037      	beq.n	800c7ea <_malloc_r+0xe6>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	442b      	add	r3, r5
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	f8d8 3000 	ldr.w	r3, [r8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d038      	beq.n	800c7fa <_malloc_r+0xf6>
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	42a2      	cmp	r2, r4
 800c78c:	d12b      	bne.n	800c7e6 <_malloc_r+0xe2>
 800c78e:	2200      	movs	r2, #0
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	e00f      	b.n	800c7b4 <_malloc_r+0xb0>
 800c794:	6822      	ldr	r2, [r4, #0]
 800c796:	1b52      	subs	r2, r2, r5
 800c798:	d41f      	bmi.n	800c7da <_malloc_r+0xd6>
 800c79a:	2a0b      	cmp	r2, #11
 800c79c:	d917      	bls.n	800c7ce <_malloc_r+0xca>
 800c79e:	1961      	adds	r1, r4, r5
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	6025      	str	r5, [r4, #0]
 800c7a4:	bf18      	it	ne
 800c7a6:	6059      	strne	r1, [r3, #4]
 800c7a8:	6863      	ldr	r3, [r4, #4]
 800c7aa:	bf08      	it	eq
 800c7ac:	f8c8 1000 	streq.w	r1, [r8]
 800c7b0:	5162      	str	r2, [r4, r5]
 800c7b2:	604b      	str	r3, [r1, #4]
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f104 060b 	add.w	r6, r4, #11
 800c7ba:	f000 f8d7 	bl	800c96c <__malloc_unlock>
 800c7be:	f026 0607 	bic.w	r6, r6, #7
 800c7c2:	1d23      	adds	r3, r4, #4
 800c7c4:	1af2      	subs	r2, r6, r3
 800c7c6:	d0ae      	beq.n	800c726 <_malloc_r+0x22>
 800c7c8:	1b9b      	subs	r3, r3, r6
 800c7ca:	50a3      	str	r3, [r4, r2]
 800c7cc:	e7ab      	b.n	800c726 <_malloc_r+0x22>
 800c7ce:	42a3      	cmp	r3, r4
 800c7d0:	6862      	ldr	r2, [r4, #4]
 800c7d2:	d1dd      	bne.n	800c790 <_malloc_r+0x8c>
 800c7d4:	f8c8 2000 	str.w	r2, [r8]
 800c7d8:	e7ec      	b.n	800c7b4 <_malloc_r+0xb0>
 800c7da:	4623      	mov	r3, r4
 800c7dc:	6864      	ldr	r4, [r4, #4]
 800c7de:	e7ac      	b.n	800c73a <_malloc_r+0x36>
 800c7e0:	4634      	mov	r4, r6
 800c7e2:	6876      	ldr	r6, [r6, #4]
 800c7e4:	e7b4      	b.n	800c750 <_malloc_r+0x4c>
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	e7cc      	b.n	800c784 <_malloc_r+0x80>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	603b      	str	r3, [r7, #0]
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	f000 f8bc 	bl	800c96c <__malloc_unlock>
 800c7f4:	e797      	b.n	800c726 <_malloc_r+0x22>
 800c7f6:	6025      	str	r5, [r4, #0]
 800c7f8:	e7dc      	b.n	800c7b4 <_malloc_r+0xb0>
 800c7fa:	605b      	str	r3, [r3, #4]
 800c7fc:	deff      	udf	#255	; 0xff
 800c7fe:	bf00      	nop
 800c800:	200036c4 	.word	0x200036c4

0800c804 <__sflush_r>:
 800c804:	898a      	ldrh	r2, [r1, #12]
 800c806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	4605      	mov	r5, r0
 800c80c:	0710      	lsls	r0, r2, #28
 800c80e:	460c      	mov	r4, r1
 800c810:	d458      	bmi.n	800c8c4 <__sflush_r+0xc0>
 800c812:	684b      	ldr	r3, [r1, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc05      	bgt.n	800c824 <__sflush_r+0x20>
 800c818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dc02      	bgt.n	800c824 <__sflush_r+0x20>
 800c81e:	2000      	movs	r0, #0
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c826:	2e00      	cmp	r6, #0
 800c828:	d0f9      	beq.n	800c81e <__sflush_r+0x1a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c830:	682f      	ldr	r7, [r5, #0]
 800c832:	6a21      	ldr	r1, [r4, #32]
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	d032      	beq.n	800c89e <__sflush_r+0x9a>
 800c838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	075a      	lsls	r2, r3, #29
 800c83e:	d505      	bpl.n	800c84c <__sflush_r+0x48>
 800c840:	6863      	ldr	r3, [r4, #4]
 800c842:	1ac0      	subs	r0, r0, r3
 800c844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c846:	b10b      	cbz	r3, 800c84c <__sflush_r+0x48>
 800c848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c84a:	1ac0      	subs	r0, r0, r3
 800c84c:	2300      	movs	r3, #0
 800c84e:	4602      	mov	r2, r0
 800c850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c852:	6a21      	ldr	r1, [r4, #32]
 800c854:	4628      	mov	r0, r5
 800c856:	47b0      	blx	r6
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	d106      	bne.n	800c86c <__sflush_r+0x68>
 800c85e:	6829      	ldr	r1, [r5, #0]
 800c860:	291d      	cmp	r1, #29
 800c862:	d82b      	bhi.n	800c8bc <__sflush_r+0xb8>
 800c864:	4a29      	ldr	r2, [pc, #164]	; (800c90c <__sflush_r+0x108>)
 800c866:	410a      	asrs	r2, r1
 800c868:	07d6      	lsls	r6, r2, #31
 800c86a:	d427      	bmi.n	800c8bc <__sflush_r+0xb8>
 800c86c:	2200      	movs	r2, #0
 800c86e:	6062      	str	r2, [r4, #4]
 800c870:	04d9      	lsls	r1, r3, #19
 800c872:	6922      	ldr	r2, [r4, #16]
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	d504      	bpl.n	800c882 <__sflush_r+0x7e>
 800c878:	1c42      	adds	r2, r0, #1
 800c87a:	d101      	bne.n	800c880 <__sflush_r+0x7c>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b903      	cbnz	r3, 800c882 <__sflush_r+0x7e>
 800c880:	6560      	str	r0, [r4, #84]	; 0x54
 800c882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c884:	602f      	str	r7, [r5, #0]
 800c886:	2900      	cmp	r1, #0
 800c888:	d0c9      	beq.n	800c81e <__sflush_r+0x1a>
 800c88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c88e:	4299      	cmp	r1, r3
 800c890:	d002      	beq.n	800c898 <__sflush_r+0x94>
 800c892:	4628      	mov	r0, r5
 800c894:	f000 fd02 	bl	800d29c <_free_r>
 800c898:	2000      	movs	r0, #0
 800c89a:	6360      	str	r0, [r4, #52]	; 0x34
 800c89c:	e7c0      	b.n	800c820 <__sflush_r+0x1c>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b0      	blx	r6
 800c8a4:	1c41      	adds	r1, r0, #1
 800c8a6:	d1c8      	bne.n	800c83a <__sflush_r+0x36>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0c5      	beq.n	800c83a <__sflush_r+0x36>
 800c8ae:	2b1d      	cmp	r3, #29
 800c8b0:	d001      	beq.n	800c8b6 <__sflush_r+0xb2>
 800c8b2:	2b16      	cmp	r3, #22
 800c8b4:	d101      	bne.n	800c8ba <__sflush_r+0xb6>
 800c8b6:	602f      	str	r7, [r5, #0]
 800c8b8:	e7b1      	b.n	800c81e <__sflush_r+0x1a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	e7ad      	b.n	800c820 <__sflush_r+0x1c>
 800c8c4:	690f      	ldr	r7, [r1, #16]
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d0a9      	beq.n	800c81e <__sflush_r+0x1a>
 800c8ca:	0793      	lsls	r3, r2, #30
 800c8cc:	680e      	ldr	r6, [r1, #0]
 800c8ce:	bf08      	it	eq
 800c8d0:	694b      	ldreq	r3, [r1, #20]
 800c8d2:	600f      	str	r7, [r1, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	eba6 0807 	sub.w	r8, r6, r7
 800c8dc:	608b      	str	r3, [r1, #8]
 800c8de:	f1b8 0f00 	cmp.w	r8, #0
 800c8e2:	dd9c      	ble.n	800c81e <__sflush_r+0x1a>
 800c8e4:	6a21      	ldr	r1, [r4, #32]
 800c8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8e8:	4643      	mov	r3, r8
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b0      	blx	r6
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dc06      	bgt.n	800c902 <__sflush_r+0xfe>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c900:	e78e      	b.n	800c820 <__sflush_r+0x1c>
 800c902:	4407      	add	r7, r0
 800c904:	eba8 0800 	sub.w	r8, r8, r0
 800c908:	e7e9      	b.n	800c8de <__sflush_r+0xda>
 800c90a:	bf00      	nop
 800c90c:	dfbffffe 	.word	0xdfbffffe

0800c910 <_fflush_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	b913      	cbnz	r3, 800c920 <_fflush_r+0x10>
 800c91a:	2500      	movs	r5, #0
 800c91c:	4628      	mov	r0, r5
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	b118      	cbz	r0, 800c92a <_fflush_r+0x1a>
 800c922:	6a03      	ldr	r3, [r0, #32]
 800c924:	b90b      	cbnz	r3, 800c92a <_fflush_r+0x1a>
 800c926:	f7fe fe53 	bl	800b5d0 <__sinit>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0f3      	beq.n	800c91a <_fflush_r+0xa>
 800c932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c934:	07d0      	lsls	r0, r2, #31
 800c936:	d404      	bmi.n	800c942 <_fflush_r+0x32>
 800c938:	0599      	lsls	r1, r3, #22
 800c93a:	d402      	bmi.n	800c942 <_fflush_r+0x32>
 800c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c93e:	f7fe fed4 	bl	800b6ea <__retarget_lock_acquire_recursive>
 800c942:	4628      	mov	r0, r5
 800c944:	4621      	mov	r1, r4
 800c946:	f7ff ff5d 	bl	800c804 <__sflush_r>
 800c94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c94c:	07da      	lsls	r2, r3, #31
 800c94e:	4605      	mov	r5, r0
 800c950:	d4e4      	bmi.n	800c91c <_fflush_r+0xc>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	059b      	lsls	r3, r3, #22
 800c956:	d4e1      	bmi.n	800c91c <_fflush_r+0xc>
 800c958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95a:	f7fe fec7 	bl	800b6ec <__retarget_lock_release_recursive>
 800c95e:	e7dd      	b.n	800c91c <_fflush_r+0xc>

0800c960 <__malloc_lock>:
 800c960:	4801      	ldr	r0, [pc, #4]	; (800c968 <__malloc_lock+0x8>)
 800c962:	f7fe bec2 	b.w	800b6ea <__retarget_lock_acquire_recursive>
 800c966:	bf00      	nop
 800c968:	200036c0 	.word	0x200036c0

0800c96c <__malloc_unlock>:
 800c96c:	4801      	ldr	r0, [pc, #4]	; (800c974 <__malloc_unlock+0x8>)
 800c96e:	f7fe bebd 	b.w	800b6ec <__retarget_lock_release_recursive>
 800c972:	bf00      	nop
 800c974:	200036c0 	.word	0x200036c0

0800c978 <_Balloc>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	69c6      	ldr	r6, [r0, #28]
 800c97c:	4604      	mov	r4, r0
 800c97e:	460d      	mov	r5, r1
 800c980:	b976      	cbnz	r6, 800c9a0 <_Balloc+0x28>
 800c982:	2010      	movs	r0, #16
 800c984:	f7ff fe96 	bl	800c6b4 <malloc>
 800c988:	4602      	mov	r2, r0
 800c98a:	61e0      	str	r0, [r4, #28]
 800c98c:	b920      	cbnz	r0, 800c998 <_Balloc+0x20>
 800c98e:	4b18      	ldr	r3, [pc, #96]	; (800c9f0 <_Balloc+0x78>)
 800c990:	4818      	ldr	r0, [pc, #96]	; (800c9f4 <_Balloc+0x7c>)
 800c992:	216b      	movs	r1, #107	; 0x6b
 800c994:	f000 fc4e 	bl	800d234 <__assert_func>
 800c998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c99c:	6006      	str	r6, [r0, #0]
 800c99e:	60c6      	str	r6, [r0, #12]
 800c9a0:	69e6      	ldr	r6, [r4, #28]
 800c9a2:	68f3      	ldr	r3, [r6, #12]
 800c9a4:	b183      	cbz	r3, 800c9c8 <_Balloc+0x50>
 800c9a6:	69e3      	ldr	r3, [r4, #28]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ae:	b9b8      	cbnz	r0, 800c9e0 <_Balloc+0x68>
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9b6:	1d72      	adds	r2, r6, #5
 800c9b8:	0092      	lsls	r2, r2, #2
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 fc58 	bl	800d270 <_calloc_r>
 800c9c0:	b160      	cbz	r0, 800c9dc <_Balloc+0x64>
 800c9c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9c6:	e00e      	b.n	800c9e6 <_Balloc+0x6e>
 800c9c8:	2221      	movs	r2, #33	; 0x21
 800c9ca:	2104      	movs	r1, #4
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fc4f 	bl	800d270 <_calloc_r>
 800c9d2:	69e3      	ldr	r3, [r4, #28]
 800c9d4:	60f0      	str	r0, [r6, #12]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e4      	bne.n	800c9a6 <_Balloc+0x2e>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	6802      	ldr	r2, [r0, #0]
 800c9e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9ec:	e7f7      	b.n	800c9de <_Balloc+0x66>
 800c9ee:	bf00      	nop
 800c9f0:	0800e4d5 	.word	0x0800e4d5
 800c9f4:	0800e566 	.word	0x0800e566

0800c9f8 <_Bfree>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	69c6      	ldr	r6, [r0, #28]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	b976      	cbnz	r6, 800ca20 <_Bfree+0x28>
 800ca02:	2010      	movs	r0, #16
 800ca04:	f7ff fe56 	bl	800c6b4 <malloc>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	61e8      	str	r0, [r5, #28]
 800ca0c:	b920      	cbnz	r0, 800ca18 <_Bfree+0x20>
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <_Bfree+0x3c>)
 800ca10:	4809      	ldr	r0, [pc, #36]	; (800ca38 <_Bfree+0x40>)
 800ca12:	218f      	movs	r1, #143	; 0x8f
 800ca14:	f000 fc0e 	bl	800d234 <__assert_func>
 800ca18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca1c:	6006      	str	r6, [r0, #0]
 800ca1e:	60c6      	str	r6, [r0, #12]
 800ca20:	b13c      	cbz	r4, 800ca32 <_Bfree+0x3a>
 800ca22:	69eb      	ldr	r3, [r5, #28]
 800ca24:	6862      	ldr	r2, [r4, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca2c:	6021      	str	r1, [r4, #0]
 800ca2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	0800e4d5 	.word	0x0800e4d5
 800ca38:	0800e566 	.word	0x0800e566

0800ca3c <__multadd>:
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	690d      	ldr	r5, [r1, #16]
 800ca42:	4607      	mov	r7, r0
 800ca44:	460c      	mov	r4, r1
 800ca46:	461e      	mov	r6, r3
 800ca48:	f101 0c14 	add.w	ip, r1, #20
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca52:	b299      	uxth	r1, r3
 800ca54:	fb02 6101 	mla	r1, r2, r1, r6
 800ca58:	0c1e      	lsrs	r6, r3, #16
 800ca5a:	0c0b      	lsrs	r3, r1, #16
 800ca5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca60:	b289      	uxth	r1, r1
 800ca62:	3001      	adds	r0, #1
 800ca64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca68:	4285      	cmp	r5, r0
 800ca6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca72:	dcec      	bgt.n	800ca4e <__multadd+0x12>
 800ca74:	b30e      	cbz	r6, 800caba <__multadd+0x7e>
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	42ab      	cmp	r3, r5
 800ca7a:	dc19      	bgt.n	800cab0 <__multadd+0x74>
 800ca7c:	6861      	ldr	r1, [r4, #4]
 800ca7e:	4638      	mov	r0, r7
 800ca80:	3101      	adds	r1, #1
 800ca82:	f7ff ff79 	bl	800c978 <_Balloc>
 800ca86:	4680      	mov	r8, r0
 800ca88:	b928      	cbnz	r0, 800ca96 <__multadd+0x5a>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <__multadd+0x84>)
 800ca8e:	480d      	ldr	r0, [pc, #52]	; (800cac4 <__multadd+0x88>)
 800ca90:	21ba      	movs	r1, #186	; 0xba
 800ca92:	f000 fbcf 	bl	800d234 <__assert_func>
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	3202      	adds	r2, #2
 800ca9a:	f104 010c 	add.w	r1, r4, #12
 800ca9e:	0092      	lsls	r2, r2, #2
 800caa0:	300c      	adds	r0, #12
 800caa2:	f7fe fe24 	bl	800b6ee <memcpy>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7ff ffa5 	bl	800c9f8 <_Bfree>
 800caae:	4644      	mov	r4, r8
 800cab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cab4:	3501      	adds	r5, #1
 800cab6:	615e      	str	r6, [r3, #20]
 800cab8:	6125      	str	r5, [r4, #16]
 800caba:	4620      	mov	r0, r4
 800cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac0:	0800e544 	.word	0x0800e544
 800cac4:	0800e566 	.word	0x0800e566

0800cac8 <__hi0bits>:
 800cac8:	0c03      	lsrs	r3, r0, #16
 800caca:	041b      	lsls	r3, r3, #16
 800cacc:	b9d3      	cbnz	r3, 800cb04 <__hi0bits+0x3c>
 800cace:	0400      	lsls	r0, r0, #16
 800cad0:	2310      	movs	r3, #16
 800cad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cad6:	bf04      	itt	eq
 800cad8:	0200      	lsleq	r0, r0, #8
 800cada:	3308      	addeq	r3, #8
 800cadc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cae0:	bf04      	itt	eq
 800cae2:	0100      	lsleq	r0, r0, #4
 800cae4:	3304      	addeq	r3, #4
 800cae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800caea:	bf04      	itt	eq
 800caec:	0080      	lsleq	r0, r0, #2
 800caee:	3302      	addeq	r3, #2
 800caf0:	2800      	cmp	r0, #0
 800caf2:	db05      	blt.n	800cb00 <__hi0bits+0x38>
 800caf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800caf8:	f103 0301 	add.w	r3, r3, #1
 800cafc:	bf08      	it	eq
 800cafe:	2320      	moveq	r3, #32
 800cb00:	4618      	mov	r0, r3
 800cb02:	4770      	bx	lr
 800cb04:	2300      	movs	r3, #0
 800cb06:	e7e4      	b.n	800cad2 <__hi0bits+0xa>

0800cb08 <__lo0bits>:
 800cb08:	6803      	ldr	r3, [r0, #0]
 800cb0a:	f013 0207 	ands.w	r2, r3, #7
 800cb0e:	d00c      	beq.n	800cb2a <__lo0bits+0x22>
 800cb10:	07d9      	lsls	r1, r3, #31
 800cb12:	d422      	bmi.n	800cb5a <__lo0bits+0x52>
 800cb14:	079a      	lsls	r2, r3, #30
 800cb16:	bf49      	itett	mi
 800cb18:	085b      	lsrmi	r3, r3, #1
 800cb1a:	089b      	lsrpl	r3, r3, #2
 800cb1c:	6003      	strmi	r3, [r0, #0]
 800cb1e:	2201      	movmi	r2, #1
 800cb20:	bf5c      	itt	pl
 800cb22:	6003      	strpl	r3, [r0, #0]
 800cb24:	2202      	movpl	r2, #2
 800cb26:	4610      	mov	r0, r2
 800cb28:	4770      	bx	lr
 800cb2a:	b299      	uxth	r1, r3
 800cb2c:	b909      	cbnz	r1, 800cb32 <__lo0bits+0x2a>
 800cb2e:	0c1b      	lsrs	r3, r3, #16
 800cb30:	2210      	movs	r2, #16
 800cb32:	b2d9      	uxtb	r1, r3
 800cb34:	b909      	cbnz	r1, 800cb3a <__lo0bits+0x32>
 800cb36:	3208      	adds	r2, #8
 800cb38:	0a1b      	lsrs	r3, r3, #8
 800cb3a:	0719      	lsls	r1, r3, #28
 800cb3c:	bf04      	itt	eq
 800cb3e:	091b      	lsreq	r3, r3, #4
 800cb40:	3204      	addeq	r2, #4
 800cb42:	0799      	lsls	r1, r3, #30
 800cb44:	bf04      	itt	eq
 800cb46:	089b      	lsreq	r3, r3, #2
 800cb48:	3202      	addeq	r2, #2
 800cb4a:	07d9      	lsls	r1, r3, #31
 800cb4c:	d403      	bmi.n	800cb56 <__lo0bits+0x4e>
 800cb4e:	085b      	lsrs	r3, r3, #1
 800cb50:	f102 0201 	add.w	r2, r2, #1
 800cb54:	d003      	beq.n	800cb5e <__lo0bits+0x56>
 800cb56:	6003      	str	r3, [r0, #0]
 800cb58:	e7e5      	b.n	800cb26 <__lo0bits+0x1e>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	e7e3      	b.n	800cb26 <__lo0bits+0x1e>
 800cb5e:	2220      	movs	r2, #32
 800cb60:	e7e1      	b.n	800cb26 <__lo0bits+0x1e>
	...

0800cb64 <__i2b>:
 800cb64:	b510      	push	{r4, lr}
 800cb66:	460c      	mov	r4, r1
 800cb68:	2101      	movs	r1, #1
 800cb6a:	f7ff ff05 	bl	800c978 <_Balloc>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	b928      	cbnz	r0, 800cb7e <__i2b+0x1a>
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <__i2b+0x24>)
 800cb74:	4805      	ldr	r0, [pc, #20]	; (800cb8c <__i2b+0x28>)
 800cb76:	f240 1145 	movw	r1, #325	; 0x145
 800cb7a:	f000 fb5b 	bl	800d234 <__assert_func>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	6144      	str	r4, [r0, #20]
 800cb82:	6103      	str	r3, [r0, #16]
 800cb84:	bd10      	pop	{r4, pc}
 800cb86:	bf00      	nop
 800cb88:	0800e544 	.word	0x0800e544
 800cb8c:	0800e566 	.word	0x0800e566

0800cb90 <__multiply>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	4691      	mov	r9, r2
 800cb96:	690a      	ldr	r2, [r1, #16]
 800cb98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	bfb8      	it	lt
 800cba0:	460b      	movlt	r3, r1
 800cba2:	460c      	mov	r4, r1
 800cba4:	bfbc      	itt	lt
 800cba6:	464c      	movlt	r4, r9
 800cba8:	4699      	movlt	r9, r3
 800cbaa:	6927      	ldr	r7, [r4, #16]
 800cbac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbb0:	68a3      	ldr	r3, [r4, #8]
 800cbb2:	6861      	ldr	r1, [r4, #4]
 800cbb4:	eb07 060a 	add.w	r6, r7, sl
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	b085      	sub	sp, #20
 800cbbc:	bfb8      	it	lt
 800cbbe:	3101      	addlt	r1, #1
 800cbc0:	f7ff feda 	bl	800c978 <_Balloc>
 800cbc4:	b930      	cbnz	r0, 800cbd4 <__multiply+0x44>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b44      	ldr	r3, [pc, #272]	; (800ccdc <__multiply+0x14c>)
 800cbca:	4845      	ldr	r0, [pc, #276]	; (800cce0 <__multiply+0x150>)
 800cbcc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cbd0:	f000 fb30 	bl	800d234 <__assert_func>
 800cbd4:	f100 0514 	add.w	r5, r0, #20
 800cbd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbdc:	462b      	mov	r3, r5
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4543      	cmp	r3, r8
 800cbe2:	d321      	bcc.n	800cc28 <__multiply+0x98>
 800cbe4:	f104 0314 	add.w	r3, r4, #20
 800cbe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cbec:	f109 0314 	add.w	r3, r9, #20
 800cbf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cbf4:	9202      	str	r2, [sp, #8]
 800cbf6:	1b3a      	subs	r2, r7, r4
 800cbf8:	3a15      	subs	r2, #21
 800cbfa:	f022 0203 	bic.w	r2, r2, #3
 800cbfe:	3204      	adds	r2, #4
 800cc00:	f104 0115 	add.w	r1, r4, #21
 800cc04:	428f      	cmp	r7, r1
 800cc06:	bf38      	it	cc
 800cc08:	2204      	movcc	r2, #4
 800cc0a:	9201      	str	r2, [sp, #4]
 800cc0c:	9a02      	ldr	r2, [sp, #8]
 800cc0e:	9303      	str	r3, [sp, #12]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d80c      	bhi.n	800cc2e <__multiply+0x9e>
 800cc14:	2e00      	cmp	r6, #0
 800cc16:	dd03      	ble.n	800cc20 <__multiply+0x90>
 800cc18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d05b      	beq.n	800ccd8 <__multiply+0x148>
 800cc20:	6106      	str	r6, [r0, #16]
 800cc22:	b005      	add	sp, #20
 800cc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc28:	f843 2b04 	str.w	r2, [r3], #4
 800cc2c:	e7d8      	b.n	800cbe0 <__multiply+0x50>
 800cc2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc32:	f1ba 0f00 	cmp.w	sl, #0
 800cc36:	d024      	beq.n	800cc82 <__multiply+0xf2>
 800cc38:	f104 0e14 	add.w	lr, r4, #20
 800cc3c:	46a9      	mov	r9, r5
 800cc3e:	f04f 0c00 	mov.w	ip, #0
 800cc42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc46:	f8d9 1000 	ldr.w	r1, [r9]
 800cc4a:	fa1f fb82 	uxth.w	fp, r2
 800cc4e:	b289      	uxth	r1, r1
 800cc50:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc58:	f8d9 2000 	ldr.w	r2, [r9]
 800cc5c:	4461      	add	r1, ip
 800cc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc62:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc6a:	b289      	uxth	r1, r1
 800cc6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc70:	4577      	cmp	r7, lr
 800cc72:	f849 1b04 	str.w	r1, [r9], #4
 800cc76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc7a:	d8e2      	bhi.n	800cc42 <__multiply+0xb2>
 800cc7c:	9a01      	ldr	r2, [sp, #4]
 800cc7e:	f845 c002 	str.w	ip, [r5, r2]
 800cc82:	9a03      	ldr	r2, [sp, #12]
 800cc84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	f1b9 0f00 	cmp.w	r9, #0
 800cc8e:	d021      	beq.n	800ccd4 <__multiply+0x144>
 800cc90:	6829      	ldr	r1, [r5, #0]
 800cc92:	f104 0c14 	add.w	ip, r4, #20
 800cc96:	46ae      	mov	lr, r5
 800cc98:	f04f 0a00 	mov.w	sl, #0
 800cc9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cca4:	fb09 220b 	mla	r2, r9, fp, r2
 800cca8:	4452      	add	r2, sl
 800ccaa:	b289      	uxth	r1, r1
 800ccac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccb0:	f84e 1b04 	str.w	r1, [lr], #4
 800ccb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ccb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccbc:	f8be 1000 	ldrh.w	r1, [lr]
 800ccc0:	fb09 110a 	mla	r1, r9, sl, r1
 800ccc4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ccc8:	4567      	cmp	r7, ip
 800ccca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccce:	d8e5      	bhi.n	800cc9c <__multiply+0x10c>
 800ccd0:	9a01      	ldr	r2, [sp, #4]
 800ccd2:	50a9      	str	r1, [r5, r2]
 800ccd4:	3504      	adds	r5, #4
 800ccd6:	e799      	b.n	800cc0c <__multiply+0x7c>
 800ccd8:	3e01      	subs	r6, #1
 800ccda:	e79b      	b.n	800cc14 <__multiply+0x84>
 800ccdc:	0800e544 	.word	0x0800e544
 800cce0:	0800e566 	.word	0x0800e566

0800cce4 <__pow5mult>:
 800cce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce8:	4615      	mov	r5, r2
 800ccea:	f012 0203 	ands.w	r2, r2, #3
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	d007      	beq.n	800cd04 <__pow5mult+0x20>
 800ccf4:	4c25      	ldr	r4, [pc, #148]	; (800cd8c <__pow5mult+0xa8>)
 800ccf6:	3a01      	subs	r2, #1
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccfe:	f7ff fe9d 	bl	800ca3c <__multadd>
 800cd02:	4607      	mov	r7, r0
 800cd04:	10ad      	asrs	r5, r5, #2
 800cd06:	d03d      	beq.n	800cd84 <__pow5mult+0xa0>
 800cd08:	69f4      	ldr	r4, [r6, #28]
 800cd0a:	b97c      	cbnz	r4, 800cd2c <__pow5mult+0x48>
 800cd0c:	2010      	movs	r0, #16
 800cd0e:	f7ff fcd1 	bl	800c6b4 <malloc>
 800cd12:	4602      	mov	r2, r0
 800cd14:	61f0      	str	r0, [r6, #28]
 800cd16:	b928      	cbnz	r0, 800cd24 <__pow5mult+0x40>
 800cd18:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <__pow5mult+0xac>)
 800cd1a:	481e      	ldr	r0, [pc, #120]	; (800cd94 <__pow5mult+0xb0>)
 800cd1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd20:	f000 fa88 	bl	800d234 <__assert_func>
 800cd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd28:	6004      	str	r4, [r0, #0]
 800cd2a:	60c4      	str	r4, [r0, #12]
 800cd2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cd30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd34:	b94c      	cbnz	r4, 800cd4a <__pow5mult+0x66>
 800cd36:	f240 2171 	movw	r1, #625	; 0x271
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7ff ff12 	bl	800cb64 <__i2b>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd46:	4604      	mov	r4, r0
 800cd48:	6003      	str	r3, [r0, #0]
 800cd4a:	f04f 0900 	mov.w	r9, #0
 800cd4e:	07eb      	lsls	r3, r5, #31
 800cd50:	d50a      	bpl.n	800cd68 <__pow5mult+0x84>
 800cd52:	4639      	mov	r1, r7
 800cd54:	4622      	mov	r2, r4
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ff1a 	bl	800cb90 <__multiply>
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4680      	mov	r8, r0
 800cd60:	4630      	mov	r0, r6
 800cd62:	f7ff fe49 	bl	800c9f8 <_Bfree>
 800cd66:	4647      	mov	r7, r8
 800cd68:	106d      	asrs	r5, r5, #1
 800cd6a:	d00b      	beq.n	800cd84 <__pow5mult+0xa0>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	b938      	cbnz	r0, 800cd80 <__pow5mult+0x9c>
 800cd70:	4622      	mov	r2, r4
 800cd72:	4621      	mov	r1, r4
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff ff0b 	bl	800cb90 <__multiply>
 800cd7a:	6020      	str	r0, [r4, #0]
 800cd7c:	f8c0 9000 	str.w	r9, [r0]
 800cd80:	4604      	mov	r4, r0
 800cd82:	e7e4      	b.n	800cd4e <__pow5mult+0x6a>
 800cd84:	4638      	mov	r0, r7
 800cd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0800e6b0 	.word	0x0800e6b0
 800cd90:	0800e4d5 	.word	0x0800e4d5
 800cd94:	0800e566 	.word	0x0800e566

0800cd98 <__lshift>:
 800cd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	6849      	ldr	r1, [r1, #4]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cda6:	68a3      	ldr	r3, [r4, #8]
 800cda8:	4607      	mov	r7, r0
 800cdaa:	4691      	mov	r9, r2
 800cdac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdb0:	f108 0601 	add.w	r6, r8, #1
 800cdb4:	42b3      	cmp	r3, r6
 800cdb6:	db0b      	blt.n	800cdd0 <__lshift+0x38>
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff fddd 	bl	800c978 <_Balloc>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b948      	cbnz	r0, 800cdd6 <__lshift+0x3e>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	4b28      	ldr	r3, [pc, #160]	; (800ce68 <__lshift+0xd0>)
 800cdc6:	4829      	ldr	r0, [pc, #164]	; (800ce6c <__lshift+0xd4>)
 800cdc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cdcc:	f000 fa32 	bl	800d234 <__assert_func>
 800cdd0:	3101      	adds	r1, #1
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	e7ee      	b.n	800cdb4 <__lshift+0x1c>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f100 0114 	add.w	r1, r0, #20
 800cddc:	f100 0210 	add.w	r2, r0, #16
 800cde0:	4618      	mov	r0, r3
 800cde2:	4553      	cmp	r3, sl
 800cde4:	db33      	blt.n	800ce4e <__lshift+0xb6>
 800cde6:	6920      	ldr	r0, [r4, #16]
 800cde8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdec:	f104 0314 	add.w	r3, r4, #20
 800cdf0:	f019 091f 	ands.w	r9, r9, #31
 800cdf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdfc:	d02b      	beq.n	800ce56 <__lshift+0xbe>
 800cdfe:	f1c9 0e20 	rsb	lr, r9, #32
 800ce02:	468a      	mov	sl, r1
 800ce04:	2200      	movs	r2, #0
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	fa00 f009 	lsl.w	r0, r0, r9
 800ce0c:	4310      	orrs	r0, r2
 800ce0e:	f84a 0b04 	str.w	r0, [sl], #4
 800ce12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce16:	459c      	cmp	ip, r3
 800ce18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce1c:	d8f3      	bhi.n	800ce06 <__lshift+0x6e>
 800ce1e:	ebac 0304 	sub.w	r3, ip, r4
 800ce22:	3b15      	subs	r3, #21
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	3304      	adds	r3, #4
 800ce2a:	f104 0015 	add.w	r0, r4, #21
 800ce2e:	4584      	cmp	ip, r0
 800ce30:	bf38      	it	cc
 800ce32:	2304      	movcc	r3, #4
 800ce34:	50ca      	str	r2, [r1, r3]
 800ce36:	b10a      	cbz	r2, 800ce3c <__lshift+0xa4>
 800ce38:	f108 0602 	add.w	r6, r8, #2
 800ce3c:	3e01      	subs	r6, #1
 800ce3e:	4638      	mov	r0, r7
 800ce40:	612e      	str	r6, [r5, #16]
 800ce42:	4621      	mov	r1, r4
 800ce44:	f7ff fdd8 	bl	800c9f8 <_Bfree>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce52:	3301      	adds	r3, #1
 800ce54:	e7c5      	b.n	800cde2 <__lshift+0x4a>
 800ce56:	3904      	subs	r1, #4
 800ce58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce60:	459c      	cmp	ip, r3
 800ce62:	d8f9      	bhi.n	800ce58 <__lshift+0xc0>
 800ce64:	e7ea      	b.n	800ce3c <__lshift+0xa4>
 800ce66:	bf00      	nop
 800ce68:	0800e544 	.word	0x0800e544
 800ce6c:	0800e566 	.word	0x0800e566

0800ce70 <__mcmp>:
 800ce70:	b530      	push	{r4, r5, lr}
 800ce72:	6902      	ldr	r2, [r0, #16]
 800ce74:	690c      	ldr	r4, [r1, #16]
 800ce76:	1b12      	subs	r2, r2, r4
 800ce78:	d10e      	bne.n	800ce98 <__mcmp+0x28>
 800ce7a:	f100 0314 	add.w	r3, r0, #20
 800ce7e:	3114      	adds	r1, #20
 800ce80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce90:	42a5      	cmp	r5, r4
 800ce92:	d003      	beq.n	800ce9c <__mcmp+0x2c>
 800ce94:	d305      	bcc.n	800cea2 <__mcmp+0x32>
 800ce96:	2201      	movs	r2, #1
 800ce98:	4610      	mov	r0, r2
 800ce9a:	bd30      	pop	{r4, r5, pc}
 800ce9c:	4283      	cmp	r3, r0
 800ce9e:	d3f3      	bcc.n	800ce88 <__mcmp+0x18>
 800cea0:	e7fa      	b.n	800ce98 <__mcmp+0x28>
 800cea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cea6:	e7f7      	b.n	800ce98 <__mcmp+0x28>

0800cea8 <__mdiff>:
 800cea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceac:	460c      	mov	r4, r1
 800ceae:	4606      	mov	r6, r0
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4690      	mov	r8, r2
 800ceb6:	f7ff ffdb 	bl	800ce70 <__mcmp>
 800ceba:	1e05      	subs	r5, r0, #0
 800cebc:	d110      	bne.n	800cee0 <__mdiff+0x38>
 800cebe:	4629      	mov	r1, r5
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7ff fd59 	bl	800c978 <_Balloc>
 800cec6:	b930      	cbnz	r0, 800ced6 <__mdiff+0x2e>
 800cec8:	4b3a      	ldr	r3, [pc, #232]	; (800cfb4 <__mdiff+0x10c>)
 800ceca:	4602      	mov	r2, r0
 800cecc:	f240 2137 	movw	r1, #567	; 0x237
 800ced0:	4839      	ldr	r0, [pc, #228]	; (800cfb8 <__mdiff+0x110>)
 800ced2:	f000 f9af 	bl	800d234 <__assert_func>
 800ced6:	2301      	movs	r3, #1
 800ced8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	bfa4      	itt	ge
 800cee2:	4643      	movge	r3, r8
 800cee4:	46a0      	movge	r8, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ceec:	bfa6      	itte	ge
 800ceee:	461c      	movge	r4, r3
 800cef0:	2500      	movge	r5, #0
 800cef2:	2501      	movlt	r5, #1
 800cef4:	f7ff fd40 	bl	800c978 <_Balloc>
 800cef8:	b920      	cbnz	r0, 800cf04 <__mdiff+0x5c>
 800cefa:	4b2e      	ldr	r3, [pc, #184]	; (800cfb4 <__mdiff+0x10c>)
 800cefc:	4602      	mov	r2, r0
 800cefe:	f240 2145 	movw	r1, #581	; 0x245
 800cf02:	e7e5      	b.n	800ced0 <__mdiff+0x28>
 800cf04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf08:	6926      	ldr	r6, [r4, #16]
 800cf0a:	60c5      	str	r5, [r0, #12]
 800cf0c:	f104 0914 	add.w	r9, r4, #20
 800cf10:	f108 0514 	add.w	r5, r8, #20
 800cf14:	f100 0e14 	add.w	lr, r0, #20
 800cf18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf20:	f108 0210 	add.w	r2, r8, #16
 800cf24:	46f2      	mov	sl, lr
 800cf26:	2100      	movs	r1, #0
 800cf28:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf30:	fa11 f88b 	uxtah	r8, r1, fp
 800cf34:	b299      	uxth	r1, r3
 800cf36:	0c1b      	lsrs	r3, r3, #16
 800cf38:	eba8 0801 	sub.w	r8, r8, r1
 800cf3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf44:	fa1f f888 	uxth.w	r8, r8
 800cf48:	1419      	asrs	r1, r3, #16
 800cf4a:	454e      	cmp	r6, r9
 800cf4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf50:	f84a 3b04 	str.w	r3, [sl], #4
 800cf54:	d8e8      	bhi.n	800cf28 <__mdiff+0x80>
 800cf56:	1b33      	subs	r3, r6, r4
 800cf58:	3b15      	subs	r3, #21
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	3304      	adds	r3, #4
 800cf60:	3415      	adds	r4, #21
 800cf62:	42a6      	cmp	r6, r4
 800cf64:	bf38      	it	cc
 800cf66:	2304      	movcc	r3, #4
 800cf68:	441d      	add	r5, r3
 800cf6a:	4473      	add	r3, lr
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	462e      	mov	r6, r5
 800cf70:	4566      	cmp	r6, ip
 800cf72:	d30e      	bcc.n	800cf92 <__mdiff+0xea>
 800cf74:	f10c 0203 	add.w	r2, ip, #3
 800cf78:	1b52      	subs	r2, r2, r5
 800cf7a:	f022 0203 	bic.w	r2, r2, #3
 800cf7e:	3d03      	subs	r5, #3
 800cf80:	45ac      	cmp	ip, r5
 800cf82:	bf38      	it	cc
 800cf84:	2200      	movcc	r2, #0
 800cf86:	4413      	add	r3, r2
 800cf88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf8c:	b17a      	cbz	r2, 800cfae <__mdiff+0x106>
 800cf8e:	6107      	str	r7, [r0, #16]
 800cf90:	e7a4      	b.n	800cedc <__mdiff+0x34>
 800cf92:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf96:	fa11 f288 	uxtah	r2, r1, r8
 800cf9a:	1414      	asrs	r4, r2, #16
 800cf9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfa0:	b292      	uxth	r2, r2
 800cfa2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfa6:	f84e 2b04 	str.w	r2, [lr], #4
 800cfaa:	1421      	asrs	r1, r4, #16
 800cfac:	e7e0      	b.n	800cf70 <__mdiff+0xc8>
 800cfae:	3f01      	subs	r7, #1
 800cfb0:	e7ea      	b.n	800cf88 <__mdiff+0xe0>
 800cfb2:	bf00      	nop
 800cfb4:	0800e544 	.word	0x0800e544
 800cfb8:	0800e566 	.word	0x0800e566

0800cfbc <__d2b>:
 800cfbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	460f      	mov	r7, r1
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	ec59 8b10 	vmov	r8, r9, d0
 800cfc8:	4616      	mov	r6, r2
 800cfca:	f7ff fcd5 	bl	800c978 <_Balloc>
 800cfce:	4604      	mov	r4, r0
 800cfd0:	b930      	cbnz	r0, 800cfe0 <__d2b+0x24>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	4b24      	ldr	r3, [pc, #144]	; (800d068 <__d2b+0xac>)
 800cfd6:	4825      	ldr	r0, [pc, #148]	; (800d06c <__d2b+0xb0>)
 800cfd8:	f240 310f 	movw	r1, #783	; 0x30f
 800cfdc:	f000 f92a 	bl	800d234 <__assert_func>
 800cfe0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfe4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfe8:	bb2d      	cbnz	r5, 800d036 <__d2b+0x7a>
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	f1b8 0300 	subs.w	r3, r8, #0
 800cff0:	d026      	beq.n	800d040 <__d2b+0x84>
 800cff2:	4668      	mov	r0, sp
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	f7ff fd87 	bl	800cb08 <__lo0bits>
 800cffa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cffe:	b1e8      	cbz	r0, 800d03c <__d2b+0x80>
 800d000:	f1c0 0320 	rsb	r3, r0, #32
 800d004:	fa02 f303 	lsl.w	r3, r2, r3
 800d008:	430b      	orrs	r3, r1
 800d00a:	40c2      	lsrs	r2, r0
 800d00c:	6163      	str	r3, [r4, #20]
 800d00e:	9201      	str	r2, [sp, #4]
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	61a3      	str	r3, [r4, #24]
 800d014:	2b00      	cmp	r3, #0
 800d016:	bf14      	ite	ne
 800d018:	2202      	movne	r2, #2
 800d01a:	2201      	moveq	r2, #1
 800d01c:	6122      	str	r2, [r4, #16]
 800d01e:	b1bd      	cbz	r5, 800d050 <__d2b+0x94>
 800d020:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d024:	4405      	add	r5, r0
 800d026:	603d      	str	r5, [r7, #0]
 800d028:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d02c:	6030      	str	r0, [r6, #0]
 800d02e:	4620      	mov	r0, r4
 800d030:	b003      	add	sp, #12
 800d032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d03a:	e7d6      	b.n	800cfea <__d2b+0x2e>
 800d03c:	6161      	str	r1, [r4, #20]
 800d03e:	e7e7      	b.n	800d010 <__d2b+0x54>
 800d040:	a801      	add	r0, sp, #4
 800d042:	f7ff fd61 	bl	800cb08 <__lo0bits>
 800d046:	9b01      	ldr	r3, [sp, #4]
 800d048:	6163      	str	r3, [r4, #20]
 800d04a:	3020      	adds	r0, #32
 800d04c:	2201      	movs	r2, #1
 800d04e:	e7e5      	b.n	800d01c <__d2b+0x60>
 800d050:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d054:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d058:	6038      	str	r0, [r7, #0]
 800d05a:	6918      	ldr	r0, [r3, #16]
 800d05c:	f7ff fd34 	bl	800cac8 <__hi0bits>
 800d060:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d064:	e7e2      	b.n	800d02c <__d2b+0x70>
 800d066:	bf00      	nop
 800d068:	0800e544 	.word	0x0800e544
 800d06c:	0800e566 	.word	0x0800e566

0800d070 <__sread>:
 800d070:	b510      	push	{r4, lr}
 800d072:	460c      	mov	r4, r1
 800d074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d078:	f000 f8a8 	bl	800d1cc <_read_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	bfab      	itete	ge
 800d080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d082:	89a3      	ldrhlt	r3, [r4, #12]
 800d084:	181b      	addge	r3, r3, r0
 800d086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d08a:	bfac      	ite	ge
 800d08c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d08e:	81a3      	strhlt	r3, [r4, #12]
 800d090:	bd10      	pop	{r4, pc}

0800d092 <__swrite>:
 800d092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d096:	461f      	mov	r7, r3
 800d098:	898b      	ldrh	r3, [r1, #12]
 800d09a:	05db      	lsls	r3, r3, #23
 800d09c:	4605      	mov	r5, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	4616      	mov	r6, r2
 800d0a2:	d505      	bpl.n	800d0b0 <__swrite+0x1e>
 800d0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f000 f87c 	bl	800d1a8 <_lseek_r>
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0ba:	81a3      	strh	r3, [r4, #12]
 800d0bc:	4632      	mov	r2, r6
 800d0be:	463b      	mov	r3, r7
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c6:	f000 b8a3 	b.w	800d210 <_write_r>

0800d0ca <__sseek>:
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d2:	f000 f869 	bl	800d1a8 <_lseek_r>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	bf15      	itete	ne
 800d0dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0e6:	81a3      	strheq	r3, [r4, #12]
 800d0e8:	bf18      	it	ne
 800d0ea:	81a3      	strhne	r3, [r4, #12]
 800d0ec:	bd10      	pop	{r4, pc}

0800d0ee <__sclose>:
 800d0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f2:	f000 b849 	b.w	800d188 <_close_r>

0800d0f6 <_realloc_r>:
 800d0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	460e      	mov	r6, r1
 800d100:	b921      	cbnz	r1, 800d10c <_realloc_r+0x16>
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	4611      	mov	r1, r2
 800d108:	f7ff bafc 	b.w	800c704 <_malloc_r>
 800d10c:	b92a      	cbnz	r2, 800d11a <_realloc_r+0x24>
 800d10e:	f000 f8c5 	bl	800d29c <_free_r>
 800d112:	4625      	mov	r5, r4
 800d114:	4628      	mov	r0, r5
 800d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11a:	f000 f91d 	bl	800d358 <_malloc_usable_size_r>
 800d11e:	4284      	cmp	r4, r0
 800d120:	4607      	mov	r7, r0
 800d122:	d802      	bhi.n	800d12a <_realloc_r+0x34>
 800d124:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d128:	d812      	bhi.n	800d150 <_realloc_r+0x5a>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4640      	mov	r0, r8
 800d12e:	f7ff fae9 	bl	800c704 <_malloc_r>
 800d132:	4605      	mov	r5, r0
 800d134:	2800      	cmp	r0, #0
 800d136:	d0ed      	beq.n	800d114 <_realloc_r+0x1e>
 800d138:	42bc      	cmp	r4, r7
 800d13a:	4622      	mov	r2, r4
 800d13c:	4631      	mov	r1, r6
 800d13e:	bf28      	it	cs
 800d140:	463a      	movcs	r2, r7
 800d142:	f7fe fad4 	bl	800b6ee <memcpy>
 800d146:	4631      	mov	r1, r6
 800d148:	4640      	mov	r0, r8
 800d14a:	f000 f8a7 	bl	800d29c <_free_r>
 800d14e:	e7e1      	b.n	800d114 <_realloc_r+0x1e>
 800d150:	4635      	mov	r5, r6
 800d152:	e7df      	b.n	800d114 <_realloc_r+0x1e>

0800d154 <memmove>:
 800d154:	4288      	cmp	r0, r1
 800d156:	b510      	push	{r4, lr}
 800d158:	eb01 0402 	add.w	r4, r1, r2
 800d15c:	d902      	bls.n	800d164 <memmove+0x10>
 800d15e:	4284      	cmp	r4, r0
 800d160:	4623      	mov	r3, r4
 800d162:	d807      	bhi.n	800d174 <memmove+0x20>
 800d164:	1e43      	subs	r3, r0, #1
 800d166:	42a1      	cmp	r1, r4
 800d168:	d008      	beq.n	800d17c <memmove+0x28>
 800d16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d172:	e7f8      	b.n	800d166 <memmove+0x12>
 800d174:	4402      	add	r2, r0
 800d176:	4601      	mov	r1, r0
 800d178:	428a      	cmp	r2, r1
 800d17a:	d100      	bne.n	800d17e <memmove+0x2a>
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d186:	e7f7      	b.n	800d178 <memmove+0x24>

0800d188 <_close_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d06      	ldr	r5, [pc, #24]	; (800d1a4 <_close_r+0x1c>)
 800d18c:	2300      	movs	r3, #0
 800d18e:	4604      	mov	r4, r0
 800d190:	4608      	mov	r0, r1
 800d192:	602b      	str	r3, [r5, #0]
 800d194:	f7f6 f9af 	bl	80034f6 <_close>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_close_r+0x1a>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_close_r+0x1a>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	200036cc 	.word	0x200036cc

0800d1a8 <_lseek_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	; (800d1c8 <_lseek_r+0x20>)
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f6 f9c4 	bl	8003544 <_lseek>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_lseek_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_lseek_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	200036cc 	.word	0x200036cc

0800d1cc <_read_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	; (800d1ec <_read_r+0x20>)
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	602a      	str	r2, [r5, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7f6 f952 	bl	8003484 <_read>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_read_r+0x1e>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_read_r+0x1e>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	200036cc 	.word	0x200036cc

0800d1f0 <_sbrk_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d06      	ldr	r5, [pc, #24]	; (800d20c <_sbrk_r+0x1c>)
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	602b      	str	r3, [r5, #0]
 800d1fc:	f7f6 f9b0 	bl	8003560 <_sbrk>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_sbrk_r+0x1a>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_sbrk_r+0x1a>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	200036cc 	.word	0x200036cc

0800d210 <_write_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_write_r+0x20>)
 800d214:	4604      	mov	r4, r0
 800d216:	4608      	mov	r0, r1
 800d218:	4611      	mov	r1, r2
 800d21a:	2200      	movs	r2, #0
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f6 f94d 	bl	80034be <_write>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_write_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_write_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	200036cc 	.word	0x200036cc

0800d234 <__assert_func>:
 800d234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d236:	4614      	mov	r4, r2
 800d238:	461a      	mov	r2, r3
 800d23a:	4b09      	ldr	r3, [pc, #36]	; (800d260 <__assert_func+0x2c>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4605      	mov	r5, r0
 800d240:	68d8      	ldr	r0, [r3, #12]
 800d242:	b14c      	cbz	r4, 800d258 <__assert_func+0x24>
 800d244:	4b07      	ldr	r3, [pc, #28]	; (800d264 <__assert_func+0x30>)
 800d246:	9100      	str	r1, [sp, #0]
 800d248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d24c:	4906      	ldr	r1, [pc, #24]	; (800d268 <__assert_func+0x34>)
 800d24e:	462b      	mov	r3, r5
 800d250:	f000 f88a 	bl	800d368 <fiprintf>
 800d254:	f000 f8a7 	bl	800d3a6 <abort>
 800d258:	4b04      	ldr	r3, [pc, #16]	; (800d26c <__assert_func+0x38>)
 800d25a:	461c      	mov	r4, r3
 800d25c:	e7f3      	b.n	800d246 <__assert_func+0x12>
 800d25e:	bf00      	nop
 800d260:	20000118 	.word	0x20000118
 800d264:	0800e7c7 	.word	0x0800e7c7
 800d268:	0800e7d4 	.word	0x0800e7d4
 800d26c:	0800e802 	.word	0x0800e802

0800d270 <_calloc_r>:
 800d270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d272:	fba1 2402 	umull	r2, r4, r1, r2
 800d276:	b94c      	cbnz	r4, 800d28c <_calloc_r+0x1c>
 800d278:	4611      	mov	r1, r2
 800d27a:	9201      	str	r2, [sp, #4]
 800d27c:	f7ff fa42 	bl	800c704 <_malloc_r>
 800d280:	9a01      	ldr	r2, [sp, #4]
 800d282:	4605      	mov	r5, r0
 800d284:	b930      	cbnz	r0, 800d294 <_calloc_r+0x24>
 800d286:	4628      	mov	r0, r5
 800d288:	b003      	add	sp, #12
 800d28a:	bd30      	pop	{r4, r5, pc}
 800d28c:	220c      	movs	r2, #12
 800d28e:	6002      	str	r2, [r0, #0]
 800d290:	2500      	movs	r5, #0
 800d292:	e7f8      	b.n	800d286 <_calloc_r+0x16>
 800d294:	4621      	mov	r1, r4
 800d296:	f7fe f9f1 	bl	800b67c <memset>
 800d29a:	e7f4      	b.n	800d286 <_calloc_r+0x16>

0800d29c <_free_r>:
 800d29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d29e:	2900      	cmp	r1, #0
 800d2a0:	d044      	beq.n	800d32c <_free_r+0x90>
 800d2a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a6:	9001      	str	r0, [sp, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d2ae:	bfb8      	it	lt
 800d2b0:	18e4      	addlt	r4, r4, r3
 800d2b2:	f7ff fb55 	bl	800c960 <__malloc_lock>
 800d2b6:	4a1e      	ldr	r2, [pc, #120]	; (800d330 <_free_r+0x94>)
 800d2b8:	9801      	ldr	r0, [sp, #4]
 800d2ba:	6813      	ldr	r3, [r2, #0]
 800d2bc:	b933      	cbnz	r3, 800d2cc <_free_r+0x30>
 800d2be:	6063      	str	r3, [r4, #4]
 800d2c0:	6014      	str	r4, [r2, #0]
 800d2c2:	b003      	add	sp, #12
 800d2c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2c8:	f7ff bb50 	b.w	800c96c <__malloc_unlock>
 800d2cc:	42a3      	cmp	r3, r4
 800d2ce:	d908      	bls.n	800d2e2 <_free_r+0x46>
 800d2d0:	6825      	ldr	r5, [r4, #0]
 800d2d2:	1961      	adds	r1, r4, r5
 800d2d4:	428b      	cmp	r3, r1
 800d2d6:	bf01      	itttt	eq
 800d2d8:	6819      	ldreq	r1, [r3, #0]
 800d2da:	685b      	ldreq	r3, [r3, #4]
 800d2dc:	1949      	addeq	r1, r1, r5
 800d2de:	6021      	streq	r1, [r4, #0]
 800d2e0:	e7ed      	b.n	800d2be <_free_r+0x22>
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	b10b      	cbz	r3, 800d2ec <_free_r+0x50>
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	d9fa      	bls.n	800d2e2 <_free_r+0x46>
 800d2ec:	6811      	ldr	r1, [r2, #0]
 800d2ee:	1855      	adds	r5, r2, r1
 800d2f0:	42a5      	cmp	r5, r4
 800d2f2:	d10b      	bne.n	800d30c <_free_r+0x70>
 800d2f4:	6824      	ldr	r4, [r4, #0]
 800d2f6:	4421      	add	r1, r4
 800d2f8:	1854      	adds	r4, r2, r1
 800d2fa:	42a3      	cmp	r3, r4
 800d2fc:	6011      	str	r1, [r2, #0]
 800d2fe:	d1e0      	bne.n	800d2c2 <_free_r+0x26>
 800d300:	681c      	ldr	r4, [r3, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	6053      	str	r3, [r2, #4]
 800d306:	440c      	add	r4, r1
 800d308:	6014      	str	r4, [r2, #0]
 800d30a:	e7da      	b.n	800d2c2 <_free_r+0x26>
 800d30c:	d902      	bls.n	800d314 <_free_r+0x78>
 800d30e:	230c      	movs	r3, #12
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	e7d6      	b.n	800d2c2 <_free_r+0x26>
 800d314:	6825      	ldr	r5, [r4, #0]
 800d316:	1961      	adds	r1, r4, r5
 800d318:	428b      	cmp	r3, r1
 800d31a:	bf04      	itt	eq
 800d31c:	6819      	ldreq	r1, [r3, #0]
 800d31e:	685b      	ldreq	r3, [r3, #4]
 800d320:	6063      	str	r3, [r4, #4]
 800d322:	bf04      	itt	eq
 800d324:	1949      	addeq	r1, r1, r5
 800d326:	6021      	streq	r1, [r4, #0]
 800d328:	6054      	str	r4, [r2, #4]
 800d32a:	e7ca      	b.n	800d2c2 <_free_r+0x26>
 800d32c:	b003      	add	sp, #12
 800d32e:	bd30      	pop	{r4, r5, pc}
 800d330:	200036c4 	.word	0x200036c4

0800d334 <__ascii_mbtowc>:
 800d334:	b082      	sub	sp, #8
 800d336:	b901      	cbnz	r1, 800d33a <__ascii_mbtowc+0x6>
 800d338:	a901      	add	r1, sp, #4
 800d33a:	b142      	cbz	r2, 800d34e <__ascii_mbtowc+0x1a>
 800d33c:	b14b      	cbz	r3, 800d352 <__ascii_mbtowc+0x1e>
 800d33e:	7813      	ldrb	r3, [r2, #0]
 800d340:	600b      	str	r3, [r1, #0]
 800d342:	7812      	ldrb	r2, [r2, #0]
 800d344:	1e10      	subs	r0, r2, #0
 800d346:	bf18      	it	ne
 800d348:	2001      	movne	r0, #1
 800d34a:	b002      	add	sp, #8
 800d34c:	4770      	bx	lr
 800d34e:	4610      	mov	r0, r2
 800d350:	e7fb      	b.n	800d34a <__ascii_mbtowc+0x16>
 800d352:	f06f 0001 	mvn.w	r0, #1
 800d356:	e7f8      	b.n	800d34a <__ascii_mbtowc+0x16>

0800d358 <_malloc_usable_size_r>:
 800d358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d35c:	1f18      	subs	r0, r3, #4
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbc      	itt	lt
 800d362:	580b      	ldrlt	r3, [r1, r0]
 800d364:	18c0      	addlt	r0, r0, r3
 800d366:	4770      	bx	lr

0800d368 <fiprintf>:
 800d368:	b40e      	push	{r1, r2, r3}
 800d36a:	b503      	push	{r0, r1, lr}
 800d36c:	4601      	mov	r1, r0
 800d36e:	ab03      	add	r3, sp, #12
 800d370:	4805      	ldr	r0, [pc, #20]	; (800d388 <fiprintf+0x20>)
 800d372:	f853 2b04 	ldr.w	r2, [r3], #4
 800d376:	6800      	ldr	r0, [r0, #0]
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	f000 f845 	bl	800d408 <_vfiprintf_r>
 800d37e:	b002      	add	sp, #8
 800d380:	f85d eb04 	ldr.w	lr, [sp], #4
 800d384:	b003      	add	sp, #12
 800d386:	4770      	bx	lr
 800d388:	20000118 	.word	0x20000118

0800d38c <__ascii_wctomb>:
 800d38c:	b149      	cbz	r1, 800d3a2 <__ascii_wctomb+0x16>
 800d38e:	2aff      	cmp	r2, #255	; 0xff
 800d390:	bf85      	ittet	hi
 800d392:	238a      	movhi	r3, #138	; 0x8a
 800d394:	6003      	strhi	r3, [r0, #0]
 800d396:	700a      	strbls	r2, [r1, #0]
 800d398:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d39c:	bf98      	it	ls
 800d39e:	2001      	movls	r0, #1
 800d3a0:	4770      	bx	lr
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4770      	bx	lr

0800d3a6 <abort>:
 800d3a6:	b508      	push	{r3, lr}
 800d3a8:	2006      	movs	r0, #6
 800d3aa:	f000 fa89 	bl	800d8c0 <raise>
 800d3ae:	2001      	movs	r0, #1
 800d3b0:	f7f6 f85e 	bl	8003470 <_exit>

0800d3b4 <__sfputc_r>:
 800d3b4:	6893      	ldr	r3, [r2, #8]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	b410      	push	{r4}
 800d3bc:	6093      	str	r3, [r2, #8]
 800d3be:	da08      	bge.n	800d3d2 <__sfputc_r+0x1e>
 800d3c0:	6994      	ldr	r4, [r2, #24]
 800d3c2:	42a3      	cmp	r3, r4
 800d3c4:	db01      	blt.n	800d3ca <__sfputc_r+0x16>
 800d3c6:	290a      	cmp	r1, #10
 800d3c8:	d103      	bne.n	800d3d2 <__sfputc_r+0x1e>
 800d3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ce:	f000 b935 	b.w	800d63c <__swbuf_r>
 800d3d2:	6813      	ldr	r3, [r2, #0]
 800d3d4:	1c58      	adds	r0, r3, #1
 800d3d6:	6010      	str	r0, [r2, #0]
 800d3d8:	7019      	strb	r1, [r3, #0]
 800d3da:	4608      	mov	r0, r1
 800d3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <__sfputs_r>:
 800d3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	18d5      	adds	r5, r2, r3
 800d3ec:	42ac      	cmp	r4, r5
 800d3ee:	d101      	bne.n	800d3f4 <__sfputs_r+0x12>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e007      	b.n	800d404 <__sfputs_r+0x22>
 800d3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f8:	463a      	mov	r2, r7
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7ff ffda 	bl	800d3b4 <__sfputc_r>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d1f3      	bne.n	800d3ec <__sfputs_r+0xa>
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d408 <_vfiprintf_r>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	460d      	mov	r5, r1
 800d40e:	b09d      	sub	sp, #116	; 0x74
 800d410:	4614      	mov	r4, r2
 800d412:	4698      	mov	r8, r3
 800d414:	4606      	mov	r6, r0
 800d416:	b118      	cbz	r0, 800d420 <_vfiprintf_r+0x18>
 800d418:	6a03      	ldr	r3, [r0, #32]
 800d41a:	b90b      	cbnz	r3, 800d420 <_vfiprintf_r+0x18>
 800d41c:	f7fe f8d8 	bl	800b5d0 <__sinit>
 800d420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d422:	07d9      	lsls	r1, r3, #31
 800d424:	d405      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d426:	89ab      	ldrh	r3, [r5, #12]
 800d428:	059a      	lsls	r2, r3, #22
 800d42a:	d402      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d42e:	f7fe f95c 	bl	800b6ea <__retarget_lock_acquire_recursive>
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	071b      	lsls	r3, r3, #28
 800d436:	d501      	bpl.n	800d43c <_vfiprintf_r+0x34>
 800d438:	692b      	ldr	r3, [r5, #16]
 800d43a:	b99b      	cbnz	r3, 800d464 <_vfiprintf_r+0x5c>
 800d43c:	4629      	mov	r1, r5
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 f93a 	bl	800d6b8 <__swsetup_r>
 800d444:	b170      	cbz	r0, 800d464 <_vfiprintf_r+0x5c>
 800d446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d448:	07dc      	lsls	r4, r3, #31
 800d44a:	d504      	bpl.n	800d456 <_vfiprintf_r+0x4e>
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d450:	b01d      	add	sp, #116	; 0x74
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	0598      	lsls	r0, r3, #22
 800d45a:	d4f7      	bmi.n	800d44c <_vfiprintf_r+0x44>
 800d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45e:	f7fe f945 	bl	800b6ec <__retarget_lock_release_recursive>
 800d462:	e7f3      	b.n	800d44c <_vfiprintf_r+0x44>
 800d464:	2300      	movs	r3, #0
 800d466:	9309      	str	r3, [sp, #36]	; 0x24
 800d468:	2320      	movs	r3, #32
 800d46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d472:	2330      	movs	r3, #48	; 0x30
 800d474:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d628 <_vfiprintf_r+0x220>
 800d478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d47c:	f04f 0901 	mov.w	r9, #1
 800d480:	4623      	mov	r3, r4
 800d482:	469a      	mov	sl, r3
 800d484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d488:	b10a      	cbz	r2, 800d48e <_vfiprintf_r+0x86>
 800d48a:	2a25      	cmp	r2, #37	; 0x25
 800d48c:	d1f9      	bne.n	800d482 <_vfiprintf_r+0x7a>
 800d48e:	ebba 0b04 	subs.w	fp, sl, r4
 800d492:	d00b      	beq.n	800d4ac <_vfiprintf_r+0xa4>
 800d494:	465b      	mov	r3, fp
 800d496:	4622      	mov	r2, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ffa1 	bl	800d3e2 <__sfputs_r>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f000 80a9 	beq.w	800d5f8 <_vfiprintf_r+0x1f0>
 800d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a8:	445a      	add	r2, fp
 800d4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80a1 	beq.w	800d5f8 <_vfiprintf_r+0x1f0>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c0:	f10a 0a01 	add.w	sl, sl, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	9307      	str	r3, [sp, #28]
 800d4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ce:	4654      	mov	r4, sl
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	4854      	ldr	r0, [pc, #336]	; (800d628 <_vfiprintf_r+0x220>)
 800d4d8:	f7f2 fe82 	bl	80001e0 <memchr>
 800d4dc:	9a04      	ldr	r2, [sp, #16]
 800d4de:	b9d8      	cbnz	r0, 800d518 <_vfiprintf_r+0x110>
 800d4e0:	06d1      	lsls	r1, r2, #27
 800d4e2:	bf44      	itt	mi
 800d4e4:	2320      	movmi	r3, #32
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ea:	0713      	lsls	r3, r2, #28
 800d4ec:	bf44      	itt	mi
 800d4ee:	232b      	movmi	r3, #43	; 0x2b
 800d4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4fa:	d015      	beq.n	800d528 <_vfiprintf_r+0x120>
 800d4fc:	9a07      	ldr	r2, [sp, #28]
 800d4fe:	4654      	mov	r4, sl
 800d500:	2000      	movs	r0, #0
 800d502:	f04f 0c0a 	mov.w	ip, #10
 800d506:	4621      	mov	r1, r4
 800d508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d50c:	3b30      	subs	r3, #48	; 0x30
 800d50e:	2b09      	cmp	r3, #9
 800d510:	d94d      	bls.n	800d5ae <_vfiprintf_r+0x1a6>
 800d512:	b1b0      	cbz	r0, 800d542 <_vfiprintf_r+0x13a>
 800d514:	9207      	str	r2, [sp, #28]
 800d516:	e014      	b.n	800d542 <_vfiprintf_r+0x13a>
 800d518:	eba0 0308 	sub.w	r3, r0, r8
 800d51c:	fa09 f303 	lsl.w	r3, r9, r3
 800d520:	4313      	orrs	r3, r2
 800d522:	9304      	str	r3, [sp, #16]
 800d524:	46a2      	mov	sl, r4
 800d526:	e7d2      	b.n	800d4ce <_vfiprintf_r+0xc6>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d19      	adds	r1, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfbb      	ittet	lt
 800d534:	425b      	neglt	r3, r3
 800d536:	f042 0202 	orrlt.w	r2, r2, #2
 800d53a:	9307      	strge	r3, [sp, #28]
 800d53c:	9307      	strlt	r3, [sp, #28]
 800d53e:	bfb8      	it	lt
 800d540:	9204      	strlt	r2, [sp, #16]
 800d542:	7823      	ldrb	r3, [r4, #0]
 800d544:	2b2e      	cmp	r3, #46	; 0x2e
 800d546:	d10c      	bne.n	800d562 <_vfiprintf_r+0x15a>
 800d548:	7863      	ldrb	r3, [r4, #1]
 800d54a:	2b2a      	cmp	r3, #42	; 0x2a
 800d54c:	d134      	bne.n	800d5b8 <_vfiprintf_r+0x1b0>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	1d1a      	adds	r2, r3, #4
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	9203      	str	r2, [sp, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	bfb8      	it	lt
 800d55a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d55e:	3402      	adds	r4, #2
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d638 <_vfiprintf_r+0x230>
 800d566:	7821      	ldrb	r1, [r4, #0]
 800d568:	2203      	movs	r2, #3
 800d56a:	4650      	mov	r0, sl
 800d56c:	f7f2 fe38 	bl	80001e0 <memchr>
 800d570:	b138      	cbz	r0, 800d582 <_vfiprintf_r+0x17a>
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	eba0 000a 	sub.w	r0, r0, sl
 800d578:	2240      	movs	r2, #64	; 0x40
 800d57a:	4082      	lsls	r2, r0
 800d57c:	4313      	orrs	r3, r2
 800d57e:	3401      	adds	r4, #1
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d586:	4829      	ldr	r0, [pc, #164]	; (800d62c <_vfiprintf_r+0x224>)
 800d588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d58c:	2206      	movs	r2, #6
 800d58e:	f7f2 fe27 	bl	80001e0 <memchr>
 800d592:	2800      	cmp	r0, #0
 800d594:	d03f      	beq.n	800d616 <_vfiprintf_r+0x20e>
 800d596:	4b26      	ldr	r3, [pc, #152]	; (800d630 <_vfiprintf_r+0x228>)
 800d598:	bb1b      	cbnz	r3, 800d5e2 <_vfiprintf_r+0x1da>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	3307      	adds	r3, #7
 800d59e:	f023 0307 	bic.w	r3, r3, #7
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	9303      	str	r3, [sp, #12]
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	443b      	add	r3, r7
 800d5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ac:	e768      	b.n	800d480 <_vfiprintf_r+0x78>
 800d5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	e7a6      	b.n	800d506 <_vfiprintf_r+0xfe>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	3401      	adds	r4, #1
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f04f 0c0a 	mov.w	ip, #10
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ca:	3a30      	subs	r2, #48	; 0x30
 800d5cc:	2a09      	cmp	r2, #9
 800d5ce:	d903      	bls.n	800d5d8 <_vfiprintf_r+0x1d0>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0c6      	beq.n	800d562 <_vfiprintf_r+0x15a>
 800d5d4:	9105      	str	r1, [sp, #20]
 800d5d6:	e7c4      	b.n	800d562 <_vfiprintf_r+0x15a>
 800d5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5dc:	4604      	mov	r4, r0
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e7f0      	b.n	800d5c4 <_vfiprintf_r+0x1bc>
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4b12      	ldr	r3, [pc, #72]	; (800d634 <_vfiprintf_r+0x22c>)
 800d5ea:	a904      	add	r1, sp, #16
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7fd fb9d 	bl	800ad2c <_printf_float>
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	1c78      	adds	r0, r7, #1
 800d5f6:	d1d6      	bne.n	800d5a6 <_vfiprintf_r+0x19e>
 800d5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5fa:	07d9      	lsls	r1, r3, #31
 800d5fc:	d405      	bmi.n	800d60a <_vfiprintf_r+0x202>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	059a      	lsls	r2, r3, #22
 800d602:	d402      	bmi.n	800d60a <_vfiprintf_r+0x202>
 800d604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d606:	f7fe f871 	bl	800b6ec <__retarget_lock_release_recursive>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	065b      	lsls	r3, r3, #25
 800d60e:	f53f af1d 	bmi.w	800d44c <_vfiprintf_r+0x44>
 800d612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d614:	e71c      	b.n	800d450 <_vfiprintf_r+0x48>
 800d616:	ab03      	add	r3, sp, #12
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	462a      	mov	r2, r5
 800d61c:	4b05      	ldr	r3, [pc, #20]	; (800d634 <_vfiprintf_r+0x22c>)
 800d61e:	a904      	add	r1, sp, #16
 800d620:	4630      	mov	r0, r6
 800d622:	f7fd fe27 	bl	800b274 <_printf_i>
 800d626:	e7e4      	b.n	800d5f2 <_vfiprintf_r+0x1ea>
 800d628:	0800e555 	.word	0x0800e555
 800d62c:	0800e55f 	.word	0x0800e55f
 800d630:	0800ad2d 	.word	0x0800ad2d
 800d634:	0800d3e3 	.word	0x0800d3e3
 800d638:	0800e55b 	.word	0x0800e55b

0800d63c <__swbuf_r>:
 800d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63e:	460e      	mov	r6, r1
 800d640:	4614      	mov	r4, r2
 800d642:	4605      	mov	r5, r0
 800d644:	b118      	cbz	r0, 800d64e <__swbuf_r+0x12>
 800d646:	6a03      	ldr	r3, [r0, #32]
 800d648:	b90b      	cbnz	r3, 800d64e <__swbuf_r+0x12>
 800d64a:	f7fd ffc1 	bl	800b5d0 <__sinit>
 800d64e:	69a3      	ldr	r3, [r4, #24]
 800d650:	60a3      	str	r3, [r4, #8]
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	071a      	lsls	r2, r3, #28
 800d656:	d525      	bpl.n	800d6a4 <__swbuf_r+0x68>
 800d658:	6923      	ldr	r3, [r4, #16]
 800d65a:	b31b      	cbz	r3, 800d6a4 <__swbuf_r+0x68>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	6922      	ldr	r2, [r4, #16]
 800d660:	1a98      	subs	r0, r3, r2
 800d662:	6963      	ldr	r3, [r4, #20]
 800d664:	b2f6      	uxtb	r6, r6
 800d666:	4283      	cmp	r3, r0
 800d668:	4637      	mov	r7, r6
 800d66a:	dc04      	bgt.n	800d676 <__swbuf_r+0x3a>
 800d66c:	4621      	mov	r1, r4
 800d66e:	4628      	mov	r0, r5
 800d670:	f7ff f94e 	bl	800c910 <_fflush_r>
 800d674:	b9e0      	cbnz	r0, 800d6b0 <__swbuf_r+0x74>
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	3b01      	subs	r3, #1
 800d67a:	60a3      	str	r3, [r4, #8]
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	701e      	strb	r6, [r3, #0]
 800d684:	6962      	ldr	r2, [r4, #20]
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	429a      	cmp	r2, r3
 800d68a:	d004      	beq.n	800d696 <__swbuf_r+0x5a>
 800d68c:	89a3      	ldrh	r3, [r4, #12]
 800d68e:	07db      	lsls	r3, r3, #31
 800d690:	d506      	bpl.n	800d6a0 <__swbuf_r+0x64>
 800d692:	2e0a      	cmp	r6, #10
 800d694:	d104      	bne.n	800d6a0 <__swbuf_r+0x64>
 800d696:	4621      	mov	r1, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	f7ff f939 	bl	800c910 <_fflush_r>
 800d69e:	b938      	cbnz	r0, 800d6b0 <__swbuf_r+0x74>
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f000 f806 	bl	800d6b8 <__swsetup_r>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d0d5      	beq.n	800d65c <__swbuf_r+0x20>
 800d6b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d6b4:	e7f4      	b.n	800d6a0 <__swbuf_r+0x64>
	...

0800d6b8 <__swsetup_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4b2a      	ldr	r3, [pc, #168]	; (800d764 <__swsetup_r+0xac>)
 800d6bc:	4605      	mov	r5, r0
 800d6be:	6818      	ldr	r0, [r3, #0]
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	b118      	cbz	r0, 800d6cc <__swsetup_r+0x14>
 800d6c4:	6a03      	ldr	r3, [r0, #32]
 800d6c6:	b90b      	cbnz	r3, 800d6cc <__swsetup_r+0x14>
 800d6c8:	f7fd ff82 	bl	800b5d0 <__sinit>
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6d2:	0718      	lsls	r0, r3, #28
 800d6d4:	d422      	bmi.n	800d71c <__swsetup_r+0x64>
 800d6d6:	06d9      	lsls	r1, r3, #27
 800d6d8:	d407      	bmi.n	800d6ea <__swsetup_r+0x32>
 800d6da:	2309      	movs	r3, #9
 800d6dc:	602b      	str	r3, [r5, #0]
 800d6de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6e2:	81a3      	strh	r3, [r4, #12]
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6e8:	e034      	b.n	800d754 <__swsetup_r+0x9c>
 800d6ea:	0758      	lsls	r0, r3, #29
 800d6ec:	d512      	bpl.n	800d714 <__swsetup_r+0x5c>
 800d6ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6f0:	b141      	cbz	r1, 800d704 <__swsetup_r+0x4c>
 800d6f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f6:	4299      	cmp	r1, r3
 800d6f8:	d002      	beq.n	800d700 <__swsetup_r+0x48>
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f7ff fdce 	bl	800d29c <_free_r>
 800d700:	2300      	movs	r3, #0
 800d702:	6363      	str	r3, [r4, #52]	; 0x34
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	2300      	movs	r3, #0
 800d70e:	6063      	str	r3, [r4, #4]
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	6023      	str	r3, [r4, #0]
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	f043 0308 	orr.w	r3, r3, #8
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	6923      	ldr	r3, [r4, #16]
 800d71e:	b94b      	cbnz	r3, 800d734 <__swsetup_r+0x7c>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d72a:	d003      	beq.n	800d734 <__swsetup_r+0x7c>
 800d72c:	4621      	mov	r1, r4
 800d72e:	4628      	mov	r0, r5
 800d730:	f000 f840 	bl	800d7b4 <__smakebuf_r>
 800d734:	89a0      	ldrh	r0, [r4, #12]
 800d736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d73a:	f010 0301 	ands.w	r3, r0, #1
 800d73e:	d00a      	beq.n	800d756 <__swsetup_r+0x9e>
 800d740:	2300      	movs	r3, #0
 800d742:	60a3      	str	r3, [r4, #8]
 800d744:	6963      	ldr	r3, [r4, #20]
 800d746:	425b      	negs	r3, r3
 800d748:	61a3      	str	r3, [r4, #24]
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	b943      	cbnz	r3, 800d760 <__swsetup_r+0xa8>
 800d74e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d752:	d1c4      	bne.n	800d6de <__swsetup_r+0x26>
 800d754:	bd38      	pop	{r3, r4, r5, pc}
 800d756:	0781      	lsls	r1, r0, #30
 800d758:	bf58      	it	pl
 800d75a:	6963      	ldrpl	r3, [r4, #20]
 800d75c:	60a3      	str	r3, [r4, #8]
 800d75e:	e7f4      	b.n	800d74a <__swsetup_r+0x92>
 800d760:	2000      	movs	r0, #0
 800d762:	e7f7      	b.n	800d754 <__swsetup_r+0x9c>
 800d764:	20000118 	.word	0x20000118

0800d768 <__swhatbuf_r>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	460c      	mov	r4, r1
 800d76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d770:	2900      	cmp	r1, #0
 800d772:	b096      	sub	sp, #88	; 0x58
 800d774:	4615      	mov	r5, r2
 800d776:	461e      	mov	r6, r3
 800d778:	da0d      	bge.n	800d796 <__swhatbuf_r+0x2e>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d780:	f04f 0100 	mov.w	r1, #0
 800d784:	bf0c      	ite	eq
 800d786:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d78a:	2340      	movne	r3, #64	; 0x40
 800d78c:	2000      	movs	r0, #0
 800d78e:	6031      	str	r1, [r6, #0]
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	b016      	add	sp, #88	; 0x58
 800d794:	bd70      	pop	{r4, r5, r6, pc}
 800d796:	466a      	mov	r2, sp
 800d798:	f000 f848 	bl	800d82c <_fstat_r>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	dbec      	blt.n	800d77a <__swhatbuf_r+0x12>
 800d7a0:	9901      	ldr	r1, [sp, #4]
 800d7a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d7a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d7aa:	4259      	negs	r1, r3
 800d7ac:	4159      	adcs	r1, r3
 800d7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7b2:	e7eb      	b.n	800d78c <__swhatbuf_r+0x24>

0800d7b4 <__smakebuf_r>:
 800d7b4:	898b      	ldrh	r3, [r1, #12]
 800d7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7b8:	079d      	lsls	r5, r3, #30
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	460c      	mov	r4, r1
 800d7be:	d507      	bpl.n	800d7d0 <__smakebuf_r+0x1c>
 800d7c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	6123      	str	r3, [r4, #16]
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	6163      	str	r3, [r4, #20]
 800d7cc:	b002      	add	sp, #8
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	ab01      	add	r3, sp, #4
 800d7d2:	466a      	mov	r2, sp
 800d7d4:	f7ff ffc8 	bl	800d768 <__swhatbuf_r>
 800d7d8:	9900      	ldr	r1, [sp, #0]
 800d7da:	4605      	mov	r5, r0
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7fe ff91 	bl	800c704 <_malloc_r>
 800d7e2:	b948      	cbnz	r0, 800d7f8 <__smakebuf_r+0x44>
 800d7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e8:	059a      	lsls	r2, r3, #22
 800d7ea:	d4ef      	bmi.n	800d7cc <__smakebuf_r+0x18>
 800d7ec:	f023 0303 	bic.w	r3, r3, #3
 800d7f0:	f043 0302 	orr.w	r3, r3, #2
 800d7f4:	81a3      	strh	r3, [r4, #12]
 800d7f6:	e7e3      	b.n	800d7c0 <__smakebuf_r+0xc>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	6020      	str	r0, [r4, #0]
 800d7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d800:	81a3      	strh	r3, [r4, #12]
 800d802:	9b00      	ldr	r3, [sp, #0]
 800d804:	6163      	str	r3, [r4, #20]
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	6120      	str	r0, [r4, #16]
 800d80a:	b15b      	cbz	r3, 800d824 <__smakebuf_r+0x70>
 800d80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d810:	4630      	mov	r0, r6
 800d812:	f000 f81d 	bl	800d850 <_isatty_r>
 800d816:	b128      	cbz	r0, 800d824 <__smakebuf_r+0x70>
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	f043 0301 	orr.w	r3, r3, #1
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	431d      	orrs	r5, r3
 800d828:	81a5      	strh	r5, [r4, #12]
 800d82a:	e7cf      	b.n	800d7cc <__smakebuf_r+0x18>

0800d82c <_fstat_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d07      	ldr	r5, [pc, #28]	; (800d84c <_fstat_r+0x20>)
 800d830:	2300      	movs	r3, #0
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	4611      	mov	r1, r2
 800d838:	602b      	str	r3, [r5, #0]
 800d83a:	f7f5 fe68 	bl	800350e <_fstat>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	d102      	bne.n	800d848 <_fstat_r+0x1c>
 800d842:	682b      	ldr	r3, [r5, #0]
 800d844:	b103      	cbz	r3, 800d848 <_fstat_r+0x1c>
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	bd38      	pop	{r3, r4, r5, pc}
 800d84a:	bf00      	nop
 800d84c:	200036cc 	.word	0x200036cc

0800d850 <_isatty_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d06      	ldr	r5, [pc, #24]	; (800d86c <_isatty_r+0x1c>)
 800d854:	2300      	movs	r3, #0
 800d856:	4604      	mov	r4, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	602b      	str	r3, [r5, #0]
 800d85c:	f7f5 fe67 	bl	800352e <_isatty>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_isatty_r+0x1a>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_isatty_r+0x1a>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	200036cc 	.word	0x200036cc

0800d870 <_raise_r>:
 800d870:	291f      	cmp	r1, #31
 800d872:	b538      	push	{r3, r4, r5, lr}
 800d874:	4604      	mov	r4, r0
 800d876:	460d      	mov	r5, r1
 800d878:	d904      	bls.n	800d884 <_raise_r+0x14>
 800d87a:	2316      	movs	r3, #22
 800d87c:	6003      	str	r3, [r0, #0]
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d886:	b112      	cbz	r2, 800d88e <_raise_r+0x1e>
 800d888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d88c:	b94b      	cbnz	r3, 800d8a2 <_raise_r+0x32>
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 f830 	bl	800d8f4 <_getpid_r>
 800d894:	462a      	mov	r2, r5
 800d896:	4601      	mov	r1, r0
 800d898:	4620      	mov	r0, r4
 800d89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d89e:	f000 b817 	b.w	800d8d0 <_kill_r>
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d00a      	beq.n	800d8bc <_raise_r+0x4c>
 800d8a6:	1c59      	adds	r1, r3, #1
 800d8a8:	d103      	bne.n	800d8b2 <_raise_r+0x42>
 800d8aa:	2316      	movs	r3, #22
 800d8ac:	6003      	str	r3, [r0, #0]
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	e7e7      	b.n	800d882 <_raise_r+0x12>
 800d8b2:	2400      	movs	r4, #0
 800d8b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	4798      	blx	r3
 800d8bc:	2000      	movs	r0, #0
 800d8be:	e7e0      	b.n	800d882 <_raise_r+0x12>

0800d8c0 <raise>:
 800d8c0:	4b02      	ldr	r3, [pc, #8]	; (800d8cc <raise+0xc>)
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	6818      	ldr	r0, [r3, #0]
 800d8c6:	f7ff bfd3 	b.w	800d870 <_raise_r>
 800d8ca:	bf00      	nop
 800d8cc:	20000118 	.word	0x20000118

0800d8d0 <_kill_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4d07      	ldr	r5, [pc, #28]	; (800d8f0 <_kill_r+0x20>)
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	4608      	mov	r0, r1
 800d8da:	4611      	mov	r1, r2
 800d8dc:	602b      	str	r3, [r5, #0]
 800d8de:	f7f5 fdb7 	bl	8003450 <_kill>
 800d8e2:	1c43      	adds	r3, r0, #1
 800d8e4:	d102      	bne.n	800d8ec <_kill_r+0x1c>
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	b103      	cbz	r3, 800d8ec <_kill_r+0x1c>
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	bd38      	pop	{r3, r4, r5, pc}
 800d8ee:	bf00      	nop
 800d8f0:	200036cc 	.word	0x200036cc

0800d8f4 <_getpid_r>:
 800d8f4:	f7f5 bda4 	b.w	8003440 <_getpid>

0800d8f8 <_init>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	bf00      	nop
 800d8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fe:	bc08      	pop	{r3}
 800d900:	469e      	mov	lr, r3
 800d902:	4770      	bx	lr

0800d904 <_fini>:
 800d904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d906:	bf00      	nop
 800d908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d90a:	bc08      	pop	{r3}
 800d90c:	469e      	mov	lr, r3
 800d90e:	4770      	bx	lr
