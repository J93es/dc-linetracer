
Nucleo-Linetracer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  0800a690  0800a690  0001a690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b294  0800b294  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b29c  0800b29c  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b29c  0800b29c  0001b29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2a0  0800b2a0  0001b2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800b2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de4  20000254  0800b4f8  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003038  0800b4f8  00023038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c790  00000000  00000000  000202c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b7  00000000  00000000  0002ca57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b67  00000000  00000000  00030b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001603a  00000000  00000000  000316b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee3e  00000000  00000000  000476f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076044  00000000  00000000  0005652f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed4  00000000  00000000  000cc574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d1448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000254 	.word	0x20000254
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a678 	.word	0x0800a678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000258 	.word	0x20000258
 80001dc:	0800a678 	.word	0x0800a678

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	332c      	adds	r3, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001026:	f44f 7240 	mov.w	r2, #768	; 0x300
 800102a:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	40d3      	lsrs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	211f      	movs	r1, #31
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 011f 	and.w	r1, r3, #31
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08d      	sub	sp, #52	; 0x34
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	330c      	adds	r3, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	617a      	str	r2, [r7, #20]
  return result;
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	40d3      	lsrs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010e0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010e4:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	61f9      	str	r1, [r7, #28]
  return result;
 80010ee:	69f9      	ldr	r1, [r7, #28]
 80010f0:	fab1 f181 	clz	r1, r1
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	40cb      	lsrs	r3, r1
 80010f8:	2107      	movs	r1, #7
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001108:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001110:	fa91 f1a1 	rbit	r1, r1
 8001114:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001118:	fab1 f181 	clz	r1, r1
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	40cb      	lsrs	r3, r1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800112c:	bf00      	nop
 800112e:	3734      	adds	r7, #52	; 0x34
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_RCC_HSI_IsReady+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 0203 	bic.w	r2, r3, #3
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023800 	.word	0x40023800

08001258 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LL_RCC_GetSysClkSource+0x18>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800

0800129c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ac:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800

08001318 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <LL_RCC_PLL_IsReady+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001374:	4013      	ands	r3, r2
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	430a      	orrs	r2, r1
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	4904      	ldr	r1, [pc, #16]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800
 80013a8:	ffbf8000 	.word	0xffbf8000

080013ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800

0800140c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3302      	adds	r3, #2
 800144e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	43db      	mvns	r3, r3
 8001458:	ea02 0103 	and.w	r1, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	60bb      	str	r3, [r7, #8]
  return result;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	fa03 f202 	lsl.w	r2, r3, r2
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	430a      	orrs	r2, r1
 8001482:	3302      	adds	r3, #2
 8001484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40013800 	.word	0x40013800

08001498 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0207 	bic.w	r2, r3, #7
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_FLASH_GetLatency+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80014ec:	4904      	ldr	r1, [pc, #16]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40007000 	.word	0x40007000

08001504 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0210 	bic.w	r2, r3, #16
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0208 	bic.w	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d01c      	beq.n	80015e2 <LL_TIM_OC_DisableFast+0x4a>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d017      	beq.n	80015de <LL_TIM_OC_DisableFast+0x46>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d012      	beq.n	80015da <LL_TIM_OC_DisableFast+0x42>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b40      	cmp	r3, #64	; 0x40
 80015b8:	d00d      	beq.n	80015d6 <LL_TIM_OC_DisableFast+0x3e>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c0:	d007      	beq.n	80015d2 <LL_TIM_OC_DisableFast+0x3a>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c8:	d101      	bne.n	80015ce <LL_TIM_OC_DisableFast+0x36>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e00a      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e008      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_TIM_OC_DisableFast+0x4c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3318      	adds	r3, #24
 80015ea:	4619      	mov	r1, r3
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <LL_TIM_OC_DisableFast+0x84>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	440b      	add	r3, r1
 80015f4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4908      	ldr	r1, [pc, #32]	; (8001620 <LL_TIM_OC_DisableFast+0x88>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	4619      	mov	r1, r3
 8001602:	2304      	movs	r3, #4
 8001604:	408b      	lsls	r3, r1
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	601a      	str	r2, [r3, #0]

}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	0800ac6c 	.word	0x0800ac6c
 8001620:	0800ac74 	.word	0x0800ac74

08001624 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d01c      	beq.n	800166e <LL_TIM_OC_EnablePreload+0x4a>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d017      	beq.n	800166a <LL_TIM_OC_EnablePreload+0x46>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d012      	beq.n	8001666 <LL_TIM_OC_EnablePreload+0x42>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d00d      	beq.n	8001662 <LL_TIM_OC_EnablePreload+0x3e>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d007      	beq.n	800165e <LL_TIM_OC_EnablePreload+0x3a>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d101      	bne.n	800165a <LL_TIM_OC_EnablePreload+0x36>
 8001656:	2305      	movs	r3, #5
 8001658:	e00a      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800165a:	2306      	movs	r3, #6
 800165c:	e008      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <LL_TIM_OC_EnablePreload+0x4c>
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3318      	adds	r3, #24
 8001676:	4619      	mov	r1, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LL_TIM_OC_EnablePreload+0x80>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	440b      	add	r3, r1
 8001680:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <LL_TIM_OC_EnablePreload+0x84>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	4619      	mov	r1, r3
 800168e:	2308      	movs	r3, #8
 8001690:	408b      	lsls	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	0800ac6c 	.word	0x0800ac6c
 80016a8:	0800ac74 	.word	0x0800ac74

080016ac <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d01c      	beq.n	80016f8 <LL_TIM_IC_SetActiveInput+0x4c>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d017      	beq.n	80016f4 <LL_TIM_IC_SetActiveInput+0x48>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d012      	beq.n	80016f0 <LL_TIM_IC_SetActiveInput+0x44>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b40      	cmp	r3, #64	; 0x40
 80016ce:	d00d      	beq.n	80016ec <LL_TIM_IC_SetActiveInput+0x40>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d6:	d007      	beq.n	80016e8 <LL_TIM_IC_SetActiveInput+0x3c>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016de:	d101      	bne.n	80016e4 <LL_TIM_IC_SetActiveInput+0x38>
 80016e0:	2305      	movs	r3, #5
 80016e2:	e00a      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016e4:	2306      	movs	r3, #6
 80016e6:	e008      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e006      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e004      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_TIM_IC_SetActiveInput+0x4e>
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3318      	adds	r3, #24
 8001700:	4619      	mov	r1, r3
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LL_TIM_IC_SetActiveInput+0x94>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	440b      	add	r3, r1
 800170a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <LL_TIM_IC_SetActiveInput+0x98>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	4619      	mov	r1, r3
 8001718:	2303      	movs	r3, #3
 800171a:	408b      	lsls	r3, r1
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	7df9      	ldrb	r1, [r7, #23]
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <LL_TIM_IC_SetActiveInput+0x98>)
 8001728:	5c41      	ldrb	r1, [r0, r1]
 800172a:	408b      	lsls	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	0800ac6c 	.word	0x0800ac6c
 8001744:	0800ac7c 	.word	0x0800ac7c

08001748 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d01c      	beq.n	8001794 <LL_TIM_IC_SetPrescaler+0x4c>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b04      	cmp	r3, #4
 800175e:	d017      	beq.n	8001790 <LL_TIM_IC_SetPrescaler+0x48>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d012      	beq.n	800178c <LL_TIM_IC_SetPrescaler+0x44>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d00d      	beq.n	8001788 <LL_TIM_IC_SetPrescaler+0x40>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001772:	d007      	beq.n	8001784 <LL_TIM_IC_SetPrescaler+0x3c>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d101      	bne.n	8001780 <LL_TIM_IC_SetPrescaler+0x38>
 800177c:	2305      	movs	r3, #5
 800177e:	e00a      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001780:	2306      	movs	r3, #6
 8001782:	e008      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001784:	2304      	movs	r3, #4
 8001786:	e006      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <LL_TIM_IC_SetPrescaler+0x4e>
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3318      	adds	r3, #24
 800179c:	4619      	mov	r1, r3
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LL_TIM_IC_SetPrescaler+0x94>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	440b      	add	r3, r1
 80017a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	490c      	ldr	r1, [pc, #48]	; (80017e0 <LL_TIM_IC_SetPrescaler+0x98>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	4619      	mov	r1, r3
 80017b4:	230c      	movs	r3, #12
 80017b6:	408b      	lsls	r3, r1
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	7df9      	ldrb	r1, [r7, #23]
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <LL_TIM_IC_SetPrescaler+0x98>)
 80017c4:	5c41      	ldrb	r1, [r0, r1]
 80017c6:	408b      	lsls	r3, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	0800ac6c 	.word	0x0800ac6c
 80017e0:	0800ac7c 	.word	0x0800ac7c

080017e4 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d01c      	beq.n	8001830 <LL_TIM_IC_SetFilter+0x4c>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d017      	beq.n	800182c <LL_TIM_IC_SetFilter+0x48>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d012      	beq.n	8001828 <LL_TIM_IC_SetFilter+0x44>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d00d      	beq.n	8001824 <LL_TIM_IC_SetFilter+0x40>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d007      	beq.n	8001820 <LL_TIM_IC_SetFilter+0x3c>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d101      	bne.n	800181c <LL_TIM_IC_SetFilter+0x38>
 8001818:	2305      	movs	r3, #5
 800181a:	e00a      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 800181c:	2306      	movs	r3, #6
 800181e:	e008      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_TIM_IC_SetFilter+0x4e>
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3318      	adds	r3, #24
 8001838:	4619      	mov	r1, r3
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LL_TIM_IC_SetFilter+0x94>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	440b      	add	r3, r1
 8001842:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <LL_TIM_IC_SetFilter+0x98>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	4619      	mov	r1, r3
 8001850:	23f0      	movs	r3, #240	; 0xf0
 8001852:	408b      	lsls	r3, r1
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	7df9      	ldrb	r1, [r7, #23]
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <LL_TIM_IC_SetFilter+0x98>)
 8001860:	5c41      	ldrb	r1, [r0, r1]
 8001862:	408b      	lsls	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	0800ac6c 	.word	0x0800ac6c
 800187c:	0800ac7c 	.word	0x0800ac7c

08001880 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d01c      	beq.n	80018cc <LL_TIM_IC_SetPolarity+0x4c>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d017      	beq.n	80018c8 <LL_TIM_IC_SetPolarity+0x48>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d012      	beq.n	80018c4 <LL_TIM_IC_SetPolarity+0x44>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d00d      	beq.n	80018c0 <LL_TIM_IC_SetPolarity+0x40>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018aa:	d007      	beq.n	80018bc <LL_TIM_IC_SetPolarity+0x3c>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d101      	bne.n	80018b8 <LL_TIM_IC_SetPolarity+0x38>
 80018b4:	2305      	movs	r3, #5
 80018b6:	e00a      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018b8:	2306      	movs	r3, #6
 80018ba:	e008      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018bc:	2304      	movs	r3, #4
 80018be:	e006      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e004      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_TIM_IC_SetPolarity+0x4e>
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	490b      	ldr	r1, [pc, #44]	; (8001904 <LL_TIM_IC_SetPolarity+0x84>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	4619      	mov	r1, r3
 80018dc:	230a      	movs	r3, #10
 80018de:	408b      	lsls	r3, r1
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	4907      	ldr	r1, [pc, #28]	; (8001904 <LL_TIM_IC_SetPolarity+0x84>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	408b      	lsls	r3, r1
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0800ac84 	.word	0x0800ac84

08001908 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 0207 	bic.w	r2, r3, #7
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	605a      	str	r2, [r3, #4]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60da      	str	r2, [r3, #12]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b089      	sub	sp, #36	; 0x24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	613b      	str	r3, [r7, #16]
  return result;
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2103      	movs	r1, #3
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	61bb      	str	r3, [r7, #24]
  return result;
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	3724      	adds	r7, #36	; 0x24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	613b      	str	r3, [r7, #16]
  return result;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2103      	movs	r1, #3
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	61bb      	str	r3, [r7, #24]
  return result;
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	60da      	str	r2, [r3, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001ac8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001acc:	f7ff fc9e 	bl	800140c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001ad0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ad4:	f7ff fc82 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad8:	2007      	movs	r0, #7
 8001ada:	f7ff f9eb 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ade:	f000 f81b 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae2:	f000 fc79 	bl	80023d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ae6:	f000 f865 	bl	8001bb4 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001aea:	f000 f8f1 	bl	8001cd0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001aee:	f000 f9b1 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001af2:	f000 f9e7 	bl	8001ec4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001af6:	f000 fa5f 	bl	8001fb8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001afa:	f000 fad7 	bl	80020ac <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001afe:	f000 fc1b 	bl	8002338 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001b02:	f000 fb13 	bl	800212c <MX_TIM9_Init>
  MX_SPI2_Init();
 8001b06:	f000 f951 	bl	8001dac <MX_SPI2_Init>
  MX_TIM10_Init();
 8001b0a:	f000 fb49 	bl	80021a0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b0e:	f000 fbad 	bl	800226c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001b12:	f004 fe71 	bl	80067f8 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001b16:	e7fe      	b.n	8001b16 <main+0x52>

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff fcbb 	bl	8001498 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b22:	bf00      	nop
 8001b24:	f7ff fccc 	bl	80014c0 <LL_FLASH_GetLatency>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d1fa      	bne.n	8001b24 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b2e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001b32:	f7ff fcd3 	bl	80014dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b36:	2010      	movs	r0, #16
 8001b38:	f7ff fb64 	bl	8001204 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001b3c:	f7ff fb40 	bl	80011c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001b40:	bf00      	nop
 8001b42:	f7ff fb4d 	bl	80011e0 <LL_RCC_HSI_IsReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d1fa      	bne.n	8001b42 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2264      	movs	r2, #100	; 0x64
 8001b50:	2108      	movs	r1, #8
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fc04 	bl	8001360 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b58:	f7ff fbde 	bl	8001318 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff fbeb 	bl	8001338 <LL_RCC_PLL_IsReady>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d1fa      	bne.n	8001b5e <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001b68:	bf00      	nop
 8001b6a:	f7ff fccb 	bl	8001504 <LL_PWR_IsActiveFlag_VOS>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0fa      	beq.n	8001b6a <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fb7d 	bl	8001274 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b7e:	f7ff fb8d 	bl	800129c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff fb9e 	bl	80012c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f7ff fb51 	bl	8001230 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b8e:	bf00      	nop
 8001b90:	f7ff fb62 	bl	8001258 <LL_RCC_GetSysClkSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d1fa      	bne.n	8001b90 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <SystemClock_Config+0x98>)
 8001b9c:	f002 ff2a 	bl	80049f4 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <SystemClock_Config+0x98>)
 8001ba2:	f002 ff35 	bl	8004a10 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fba0 	bl	80012ec <LL_RCC_SetTIMPrescaler>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	05f5e100 	.word	0x05f5e100

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001bba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001bea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bee:	f7ff fc0d 	bl	800140c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fbda 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fbd7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = ADC_Sensor1_Pin|ADC_Sensor2_Pin;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c02:	2303      	movs	r3, #3
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	482b      	ldr	r0, [pc, #172]	; (8001cbc <MX_ADC1_Init+0x108>)
 8001c10:	f001 fde6 	bl	80037e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ADC_Battery_Pin;
 8001c14:	2301      	movs	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ADC_Battery_GPIO_Port, &GPIO_InitStruct);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4826      	ldr	r0, [pc, #152]	; (8001cc0 <MX_ADC1_Init+0x10c>)
 8001c26:	f001 fddb 	bl	80037e0 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c2a:	f7ff f967 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9b7 	bl	8000fa8 <NVIC_EncodePriority>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2012      	movs	r0, #18
 8001c40:	f7ff f988 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8001c44:	2012      	movs	r0, #18
 8001c46:	f7ff f967 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c5e:	f001 fb35 	bl	80032cc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001c76:	f107 0320 	add.w	r3, r7, #32
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c7e:	f001 fb51 	bl	8003324 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 8001c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001c88:	f7ff f9f7 	bl	800107a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c90:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_ADC1_Init+0x114>)
 8001c9a:	f001 faf9 	bl	8003290 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <MX_ADC1_Init+0x118>)
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001ca6:	f7ff f9b2 	bl	800100e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_144CYCLES);
 8001caa:	2206      	movs	r2, #6
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <MX_ADC1_Init+0x118>)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_ADC1_Init+0x110>)
 8001cb0:	f7ff f9f6 	bl	80010a0 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3740      	adds	r7, #64	; 0x40
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	03200006 	.word	0x03200006

08001cd0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	2220      	movs	r2, #32
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f006 fb8e 	bl	8008400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001cf4:	2004      	movs	r0, #4
 8001cf6:	f7ff fb59 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7ff fb56 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d06:	2302      	movs	r3, #2
 8001d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d16:	2304      	movs	r3, #4
 8001d18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <MX_I2C3_Init+0xcc>)
 8001d20:	f001 fd5e 	bl	80037e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4817      	ldr	r0, [pc, #92]	; (8001da0 <MX_I2C3_Init+0xd0>)
 8001d44:	f001 fd4c 	bl	80037e0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001d48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d4c:	f7ff fb46 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d52:	f7ff fa24 	bl	800119e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d58:	f7ff f9fe 	bl	8001158 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d5e:	f7ff f9eb 	bl	8001138 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_I2C3_Init+0xd8>)
 8001d68:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d86:	f001 feab 	bl	8003ae0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_I2C3_Init+0xd4>)
 8001d8e:	f7ff f9f3 	bl	8001178 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3738      	adds	r7, #56	; 0x38
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40005c00 	.word	0x40005c00
 8001da8:	000186a0 	.word	0x000186a0

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b090      	sub	sp, #64	; 0x40
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f006 fb20 	bl	8008400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001dd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dd4:	f7ff fb02 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff fae7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001dde:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001de2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001de4:	2302      	movs	r3, #2
 8001de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001df4:	2305      	movs	r3, #5
 8001df6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <MX_SPI2_Init+0xa0>)
 8001dfe:	f001 fcef 	bl	80037e0 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e06:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e0a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e36:	f001 ffea 	bl	8003e0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_SPI2_Init+0xa4>)
 8001e3e:	f7ff fb75 	bl	800152c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3740      	adds	r7, #64	; 0x40
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fab7 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001e6e:	2363      	movs	r3, #99	; 0x63
 8001e70:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e88:	f002 f886 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e90:	f7ff fb72 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001e94:	2100      	movs	r1, #0
 8001e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e9a:	f7ff fd35 	bl	8001908 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea4:	f7ff fb55 	bl	8001552 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eae:	f7ff fd53 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb6:	f7ff fd62 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001eea:	2002      	movs	r0, #2
 8001eec:	f7ff fa76 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ef0:	2004      	movs	r0, #4
 8001ef2:	f7ff fa5b 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = MotorR_Encoder1_Pin|MotorR_Encoder2_Pin;
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001efa:	2302      	movs	r3, #2
 8001efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <MX_TIM3_Init+0xec>)
 8001f14:	f001 fc64 	bl	80037e0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4826      	ldr	r0, [pc, #152]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f1c:	f7ff fd09 	bl	8001932 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f24:	2101      	movs	r1, #1
 8001f26:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f28:	f7ff fbc0 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f32:	f7ff fc09 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2101      	movs	r1, #1
 8001f3a:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f3c:	f7ff fc52 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2101      	movs	r1, #1
 8001f44:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f46:	f7ff fc9b 	bl	8001880 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f4e:	2110      	movs	r1, #16
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f52:	f7ff fbab 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f5c:	f7ff fbf4 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2110      	movs	r1, #16
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f66:	f7ff fc3d 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f70:	f7ff fc86 	bl	8001880 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f8e:	f002 f803 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f94:	f7ff faf0 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001f9c:	f7ff fcdc 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_TIM3_Init+0xf0>)
 8001fa2:	f7ff fcec 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	3730      	adds	r7, #48	; 0x30
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40000400 	.word	0x40000400

08001fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001fde:	2004      	movs	r0, #4
 8001fe0:	f7ff f9fc 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7ff f9e1 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB6   ------> TIM4_CH1
  PB7   ------> TIM4_CH2
  */
  GPIO_InitStruct.Pin = MotorL_Encoder1_Pin|MotorL_Encoder2_Pin;
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4827      	ldr	r0, [pc, #156]	; (80020a4 <MX_TIM4_Init+0xec>)
 8002008:	f001 fbea 	bl	80037e0 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  LL_TIM_SetEncoderMode(TIM4, LL_TIM_ENCODERMODE_X2_TI1);
 800200c:	2101      	movs	r1, #1
 800200e:	4826      	ldr	r0, [pc, #152]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002010:	f7ff fc8f 	bl	8001932 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002018:	2101      	movs	r1, #1
 800201a:	4823      	ldr	r0, [pc, #140]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800201c:	f7ff fb46 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002020:	2200      	movs	r2, #0
 8002022:	2101      	movs	r1, #1
 8002024:	4820      	ldr	r0, [pc, #128]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002026:	f7ff fb8f 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	481e      	ldr	r0, [pc, #120]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002030:	f7ff fbd8 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002034:	2200      	movs	r2, #0
 8002036:	2101      	movs	r1, #1
 8002038:	481b      	ldr	r0, [pc, #108]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800203a:	f7ff fc21 	bl	8001880 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800203e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002042:	2110      	movs	r1, #16
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002046:	f7ff fb31 	bl	80016ac <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800204a:	2200      	movs	r2, #0
 800204c:	2110      	movs	r1, #16
 800204e:	4816      	ldr	r0, [pc, #88]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002050:	f7ff fb7a 	bl	8001748 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_TIM4_Init+0xf0>)
 800205a:	f7ff fbc3 	bl	80017e4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM4, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800205e:	2200      	movs	r2, #0
 8002060:	2110      	movs	r1, #16
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002064:	f7ff fc0c 	bl	8001880 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002082:	f001 ff89 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002088:	f7ff fa76 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800208c:	2100      	movs	r1, #0
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002090:	f7ff fc62 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <MX_TIM4_Init+0xf0>)
 8002096:	f7ff fc72 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3730      	adds	r7, #48	; 0x30
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40000800 	.word	0x40000800

080020ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80020c0:	2008      	movs	r0, #8
 80020c2:	f7ff f98b 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 2));
 80020c6:	f7fe ff19 	bl	8000efc <__NVIC_GetPriorityGrouping>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2202      	movs	r2, #2
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff69 	bl	8000fa8 <NVIC_EncodePriority>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	2032      	movs	r0, #50	; 0x32
 80020dc:	f7fe ff3a 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80020e0:	2032      	movs	r0, #50	; 0x32
 80020e2:	f7fe ff19 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 10000;
 80020ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80020f2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	480a      	ldr	r0, [pc, #40]	; (8002128 <MX_TIM5_Init+0x7c>)
 80020fe:	f001 ff4b 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8002102:	4809      	ldr	r0, [pc, #36]	; (8002128 <MX_TIM5_Init+0x7c>)
 8002104:	f7ff fa38 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002108:	2100      	movs	r1, #0
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_TIM5_Init+0x7c>)
 800210c:	f7ff fbfc 	bl	8001908 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8002110:	2100      	movs	r1, #0
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM5_Init+0x7c>)
 8002114:	f7ff fc20 	bl	8001958 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <MX_TIM5_Init+0x7c>)
 800211a:	f7ff fc30 	bl	800197e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40000c00 	.word	0x40000c00

0800212c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8002140:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002144:	f7ff f962 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002148:	f7fe fed8 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800214c:	4603      	mov	r3, r0
 800214e:	2201      	movs	r2, #1
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff28 	bl	8000fa8 <NVIC_EncodePriority>
 8002158:	4603      	mov	r3, r0
 800215a:	4619      	mov	r1, r3
 800215c:	2018      	movs	r0, #24
 800215e:	f7fe fef9 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002162:	2018      	movs	r0, #24
 8002164:	f7fe fed8 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8002170:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002174:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4807      	ldr	r0, [pc, #28]	; (800219c <MX_TIM9_Init+0x70>)
 8002180:	f001 ff0a 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_TIM9_Init+0x70>)
 8002186:	f7ff f9f7 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 800218a:	2100      	movs	r1, #0
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <MX_TIM9_Init+0x70>)
 800218e:	f7ff fbbb 	bl	8001908 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40014000 	.word	0x40014000

080021a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b094      	sub	sp, #80	; 0x50
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	2220      	movs	r2, #32
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f006 f91e 	bl	8008400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM10);
 80021d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021d8:	f7ff f918 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80021e4:	f241 3387 	movw	r3, #4999	; 0x1387
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM10, &TIM_InitStruct);
 80021ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021f2:	4619      	mov	r1, r3
 80021f4:	481b      	ldr	r0, [pc, #108]	; (8002264 <MX_TIM10_Init+0xc4>)
 80021f6:	f001 fecf 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM10);
 80021fa:	481a      	ldr	r0, [pc, #104]	; (8002264 <MX_TIM10_Init+0xc4>)
 80021fc:	f7ff f9bc 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM10, LL_TIM_CHANNEL_CH1);
 8002200:	2101      	movs	r1, #1
 8002202:	4818      	ldr	r0, [pc, #96]	; (8002264 <MX_TIM10_Init+0xc4>)
 8002204:	f7ff fa0e 	bl	8001624 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002208:	2360      	movs	r3, #96	; 0x60
 800220a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM10, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	480f      	ldr	r0, [pc, #60]	; (8002264 <MX_TIM10_Init+0xc4>)
 8002226:	f001 ff31 	bl	800408c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM10, LL_TIM_CHANNEL_CH1);
 800222a:	2101      	movs	r1, #1
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <MX_TIM10_Init+0xc4>)
 800222e:	f7ff f9b3 	bl	8001598 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002232:	2002      	movs	r0, #2
 8002234:	f7ff f8ba 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM10 GPIO Configuration
  PB8   ------> TIM10_CH1
  */
  GPIO_InitStruct.Pin = MotorL_PWM_Pin;
 8002238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800223e:	2302      	movs	r3, #2
 8002240:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800224a:	2302      	movs	r3, #2
 800224c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800224e:	2303      	movs	r3, #3
 8002250:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <MX_TIM10_Init+0xc8>)
 8002258:	f001 fac2 	bl	80037e0 <LL_GPIO_Init>

}
 800225c:	bf00      	nop
 800225e:	3750      	adds	r7, #80	; 0x50
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40014400 	.word	0x40014400
 8002268:	40020400 	.word	0x40020400

0800226c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b094      	sub	sp, #80	; 0x50
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	2220      	movs	r2, #32
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f006 f8b8 	bl	8008400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM11);
 80022a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80022a4:	f7ff f8b2 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022ac:	2300      	movs	r3, #0
 80022ae:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 4999;
 80022b0:	f241 3387 	movw	r3, #4999	; 0x1387
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM11, &TIM_InitStruct);
 80022ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022be:	4619      	mov	r1, r3
 80022c0:	481b      	ldr	r0, [pc, #108]	; (8002330 <MX_TIM11_Init+0xc4>)
 80022c2:	f001 fe69 	bl	8003f98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM11);
 80022c6:	481a      	ldr	r0, [pc, #104]	; (8002330 <MX_TIM11_Init+0xc4>)
 80022c8:	f7ff f956 	bl	8001578 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM11, LL_TIM_CHANNEL_CH1);
 80022cc:	2101      	movs	r1, #1
 80022ce:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM11_Init+0xc4>)
 80022d0:	f7ff f9a8 	bl	8001624 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80022d4:	2360      	movs	r3, #96	; 0x60
 80022d6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM11, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	461a      	mov	r2, r3
 80022ee:	2101      	movs	r1, #1
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <MX_TIM11_Init+0xc4>)
 80022f2:	f001 fecb 	bl	800408c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM11, LL_TIM_CHANNEL_CH1);
 80022f6:	2101      	movs	r1, #1
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM11_Init+0xc4>)
 80022fa:	f7ff f94d 	bl	8001598 <LL_TIM_OC_DisableFast>
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022fe:	2002      	movs	r0, #2
 8002300:	f7ff f854 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**TIM11 GPIO Configuration
  PB9   ------> TIM11_CH1
  */
  GPIO_InitStruct.Pin = MotorR_PWM_Pin;
 8002304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002308:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800230a:	2302      	movs	r3, #2
 800230c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002316:	2302      	movs	r3, #2
 8002318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 800231a:	2303      	movs	r3, #3
 800231c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(MotorR_PWM_GPIO_Port, &GPIO_InitStruct);
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_TIM11_Init+0xc8>)
 8002324:	f001 fa5c 	bl	80037e0 <LL_GPIO_Init>

}
 8002328:	bf00      	nop
 800232a:	3750      	adds	r7, #80	; 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40014800 	.word	0x40014800
 8002334:	40020400 	.word	0x40020400

08002338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002362:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002366:	f7ff f839 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff f81e 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002370:	230c      	movs	r3, #12
 8002372:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002374:	2302      	movs	r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002384:	2307      	movs	r3, #7
 8002386:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4810      	ldr	r0, [pc, #64]	; (80023d0 <MX_USART2_UART_Init+0x98>)
 800238e:	f001 fa27 	bl	80037e0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002392:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002396:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023a4:	230c      	movs	r3, #12
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4807      	ldr	r0, [pc, #28]	; (80023d4 <MX_USART2_UART_Init+0x9c>)
 80023b8:	f002 fa9e 	bl	80048f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART2_UART_Init+0x9c>)
 80023be:	f7ff fafe 	bl	80019be <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80023c2:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_USART2_UART_Init+0x9c>)
 80023c4:	f7ff faeb 	bl	800199e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3738      	adds	r7, #56	; 0x38
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40004400 	.word	0x40004400

080023d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80023de:	f107 0318 	add.w	r3, r7, #24
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80023f8:	2004      	movs	r0, #4
 80023fa:	f7fe ffd7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80023fe:	2080      	movs	r0, #128	; 0x80
 8002400:	f7fe ffd4 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe ffd1 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800240a:	2002      	movs	r0, #2
 800240c:	f7fe ffce 	bl	80013ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8002410:	213f      	movs	r1, #63	; 0x3f
 8002412:	483a      	ldr	r0, [pc, #232]	; (80024fc <MX_GPIO_Init+0x124>)
 8002414:	f7ff fb47 	bl	8001aa6 <LL_GPIO_ResetOutputPin>
                          |MotorR_1_Pin|MotorR_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8002418:	2130      	movs	r1, #48	; 0x30
 800241a:	4839      	ldr	r0, [pc, #228]	; (8002500 <MX_GPIO_Init+0x128>)
 800241c:	f7ff fb43 	bl	8001aa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin);
 8002420:	2134      	movs	r1, #52	; 0x34
 8002422:	4838      	ldr	r0, [pc, #224]	; (8002504 <MX_GPIO_Init+0x12c>)
 8002424:	f7ff fb3f 	bl	8001aa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002428:	4937      	ldr	r1, [pc, #220]	; (8002508 <MX_GPIO_Init+0x130>)
 800242a:	2002      	movs	r0, #2
 800242c:	f7ff f806 	bl	800143c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002434:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002436:	2301      	movs	r3, #1
 8002438:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800243a:	2300      	movs	r3, #0
 800243c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800243e:	2302      	movs	r3, #2
 8002440:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	4618      	mov	r0, r3
 8002448:	f001 f846 	bl	80034d8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002452:	482a      	ldr	r0, [pc, #168]	; (80024fc <MX_GPIO_Init+0x124>)
 8002454:	f7ff faf8 	bl	8001a48 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245e:	4827      	ldr	r0, [pc, #156]	; (80024fc <MX_GPIO_Init+0x124>)
 8002460:	f7ff fac3 	bl	80019ea <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8002464:	233f      	movs	r3, #63	; 0x3f
 8002466:	603b      	str	r3, [r7, #0]
                          |MotorR_1_Pin|MotorR_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002468:	2301      	movs	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	463b      	mov	r3, r7
 800247a:	4619      	mov	r1, r3
 800247c:	481f      	ldr	r0, [pc, #124]	; (80024fc <MX_GPIO_Init+0x124>)
 800247e:	f001 f9af 	bl	80037e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8002482:	2310      	movs	r3, #16
 8002484:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002486:	2301      	movs	r3, #1
 8002488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002492:	2302      	movs	r3, #2
 8002494:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8002496:	463b      	mov	r3, r7
 8002498:	4619      	mov	r1, r3
 800249a:	4819      	ldr	r0, [pc, #100]	; (8002500 <MX_GPIO_Init+0x128>)
 800249c:	f001 f9a0 	bl	80037e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80024a0:	2320      	movs	r3, #32
 80024a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024a4:	2301      	movs	r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024b4:	463b      	mov	r3, r7
 80024b6:	4619      	mov	r1, r3
 80024b8:	4811      	ldr	r0, [pc, #68]	; (8002500 <MX_GPIO_Init+0x128>)
 80024ba:	f001 f991 	bl	80037e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin|MotorL_1_Pin|MotorL_2_Pin;
 80024be:	2334      	movs	r3, #52	; 0x34
 80024c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024c2:	2301      	movs	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80024ce:	2302      	movs	r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	463b      	mov	r3, r7
 80024d4:	4619      	mov	r1, r3
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <MX_GPIO_Init+0x12c>)
 80024d8:	f001 f982 	bl	80037e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin|SW_3_Pin;
 80024dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	463b      	mov	r3, r7
 80024ec:	4619      	mov	r1, r3
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_GPIO_Init+0x124>)
 80024f0:	f001 f976 	bl	80037e0 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024f4:	bf00      	nop
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	00f00003 	.word	0x00f00003

0800250c <LL_ADC_REG_SetSequencerRanks>:
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	332c      	adds	r3, #44	; 0x2c
 800251c:	4619      	mov	r1, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002524:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	617a      	str	r2, [r7, #20]
  return result;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	40d3      	lsrs	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	211f      	movs	r1, #31
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f003 011f 	and.w	r1, r3, #31
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	bf00      	nop
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	b29b      	uxth	r3, r3
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f06f 0202 	mvn.w	r2, #2
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_TIM_SetAutoReload>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f06f 0201 	mvn.w	r2, #1
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <ADC_Read>:
void	Sensor_Stop();
void	Sensor_Calibration();



__STATIC_INLINE uint16_t	ADC_Read() {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002632:	b672      	cpsid	i
}
 8002634:	bf00      	nop
	uint16_t adcValue;
	__disable_irq();
	LL_ADC_ClearFlag_EOCS(ADC1);
 8002636:	480e      	ldr	r0, [pc, #56]	; (8002670 <ADC_Read+0x44>)
 8002638:	f7ff ffce 	bl	80025d8 <LL_ADC_ClearFlag_EOCS>
	LL_ADC_REG_StartConversionSWStart(ADC1);
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <ADC_Read+0x44>)
 800263e:	f7ff ff9b 	bl	8002578 <LL_ADC_REG_StartConversionSWStart>
	while (!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8002642:	bf00      	nop
 8002644:	480a      	ldr	r0, [pc, #40]	; (8002670 <ADC_Read+0x44>)
 8002646:	f7ff ffb4 	bl	80025b2 <LL_ADC_IsActiveFlag_EOCS>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f9      	beq.n	8002644 <ADC_Read+0x18>
	adcValue = LL_ADC_REG_ReadConversionData12(ADC1);
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <ADC_Read+0x44>)
 8002652:	f7ff ffa1 	bl	8002598 <LL_ADC_REG_ReadConversionData12>
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	LL_ADC_ClearFlag_EOCS(ADC1);
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <ADC_Read+0x44>)
 800265c:	f7ff ffbc 	bl	80025d8 <LL_ADC_ClearFlag_EOCS>
  __ASM volatile ("cpsie i" : : : "memory");
 8002660:	b662      	cpsie	i
}
 8002662:	bf00      	nop
	__enable_irq();
	return adcValue;
 8002664:	88fb      	ldrh	r3, [r7, #6]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40012000 	.word	0x40012000

08002674 <Sensor_ADC_Midian_Filter>:




__STATIC_INLINE uint8_t	Sensor_ADC_Midian_Filter() {
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
	uint16_t sensorMidian[3];

	sensorMidian[0] = ADC_Read();
 800267a:	f7ff ffd7 	bl	800262c <ADC_Read>
 800267e:	4603      	mov	r3, r0
 8002680:	803b      	strh	r3, [r7, #0]
	sensorMidian[1] = ADC_Read();
 8002682:	f7ff ffd3 	bl	800262c <ADC_Read>
 8002686:	4603      	mov	r3, r0
 8002688:	807b      	strh	r3, [r7, #2]
	sensorMidian[2] = ADC_Read();
 800268a:	f7ff ffcf 	bl	800262c <ADC_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	80bb      	strh	r3, [r7, #4]

	if (sensorMidian[0] > sensorMidian[1]) {
 8002692:	883a      	ldrh	r2, [r7, #0]
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	429a      	cmp	r2, r3
 8002698:	d90e      	bls.n	80026b8 <Sensor_ADC_Midian_Filter+0x44>
		INT_SWAP(sensorMidian[0], sensorMidian[1]);
 800269a:	883a      	ldrh	r2, [r7, #0]
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	4053      	eors	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	803b      	strh	r3, [r7, #0]
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	883b      	ldrh	r3, [r7, #0]
 80026a8:	4053      	eors	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	807b      	strh	r3, [r7, #2]
 80026ae:	883a      	ldrh	r2, [r7, #0]
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	4053      	eors	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	803b      	strh	r3, [r7, #0]
	}
	if (sensorMidian[1] > sensorMidian[2]) {
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d90e      	bls.n	80026de <Sensor_ADC_Midian_Filter+0x6a>
		INT_SWAP(sensorMidian[1], sensorMidian[2]);
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	4053      	eors	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	807b      	strh	r3, [r7, #2]
 80026ca:	88ba      	ldrh	r2, [r7, #4]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4053      	eors	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	80bb      	strh	r3, [r7, #4]
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	4053      	eors	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	807b      	strh	r3, [r7, #2]
	}

	return sensorMidian[1] >> 4;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <Make_Sensor_Raw_Vals>:





__STATIC_INLINE void	Make_Sensor_Raw_Vals(uint8_t idx) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <Make_Sensor_Raw_Vals+0x4c>)
 80026fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002700:	480f      	ldr	r0, [pc, #60]	; (8002740 <Make_Sensor_Raw_Vals+0x50>)
 8002702:	f7ff ff03 	bl	800250c <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx] = Sensor_ADC_Midian_Filter();
 8002706:	79fc      	ldrb	r4, [r7, #7]
 8002708:	f7ff ffb4 	bl	8002674 <Sensor_ADC_Midian_Filter>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <Make_Sensor_Raw_Vals+0x54>)
 8002712:	551a      	strb	r2, [r3, r4]

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <Make_Sensor_Raw_Vals+0x58>)
 8002716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <Make_Sensor_Raw_Vals+0x50>)
 800271c:	f7ff fef6 	bl	800250c <LL_ADC_REG_SetSequencerRanks>
	sensorRawVals[idx + 8] = Sensor_ADC_Midian_Filter();
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f103 0408 	add.w	r4, r3, #8
 8002726:	f7ff ffa5 	bl	8002674 <Sensor_ADC_Midian_Filter>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <Make_Sensor_Raw_Vals+0x54>)
 8002730:	551a      	strb	r2, [r3, r4]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	03200006 	.word	0x03200006
 8002740:	40012000 	.word	0x40012000
 8002744:	20002e94 	.word	0x20002e94
 8002748:	03500007 	.word	0x03500007

0800274c <Make_Sensor_Norm_Vals>:




// normalized value 계산
__STATIC_INLINE void	Make_Sensor_Norm_Vals(uint8_t idx) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]

	if (sensorRawVals[idx] < blackMaxs[idx])
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <Make_Sensor_Norm_Vals+0x80>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	491b      	ldr	r1, [pc, #108]	; (80027d0 <Make_Sensor_Norm_Vals+0x84>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	429a      	cmp	r2, r3
 8002768:	d204      	bcs.n	8002774 <Make_Sensor_Norm_Vals+0x28>
		sensorNormVals[idx] = 0;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <Make_Sensor_Norm_Vals+0x88>)
 800276e:	2100      	movs	r1, #0
 8002770:	54d1      	strb	r1, [r2, r3]
	else if (sensorRawVals[idx] > whiteMaxs[idx])
		sensorNormVals[idx] = 255;
	else
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);

}
 8002772:	e025      	b.n	80027c0 <Make_Sensor_Norm_Vals+0x74>
	else if (sensorRawVals[idx] > whiteMaxs[idx])
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <Make_Sensor_Norm_Vals+0x80>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4916      	ldr	r1, [pc, #88]	; (80027d8 <Make_Sensor_Norm_Vals+0x8c>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	429a      	cmp	r2, r3
 8002786:	d904      	bls.n	8002792 <Make_Sensor_Norm_Vals+0x46>
		sensorNormVals[idx] = 255;
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <Make_Sensor_Norm_Vals+0x88>)
 800278c:	21ff      	movs	r1, #255	; 0xff
 800278e:	54d1      	strb	r1, [r2, r3]
}
 8002790:	e016      	b.n	80027c0 <Make_Sensor_Norm_Vals+0x74>
		sensorNormVals[idx] = (255 * (sensorRawVals[idx] - blackMaxs[idx]) / normalizeCoef[idx]);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <Make_Sensor_Norm_Vals+0x80>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <Make_Sensor_Norm_Vals+0x84>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	1aca      	subs	r2, r1, r3
 80027a6:	4613      	mov	r3, r2
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <Make_Sensor_Norm_Vals+0x90>)
 80027b0:	5c8a      	ldrb	r2, [r1, r2]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	fb93 f2f2 	sdiv	r2, r3, r2
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	b2d1      	uxtb	r1, r2
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <Make_Sensor_Norm_Vals+0x88>)
 80027be:	54d1      	strb	r1, [r2, r3]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20002e94 	.word	0x20002e94
 80027d0:	20002ed4 	.word	0x20002ed4
 80027d4:	20002ea4 	.word	0x20002ea4
 80027d8:	20002ec4 	.word	0x20002ec4
 80027dc:	20002eb4 	.word	0x20002eb4

080027e0 <Make_Sensor_State>:



// sensor state 계산
__STATIC_INLINE void	Make_Sensor_State(uint8_t idx) {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]

	if (sensorNormVals[idx] > threshold) {
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <Make_Sensor_State+0x70>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <Make_Sensor_State+0x74>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d910      	bls.n	800281e <Make_Sensor_State+0x3e>
		state |= 0x01 << (15 - idx);
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f1c3 030f 	rsb	r3, r3, #15
 8002802:	2201      	movs	r2, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	b25a      	sxtb	r2, r3
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <Make_Sensor_State+0x78>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	b25b      	sxtb	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b25b      	sxtb	r3, r3
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <Make_Sensor_State+0x78>)
 800281a:	701a      	strb	r2, [r3, #0]
	}
	else {
		state &= ~(0x01 << (15 - idx));
	}
}
 800281c:	e011      	b.n	8002842 <Make_Sensor_State+0x62>
		state &= ~(0x01 << (15 - idx));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f1c3 030f 	rsb	r3, r3, #15
 8002824:	2201      	movs	r2, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	b25b      	sxtb	r3, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	b25a      	sxtb	r2, r3
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <Make_Sensor_State+0x78>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	b25b      	sxtb	r3, r3
 8002838:	4013      	ands	r3, r2
 800283a:	b25b      	sxtb	r3, r3
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <Make_Sensor_State+0x78>)
 8002840:	701a      	strb	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20002ea4 	.word	0x20002ea4
 8002854:	20000048 	.word	0x20000048
 8002858:	20002ee4 	.word	0x20002ee4

0800285c <Make_Voltage_Raw_Val>:



__STATIC_INLINE float	Make_Voltage_Raw_Val() {
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_8);
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <Make_Voltage_Raw_Val+0x38>)
 8002862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002866:	480c      	ldr	r0, [pc, #48]	; (8002898 <Make_Voltage_Raw_Val+0x3c>)
 8002868:	f7ff fe50 	bl	800250c <LL_ADC_REG_SetSequencerRanks>
	return 3.3f * 21.f * (float)ADC_Read() / 4095.f;
 800286c:	f7ff fede 	bl	800262c <ADC_Read>
 8002870:	4603      	mov	r3, r0
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800289c <Make_Voltage_Raw_Val+0x40>
 800287e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002882:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028a0 <Make_Voltage_Raw_Val+0x44>
 8002886:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800288a:	eef0 7a66 	vmov.f32	s15, s13
}
 800288e:	eeb0 0a67 	vmov.f32	s0, s15
 8002892:	bd80      	pop	{r7, pc}
 8002894:	03800008 	.word	0x03800008
 8002898:	40012000 	.word	0x40012000
 800289c:	428a9999 	.word	0x428a9999
 80028a0:	457ff000 	.word	0x457ff000

080028a4 <Make_Battery_Voltage>:



__STATIC_INLINE void	Make_Battery_Voltage() {
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
	static uint8_t	voltageIdx = 0;
	static float	voltageMidian[3];


	switch(voltageIdx) {
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f200 808c 	bhi.w	80029cc <Make_Battery_Voltage+0x128>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <Make_Battery_Voltage+0x18>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028f3 	.word	0x080028f3
 80028c4:	08002919 	.word	0x08002919
 80028c8:	0800293f 	.word	0x0800293f
		case 0:
			voltageMidian[voltageIdx] = Make_Voltage_Raw_Val();
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461c      	mov	r4, r3
 80028d2:	f7ff ffc3 	bl	800285c <Make_Voltage_Raw_Val>
 80028d6:	eef0 7a40 	vmov.f32	s15, s0
 80028da:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80028dc:	00a3      	lsls	r3, r4, #2
 80028de:	4413      	add	r3, r2
 80028e0:	edc3 7a00 	vstr	s15, [r3]
			voltageIdx++;
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80028ee:	701a      	strb	r2, [r3, #0]
			break;
 80028f0:	e06c      	b.n	80029cc <Make_Battery_Voltage+0x128>

		case 1:
			voltageMidian[voltageIdx] = Make_Voltage_Raw_Val();
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461c      	mov	r4, r3
 80028f8:	f7ff ffb0 	bl	800285c <Make_Voltage_Raw_Val>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	4a35      	ldr	r2, [pc, #212]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002902:	00a3      	lsls	r3, r4, #2
 8002904:	4413      	add	r3, r2
 8002906:	edc3 7a00 	vstr	s15, [r3]
			voltageIdx++;
 800290a:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <Make_Battery_Voltage+0x130>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <Make_Battery_Voltage+0x130>)
 8002914:	701a      	strb	r2, [r3, #0]
			break;
 8002916:	e059      	b.n	80029cc <Make_Battery_Voltage+0x128>

		case 2:
			voltageMidian[voltageIdx] = Make_Voltage_Raw_Val();
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <Make_Battery_Voltage+0x130>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461c      	mov	r4, r3
 800291e:	f7ff ff9d 	bl	800285c <Make_Voltage_Raw_Val>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002928:	00a3      	lsls	r3, r4, #2
 800292a:	4413      	add	r3, r2
 800292c:	edc3 7a00 	vstr	s15, [r3]
			voltageIdx++;
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <Make_Battery_Voltage+0x130>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <Make_Battery_Voltage+0x130>)
 800293a:	701a      	strb	r2, [r3, #0]
			break;
 800293c:	e046      	b.n	80029cc <Make_Battery_Voltage+0x128>

		case 3:
			float tmp;

			if (voltageMidian[0] > voltageMidian[1]) {
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002946:	edd3 7a01 	vldr	s15, [r3, #4]
 800294a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	dd09      	ble.n	8002968 <Make_Battery_Voltage+0xc4>
				FLOAT_SWAP(tmp, voltageMidian[0], voltageMidian[1]);
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <Make_Battery_Voltage+0x134>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6053      	str	r3, [r2, #4]
			}
			if (voltageMidian[1] > voltageMidian[2]) {
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <Make_Battery_Voltage+0x134>)
 800296a:	ed93 7a01 	vldr	s14, [r3, #4]
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002970:	edd3 7a02 	vldr	s15, [r3, #8]
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	dd09      	ble.n	8002992 <Make_Battery_Voltage+0xee>
				FLOAT_SWAP(tmp, voltageMidian[1], voltageMidian[2]);
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <Make_Battery_Voltage+0x134>)
 800298a:	6053      	str	r3, [r2, #4]
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <Make_Battery_Voltage+0x134>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6093      	str	r3, [r2, #8]
			}
			if (voltageMidian[0] > voltageMidian[1]) {
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <Make_Battery_Voltage+0x134>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <Make_Battery_Voltage+0x134>)
 800299a:	edd3 7a01 	vldr	s15, [r3, #4]
 800299e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a6:	dd09      	ble.n	80029bc <Make_Battery_Voltage+0x118>
				FLOAT_SWAP(tmp, voltageMidian[0], voltageMidian[1]);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6053      	str	r3, [r2, #4]
			}

			voltage = voltageMidian[1];
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <Make_Battery_Voltage+0x134>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a06      	ldr	r2, [pc, #24]	; (80029dc <Make_Battery_Voltage+0x138>)
 80029c2:	6013      	str	r3, [r2, #0]

			voltageIdx = 0;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <Make_Battery_Voltage+0x130>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
			break;
 80029ca:	bf00      	nop
	}
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	20000275 	.word	0x20000275
 80029d8:	20000278 	.word	0x20000278
 80029dc:	20002ee8 	.word	0x20002ee8

080029e0 <Sum_Position_Val>:





__STATIC_INLINE void	Sum_Position_Val(uint8_t idx) {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]


	if (positionIdxMin <= idx && idx <= positionIdxMax) {
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <Sum_Position_Val+0xb8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	79fa      	ldrb	r2, [r7, #7]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d31e      	bcc.n	8002a34 <Sum_Position_Val+0x54>
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <Sum_Position_Val+0xbc>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	79fa      	ldrb	r2, [r7, #7]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d818      	bhi.n	8002a34 <Sum_Position_Val+0x54>

		positionSum += positionTable[idx] * sensorNormVals[idx];
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <Sum_Position_Val+0xc0>)
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	79fa      	ldrb	r2, [r7, #7]
 8002a0c:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <Sum_Position_Val+0xc4>)
 8002a0e:	5c8a      	ldrb	r2, [r1, r2]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <Sum_Position_Val+0xc8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <Sum_Position_Val+0xc8>)
 8002a1e:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx];
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <Sum_Position_Val+0xc4>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <Sum_Position_Val+0xcc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <Sum_Position_Val+0xcc>)
 8002a32:	6013      	str	r3, [r2, #0]
	}

	if (positionIdxMin <= idx + 8 && idx + 8 <= positionIdxMax) {
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <Sum_Position_Val+0xb8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	3308      	adds	r3, #8
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dc22      	bgt.n	8002a8a <Sum_Position_Val+0xaa>
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	3307      	adds	r3, #7
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <Sum_Position_Val+0xbc>)
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	da1b      	bge.n	8002a8a <Sum_Position_Val+0xaa>

		positionSum += positionTable[idx + 8] * sensorNormVals[idx + 8];
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	3308      	adds	r3, #8
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <Sum_Position_Val+0xc0>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	4910      	ldr	r1, [pc, #64]	; (8002aa4 <Sum_Position_Val+0xc4>)
 8002a62:	5c8a      	ldrb	r2, [r1, r2]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	fb03 f202 	mul.w	r2, r3, r2
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <Sum_Position_Val+0xc8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <Sum_Position_Val+0xc8>)
 8002a72:	6013      	str	r3, [r2, #0]
		sensorNormValsSum += sensorNormVals[idx + 8];
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	3308      	adds	r3, #8
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <Sum_Position_Val+0xc4>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <Sum_Position_Val+0xcc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <Sum_Position_Val+0xcc>)
 8002a88:	6013      	str	r3, [r2, #0]
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000015 	.word	0x20000015
 8002a9c:	20000014 	.word	0x20000014
 8002aa0:	2000004c 	.word	0x2000004c
 8002aa4:	20002ea4 	.word	0x20002ea4
 8002aa8:	20001420 	.word	0x20001420
 8002aac:	20001424 	.word	0x20001424

08002ab0 <Make_Position_Val>:





__STATIC_INLINE void	Make_Position_Val() {
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

		positionVal = positionSum / (sensorNormValsSum + 1);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <Make_Position_Val+0x2c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <Make_Position_Val+0x30>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <Make_Position_Val+0x34>)
 8002ac4:	6013      	str	r3, [r2, #0]

		positionSum = 0;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <Make_Position_Val+0x2c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
		sensorNormValsSum = 0;
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <Make_Position_Val+0x30>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20001420 	.word	0x20001420
 8002ae0:	20001424 	.word	0x20001424
 8002ae4:	20001418 	.word	0x20001418

08002ae8 <Sensor_TIM5_IRQ>:



__STATIC_INLINE void	Sensor_TIM5_IRQ() {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	static uint8_t	tim5Idx = 0;

	// 다음 IR LED 켜기
	GPIOC->ODR = (GPIOC->ODR & ~0x07) | tim5Idx | 0x08;
 8002aec:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <Sensor_TIM5_IRQ+0x11c>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f023 0307 	bic.w	r3, r3, #7
 8002af4:	4a44      	ldr	r2, [pc, #272]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <Sensor_TIM5_IRQ+0x11c>)
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	6153      	str	r3, [r2, #20]

	Make_Sensor_Raw_Vals(tim5Idx);
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fdf2 	bl	80026f0 <Make_Sensor_Raw_Vals>

	// 선택한 IR LED 끄기
	GPIOC->ODR &= ~0x08;
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <Sensor_TIM5_IRQ+0x11c>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	4a3c      	ldr	r2, [pc, #240]	; (8002c04 <Sensor_TIM5_IRQ+0x11c>)
 8002b12:	f023 0308 	bic.w	r3, r3, #8
 8002b16:	6153      	str	r3, [r2, #20]

	Make_Sensor_Norm_Vals(tim5Idx);
 8002b18:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fe15 	bl	800274c <Make_Sensor_Norm_Vals>
	Make_Sensor_Norm_Vals(tim5Idx + 8);
 8002b22:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3308      	adds	r3, #8
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fe0e 	bl	800274c <Make_Sensor_Norm_Vals>

	Make_Sensor_State(tim5Idx);
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fe53 	bl	80027e0 <Make_Sensor_State>
	Make_Sensor_State(tim5Idx + 8);
 8002b3a:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fe4c 	bl	80027e0 <Make_Sensor_State>



	switch(tim5Idx) {
 8002b48:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b07      	cmp	r3, #7
 8002b4e:	d84d      	bhi.n	8002bec <Sensor_TIM5_IRQ+0x104>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <Sensor_TIM5_IRQ+0x70>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b79 	.word	0x08002b79
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b9d 	.word	0x08002b9d
 8002b68:	08002bad 	.word	0x08002bad
 8002b6c:	08002bbd 	.word	0x08002bbd
 8002b70:	08002bcd 	.word	0x08002bcd
 8002b74:	08002bdd 	.word	0x08002bdd
		case 0:
//			Position_Windowing();
			Sum_Position_Val(tim5Idx);
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff2f 	bl	80029e0 <Sum_Position_Val>
			break;
 8002b82:	e033      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 1:
			Sum_Position_Val(tim5Idx);
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff29 	bl	80029e0 <Sum_Position_Val>
			break;
 8002b8e:	e02d      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 2:
			Sum_Position_Val(tim5Idx);
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff23 	bl	80029e0 <Sum_Position_Val>
			break;
 8002b9a:	e027      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 3:
			Sum_Position_Val(tim5Idx);
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff1d 	bl	80029e0 <Sum_Position_Val>
			Make_Battery_Voltage();
 8002ba6:	f7ff fe7d 	bl	80028a4 <Make_Battery_Voltage>
			break;
 8002baa:	e01f      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 4:
			Sum_Position_Val(tim5Idx);
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff15 	bl	80029e0 <Sum_Position_Val>
			Make_Battery_Voltage();
 8002bb6:	f7ff fe75 	bl	80028a4 <Make_Battery_Voltage>
			break;
 8002bba:	e017      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 5:
			Sum_Position_Val(tim5Idx);
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff0d 	bl	80029e0 <Sum_Position_Val>
			Make_Battery_Voltage();
 8002bc6:	f7ff fe6d 	bl	80028a4 <Make_Battery_Voltage>
			break;
 8002bca:	e00f      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 6:
			Sum_Position_Val(tim5Idx);
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff05 	bl	80029e0 <Sum_Position_Val>
			Make_Battery_Voltage();
 8002bd6:	f7ff fe65 	bl	80028a4 <Make_Battery_Voltage>
			break;
 8002bda:	e007      	b.n	8002bec <Sensor_TIM5_IRQ+0x104>

		case 7:
			Sum_Position_Val(tim5Idx);
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fefd 	bl	80029e0 <Sum_Position_Val>
			Make_Position_Val();
 8002be6:	f7ff ff63 	bl	8002ab0 <Make_Position_Val>
			break;
 8002bea:	bf00      	nop


	}

	// 인덱스 증가
	tim5Idx = (tim5Idx + 1) & 0x07;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <Sensor_TIM5_IRQ+0x120>)
 8002bfc:	701a      	strb	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40020800 	.word	0x40020800
 8002c08:	20000274 	.word	0x20000274

08002c0c <Motor_L_Speed_Control>:





__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 8002c16:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c40 <Motor_L_Speed_Control+0x34>
 8002c1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 1a90 	vmov	r1, s15
 8002c32:	4804      	ldr	r0, [pc, #16]	; (8002c44 <Motor_L_Speed_Control+0x38>)
 8002c34:	f7ff fcde 	bl	80025f4 <LL_TIM_SetAutoReload>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	43cc3418 	.word	0x43cc3418
 8002c44:	40000400 	.word	0x40000400

08002c48 <Motor_R_Speed_Control>:


__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 8002c52:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c7c <Motor_R_Speed_Control+0x34>
 8002c56:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 1a90 	vmov	r1, s15
 8002c6e:	4804      	ldr	r0, [pc, #16]	; (8002c80 <Motor_R_Speed_Control+0x38>)
 8002c70:	f7ff fcc0 	bl	80025f4 <LL_TIM_SetAutoReload>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	43cc3418 	.word	0x43cc3418
 8002c80:	40000800 	.word	0x40000800

08002c84 <Drive_Speed_Accele_Cntl>:


// 가속도 및 속도 제어
__STATIC_INLINE void	Drive_Speed_Accele_Cntl() {
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

	if (curSpeed == targetSpeed) {
 8002c88:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002c8a:	ed93 7a00 	vldr	s14, [r3]
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d104      	bne.n	8002ca8 <Drive_Speed_Accele_Cntl+0x24>

		// 속도를 targetSpeed 까지 올린 후, curAccele을 0으로 변환
		// 혹은 직선 가속 후 targetSpeed 까지 도달하지 못하고 감속한 후 감속이 종료되었으면 , curAccele을 0으로 변환
		curAccele = 0;
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
		if (curSpeed < targetSpeed) {

			curSpeed = targetSpeed;
		}
	}
}
 8002ca6:	e062      	b.n	8002d6e <Drive_Speed_Accele_Cntl+0xea>
	else if (curSpeed < targetSpeed) {
 8002ca8:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002caa:	ed93 7a00 	vldr	s14, [r3]
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	d538      	bpl.n	8002d30 <Drive_Speed_Accele_Cntl+0xac>
		curAccele += 0.01f;
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d84 <Drive_Speed_Accele_Cntl+0x100>
 8002cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002cce:	edc3 7a00 	vstr	s15, [r3]
		if (curAccele > targetAccele) {
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <Drive_Speed_Accele_Cntl+0x104>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	dd03      	ble.n	8002cf0 <Drive_Speed_Accele_Cntl+0x6c>
			curAccele = targetAccele;
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <Drive_Speed_Accele_Cntl+0x104>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002cee:	6013      	str	r3, [r2, #0]
		curSpeed += curAccele / 2000;
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <Drive_Speed_Accele_Cntl+0xfc>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002d8c <Drive_Speed_Accele_Cntl+0x108>
 8002cfa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d0a:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed > targetSpeed) {
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d10:	ed93 7a00 	vldr	s14, [r3]
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	dc00      	bgt.n	8002d26 <Drive_Speed_Accele_Cntl+0xa2>
}
 8002d24:	e023      	b.n	8002d6e <Drive_Speed_Accele_Cntl+0xea>
			curSpeed = targetSpeed;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d2c:	6013      	str	r3, [r2, #0]
}
 8002d2e:	e01e      	b.n	8002d6e <Drive_Speed_Accele_Cntl+0xea>
		curSpeed -= decele / 2000;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <Drive_Speed_Accele_Cntl+0x10c>)
 8002d32:	ed93 7a00 	vldr	s14, [r3]
 8002d36:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002d8c <Drive_Speed_Accele_Cntl+0x108>
 8002d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d40:	ed93 7a00 	vldr	s14, [r3]
 8002d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d4a:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed < targetSpeed) {
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d62:	d400      	bmi.n	8002d66 <Drive_Speed_Accele_Cntl+0xe2>
}
 8002d64:	e003      	b.n	8002d6e <Drive_Speed_Accele_Cntl+0xea>
			curSpeed = targetSpeed;
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <Drive_Speed_Accele_Cntl+0xf8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <Drive_Speed_Accele_Cntl+0xf4>)
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000028 	.word	0x20000028
 8002d7c:	20000024 	.word	0x20000024
 8002d80:	2000001c 	.word	0x2000001c
 8002d84:	3c23d70a 	.word	0x3c23d70a
 8002d88:	20000018 	.word	0x20000018
 8002d8c:	44fa0000 	.word	0x44fa0000
 8002d90:	20000020 	.word	0x20000020

08002d94 <Make_Limited_Position>:




//limitedPositionVal 값 업데이트
__STATIC_INLINE void	Make_Limited_Position() {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0

	int32_t absPositionVal = ABS(positionVal - curInlineVal);
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <Make_Limited_Position+0x84>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <Make_Limited_Position+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da05      	bge.n	8002db4 <Make_Limited_Position+0x20>
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <Make_Limited_Position+0x88>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <Make_Limited_Position+0x84>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	e004      	b.n	8002dbe <Make_Limited_Position+0x2a>
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <Make_Limited_Position+0x84>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <Make_Limited_Position+0x88>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	607b      	str	r3, [r7, #4]

	if (limitedPositionVal == absPositionVal) {
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d020      	beq.n	8002e0c <Make_Limited_Position+0x78>

		return ;
	}

	// 곡선에 진입을 시작했을 때 빠르게 curve decel을 해줌
	else if (limitedPositionVal < absPositionVal) {
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dd0d      	ble.n	8002df0 <Make_Limited_Position+0x5c>

		limitedPositionVal += 20;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002ddc:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal > absPositionVal) {
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	da12      	bge.n	8002e0e <Make_Limited_Position+0x7a>
			limitedPositionVal = absPositionVal;
 8002de8:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00e      	b.n	8002e0e <Make_Limited_Position+0x7a>
	}

	// 곡선에서 벗어날 때 천천히 속도를 올려줌
	else {

		limitedPositionVal -= 10;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3b0a      	subs	r3, #10
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002df8:	6013      	str	r3, [r2, #0]
		if (limitedPositionVal < absPositionVal) {
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dd04      	ble.n	8002e0e <Make_Limited_Position+0x7a>
			limitedPositionVal = absPositionVal;
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <Make_Limited_Position+0x8c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e000      	b.n	8002e0e <Make_Limited_Position+0x7a>
		return ;
 8002e0c:	bf00      	nop
		}
	}
}
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	20001418 	.word	0x20001418
 8002e1c:	20001434 	.word	0x20001434
 8002e20:	2000141c 	.word	0x2000141c

08002e24 <Make_Inline_Val>:


__STATIC_INLINE void	Make_Inline_Val(float finalSpeed) {
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	ed87 0a01 	vstr	s0, [r7, #4]
	 * l(m) 이동햇을 때 (curInlineVal == targetInlineVal)이 되도록 하는 curInlineVal의 변회량
	 * 		= targetInlineVal / { l(m) 이동하는데 걸리는 시간(l(m) / 500(us)) }
	 * 		= targetInlineVal * curSpeed / l(m) / 2000
	 */

	if (curInlineVal == targetInlineVal) {
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d025      	beq.n	8002e86 <Make_Inline_Val+0x62>

		return ;
	}

	else if (curInlineVal < targetInlineVal) {
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da0f      	bge.n	8002e66 <Make_Inline_Val+0x42>

		curInlineVal += 20;//targetInlineVal * finalSpeed / INLINE_POSITIONING_LEN / 2000;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e4e:	6013      	str	r3, [r2, #0]
		if (curInlineVal > targetInlineVal) {
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	dd15      	ble.n	8002e88 <Make_Inline_Val+0x64>
			curInlineVal = targetInlineVal;
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e010      	b.n	8002e88 <Make_Inline_Val+0x64>
		}
	}

	else {

		curInlineVal -= 20;//targetInlineVal * finalSpeed / INLINE_POSITIONING_LEN / 2000;;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3b14      	subs	r3, #20
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e6e:	6013      	str	r3, [r2, #0]
		if (curInlineVal < targetInlineVal) {
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	da05      	bge.n	8002e88 <Make_Inline_Val+0x64>
			curInlineVal = targetInlineVal;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <Make_Inline_Val+0x74>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <Make_Inline_Val+0x70>)
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e000      	b.n	8002e88 <Make_Inline_Val+0x64>
		return ;
 8002e86:	bf00      	nop
		}
	}
}
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20001434 	.word	0x20001434
 8002e98:	20001430 	.word	0x20001430

08002e9c <Drive_TIM9_IRQ>:



// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0

	float	finalSpeed;


	// 가속도 및 속도 제어
	Drive_Speed_Accele_Cntl();
 8002ea2:	f7ff feef 	bl	8002c84 <Drive_Speed_Accele_Cntl>

	// limitedPositionVal 값 업데이트
	Make_Limited_Position();
 8002ea6:	f7ff ff75 	bl	8002d94 <Make_Limited_Position>

	// 포지션 값에 따른 감속
	finalSpeed = curSpeed * curveDeceleCoef / (limitedPositionVal + curveDeceleCoef);
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <Drive_TIM9_IRQ+0xb4>)
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <Drive_TIM9_IRQ+0xb8>)
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002eba:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <Drive_TIM9_IRQ+0xbc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <Drive_TIM9_IRQ+0xb8>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed4:	edc7 7a01 	vstr	s15, [r7, #4]

	// inLine 값 생성
	Make_Inline_Val(finalSpeed);
 8002ed8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002edc:	f7ff ffa2 	bl	8002e24 <Make_Inline_Val>

	//position 값에 따른 좌우 모터 속도 조정
	Motor_L_Speed_Control( finalSpeed * (1 + (positionVal - curInlineVal) * positionCoef) );
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <Drive_TIM9_IRQ+0xc0>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <Drive_TIM9_IRQ+0xc4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <Drive_TIM9_IRQ+0xc8>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	f7ff fe7c 	bl	8002c0c <Motor_L_Speed_Control>
	Motor_R_Speed_Control( finalSpeed * (1 - (positionVal - curInlineVal) * positionCoef) );
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <Drive_TIM9_IRQ+0xc0>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <Drive_TIM9_IRQ+0xc4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <Drive_TIM9_IRQ+0xc8>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	eeb0 0a67 	vmov.f32	s0, s15
 8002f44:	f7ff fe80 	bl	8002c48 <Motor_R_Speed_Control>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000028 	.word	0x20000028
 8002f54:	20000030 	.word	0x20000030
 8002f58:	2000141c 	.word	0x2000141c
 8002f5c:	20001418 	.word	0x20001418
 8002f60:	20001434 	.word	0x20001434
 8002f64:	20000010 	.word	0x20000010

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002f6c:	e7fe      	b.n	8002f6c <NMI_Handler+0x4>

08002f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 8002f72:	f004 fa7f 	bl	8007474 <Motor_Power_Off>
 8002f76:	e7fc      	b.n	8002f72 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 8002f7c:	f004 fa7a 	bl	8007474 <Motor_Power_Off>
 8002f80:	e7fc      	b.n	8002f7c <MemManage_Handler+0x4>

08002f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 8002f86:	f004 fa75 	bl	8007474 <Motor_Power_Off>
 8002f8a:	e7fc      	b.n	8002f86 <BusFault_Handler+0x4>

08002f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 8002f90:	f004 fa70 	bl	8007474 <Motor_Power_Off>
 8002f94:	e7fc      	b.n	8002f90 <UsageFault_Handler+0x4>

08002f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <SysTick_Handler+0x18>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <SysTick_Handler+0x18>)
 8002fcc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	20000270 	.word	0x20000270

08002fdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	Drive_TIM9_IRQ();
 8002ff0:	f7ff ff54 	bl	8002e9c <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM9);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002ff6:	f7ff fb0b 	bl	8002610 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40014000 	.word	0x40014000

08003004 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	Sensor_TIM5_IRQ();
 8003008:	f7ff fd6e 	bl	8002ae8 <Sensor_TIM5_IRQ>
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM5);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <TIM5_IRQHandler+0x14>)
 800300e:	f7ff faff 	bl	8002610 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM5_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40000c00 	.word	0x40000c00

0800301c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_kill>:

int _kill(int pid, int sig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003036:	f005 f9ef 	bl	8008418 <__errno>
 800303a:	4603      	mov	r3, r0
 800303c:	2216      	movs	r2, #22
 800303e:	601a      	str	r2, [r3, #0]
	return -1;
 8003040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_exit>:

void _exit (int status)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ffe7 	bl	800302c <_kill>
	while (1) {}		/* Make sure we hang here */
 800305e:	e7fe      	b.n	800305e <_exit+0x12>

08003060 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e00a      	b.n	8003088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003072:	f3af 8000 	nop.w
 8003076:	4601      	mov	r1, r0
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	b2ca      	uxtb	r2, r1
 8003080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbf0      	blt.n	8003072 <_read+0x12>
	}

return len;
 8003090:	687b      	ldr	r3, [r7, #4]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e009      	b.n	80030c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	60ba      	str	r2, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fb87 	bl	80067c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dbf1      	blt.n	80030ac <_write+0x12>
	}
	return len;
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <_close>:

int _close(int file)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	return -1;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030fa:	605a      	str	r2, [r3, #4]
	return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_isatty>:

int _isatty(int file)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
	return 1;
 8003112:	2301      	movs	r3, #1
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	return 0;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f005 f954 	bl	8008418 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20020000 	.word	0x20020000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20000284 	.word	0x20000284
 80031a4:	20003038 	.word	0x20003038

080031a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031d2:	490e      	ldr	r1, [pc, #56]	; (800320c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e8:	4c0b      	ldr	r4, [pc, #44]	; (8003218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f6:	f7ff ffd7 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031fa:	f005 f913 	bl	8008424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fe:	f7fe fc61 	bl	8001ac4 <main>
  bx  lr    
 8003202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800320c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003210:	0800b2a4 	.word	0x0800b2a4
  ldr r2, =_sbss
 8003214:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003218:	20003038 	.word	0x20003038

0800321c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800321c:	e7fe      	b.n	800321c <DMA1_Stream0_IRQHandler>

0800321e <LL_ADC_SetCommonClock>:
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_REG_SetSequencerLength>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_IsEnabled>:
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800329e:	480a      	ldr	r0, [pc, #40]	; (80032c8 <LL_ADC_CommonInit+0x38>)
 80032a0:	f7ff ffe3 	bl	800326a <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffb4 	bl	800321e <LL_ADC_SetCommonClock>
 80032b6:	e001      	b.n	80032bc <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40012000 	.word	0x40012000

080032cc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ffc5 	bl	800326a <LL_ADC_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d117      	bne.n	8003316 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80032ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	e001      	b.n	800331a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff99 	bl	800326a <LL_ADC_IsEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d12b      	bne.n	8003396 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	e005      	b.n	8003366 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <LL_ADC_REG_Init+0x80>)
 800336c:	4013      	ands	r3, r2
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	4311      	orrs	r1, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	6912      	ldr	r2, [r2, #16]
 8003380:	430a      	orrs	r2, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff58 	bl	8003244 <LL_ADC_REG_SetSequencerLength>
 8003394:	e001      	b.n	800339a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	c0fffcfd 	.word	0xc0fffcfd

080033a8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4904      	ldr	r1, [pc, #16]	; (80033c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40013c00 	.word	0x40013c00

080033cc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033de:	4013      	ands	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <LL_EXTI_EnableEvent_0_31+0x20>)
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4904      	ldr	r1, [pc, #16]	; (8003414 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]

}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40013c00 	.word	0x40013c00

08003418 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	43db      	mvns	r3, r3
 8003428:	4904      	ldr	r1, [pc, #16]	; (800343c <LL_EXTI_DisableEvent_0_31+0x24>)
 800342a:	4013      	ands	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40013c00 	.word	0x40013c00

08003440 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4904      	ldr	r1, [pc, #16]	; (8003460 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40013c00 	.word	0x40013c00

08003464 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	43db      	mvns	r3, r3
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003476:	4013      	ands	r3, r2
 8003478:	608b      	str	r3, [r1, #8]

}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40013c00 	.word	0x40013c00

0800348c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4904      	ldr	r1, [pc, #16]	; (80034d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40013c00 	.word	0x40013c00

080034d8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d065      	beq.n	80035b8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d06b      	beq.n	80035cc <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	795b      	ldrb	r3, [r3, #5]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d01c      	beq.n	8003536 <LL_EXTI_Init+0x5e>
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	dc25      	bgt.n	800354c <LL_EXTI_Init+0x74>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <LL_EXTI_Init+0x32>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d00b      	beq.n	8003520 <LL_EXTI_Init+0x48>
 8003508:	e020      	b.n	800354c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ff82 	bl	8003418 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff45 	bl	80033a8 <LL_EXTI_EnableIT_0_31>
          break;
 800351e:	e018      	b.n	8003552 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff51 	bl	80033cc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff60 	bl	80033f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003534:	e00d      	b.n	8003552 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff34 	bl	80033a8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff55 	bl	80033f4 <LL_EXTI_EnableEvent_0_31>
          break;
 800354a:	e002      	b.n	8003552 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
          break;
 8003550:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	799b      	ldrb	r3, [r3, #6]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d038      	beq.n	80035cc <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	799b      	ldrb	r3, [r3, #6]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d01c      	beq.n	800359c <LL_EXTI_Init+0xc4>
 8003562:	2b03      	cmp	r3, #3
 8003564:	dc25      	bgt.n	80035b2 <LL_EXTI_Init+0xda>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d002      	beq.n	8003570 <LL_EXTI_Init+0x98>
 800356a:	2b02      	cmp	r3, #2
 800356c:	d00b      	beq.n	8003586 <LL_EXTI_Init+0xae>
 800356e:	e020      	b.n	80035b2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff9b 	bl	80034b0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff5e 	bl	8003440 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003584:	e022      	b.n	80035cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff6a 	bl	8003464 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff79 	bl	800348c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800359a:	e017      	b.n	80035cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff4d 	bl	8003440 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff6e 	bl	800348c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80035b0:	e00c      	b.n	80035cc <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
            break;
 80035b6:	e009      	b.n	80035cc <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff05 	bl	80033cc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff26 	bl	8003418 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <LL_GPIO_SetPinMode>:
{
 80035d6:	b480      	push	{r7}
 80035d8:	b089      	sub	sp, #36	; 0x24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	613b      	str	r3, [r7, #16]
  return result;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2103      	movs	r1, #3
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	401a      	ands	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	61bb      	str	r3, [r7, #24]
  return result;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3724      	adds	r7, #36	; 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_GPIO_SetPinOutputType>:
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_GPIO_SetPinSpeed>:
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	613b      	str	r3, [r7, #16]
  return result;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2103      	movs	r1, #3
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	61bb      	str	r3, [r7, #24]
  return result;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	bf00      	nop
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_GPIO_SetPinPull>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b089      	sub	sp, #36	; 0x24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	613b      	str	r3, [r7, #16]
  return result;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	2103      	movs	r1, #3
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	61bb      	str	r3, [r7, #24]
  return result;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
}
 8003714:	bf00      	nop
 8003716:	3724      	adds	r7, #36	; 0x24
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_GPIO_SetAFPin_0_7>:
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	613b      	str	r3, [r7, #16]
  return result;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	210f      	movs	r1, #15
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	61bb      	str	r3, [r7, #24]
  return result;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
}
 8003772:	bf00      	nop
 8003774:	3724      	adds	r7, #36	; 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_GPIO_SetAFPin_8_15>:
{
 800377e:	b480      	push	{r7}
 8003780:	b089      	sub	sp, #36	; 0x24
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	613b      	str	r3, [r7, #16]
  return result;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	210f      	movs	r1, #15
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	61bb      	str	r3, [r7, #24]
  return result;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80037d4:	bf00      	nop
 80037d6:	3724      	adds	r7, #36	; 0x24
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	613b      	str	r3, [r7, #16]
  return result;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800380a:	e050      	b.n	80038ae <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d042      	beq.n	80038a8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d003      	beq.n	8003832 <LL_GPIO_Init+0x52>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d10d      	bne.n	800384e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	461a      	mov	r2, r3
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff12 	bl	8003664 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	461a      	mov	r2, r3
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fef3 	bl	8003634 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	461a      	mov	r2, r3
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff33 	bl	80036c2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d11a      	bne.n	800389a <LL_GPIO_Init+0xba>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	60bb      	str	r3, [r7, #8]
  return result;
 8003870:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b07      	cmp	r3, #7
 800387a:	d807      	bhi.n	800388c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	461a      	mov	r2, r3
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff4b 	bl	8003720 <LL_GPIO_SetAFPin_0_7>
 800388a:	e006      	b.n	800389a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	461a      	mov	r2, r3
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff72 	bl	800377e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe97 	bl	80035d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	3301      	adds	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1a7      	bne.n	800380c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <LL_I2C_Enable>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_I2C_Disable>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_I2C_ConfigFilters>:
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f023 021f 	bic.w	r2, r3, #31
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	430b      	orrs	r3, r1
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_I2C_SetOwnAddress1>:
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	430a      	orrs	r2, r1
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	609a      	str	r2, [r3, #8]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <LL_I2C_ConfigSpeed+0x124>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0c9b      	lsrs	r3, r3, #18
 8003984:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	493a      	ldr	r1, [pc, #232]	; (8003a8c <LL_I2C_ConfigSpeed+0x128>)
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d802      	bhi.n	80039ac <LL_I2C_ConfigSpeed+0x48>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3301      	adds	r3, #1
 80039aa:	e009      	b.n	80039c0 <LL_I2C_ConfigSpeed+0x5c>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4936      	ldr	r1, [pc, #216]	; (8003a90 <LL_I2C_ConfigSpeed+0x12c>)
 80039b8:	fba1 1303 	umull	r1, r3, r1, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <LL_I2C_ConfigSpeed+0x128>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d939      	bls.n	8003a42 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d117      	bne.n	8003a04 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fc:	e01d      	b.n	8003a3a <LL_I2C_ConfigSpeed+0xd6>
 80039fe:	f248 0301 	movw	r3, #32769	; 0x8001
 8003a02:	e01a      	b.n	8003a3a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a34:	e001      	b.n	8003a3a <LL_I2C_ConfigSpeed+0xd6>
 8003a36:	f248 0301 	movw	r3, #32769	; 0x8001
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e011      	b.n	8003a66 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a50:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	e000      	b.n	8003a64 <LL_I2C_ConfigSpeed+0x100>
 8003a62:	2304      	movs	r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	61da      	str	r2, [r3, #28]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	431bde83 	.word	0x431bde83
 8003a8c:	000186a0 	.word	0x000186a0
 8003a90:	10624dd3 	.word	0x10624dd3

08003a94 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 021a 	bic.w	r2, r3, #26
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fefb 	bl	80038e6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f89d 	bl	8003c34 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fefe 	bl	8003906 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003b0a:	6939      	ldr	r1, [r7, #16]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff25 	bl	8003964 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6959      	ldr	r1, [r3, #20]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	461a      	mov	r2, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff04 	bl	8003932 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ffaf 	bl	8003a94 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fec5 	bl	80038c6 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffb9 	bl	8003aba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <LL_RCC_GetSysClkSource>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <LL_RCC_GetSysClkSource+0x18>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800

08003b70 <LL_RCC_GetAHBPrescaler>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <LL_RCC_GetAHBPrescaler+0x18>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <LL_RCC_GetAPB1Prescaler>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <LL_RCC_GetAPB2Prescaler>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <LL_RCC_PLL_GetMainSource+0x18>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <LL_RCC_PLL_GetN+0x18>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40023800 	.word	0x40023800

08003bfc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <LL_RCC_PLL_GetP+0x18>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <LL_RCC_PLL_GetDivider+0x18>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800

08003c34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003c3c:	f000 f820 	bl	8003c80 <RCC_GetSystemClockFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f840 	bl	8003cd0 <RCC_GetHCLKClockFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f84e 	bl	8003cfc <RCC_GetPCLK1ClockFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f85a 	bl	8003d24 <RCC_GetPCLK2ClockFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003c8a:	f7ff ff63 	bl	8003b54 <LL_RCC_GetSysClkSource>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d00c      	beq.n	8003cae <RCC_GetSystemClockFreq+0x2e>
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d80f      	bhi.n	8003cb8 <RCC_GetSystemClockFreq+0x38>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <RCC_GetSystemClockFreq+0x22>
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d003      	beq.n	8003ca8 <RCC_GetSystemClockFreq+0x28>
 8003ca0:	e00a      	b.n	8003cb8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <RCC_GetSystemClockFreq+0x48>)
 8003ca4:	607b      	str	r3, [r7, #4]
      break;
 8003ca6:	e00a      	b.n	8003cbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <RCC_GetSystemClockFreq+0x4c>)
 8003caa:	607b      	str	r3, [r7, #4]
      break;
 8003cac:	e007      	b.n	8003cbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003cae:	2008      	movs	r0, #8
 8003cb0:	f000 f84c 	bl	8003d4c <RCC_PLL_GetFreqDomain_SYS>
 8003cb4:	6078      	str	r0, [r7, #4]
      break;
 8003cb6:	e002      	b.n	8003cbe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <RCC_GetSystemClockFreq+0x48>)
 8003cba:	607b      	str	r3, [r7, #4]
      break;
 8003cbc:	bf00      	nop
  }

  return frequency;
 8003cbe:	687b      	ldr	r3, [r7, #4]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	007a1200 	.word	0x007a1200

08003cd0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003cd8:	f7ff ff4a 	bl	8003b70 <LL_RCC_GetAHBPrescaler>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <RCC_GetHCLKClockFreq+0x28>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	40d3      	lsrs	r3, r2
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	0800ac8c 	.word	0x0800ac8c

08003cfc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003d04:	f7ff ff42 	bl	8003b8c <LL_RCC_GetAPB1Prescaler>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <RCC_GetPCLK1ClockFreq+0x24>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	40d3      	lsrs	r3, r2
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	0800ac9c 	.word	0x0800ac9c

08003d24 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003d2c:	f7ff ff3c 	bl	8003ba8 <LL_RCC_GetAPB2Prescaler>
 8003d30:	4603      	mov	r3, r0
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <RCC_GetPCLK2ClockFreq+0x24>)
 8003d36:	5cd3      	ldrb	r3, [r2, r3]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	40d3      	lsrs	r3, r2
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	0800ac9c 	.word	0x0800ac9c

08003d4c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003d60:	f7ff ff30 	bl	8003bc4 <LL_RCC_PLL_GetMainSource>
 8003d64:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d72:	d003      	beq.n	8003d7c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003d74:	e005      	b.n	8003d82 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003d78:	617b      	str	r3, [r7, #20]
      break;
 8003d7a:	e005      	b.n	8003d88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003d7e:	617b      	str	r3, [r7, #20]
      break;
 8003d80:	e002      	b.n	8003d88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003d84:	617b      	str	r3, [r7, #20]
      break;
 8003d86:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d113      	bne.n	8003db6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d8e:	f7ff ff43 	bl	8003c18 <LL_RCC_PLL_GetDivider>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fbb3 f4f2 	udiv	r4, r3, r2
 8003d9a:	f7ff ff21 	bl	8003be0 <LL_RCC_PLL_GetN>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	fb03 f404 	mul.w	r4, r3, r4
 8003da4:	f7ff ff2a 	bl	8003bfc <LL_RCC_PLL_GetP>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	3301      	adds	r3, #1
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003db4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003db6:	693b      	ldr	r3, [r7, #16]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd90      	pop	{r4, r7, pc}
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	007a1200 	.word	0x007a1200

08003dc8 <LL_SPI_IsEnabled>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d101      	bne.n	8003de0 <LL_SPI_IsEnabled+0x18>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <LL_SPI_IsEnabled+0x1a>
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ffd3 	bl	8003dc8 <LL_SPI_IsEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d139      	bne.n	8003e9c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e30:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6811      	ldr	r1, [r2, #0]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	6852      	ldr	r2, [r2, #4]
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	4311      	orrs	r1, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	68d2      	ldr	r2, [r2, #12]
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6912      	ldr	r2, [r2, #16]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	6952      	ldr	r2, [r2, #20]
 8003e54:	4311      	orrs	r1, r2
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6992      	ldr	r2, [r2, #24]
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	69d2      	ldr	r2, [r2, #28]
 8003e60:	4311      	orrs	r1, r2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	6a12      	ldr	r2, [r2, #32]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f023 0204 	bic.w	r2, r3, #4
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	d105      	bne.n	8003e98 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ffab 	bl	8003dee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	61da      	str	r2, [r3, #28]
  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <LL_TIM_SetPrescaler>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_TIM_SetAutoReload>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_TIM_SetRepetitionCounter>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_TIM_OC_SetCompareCH1>:
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_TIM_OC_SetCompareCH2>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_TIM_OC_SetCompareCH3>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_TIM_OC_SetCompareCH4>:
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	615a      	str	r2, [r3, #20]
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a31      	ldr	r2, [pc, #196]	; (8004070 <LL_TIM_Init+0xd8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <LL_TIM_Init+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d00b      	beq.n	8003fd0 <LL_TIM_Init+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <LL_TIM_Init+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <LL_TIM_Init+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <LL_TIM_Init+0xe0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <LL_TIM_Init+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a2c      	ldr	r2, [pc, #176]	; (800407c <LL_TIM_Init+0xe4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d106      	bne.n	8003fde <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <LL_TIM_Init+0xd8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01b      	beq.n	800401e <LL_TIM_Init+0x86>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d017      	beq.n	800401e <LL_TIM_Init+0x86>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	; (8004074 <LL_TIM_Init+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <LL_TIM_Init+0x86>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <LL_TIM_Init+0xe0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <LL_TIM_Init+0x86>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <LL_TIM_Init+0xe4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <LL_TIM_Init+0x86>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <LL_TIM_Init+0xe8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <LL_TIM_Init+0x86>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <LL_TIM_Init+0xec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <LL_TIM_Init+0x86>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <LL_TIM_Init+0xf0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d106      	bne.n	800402c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff48 	bl	8003ece <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff34 	bl	8003eb2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a08      	ldr	r2, [pc, #32]	; (8004070 <LL_TIM_Init+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d105      	bne.n	800405e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff46 	bl	8003eea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff89 	bl	8003f76 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800

0800408c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d027      	beq.n	80040f4 <LL_TIM_OC_Init+0x68>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d82a      	bhi.n	8004102 <LL_TIM_OC_Init+0x76>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d018      	beq.n	80040e6 <LL_TIM_OC_Init+0x5a>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d822      	bhi.n	8004102 <LL_TIM_OC_Init+0x76>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d003      	beq.n	80040ca <LL_TIM_OC_Init+0x3e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d007      	beq.n	80040d8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80040c8:	e01b      	b.n	8004102 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f81f 	bl	8004110 <OC1Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]
      break;
 80040d6:	e015      	b.n	8004104 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f87e 	bl	80041dc <OC2Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	e00e      	b.n	8004104 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f8e1 	bl	80042b0 <OC3Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]
      break;
 80040f2:	e007      	b.n	8004104 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f944 	bl	8004384 <OC4Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e000      	b.n	8004104 <LL_TIM_OC_Init+0x78>
      break;
 8004102:	bf00      	nop
  }

  return result;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0202 	bic.w	r2, r3, #2
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <OC1Config+0xc8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d11e      	bne.n	80041b0 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f023 0208 	bic.w	r2, r3, #8
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0204 	bic.w	r2, r3, #4
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe9f 	bl	8003f06 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40010000 	.word	0x40010000

080041dc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0210 	bic.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0220 	bic.w	r2, r3, #32
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <OC2Config+0xd0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d11f      	bne.n	8004284 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	019b      	lsls	r3, r3, #6
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	019b      	lsls	r3, r3, #6
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fe43 	bl	8003f22 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40010000 	.word	0x40010000

080042b0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <OC3Config+0xd0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d11f      	bne.n	8004356 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	029b      	lsls	r3, r3, #10
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fde8 	bl	8003f3e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000

08004384 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	031b      	lsls	r3, r3, #12
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	031b      	lsls	r3, r3, #12
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <OC4Config+0xa0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d107      	bne.n	80043fc <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fda3 	bl	8003f5a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40010000 	.word	0x40010000

08004428 <LL_USART_IsEnabled>:
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_USART_SetStopBitsLength>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_USART_SetHWFlowCtrl>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	615a      	str	r2, [r3, #20]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_USART_SetBaudRate>:
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b0c0      	sub	sp, #256	; 0x100
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044a8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80044ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80044b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	f040 810c 	bne.w	80046d8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80044c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	1891      	adds	r1, r2, r2
 80044d8:	6639      	str	r1, [r7, #96]	; 0x60
 80044da:	415b      	adcs	r3, r3
 80044dc:	667b      	str	r3, [r7, #100]	; 0x64
 80044de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80044e2:	4621      	mov	r1, r4
 80044e4:	eb12 0801 	adds.w	r8, r2, r1
 80044e8:	4629      	mov	r1, r5
 80044ea:	eb43 0901 	adc.w	r9, r3, r1
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004502:	4690      	mov	r8, r2
 8004504:	4699      	mov	r9, r3
 8004506:	4623      	mov	r3, r4
 8004508:	eb18 0303 	adds.w	r3, r8, r3
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004510:	462b      	mov	r3, r5
 8004512:	eb49 0303 	adc.w	r3, r9, r3
 8004516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800451a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800451e:	2200      	movs	r2, #0
 8004520:	469a      	mov	sl, r3
 8004522:	4693      	mov	fp, r2
 8004524:	eb1a 030a 	adds.w	r3, sl, sl
 8004528:	65bb      	str	r3, [r7, #88]	; 0x58
 800452a:	eb4b 030b 	adc.w	r3, fp, fp
 800452e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004530:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004538:	f7fc fb3e 	bl	8000bb8 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <LL_USART_SetBaudRate+0x238>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	b29b      	uxth	r3, r3
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	b29c      	uxth	r4, r3
 800454e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004558:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800455c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	6539      	str	r1, [r7, #80]	; 0x50
 8004568:	415b      	adcs	r3, r3
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
 800456c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	64b9      	str	r1, [r7, #72]	; 0x48
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80045be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	643b      	str	r3, [r7, #64]	; 0x40
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44
 80045d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80045d8:	f7fc faee 	bl	8000bb8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	4b3c      	ldr	r3, [pc, #240]	; (80046d4 <LL_USART_SetBaudRate+0x238>)
 80045e4:	fba3 2301 	umull	r2, r3, r3, r1
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2264      	movs	r2, #100	; 0x64
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	1acb      	subs	r3, r1, r3
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <LL_USART_SetBaudRate+0x238>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	b29b      	uxth	r3, r3
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800460a:	b29b      	uxth	r3, r3
 800460c:	4423      	add	r3, r4
 800460e:	b29c      	uxth	r4, r3
 8004610:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800461a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800461e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	1891      	adds	r1, r2, r2
 8004628:	63b9      	str	r1, [r7, #56]	; 0x38
 800462a:	415b      	adcs	r3, r3
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004632:	4641      	mov	r1, r8
 8004634:	1851      	adds	r1, r2, r1
 8004636:	6339      	str	r1, [r7, #48]	; 0x30
 8004638:	4649      	mov	r1, r9
 800463a:	414b      	adcs	r3, r1
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800464a:	4659      	mov	r1, fp
 800464c:	00cb      	lsls	r3, r1, #3
 800464e:	4651      	mov	r1, sl
 8004650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004654:	4651      	mov	r1, sl
 8004656:	00ca      	lsls	r2, r1, #3
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	4603      	mov	r3, r0
 800465e:	4642      	mov	r2, r8
 8004660:	189b      	adds	r3, r3, r2
 8004662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004666:	464b      	mov	r3, r9
 8004668:	460a      	mov	r2, r1
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800467c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004680:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004684:	460b      	mov	r3, r1
 8004686:	18db      	adds	r3, r3, r3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	4613      	mov	r3, r2
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004696:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800469a:	f7fc fa8d 	bl	8000bb8 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <LL_USART_SetBaudRate+0x238>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <LL_USART_SetBaudRate+0x238>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4423      	add	r3, r4
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d0:	609a      	str	r2, [r3, #8]
}
 80046d2:	e108      	b.n	80048e6 <LL_USART_SetBaudRate+0x44a>
 80046d4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80046d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046e6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80046ea:	4642      	mov	r2, r8
 80046ec:	464b      	mov	r3, r9
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	6239      	str	r1, [r7, #32]
 80046f2:	415b      	adcs	r3, r3
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fa:	4641      	mov	r1, r8
 80046fc:	1854      	adds	r4, r2, r1
 80046fe:	4649      	mov	r1, r9
 8004700:	eb43 0501 	adc.w	r5, r3, r1
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004720:	464b      	mov	r3, r9
 8004722:	eb45 0303 	adc.w	r3, r5, r3
 8004726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800472a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800472e:	2200      	movs	r2, #0
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004734:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004744:	4629      	mov	r1, r5
 8004746:	008b      	lsls	r3, r1, #2
 8004748:	4621      	mov	r1, r4
 800474a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474e:	4621      	mov	r1, r4
 8004750:	008a      	lsls	r2, r1, #2
 8004752:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004756:	f7fc fa2f 	bl	8000bb8 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <LL_USART_SetBaudRate+0x458>)
 8004760:	fba3 2302 	umull	r2, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	b29b      	uxth	r3, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	b29c      	uxth	r4, r3
 800476c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800477a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800477e:	4642      	mov	r2, r8
 8004780:	464b      	mov	r3, r9
 8004782:	1891      	adds	r1, r2, r2
 8004784:	61b9      	str	r1, [r7, #24]
 8004786:	415b      	adcs	r3, r3
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478e:	4641      	mov	r1, r8
 8004790:	1851      	adds	r1, r2, r1
 8004792:	6139      	str	r1, [r7, #16]
 8004794:	4649      	mov	r1, r9
 8004796:	414b      	adcs	r3, r1
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a6:	4659      	mov	r1, fp
 80047a8:	00cb      	lsls	r3, r1, #3
 80047aa:	4651      	mov	r1, sl
 80047ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b0:	4651      	mov	r1, sl
 80047b2:	00ca      	lsls	r2, r1, #3
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	4603      	mov	r3, r0
 80047ba:	4642      	mov	r2, r8
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047c2:	464b      	mov	r3, r9
 80047c4:	460a      	mov	r2, r1
 80047c6:	eb42 0303 	adc.w	r3, r2, r3
 80047ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80047e8:	4649      	mov	r1, r9
 80047ea:	008b      	lsls	r3, r1, #2
 80047ec:	4641      	mov	r1, r8
 80047ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f2:	4641      	mov	r1, r8
 80047f4:	008a      	lsls	r2, r1, #2
 80047f6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80047fa:	f7fc f9dd 	bl	8000bb8 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4611      	mov	r1, r2
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <LL_USART_SetBaudRate+0x458>)
 8004806:	fba3 2301 	umull	r2, r3, r3, r1
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	; 0x32
 8004818:	4a36      	ldr	r2, [pc, #216]	; (80048f4 <LL_USART_SetBaudRate+0x458>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	b29b      	uxth	r3, r3
 8004822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004826:	b29b      	uxth	r3, r3
 8004828:	4423      	add	r3, r4
 800482a:	b29c      	uxth	r4, r3
 800482c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004830:	2200      	movs	r2, #0
 8004832:	67bb      	str	r3, [r7, #120]	; 0x78
 8004834:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004836:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800483a:	4642      	mov	r2, r8
 800483c:	464b      	mov	r3, r9
 800483e:	1891      	adds	r1, r2, r2
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	415b      	adcs	r3, r3
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800484a:	4641      	mov	r1, r8
 800484c:	1851      	adds	r1, r2, r1
 800484e:	6039      	str	r1, [r7, #0]
 8004850:	4649      	mov	r1, r9
 8004852:	414b      	adcs	r3, r1
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004862:	4659      	mov	r1, fp
 8004864:	00cb      	lsls	r3, r1, #3
 8004866:	4651      	mov	r1, sl
 8004868:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486c:	4651      	mov	r1, sl
 800486e:	00ca      	lsls	r2, r1, #3
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	4603      	mov	r3, r0
 8004876:	4642      	mov	r2, r8
 8004878:	189b      	adds	r3, r3, r2
 800487a:	673b      	str	r3, [r7, #112]	; 0x70
 800487c:	464b      	mov	r3, r9
 800487e:	460a      	mov	r2, r1
 8004880:	eb42 0303 	adc.w	r3, r2, r3
 8004884:	677b      	str	r3, [r7, #116]	; 0x74
 8004886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800488a:	2200      	movs	r2, #0
 800488c:	66bb      	str	r3, [r7, #104]	; 0x68
 800488e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800489c:	4649      	mov	r1, r9
 800489e:	008b      	lsls	r3, r1, #2
 80048a0:	4641      	mov	r1, r8
 80048a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a6:	4641      	mov	r1, r8
 80048a8:	008a      	lsls	r2, r1, #2
 80048aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80048ae:	f7fc f983 	bl	8000bb8 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <LL_USART_SetBaudRate+0x458>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <LL_USART_SetBaudRate+0x458>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4423      	add	r3, r4
 80048dc:	b29b      	uxth	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fd8c 	bl	8004428 <LL_USART_IsEnabled>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d149      	bne.n	80049aa <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800491e:	f023 030c 	bic.w	r3, r3, #12
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	6851      	ldr	r1, [r2, #4]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	4311      	orrs	r1, r2
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	6912      	ldr	r2, [r2, #16]
 8004930:	4311      	orrs	r1, r2
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	6992      	ldr	r2, [r2, #24]
 8004936:	430a      	orrs	r2, r1
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fd83 	bl	8004450 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fd90 	bl	8004476 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff f96a 	bl	8003c34 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <LL_USART_Init+0xbc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d102      	bne.n	800496e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	e00c      	b.n	8004988 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <LL_USART_Init+0xc0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d102      	bne.n	800497c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e005      	b.n	8004988 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <LL_USART_Init+0xc4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004996:	2300      	movs	r3, #0
 8004998:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fd79 	bl	800449c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40011000 	.word	0x40011000
 80049b8:	40004400 	.word	0x40004400
 80049bc:	40011400 	.word	0x40011400

080049c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <LL_InitTick+0x30>)
 80049d4:	3b01      	subs	r3, #1
 80049d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <LL_InitTick+0x30>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <LL_InitTick+0x30>)
 80049e0:	2205      	movs	r2, #5
 80049e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e010 	.word	0xe000e010

080049f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80049fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ffdd 	bl	80049c0 <LL_InitTick>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <LL_SetSystemCoreClock+0x1c>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6013      	str	r3, [r2, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000000 	.word	0x20000000

08004a30 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
	_file = file;
 8004a3c:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <__Custom_Exception_Set_Message+0x2c>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6013      	str	r3, [r2, #0]
	_line = line;
 8004a42:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <__Custom_Exception_Set_Message+0x30>)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6013      	str	r3, [r2, #0]
	_message = message;
 8004a48:	4a06      	ldr	r2, [pc, #24]	; (8004a64 <__Custom_Exception_Set_Message+0x34>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000288 	.word	0x20000288
 8004a60:	2000028c 	.word	0x2000028c
 8004a64:	20000290 	.word	0x20000290

08004a68 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8004a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <Custom_FileSystem_Load+0x18>)
 8004a72:	f000 f851 	bl	8004b18 <Custom_Flash_Read>
	filesystemLoaded = true;
 8004a76:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <Custom_FileSystem_Load+0x1c>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000294 	.word	0x20000294
 8004a84:	20001295 	.word	0x20001295

08004a88 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <Custom_Flash_Check_Error+0x78>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d006      	beq.n	8004aac <Custom_Flash_Check_Error+0x24>
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <Custom_Flash_Check_Error+0x7c>)
 8004aa0:	2113      	movs	r1, #19
 8004aa2:	4819      	ldr	r0, [pc, #100]	; (8004b08 <Custom_Flash_Check_Error+0x80>)
 8004aa4:	f7ff ffc4 	bl	8004a30 <__Custom_Exception_Set_Message>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e024      	b.n	8004af6 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <Custom_Flash_Check_Error+0x3c>
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <Custom_Flash_Check_Error+0x84>)
 8004ab8:	2114      	movs	r1, #20
 8004aba:	4813      	ldr	r0, [pc, #76]	; (8004b08 <Custom_Flash_Check_Error+0x80>)
 8004abc:	f7ff ffb8 	bl	8004a30 <__Custom_Exception_Set_Message>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e018      	b.n	8004af6 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d006      	beq.n	8004adc <Custom_Flash_Check_Error+0x54>
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <Custom_Flash_Check_Error+0x88>)
 8004ad0:	2115      	movs	r1, #21
 8004ad2:	480d      	ldr	r0, [pc, #52]	; (8004b08 <Custom_Flash_Check_Error+0x80>)
 8004ad4:	f7ff ffac 	bl	8004a30 <__Custom_Exception_Set_Message>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e00c      	b.n	8004af6 <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <Custom_Flash_Check_Error+0x6c>
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <Custom_Flash_Check_Error+0x8c>)
 8004ae8:	2116      	movs	r1, #22
 8004aea:	4807      	ldr	r0, [pc, #28]	; (8004b08 <Custom_Flash_Check_Error+0x80>)
 8004aec:	f7ff ffa0 	bl	8004a30 <__Custom_Exception_Set_Message>
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <Custom_Flash_Check_Error+0x6e>

	return true;
 8004af4:	2301      	movs	r3, #1
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40023c00 	.word	0x40023c00
 8004b04:	0800a690 	.word	0x0800a690
 8004b08:	0800a6ac 	.word	0x0800a6ac
 8004b0c:	0800a6d4 	.word	0x0800a6d4
 8004b10:	0800a6f4 	.word	0x0800a6f4
 8004b14:	0800a714 	.word	0x0800a714

08004b18 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b28:	d306      	bcc.n	8004b38 <Custom_Flash_Read+0x20>
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <Custom_Flash_Read+0x5c>)
 8004b2c:	211d      	movs	r1, #29
 8004b2e:	4812      	ldr	r0, [pc, #72]	; (8004b78 <Custom_Flash_Read+0x60>)
 8004b30:	f7ff ff7e 	bl	8004a30 <__Custom_Exception_Set_Message>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e019      	b.n	8004b6c <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00f      	b.n	8004b5e <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004b44:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8004b48:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	440b      	add	r3, r1
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d8eb      	bhi.n	8004b3e <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 8004b66:	f7ff ff8f 	bl	8004a88 <Custom_Flash_Check_Error>
 8004b6a:	4603      	mov	r3, r0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	0800a72c 	.word	0x0800a72c
 8004b78:	0800a6ac 	.word	0x0800a6ac

08004b7c <LL_SPI_Enable>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_SPI_SetTransferDirection>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d101      	bne.n	8004bda <LL_SPI_IsActiveFlag_TXE+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d101      	bne.n	8004c00 <LL_SPI_IsActiveFlag_BSY+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <Custom_GPIO_Set+0x22>
 8004c4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c52:	e000      	b.n	8004c56 <Custom_GPIO_Set+0x24>
 8004c54:	2100      	movs	r1, #0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	400b      	ands	r3, r1
 8004c5a:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 8004c76:	bf00      	nop
 8004c78:	480b      	ldr	r0, [pc, #44]	; (8004ca8 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004c7a:	f7ff ffa2 	bl	8004bc2 <LL_SPI_IsActiveFlag_TXE>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f9      	beq.n	8004c78 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	4619      	mov	r1, r3
 8004c88:	4807      	ldr	r0, [pc, #28]	; (8004ca8 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004c8a:	f7ff ffc0 	bl	8004c0e <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8004c8e:	bf00      	nop
 8004c90:	4805      	ldr	r0, [pc, #20]	; (8004ca8 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8004c92:	f7ff ffa9 	bl	8004be8 <LL_SPI_IsActiveFlag_BSY>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f9      	bne.n	8004c90 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40003800 	.word	0x40003800

08004cac <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2110      	movs	r1, #16
 8004cba:	4811      	ldr	r0, [pc, #68]	; (8004d00 <Custom_OLED_Write_Command+0x54>)
 8004cbc:	f7ff ffb9 	bl	8004c32 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2104      	movs	r1, #4
 8004cc4:	480f      	ldr	r0, [pc, #60]	; (8004d04 <Custom_OLED_Write_Command+0x58>)
 8004cc6:	f7ff ffb4 	bl	8004c32 <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e009      	b.n	8004ce4 <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ffc7 	bl	8004c6c <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d8f1      	bhi.n	8004cd0 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004cec:	2201      	movs	r2, #1
 8004cee:	2104      	movs	r1, #4
 8004cf0:	4804      	ldr	r0, [pc, #16]	; (8004d04 <Custom_OLED_Write_Command+0x58>)
 8004cf2:	f7ff ff9e 	bl	8004c32 <Custom_GPIO_Set>
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40020000 	.word	0x40020000
 8004d04:	40020400 	.word	0x40020400

08004d08 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 8004d12:	2201      	movs	r2, #1
 8004d14:	2110      	movs	r1, #16
 8004d16:	4817      	ldr	r0, [pc, #92]	; (8004d74 <Custom_OLED_Write_Data+0x6c>)
 8004d18:	f7ff ff8b 	bl	8004c32 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2104      	movs	r1, #4
 8004d20:	4815      	ldr	r0, [pc, #84]	; (8004d78 <Custom_OLED_Write_Data+0x70>)
 8004d22:	f7ff ff86 	bl	8004c32 <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e016      	b.n	8004d5a <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff ff95 	bl	8004c6c <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff8c 	bl	8004c6c <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d8e4      	bhi.n	8004d2c <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8004d62:	2201      	movs	r2, #1
 8004d64:	2104      	movs	r1, #4
 8004d66:	4804      	ldr	r0, [pc, #16]	; (8004d78 <Custom_OLED_Write_Data+0x70>)
 8004d68:	f7ff ff63 	bl	8004c32 <Custom_GPIO_Set>
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40020000 	.word	0x40020000
 8004d78:	40020400 	.word	0x40020400

08004d7c <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	71fb      	strb	r3, [r7, #7]
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71bb      	strb	r3, [r7, #6]
 8004d92:	460b      	mov	r3, r1
 8004d94:	717b      	strb	r3, [r7, #5]
 8004d96:	4613      	mov	r3, r2
 8004d98:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8004d9a:	2315      	movs	r3, #21
 8004d9c:	723b      	strb	r3, [r7, #8]
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	727b      	strb	r3, [r7, #9]
 8004da2:	797b      	ldrb	r3, [r7, #5]
 8004da4:	72bb      	strb	r3, [r7, #10]
 8004da6:	2375      	movs	r3, #117	; 0x75
 8004da8:	72fb      	strb	r3, [r7, #11]
 8004daa:	79bb      	ldrb	r3, [r7, #6]
 8004dac:	733b      	strb	r3, [r7, #12]
 8004dae:	793b      	ldrb	r3, [r7, #4]
 8004db0:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	2106      	movs	r1, #6
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff ff77 	bl	8004cac <Custom_OLED_Write_Command>
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}

08004dc6 <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 8004dd0:	233f      	movs	r3, #63	; 0x3f
 8004dd2:	225f      	movs	r2, #95	; 0x5f
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f7ff ffd0 	bl	8004d7c <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004ddc:	2300      	movs	r3, #0
 8004dde:	607b      	str	r3, [r7, #4]
 8004de0:	e007      	b.n	8004df2 <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 8004de2:	1cbb      	adds	r3, r7, #2
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff ff8e 	bl	8004d08 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3301      	adds	r3, #1
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004df8:	dbf3      	blt.n	8004de2 <Custom_OLED_Clear+0x1c>
    }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <Custom_OLED_Init>:

void Custom_OLED_Init() {
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8004e0a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004e0e:	480e      	ldr	r0, [pc, #56]	; (8004e48 <Custom_OLED_Init+0x44>)
 8004e10:	f7ff fec4 	bl	8004b9c <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8004e14:	480c      	ldr	r0, [pc, #48]	; (8004e48 <Custom_OLED_Init+0x44>)
 8004e16:	f7ff feb1 	bl	8004b7c <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <Custom_OLED_Init+0x48>)
 8004e1c:	463c      	mov	r4, r7
 8004e1e:	461d      	mov	r5, r3
 8004e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e2c:	6020      	str	r0, [r4, #0]
 8004e2e:	3404      	adds	r4, #4
 8004e30:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 8004e32:	463b      	mov	r3, r7
 8004e34:	2125      	movs	r1, #37	; 0x25
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff38 	bl	8004cac <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8004e3c:	f7ff ffc3 	bl	8004dc6 <Custom_OLED_Clear>
}
 8004e40:	bf00      	nop
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bdb0      	pop	{r4, r5, r7, pc}
 8004e48:	40003800 	.word	0x40003800
 8004e4c:	0800a774 	.word	0x0800a774

08004e50 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	71fb      	strb	r3, [r7, #7]
 8004e62:	4603      	mov	r3, r0
 8004e64:	80bb      	strh	r3, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	71bb      	strb	r3, [r7, #6]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8004e6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e72:	461a      	mov	r2, r3
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	79bb      	ldrb	r3, [r7, #6]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 8004e84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b5f      	cmp	r3, #95	; 0x5f
 8004e9a:	d802      	bhi.n	8004ea2 <Custom_OLED_Putchar+0x52>
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8004ea0:	d902      	bls.n	8004ea8 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 8004ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ea6:	e06a      	b.n	8004f7e <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	7bfa      	ldrb	r2, [r7, #15]
 8004eac:	78f9      	ldrb	r1, [r7, #3]
 8004eae:	79b8      	ldrb	r0, [r7, #6]
 8004eb0:	f7ff ff64 	bl	8004d7c <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 8004eb4:	79fa      	ldrb	r2, [r7, #7]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <Custom_OLED_Putchar+0x138>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	e048      	b.n	8004f5a <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e03f      	b.n	8004f4e <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e034      	b.n	8004f3e <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	e029      	b.n	8004f2e <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	4413      	add	r3, r2
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	fa42 f303 	asr.w	r3, r2, r3
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <Custom_OLED_Putchar+0xa6>
 8004ef2:	88b8      	ldrh	r0, [r7, #4]
 8004ef4:	e000      	b.n	8004ef8 <Custom_OLED_Putchar+0xa8>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004efc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f00:	69f9      	ldr	r1, [r7, #28]
 8004f02:	fb02 f101 	mul.w	r1, r2, r1
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	440a      	add	r2, r1
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	441a      	add	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	4a1a      	ldr	r2, [pc, #104]	; (8004f8c <Custom_OLED_Putchar+0x13c>)
 8004f22:	4601      	mov	r1, r0
 8004f24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	dbd0      	blt.n	8004eda <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dbc5      	blt.n	8004ed4 <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	ddbc      	ble.n	8004ece <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	ddb3      	ble.n	8004ec8 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8004f60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004f64:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f68:	fb03 f202 	mul.w	r2, r3, r2
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4619      	mov	r1, r3
 8004f76:	4805      	ldr	r0, [pc, #20]	; (8004f8c <Custom_OLED_Putchar+0x13c>)
 8004f78:	f7ff fec6 	bl	8004d08 <Custom_OLED_Write_Data>
	return 0;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd90      	pop	{r4, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	0800aca4 	.word	0x0800aca4
 8004f8c:	20001298 	.word	0x20001298

08004f90 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8004f90:	b40f      	push	{r0, r1, r2, r3}
 8004f92:	b590      	push	{r4, r7, lr}
 8004f94:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8004f98:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 8004fa6:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8004faa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004fae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8004fb2:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8004fb4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004fb8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8004fbc:	f107 0008 	add.w	r0, r7, #8
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8004fc6:	f003 fa11 	bl	80083ec <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 8004fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fd4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 8004fde:	e226      	b.n	800542e <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 8004fe0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004fe4:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8004fe8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ff2:	f040 81f7 	bne.w	80053e4 <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 8004ff6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005000:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005004:	5cd3      	ldrb	r3, [r2, r3]
 8005006:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 800500a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800500e:	2b2f      	cmp	r3, #47	; 0x2f
 8005010:	d105      	bne.n	800501e <Custom_OLED_Printf+0x8e>
				cursor += 1;
 8005012:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005016:	3301      	adds	r3, #1
 8005018:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800501c:	e1e2      	b.n	80053e4 <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 800501e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005022:	3b23      	subs	r3, #35	; 0x23
 8005024:	2b56      	cmp	r3, #86	; 0x56
 8005026:	f200 81d7 	bhi.w	80053d8 <Custom_OLED_Printf+0x448>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <Custom_OLED_Printf+0xa0>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005249 	.word	0x08005249
 8005034:	080053d9 	.word	0x080053d9
 8005038:	080053d9 	.word	0x080053d9
 800503c:	080053d9 	.word	0x080053d9
 8005040:	080053d9 	.word	0x080053d9
 8005044:	080053d9 	.word	0x080053d9
 8005048:	080053d9 	.word	0x080053d9
 800504c:	080053d9 	.word	0x080053d9
 8005050:	080053d9 	.word	0x080053d9
 8005054:	080053d9 	.word	0x080053d9
 8005058:	080053d9 	.word	0x080053d9
 800505c:	080053d9 	.word	0x080053d9
 8005060:	080053d9 	.word	0x080053d9
 8005064:	0800518d 	.word	0x0800518d
 8005068:	0800518d 	.word	0x0800518d
 800506c:	0800518d 	.word	0x0800518d
 8005070:	0800518d 	.word	0x0800518d
 8005074:	0800518d 	.word	0x0800518d
 8005078:	0800518d 	.word	0x0800518d
 800507c:	0800518d 	.word	0x0800518d
 8005080:	080053d9 	.word	0x080053d9
 8005084:	080053d9 	.word	0x080053d9
 8005088:	080053d9 	.word	0x080053d9
 800508c:	080053d9 	.word	0x080053d9
 8005090:	080053d9 	.word	0x080053d9
 8005094:	080053d9 	.word	0x080053d9
 8005098:	080053d9 	.word	0x080053d9
 800509c:	080053d9 	.word	0x080053d9
 80050a0:	080053d9 	.word	0x080053d9
 80050a4:	080053d9 	.word	0x080053d9
 80050a8:	08005239 	.word	0x08005239
 80050ac:	080053d9 	.word	0x080053d9
 80050b0:	080053d9 	.word	0x080053d9
 80050b4:	080053d9 	.word	0x080053d9
 80050b8:	080053d9 	.word	0x080053d9
 80050bc:	080053d9 	.word	0x080053d9
 80050c0:	080053d9 	.word	0x080053d9
 80050c4:	080053d9 	.word	0x080053d9
 80050c8:	080053d9 	.word	0x080053d9
 80050cc:	080053d9 	.word	0x080053d9
 80050d0:	08005227 	.word	0x08005227
 80050d4:	080053d9 	.word	0x080053d9
 80050d8:	080053d9 	.word	0x080053d9
 80050dc:	080053d9 	.word	0x080053d9
 80050e0:	080053d9 	.word	0x080053d9
 80050e4:	080053d9 	.word	0x080053d9
 80050e8:	080053d9 	.word	0x080053d9
 80050ec:	080053d9 	.word	0x080053d9
 80050f0:	080053d9 	.word	0x080053d9
 80050f4:	080053d9 	.word	0x080053d9
 80050f8:	080053d9 	.word	0x080053d9
 80050fc:	080053d9 	.word	0x080053d9
 8005100:	080053d9 	.word	0x080053d9
 8005104:	080053d9 	.word	0x080053d9
 8005108:	080053d9 	.word	0x080053d9
 800510c:	080053d9 	.word	0x080053d9
 8005110:	080053d9 	.word	0x080053d9
 8005114:	080053d9 	.word	0x080053d9
 8005118:	080053d9 	.word	0x080053d9
 800511c:	080053d9 	.word	0x080053d9
 8005120:	080053d9 	.word	0x080053d9
 8005124:	080053d9 	.word	0x080053d9
 8005128:	08005241 	.word	0x08005241
 800512c:	080051c5 	.word	0x080051c5
 8005130:	080051d7 	.word	0x080051d7
 8005134:	080053d9 	.word	0x080053d9
 8005138:	080053d9 	.word	0x080053d9
 800513c:	080053d9 	.word	0x080053d9
 8005140:	080051bb 	.word	0x080051bb
 8005144:	080053d9 	.word	0x080053d9
 8005148:	080053d9 	.word	0x080053d9
 800514c:	080053d9 	.word	0x080053d9
 8005150:	08005231 	.word	0x08005231
 8005154:	080051f5 	.word	0x080051f5
 8005158:	080051e1 	.word	0x080051e1
 800515c:	080053d9 	.word	0x080053d9
 8005160:	080051eb 	.word	0x080051eb
 8005164:	0800521d 	.word	0x0800521d
 8005168:	080053d9 	.word	0x080053d9
 800516c:	080051b1 	.word	0x080051b1
 8005170:	08005209 	.word	0x08005209
 8005174:	080051ff 	.word	0x080051ff
 8005178:	080053d9 	.word	0x080053d9
 800517c:	08005213 	.word	0x08005213
 8005180:	080051a7 	.word	0x080051a7
 8005184:	080053d9 	.word	0x080053d9
 8005188:	080051cd 	.word	0x080051cd
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 8005192:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8005196:	3b30      	subs	r3, #48	; 0x30
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	00d2      	lsls	r2, r2, #3
 800519e:	4413      	add	r3, r2
 80051a0:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 80051a4:	e118      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 80051a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051aa:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051ae:	e113      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 80051b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051b8:	e10e      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 80051ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80051be:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051c2:	e109      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 80051c4:	231f      	movs	r3, #31
 80051c6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051ca:	e105      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80051cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80051d0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051d4:	e100      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80051d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80051da:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051de:	e0fb      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80051e0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80051e4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051e8:	e0f6      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 80051ea:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 80051ee:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051f2:	e0f1      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 80051f4:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80051f8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80051fc:	e0ec      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 80051fe:	f240 73ef 	movw	r3, #2031	; 0x7ef
 8005202:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005206:	e0e7      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 8005208:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800520c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005210:	e0e2      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 8005212:	f647 031f 	movw	r3, #30751	; 0x781f
 8005216:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800521a:	e0dd      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 800521c:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8005220:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005224:	e0d8      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 8005226:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800522a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800522e:	e0d3      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8005230:	2300      	movs	r3, #0
 8005232:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8005236:	e0cf      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8005238:	2302      	movs	r3, #2
 800523a:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800523e:	e0cb      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8005246:	e0c7      	b.n	80053d8 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005254:	e099      	b.n	800538a <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 8005256:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800525a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800525e:	4413      	add	r3, r2
 8005260:	3302      	adds	r3, #2
 8005262:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005266:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800526a:	5cd3      	ldrb	r3, [r2, r3]
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d924      	bls.n	80052ba <Custom_OLED_Printf+0x32a>
 8005270:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005274:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005278:	4413      	add	r3, r2
 800527a:	3302      	adds	r3, #2
 800527c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005280:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005284:	5cd3      	ldrb	r3, [r2, r3]
 8005286:	2b46      	cmp	r3, #70	; 0x46
 8005288:	d817      	bhi.n	80052ba <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 800528a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8005294:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005298:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800529c:	4413      	add	r3, r2
 800529e:	3302      	adds	r3, #2
 80052a0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80052a4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80052a8:	5cd3      	ldrb	r3, [r2, r3]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052b0:	4413      	add	r3, r2
 80052b2:	3b37      	subs	r3, #55	; 0x37
 80052b4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80052b8:	e062      	b.n	8005380 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 80052ba:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80052be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80052c2:	4413      	add	r3, r2
 80052c4:	3302      	adds	r3, #2
 80052c6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80052ca:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80052ce:	5cd3      	ldrb	r3, [r2, r3]
 80052d0:	2b60      	cmp	r3, #96	; 0x60
 80052d2:	d924      	bls.n	800531e <Custom_OLED_Printf+0x38e>
 80052d4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80052d8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80052dc:	4413      	add	r3, r2
 80052de:	3302      	adds	r3, #2
 80052e0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80052e4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	2b66      	cmp	r3, #102	; 0x66
 80052ec:	d817      	bhi.n	800531e <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 80052ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 80052f8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80052fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005300:	4413      	add	r3, r2
 8005302:	3302      	adds	r3, #2
 8005304:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005308:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	461a      	mov	r2, r3
 8005310:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005314:	4413      	add	r3, r2
 8005316:	3b57      	subs	r3, #87	; 0x57
 8005318:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800531c:	e030      	b.n	8005380 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 800531e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005322:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005326:	4413      	add	r3, r2
 8005328:	3302      	adds	r3, #2
 800532a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800532e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	2b2f      	cmp	r3, #47	; 0x2f
 8005336:	d923      	bls.n	8005380 <Custom_OLED_Printf+0x3f0>
 8005338:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800533c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005340:	4413      	add	r3, r2
 8005342:	3302      	adds	r3, #2
 8005344:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8005348:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800534c:	5cd3      	ldrb	r3, [r2, r3]
 800534e:	2b39      	cmp	r3, #57	; 0x39
 8005350:	d816      	bhi.n	8005380 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 8005352:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 800535c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005360:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005364:	4413      	add	r3, r2
 8005366:	3302      	adds	r3, #2
 8005368:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800536c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8005370:	5cd3      	ldrb	r3, [r2, r3]
 8005372:	461a      	mov	r2, r3
 8005374:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005378:	4413      	add	r3, r2
 800537a:	3b30      	subs	r3, #48	; 0x30
 800537c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8005380:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005384:	3301      	adds	r3, #1
 8005386:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800538a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800538e:	2b05      	cmp	r3, #5
 8005390:	f67f af61 	bls.w	8005256 <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 8005394:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005398:	0a1b      	lsrs	r3, r3, #8
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053a0:	f023 0307 	bic.w	r3, r3, #7
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	4313      	orrs	r3, r2
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 80053cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80053d0:	3306      	adds	r3, #6
 80053d2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 80053d6:	bf00      	nop
				}

				cursor += 2;
 80053d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80053dc:	3302      	adds	r3, #2
 80053de:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80053e2:	e024      	b.n	800542e <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80053e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80053e8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80053ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80053f0:	4413      	add	r3, r2
 80053f2:	7818      	ldrb	r0, [r3, #0]
 80053f4:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 80053f8:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80053fc:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8005400:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4623      	mov	r3, r4
 8005408:	f7ff fd22 	bl	8004e50 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 800540c:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8005410:	461a      	mov	r2, r3
 8005412:	0052      	lsls	r2, r2, #1
 8005414:	4413      	add	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800541e:	4413      	add	r3, r2
 8005420:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 8005424:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005428:	3301      	adds	r3, #1
 800542a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 800542e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005432:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8005436:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800543a:	4413      	add	r3, r2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f47f adce 	bne.w	8004fe0 <Custom_OLED_Printf+0x50>
	}
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005452:	b004      	add	sp, #16
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <LL_GPIO_ReadInputPort>:
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
	return uwTick;
 8005474:	4b03      	ldr	r3, [pc, #12]	; (8005484 <Custom_Delay_Get_SysTick+0x14>)
 8005476:	681b      	ldr	r3, [r3, #0]
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000270 	.word	0x20000270

08005488 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 80054a6:	f7ff ffe3 	bl	8005470 <Custom_Delay_Get_SysTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	741a      	strb	r2, [r3, #16]
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ffc3 	bl	8005458 <LL_GPIO_ReadInputPort>
 80054d2:	4602      	mov	r2, r0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 80054e8:	f7ff ffc2 	bl	8005470 <Custom_Delay_Get_SysTick>
 80054ec:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7c1b      	ldrb	r3, [r3, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d873      	bhi.n	80055e0 <Custom_Switch_State_Machine+0x120>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <Custom_Switch_State_Machine+0x40>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005521 	.word	0x08005521
 8005504:	08005535 	.word	0x08005535
 8005508:	080055e1 	.word	0x080055e1
 800550c:	0800556b 	.word	0x0800556b
 8005510:	080055e1 	.word	0x080055e1
 8005514:	080055e1 	.word	0x080055e1
 8005518:	080055e1 	.word	0x080055e1
 800551c:	080055b5 	.word	0x080055b5

		case LONG_OFF:
			if (currentPushed) {
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d05b      	beq.n	80055de <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2250      	movs	r2, #80	; 0x50
 8005530:	609a      	str	r2, [r3, #8]
			}
			break;
 8005532:	e054      	b.n	80055de <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	1acb      	subs	r3, r1, r3
 8005540:	429a      	cmp	r2, r3
 8005542:	d808      	bhi.n	8005556 <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005554:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1acb      	subs	r3, r1, r3
 8005562:	441a      	add	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]
			break;
 8005568:	e03a      	b.n	80055e0 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	f083 0301 	eor.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2208      	movs	r2, #8
 800557a:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2250      	movs	r2, #80	; 0x50
 8005580:	609a      	str	r2, [r3, #8]
				break;
 8005582:	e02d      	b.n	80055e0 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	1acb      	subs	r3, r1, r3
 8005590:	429a      	cmp	r2, r3
 8005592:	d805      	bhi.n	80055a0 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800559e:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68d9      	ldr	r1, [r3, #12]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1acb      	subs	r3, r1, r3
 80055ac:	441a      	add	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	609a      	str	r2, [r3, #8]
			break;
 80055b2:	e015      	b.n	80055e0 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	1acb      	subs	r3, r1, r3
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d802      	bhi.n	80055ca <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1acb      	subs	r3, r1, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	609a      	str	r2, [r3, #8]
			break;
 80055dc:	e000      	b.n	80055e0 <Custom_Switch_State_Machine+0x120>
			break;
 80055de:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2, sw3;
	if (!isInitialized) {
 80055f6:	4b59      	ldr	r3, [pc, #356]	; (800575c <Custom_Switch_Read+0x16c>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	f083 0301 	eor.w	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d014      	beq.n	800562e <Custom_Switch_Read+0x3e>
		isInitialized = true;
 8005604:	4b55      	ldr	r3, [pc, #340]	; (800575c <Custom_Switch_Read+0x16c>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 800560a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800560e:	4954      	ldr	r1, [pc, #336]	; (8005760 <Custom_Switch_Read+0x170>)
 8005610:	4854      	ldr	r0, [pc, #336]	; (8005764 <Custom_Switch_Read+0x174>)
 8005612:	f7ff ff39 	bl	8005488 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 8005616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800561a:	4951      	ldr	r1, [pc, #324]	; (8005760 <Custom_Switch_Read+0x170>)
 800561c:	4852      	ldr	r0, [pc, #328]	; (8005768 <Custom_Switch_Read+0x178>)
 800561e:	f7ff ff33 	bl	8005488 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw3, SW3_PORT, SW3_PIN);
 8005622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005626:	494e      	ldr	r1, [pc, #312]	; (8005760 <Custom_Switch_Read+0x170>)
 8005628:	4850      	ldr	r0, [pc, #320]	; (800576c <Custom_Switch_Read+0x17c>)
 800562a:	f7ff ff2d 	bl	8005488 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 800562e:	484d      	ldr	r0, [pc, #308]	; (8005764 <Custom_Switch_Read+0x174>)
 8005630:	f7ff ff46 	bl	80054c0 <Custom_Switch_State_Machine>
 8005634:	4603      	mov	r3, r0
 8005636:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8005638:	484b      	ldr	r0, [pc, #300]	; (8005768 <Custom_Switch_Read+0x178>)
 800563a:	f7ff ff41 	bl	80054c0 <Custom_Switch_State_Machine>
 800563e:	4603      	mov	r3, r0
 8005640:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3PushEvent = Custom_Switch_State_Machine(&sw3);
 8005642:	484a      	ldr	r0, [pc, #296]	; (800576c <Custom_Switch_Read+0x17c>)
 8005644:	f7ff ff3c 	bl	80054c0 <Custom_Switch_State_Machine>
 8005648:	4603      	mov	r3, r0
 800564a:	717b      	strb	r3, [r7, #5]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if(sw1PushEvent) {
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d020      	beq.n	8005694 <Custom_Switch_Read+0xa4>
		if (sw2.state & SHORT_ON){
 8005652:	4b45      	ldr	r3, [pc, #276]	; (8005768 <Custom_Switch_Read+0x178>)
 8005654:	7c1b      	ldrb	r3, [r3, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <Custom_Switch_Read+0x82>
			sw2PushEvent = true;
 800565e:	2301      	movs	r3, #1
 8005660:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw1.state;
 8005662:	4b40      	ldr	r3, [pc, #256]	; (8005764 <Custom_Switch_Read+0x174>)
 8005664:	7c1a      	ldrb	r2, [r3, #16]
 8005666:	4b40      	ldr	r3, [pc, #256]	; (8005768 <Custom_Switch_Read+0x178>)
 8005668:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw1.timer;
 800566a:	4b3e      	ldr	r3, [pc, #248]	; (8005764 <Custom_Switch_Read+0x174>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a3e      	ldr	r2, [pc, #248]	; (8005768 <Custom_Switch_Read+0x178>)
 8005670:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <Custom_Switch_Read+0x17c>)
 8005674:	7c1b      	ldrb	r3, [r3, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d051      	beq.n	8005722 <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 800567e:	2301      	movs	r3, #1
 8005680:	717b      	strb	r3, [r7, #5]
			sw3.state = sw1.state;
 8005682:	4b38      	ldr	r3, [pc, #224]	; (8005764 <Custom_Switch_Read+0x174>)
 8005684:	7c1a      	ldrb	r2, [r3, #16]
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <Custom_Switch_Read+0x17c>)
 8005688:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw1.timer;
 800568a:	4b36      	ldr	r3, [pc, #216]	; (8005764 <Custom_Switch_Read+0x174>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <Custom_Switch_Read+0x17c>)
 8005690:	6093      	str	r3, [r2, #8]
 8005692:	e046      	b.n	8005722 <Custom_Switch_Read+0x132>
		}
	}
	else if(sw2PushEvent) {
 8005694:	79bb      	ldrb	r3, [r7, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d020      	beq.n	80056dc <Custom_Switch_Read+0xec>
		if (sw1.state & SHORT_ON){
 800569a:	4b32      	ldr	r3, [pc, #200]	; (8005764 <Custom_Switch_Read+0x174>)
 800569c:	7c1b      	ldrb	r3, [r3, #16]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <Custom_Switch_Read+0xca>
			sw1PushEvent = true;
 80056a6:	2301      	movs	r3, #1
 80056a8:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw2.state;
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <Custom_Switch_Read+0x178>)
 80056ac:	7c1a      	ldrb	r2, [r3, #16]
 80056ae:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <Custom_Switch_Read+0x174>)
 80056b0:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw2.timer;
 80056b2:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <Custom_Switch_Read+0x178>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <Custom_Switch_Read+0x174>)
 80056b8:	6093      	str	r3, [r2, #8]
		}
		if (sw3.state & SHORT_ON) {
 80056ba:	4b2c      	ldr	r3, [pc, #176]	; (800576c <Custom_Switch_Read+0x17c>)
 80056bc:	7c1b      	ldrb	r3, [r3, #16]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02d      	beq.n	8005722 <Custom_Switch_Read+0x132>
			sw3PushEvent = true;
 80056c6:	2301      	movs	r3, #1
 80056c8:	717b      	strb	r3, [r7, #5]
			sw3.state = sw2.state;
 80056ca:	4b27      	ldr	r3, [pc, #156]	; (8005768 <Custom_Switch_Read+0x178>)
 80056cc:	7c1a      	ldrb	r2, [r3, #16]
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <Custom_Switch_Read+0x17c>)
 80056d0:	741a      	strb	r2, [r3, #16]
			sw3.timer = sw2.timer;
 80056d2:	4b25      	ldr	r3, [pc, #148]	; (8005768 <Custom_Switch_Read+0x178>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <Custom_Switch_Read+0x17c>)
 80056d8:	6093      	str	r3, [r2, #8]
 80056da:	e022      	b.n	8005722 <Custom_Switch_Read+0x132>
		}
	}
	else if(sw3PushEvent) {
 80056dc:	797b      	ldrb	r3, [r7, #5]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01f      	beq.n	8005722 <Custom_Switch_Read+0x132>
		if (sw1.state & SHORT_ON){
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <Custom_Switch_Read+0x174>)
 80056e4:	7c1b      	ldrb	r3, [r3, #16]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <Custom_Switch_Read+0x112>
			sw1PushEvent = true;
 80056ee:	2301      	movs	r3, #1
 80056f0:	71fb      	strb	r3, [r7, #7]
			sw1.state = sw3.state;
 80056f2:	4b1e      	ldr	r3, [pc, #120]	; (800576c <Custom_Switch_Read+0x17c>)
 80056f4:	7c1a      	ldrb	r2, [r3, #16]
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <Custom_Switch_Read+0x174>)
 80056f8:	741a      	strb	r2, [r3, #16]
			sw1.timer = sw3.timer;
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <Custom_Switch_Read+0x17c>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4a19      	ldr	r2, [pc, #100]	; (8005764 <Custom_Switch_Read+0x174>)
 8005700:	6093      	str	r3, [r2, #8]
		}
		if (sw2.state & SHORT_ON) {
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <Custom_Switch_Read+0x178>)
 8005704:	7c1b      	ldrb	r3, [r3, #16]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <Custom_Switch_Read+0x132>
			sw2PushEvent = true;
 800570e:	2301      	movs	r3, #1
 8005710:	71bb      	strb	r3, [r7, #6]
			sw2.state = sw3.state;
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <Custom_Switch_Read+0x17c>)
 8005714:	7c1a      	ldrb	r2, [r3, #16]
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <Custom_Switch_Read+0x178>)
 8005718:	741a      	strb	r2, [r3, #16]
			sw2.timer = sw3.timer;
 800571a:	4b14      	ldr	r3, [pc, #80]	; (800576c <Custom_Switch_Read+0x17c>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <Custom_Switch_Read+0x178>)
 8005720:	6093      	str	r3, [r2, #8]
		}
	}


	uint8_t buttonPushEvent = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	713b      	strb	r3, [r7, #4]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <Custom_Switch_Read+0x144>
 800572c:	793b      	ldrb	r3, [r7, #4]
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	713b      	strb	r3, [r7, #4]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8005734:	79bb      	ldrb	r3, [r7, #6]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <Custom_Switch_Read+0x152>
 800573a:	793b      	ldrb	r3, [r7, #4]
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	713b      	strb	r3, [r7, #4]
	if (sw3PushEvent) buttonPushEvent |= CUSTOM_SW_3;
 8005742:	797b      	ldrb	r3, [r7, #5]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <Custom_Switch_Read+0x160>
 8005748:	793b      	ldrb	r3, [r7, #4]
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	713b      	strb	r3, [r7, #4]

	return buttonPushEvent;
 8005750:	793b      	ldrb	r3, [r7, #4]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200013d8 	.word	0x200013d8
 8005760:	40020800 	.word	0x40020800
 8005764:	200013dc 	.word	0x200013dc
 8005768:	200013f0 	.word	0x200013f0
 800576c:	20001404 	.word	0x20001404

08005770 <Pre_Drive_Setting>:




//주행 전 상수값 변경 절차
void Pre_Drive_Setting() {
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0

	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <Pre_Drive_Setting+0x1c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <Pre_Drive_Setting+0x10>
		Pre_Drive_Var_Adjust_Second_Drive();
 800577c:	f000 f836 	bl	80057ec <Pre_Drive_Var_Adjust_Second_Drive>
	}

	if (optimizeLevel >= OPTIMIZE_LEVEL_NONE) {
		Pre_Drive_Var_Adjust_First_Drive();
 8005780:	f000 f806 	bl	8005790 <Pre_Drive_Var_Adjust_First_Drive>
	}

	Pre_Drive_Var_Init();
 8005784:	f000 fa2c 	bl	8005be0 <Pre_Drive_Var_Init>

}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20002e42 	.word	0x20002e42

08005790 <Pre_Drive_Var_Adjust_First_Drive>:



// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust_First_Drive() {
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b09c      	sub	sp, #112	; 0x70
 8005794:	af02      	add	r7, sp, #8

	t_driveMenu_Int		intValues[] = {
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <Pre_Drive_Var_Adjust_First_Drive+0x54>)
 8005798:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800579c:	461d      	mov	r5, r3
 800579e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057a6:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "Threshold",			&threshold,			10 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67


	t_driveMenu_Float	floatValues[] = {
 80057b0:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <Pre_Drive_Var_Adjust_First_Drive+0x58>)
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	4611      	mov	r1, r2
 80057b6:	2248      	movs	r2, #72	; 0x48
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 fe5a 	bl	8008472 <memcpy>
			{ "Pit In Len",			&pitInLen,			0.01f },
			{ "Target Speed",		&targetSpeed_init,	0.05f },
			{ "CurveDecel Coef",	&curveDeceleCoef,	500 },
			//{ "Position Coef",		&positionCoef,		0.000001f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 80057be:	2303      	movs	r3, #3
 80057c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_TRUE);
 80057c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80057c8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80057cc:	1d39      	adds	r1, r7, #4
 80057ce:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80057d2:	2401      	movs	r4, #1
 80057d4:	9400      	str	r4, [sp, #0]
 80057d6:	f000 f8bb 	bl	8005950 <Pre_Drive_Var_Adjust_Switch_Cntl>
}
 80057da:	bf00      	nop
 80057dc:	3768      	adds	r7, #104	; 0x68
 80057de:	46bd      	mov	sp, r7
 80057e0:	bdb0      	pop	{r4, r5, r7, pc}
 80057e2:	bf00      	nop
 80057e4:	0800a79c 	.word	0x0800a79c
 80057e8:	0800a7b4 	.word	0x0800a7b4

080057ec <Pre_Drive_Var_Adjust_Second_Drive>:



static void Pre_Drive_Var_Adjust_Second_Drive() {
 80057ec:	b5b0      	push	{r4, r5, r7, lr}
 80057ee:	b0aa      	sub	sp, #168	; 0xa8
 80057f0:	af02      	add	r7, sp, #8

	float acceleStartLen = acceleStartTick / TICK_PER_M;
 80057f2:	4b49      	ldr	r3, [pc, #292]	; (8005918 <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 80057f4:	ed93 7a00 	vldr	s14, [r3]
 80057f8:	eddf 6a48 	vldr	s13, [pc, #288]	; 800591c <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 80057fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005800:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float deceleEndLen = deceleEndTick / TICK_PER_M;
 8005804:	4b46      	ldr	r3, [pc, #280]	; (8005920 <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 8005806:	ed93 7a00 	vldr	s14, [r3]
 800580a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800591c <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 800580e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005812:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	t_driveMenu_Int		intValues[] = {
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <Pre_Drive_Var_Adjust_Second_Drive+0x138>)
 8005818:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800581c:	461d      	mov	r5, r3
 800581e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005822:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005826:	e884 0003 	stmia.w	r4, {r0, r1}

			{ "optimize level",		&optimizeLevel,		1 },
	};
	uint8_t intValCnt = sizeof(intValues) / sizeof(t_driveMenu_Int);
 800582a:	2301      	movs	r3, #1
 800582c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	t_driveMenu_Float	floatValues[] = {
 8005830:	4a3d      	ldr	r2, [pc, #244]	; (8005928 <Pre_Drive_Var_Adjust_Second_Drive+0x13c>)
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	ca07      	ldmia	r2, {r0, r1, r2}
 8005836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	2100      	movs	r1, #0
 8005840:	460a      	mov	r2, r1
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	460a      	mov	r2, r1
 8005846:	709a      	strb	r2, [r3, #2]
 8005848:	4b38      	ldr	r3, [pc, #224]	; (800592c <Pre_Drive_Var_Adjust_Second_Drive+0x140>)
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	4a37      	ldr	r2, [pc, #220]	; (8005930 <Pre_Drive_Var_Adjust_Second_Drive+0x144>)
 8005854:	f107 031c 	add.w	r3, r7, #28
 8005858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800585c:	6018      	str	r0, [r3, #0]
 800585e:	3304      	adds	r3, #4
 8005860:	8019      	strh	r1, [r3, #0]
 8005862:	3302      	adds	r3, #2
 8005864:	0c0a      	lsrs	r2, r1, #16
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	4b30      	ldr	r3, [pc, #192]	; (8005934 <Pre_Drive_Var_Adjust_Second_Drive+0x148>)
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
 800587c:	4b2e      	ldr	r3, [pc, #184]	; (8005938 <Pre_Drive_Var_Adjust_Second_Drive+0x14c>)
 800587e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8005882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005884:	c407      	stmia	r4!, {r0, r1, r2}
 8005886:	8023      	strh	r3, [r4, #0]
 8005888:	3402      	adds	r4, #2
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	7023      	strb	r3, [r4, #0]
 800588e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	4b29      	ldr	r3, [pc, #164]	; (800593c <Pre_Drive_Var_Adjust_Second_Drive+0x150>)
 8005896:	64bb      	str	r3, [r7, #72]	; 0x48
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <Pre_Drive_Var_Adjust_Second_Drive+0x154>)
 800589a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800589e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058a0:	c407      	stmia	r4!, {r0, r1, r2}
 80058a2:	7023      	strb	r3, [r4, #0]
 80058a4:	f107 0359 	add.w	r3, r7, #89	; 0x59
 80058a8:	2200      	movs	r2, #0
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80058b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 80058b4:	663b      	str	r3, [r7, #96]	; 0x60
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <Pre_Drive_Var_Adjust_Second_Drive+0x15c>)
 80058b8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80058bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058be:	c407      	stmia	r4!, {r0, r1, r2}
 80058c0:	8023      	strh	r3, [r4, #0]
 80058c2:	3402      	adds	r4, #2
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	7023      	strb	r3, [r4, #0]
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <Pre_Drive_Var_Adjust_Second_Drive+0x160>)
 80058ca:	677b      	str	r3, [r7, #116]	; 0x74
 80058cc:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <Pre_Drive_Var_Adjust_Second_Drive+0x158>)
 80058ce:	67bb      	str	r3, [r7, #120]	; 0x78
			//{ "Decele",				&decele_init,		0.25f },
			{ "acceleStart len",	&acceleStartLen,	0.025f },
			{ "decelEnd len",		&deceleEndLen,		0.05f },
			{ "decelEnd ratio",		&deceleEndRatio,	0.05f },
	};
	uint8_t floatValCnt = sizeof(floatValues) / sizeof(t_driveMenu_Float);
 80058d0:	2305      	movs	r3, #5
 80058d2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e



	Pre_Drive_Var_Adjust_Switch_Cntl(intValues, floatValues, intValCnt, floatValCnt, CUSTOM_FALSE);
 80058d6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80058da:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80058de:	1d39      	adds	r1, r7, #4
 80058e0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80058e4:	2400      	movs	r4, #0
 80058e6:	9400      	str	r4, [sp, #0]
 80058e8:	f000 f832 	bl	8005950 <Pre_Drive_Var_Adjust_Switch_Cntl>

	acceleStartTick = acceleStartLen * TICK_PER_M;
 80058ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800591c <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 80058f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <Pre_Drive_Var_Adjust_Second_Drive+0x12c>)
 80058fa:	edc3 7a00 	vstr	s15, [r3]
	deceleEndTick = deceleEndLen * TICK_PER_M;
 80058fe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005902:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800591c <Pre_Drive_Var_Adjust_Second_Drive+0x130>
 8005906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <Pre_Drive_Var_Adjust_Second_Drive+0x134>)
 800590c:	edc3 7a00 	vstr	s15, [r3]

}
 8005910:	bf00      	nop
 8005912:	37a0      	adds	r7, #160	; 0xa0
 8005914:	46bd      	mov	sp, r7
 8005916:	bdb0      	pop	{r4, r5, r7, pc}
 8005918:	2000003c 	.word	0x2000003c
 800591c:	4519089d 	.word	0x4519089d
 8005920:	20000040 	.word	0x20000040
 8005924:	0800a7fc 	.word	0x0800a7fc
 8005928:	0800a814 	.word	0x0800a814
 800592c:	2000002c 	.word	0x2000002c
 8005930:	0800a824 	.word	0x0800a824
 8005934:	20000008 	.word	0x20000008
 8005938:	0800a834 	.word	0x0800a834
 800593c:	3ccccccd 	.word	0x3ccccccd
 8005940:	0800a844 	.word	0x0800a844
 8005944:	3d4ccccd 	.word	0x3d4ccccd
 8005948:	0800a854 	.word	0x0800a854
 800594c:	20000044 	.word	0x20000044

08005950 <Pre_Drive_Var_Adjust_Switch_Cntl>:


static void Pre_Drive_Var_Adjust_Switch_Cntl(t_driveMenu_Int *intValues, t_driveMenu_Float *floatValues, \
											uint8_t intValCnt, uint8_t floatValCnt, uint8_t isEnd) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4611      	mov	r1, r2
 800595c:	461a      	mov	r2, r3
 800595e:	460b      	mov	r3, r1
 8005960:	71fb      	strb	r3, [r7, #7]
 8005962:	4613      	mov	r3, r2
 8005964:	71bb      	strb	r3, [r7, #6]

	uint8_t	sw = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	777b      	strb	r3, [r7, #29]


	for (uint8_t i = 0; i < intValCnt; i++) {
 800596a:	2300      	movs	r3, #0
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e074      	b.n	8005a5a <Pre_Drive_Var_Adjust_Switch_Cntl+0x10a>

		Custom_OLED_Clear();
 8005970:	f7ff fa29 	bl	8004dc6 <Custom_OLED_Clear>

		// 정수 변수 초기화
		if (i < intValCnt) {
 8005974:	7ffa      	ldrb	r2, [r7, #31]
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d26b      	bcs.n	8005a54 <Pre_Drive_Var_Adjust_Switch_Cntl+0x104>

			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800597c:	e063      	b.n	8005a46 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>

				// OLED에 변수명 변수값 출력
				Custom_OLED_Printf("/2%s", intValues[i].valName);
 800597e:	7ffa      	ldrb	r2, [r7, #31]
 8005980:	4613      	mov	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	461a      	mov	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	4619      	mov	r1, r3
 8005990:	488d      	ldr	r0, [pc, #564]	; (8005bc8 <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005992:	f7ff fafd 	bl	8004f90 <Custom_OLED_Printf>
				Custom_OLED_Printf("/A/4%5d", *(intValues[i].val));
 8005996:	7ffa      	ldrb	r2, [r7, #31]
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	461a      	mov	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	4887      	ldr	r0, [pc, #540]	; (8005bcc <Pre_Drive_Var_Adjust_Switch_Cntl+0x27c>)
 80059b0:	f7ff faee 	bl	8004f90 <Custom_OLED_Printf>

				// 변수 값 빼기
				if (sw == CUSTOM_SW_1) {
 80059b4:	7f7b      	ldrb	r3, [r7, #29]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d121      	bne.n	80059fe <Pre_Drive_Var_Adjust_Switch_Cntl+0xae>
					*(intValues[i].val) -= intValues[i].changeVal;
 80059ba:	7ffa      	ldrb	r2, [r7, #31]
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	7d1b      	ldrb	r3, [r3, #20]
 80059cc:	b2d9      	uxtb	r1, r3
 80059ce:	7ffa      	ldrb	r2, [r7, #31]
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	461a      	mov	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b2d8      	uxtb	r0, r3
 80059e4:	7ffa      	ldrb	r2, [r7, #31]
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	1a42      	subs	r2, r0, r1
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e023      	b.n	8005a46 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
				}
				// 변수값 더하기
				else if (sw == CUSTOM_SW_2) {
 80059fe:	7f7b      	ldrb	r3, [r7, #29]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d120      	bne.n	8005a46 <Pre_Drive_Var_Adjust_Switch_Cntl+0xf6>
					*(intValues[i].val) += intValues[i].changeVal;
 8005a04:	7ffa      	ldrb	r2, [r7, #31]
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	7d1b      	ldrb	r3, [r3, #20]
 8005a16:	b2d8      	uxtb	r0, r3
 8005a18:	7ffa      	ldrb	r2, [r7, #31]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	b2d9      	uxtb	r1, r3
 8005a2e:	7ffa      	ldrb	r2, [r7, #31]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	1842      	adds	r2, r0, r1
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
			while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005a46:	f7ff fdd3 	bl	80055f0 <Custom_Switch_Read>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	777b      	strb	r3, [r7, #29]
 8005a4e:	7f7b      	ldrb	r3, [r7, #29]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d194      	bne.n	800597e <Pre_Drive_Var_Adjust_Switch_Cntl+0x2e>
	for (uint8_t i = 0; i < intValCnt; i++) {
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	3301      	adds	r3, #1
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	7ffa      	ldrb	r2, [r7, #31]
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d386      	bcc.n	8005970 <Pre_Drive_Var_Adjust_Switch_Cntl+0x20>
			}
		}
	}


	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005a62:	2300      	movs	r3, #0
 8005a64:	77bb      	strb	r3, [r7, #30]
 8005a66:	e0a3      	b.n	8005bb0 <Pre_Drive_Var_Adjust_Switch_Cntl+0x260>

		Custom_OLED_Clear();
 8005a68:	f7ff f9ad 	bl	8004dc6 <Custom_OLED_Clear>

		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005a6c:	e095      	b.n	8005b9a <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>

			uint32_t num1 = (uint32_t)(*(floatValues[i].val));
 8005a6e:	7fba      	ldrb	r2, [r7, #30]
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	edd3 7a00 	vldr	s15, [r3]
 8005a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a88:	ee17 3a90 	vmov	r3, s15
 8005a8c:	61bb      	str	r3, [r7, #24]
			uint32_t num2 = (uint32_t)( *(floatValues[i].val) * 100000 - num1 * 100000 );
 8005a8e:	7fba      	ldrb	r2, [r7, #30]
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	edd3 7a00 	vldr	s15, [r3]
 8005aa4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005bd0 <Pre_Drive_Var_Adjust_Switch_Cntl+0x280>
 8005aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	4a49      	ldr	r2, [pc, #292]	; (8005bd4 <Pre_Drive_Var_Adjust_Switch_Cntl+0x284>)
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac4:	ee17 3a90 	vmov	r3, s15
 8005ac8:	617b      	str	r3, [r7, #20]

			// OLED에 변수명 변수값 출력
			Custom_OLED_Printf("/2%s", floatValues[i].valName);
 8005aca:	7fba      	ldrb	r2, [r7, #30]
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	483a      	ldr	r0, [pc, #232]	; (8005bc8 <Pre_Drive_Var_Adjust_Switch_Cntl+0x278>)
 8005ade:	f7ff fa57 	bl	8004f90 <Custom_OLED_Printf>
			Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	69b9      	ldr	r1, [r7, #24]
 8005ae6:	483c      	ldr	r0, [pc, #240]	; (8005bd8 <Pre_Drive_Var_Adjust_Switch_Cntl+0x288>)
 8005ae8:	f7ff fa52 	bl	8004f90 <Custom_OLED_Printf>

			if (isEnd == CUSTOM_TRUE && i == floatValCnt - 1) {
 8005aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
 8005af4:	7fba      	ldrb	r2, [r7, #30]
 8005af6:	79bb      	ldrb	r3, [r7, #6]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d102      	bne.n	8005b04 <Pre_Drive_Var_Adjust_Switch_Cntl+0x1b4>
				Custom_OLED_Printf("/g/0Ready to Drive");
 8005afe:	4837      	ldr	r0, [pc, #220]	; (8005bdc <Pre_Drive_Var_Adjust_Switch_Cntl+0x28c>)
 8005b00:	f7ff fa46 	bl	8004f90 <Custom_OLED_Printf>
			}

			// 변수 값 빼기
			if (sw == CUSTOM_SW_1) {
 8005b04:	7f7b      	ldrb	r3, [r7, #29]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d122      	bne.n	8005b50 <Pre_Drive_Var_Adjust_Switch_Cntl+0x200>
				*(floatValues[i].val) -= floatValues[i].changeVal;
 8005b0a:	7fba      	ldrb	r2, [r7, #30]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4413      	add	r3, r2
 8005b1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b1e:	7fba      	ldrb	r2, [r7, #30]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	ed93 7a00 	vldr	s14, [r3]
 8005b34:	7fba      	ldrb	r2, [r7, #30]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4413      	add	r3, r2
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4a:	edc3 7a00 	vstr	s15, [r3]
 8005b4e:	e024      	b.n	8005b9a <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
			}
			// 변수값 더하기
			else if (sw == CUSTOM_SW_2) {
 8005b50:	7f7b      	ldrb	r3, [r7, #29]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d121      	bne.n	8005b9a <Pre_Drive_Var_Adjust_Switch_Cntl+0x24a>
				*(floatValues[i].val) += floatValues[i].changeVal;
 8005b56:	7fba      	ldrb	r2, [r7, #30]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	461a      	mov	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b6a:	7fba      	ldrb	r2, [r7, #30]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	edd3 7a00 	vldr	s15, [r3]
 8005b80:	7fba      	ldrb	r2, [r7, #30]
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4413      	add	r3, r2
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b96:	edc3 7a00 	vstr	s15, [r3]
		while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8005b9a:	f7ff fd29 	bl	80055f0 <Custom_Switch_Read>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	777b      	strb	r3, [r7, #29]
 8005ba2:	7f7b      	ldrb	r3, [r7, #29]
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	f47f af62 	bne.w	8005a6e <Pre_Drive_Var_Adjust_Switch_Cntl+0x11e>
	for (uint8_t i = 0; i < floatValCnt; i++) {
 8005baa:	7fbb      	ldrb	r3, [r7, #30]
 8005bac:	3301      	adds	r3, #1
 8005bae:	77bb      	strb	r3, [r7, #30]
 8005bb0:	7fba      	ldrb	r2, [r7, #30]
 8005bb2:	79bb      	ldrb	r3, [r7, #6]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	f4ff af57 	bcc.w	8005a68 <Pre_Drive_Var_Adjust_Switch_Cntl+0x118>
			}
		}
	}

	Custom_OLED_Clear();
 8005bba:	f7ff f904 	bl	8004dc6 <Custom_OLED_Clear>
}
 8005bbe:	bf00      	nop
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	0800a864 	.word	0x0800a864
 8005bcc:	0800a86c 	.word	0x0800a86c
 8005bd0:	47c35000 	.word	0x47c35000
 8005bd4:	000186a0 	.word	0x000186a0
 8005bd8:	0800a874 	.word	0x0800a874
 8005bdc:	0800a880 	.word	0x0800a880

08005be0 <Pre_Drive_Var_Init>:



// 주행 전 초기값 대입
static void Pre_Drive_Var_Init() {
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	/*
	 * 인터럽트에서 쓰는 변수
	 */

	// 가속도 변수 초기화
	targetAccele = targetAccele_init;
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <Pre_Drive_Var_Init+0x128>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a48      	ldr	r2, [pc, #288]	; (8005d0c <Pre_Drive_Var_Init+0x12c>)
 8005bec:	6013      	str	r3, [r2, #0]
	curAccele = 0;
 8005bee:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <Pre_Drive_Var_Init+0x130>)
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

	// 속도 관련 변수 초기화
	targetSpeed = targetSpeed_init;
 8005bf6:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <Pre_Drive_Var_Init+0x134>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a47      	ldr	r2, [pc, #284]	; (8005d18 <Pre_Drive_Var_Init+0x138>)
 8005bfc:	6013      	str	r3, [r2, #0]
	decele = decele_init;
 8005bfe:	4b47      	ldr	r3, [pc, #284]	; (8005d1c <Pre_Drive_Var_Init+0x13c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a47      	ldr	r2, [pc, #284]	; (8005d20 <Pre_Drive_Var_Init+0x140>)
 8005c04:	6013      	str	r3, [r2, #0]
	curSpeed = MIN_SPEED;
 8005c06:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <Pre_Drive_Var_Init+0x144>)
 8005c08:	4a47      	ldr	r2, [pc, #284]	; (8005d28 <Pre_Drive_Var_Init+0x148>)
 8005c0a:	601a      	str	r2, [r3, #0]

	// 좌우모터 포지션 값을 0으로 초기화
	positionVal = 0;
 8005c0c:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <Pre_Drive_Var_Init+0x14c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
	limitedPositionVal = 0;
 8005c12:	4b47      	ldr	r3, [pc, #284]	; (8005d30 <Pre_Drive_Var_Init+0x150>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	// positionVal을 windowing하여 구하는 것에 사용되는 변수 초기화
	positionIdxMax = 5;
 8005c18:	4b46      	ldr	r3, [pc, #280]	; (8005d34 <Pre_Drive_Var_Init+0x154>)
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	701a      	strb	r2, [r3, #0]
	positionIdxMin = 2;
 8005c1e:	4b46      	ldr	r3, [pc, #280]	; (8005d38 <Pre_Drive_Var_Init+0x158>)
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
	positionSum = 0;
 8005c24:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <Pre_Drive_Var_Init+0x15c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
	sensorNormValsSum = 0;
 8005c2a:	4b45      	ldr	r3, [pc, #276]	; (8005d40 <Pre_Drive_Var_Init+0x160>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]

	// 현재 모터가 상을 잡은 횟수 초기화
	curTick_L = 0;
 8005c30:	4b44      	ldr	r3, [pc, #272]	; (8005d44 <Pre_Drive_Var_Init+0x164>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
	curTick_R = 0;
 8005c36:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <Pre_Drive_Var_Init+0x168>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

	// 2차 주행 inline 관현 값 초기화
	targetInlineVal = 0;
 8005c3c:	4b43      	ldr	r3, [pc, #268]	; (8005d4c <Pre_Drive_Var_Init+0x16c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
	curInlineVal = 0;
 8005c42:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <Pre_Drive_Var_Init+0x170>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
	/*
	 * 주행문에서 쓰는 변수
	 */

	// 현재 마크 인식 상태를 직선 주행으로 초기화
	markState = MARK_STRAIGHT;
 8005c48:	4b42      	ldr	r3, [pc, #264]	; (8005d54 <Pre_Drive_Var_Init+0x174>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]

	// state machine 의 상태 업데이트
	driveState = DRIVE_STATE_IDLE;
 8005c4e:	4b42      	ldr	r3, [pc, #264]	; (8005d58 <Pre_Drive_Var_Init+0x178>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]

	// 현재까지 읽은 크로스 개수 업데이트
	crossCnt = 0;
 8005c54:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <Pre_Drive_Var_Init+0x17c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	801a      	strh	r2, [r3, #0]

	// 현재 마크가 시작된 tick
	markStartTick_L = 0;
 8005c5a:	4b41      	ldr	r3, [pc, #260]	; (8005d60 <Pre_Drive_Var_Init+0x180>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
	markStartTick_R = 0;
 8005c60:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <Pre_Drive_Var_Init+0x184>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

	// 엔드마크 읽은 개수 초기화
	endMarkCnt = 0;
 8005c66:	4b40      	ldr	r3, [pc, #256]	; (8005d68 <Pre_Drive_Var_Init+0x188>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]

	// driveData 인덱스 초기화
	driveDataIdx = 0;
 8005c6c:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <Pre_Drive_Var_Init+0x18c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	801a      	strh	r2, [r3, #0]


	// 1차 주행에서만 초기화할 변수
	if (optimizeLevel == OPTIMIZE_LEVEL_NONE) {
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <Pre_Drive_Var_Init+0x190>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d12e      	bne.n	8005cd8 <Pre_Drive_Var_Init+0xf8>

		optimizeLevel = OPTIMIZE_LEVEL_NONE;
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <Pre_Drive_Var_Init+0x190>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e013      	b.n	8005cae <Pre_Drive_Var_Init+0xce>
			t_driveData temp = T_DRIVE_DATA_INIT;
 8005c86:	463b      	mov	r3, r7
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	809a      	strh	r2, [r3, #4]

			driveDataBuffer[i] = temp;
 8005c8e:	4939      	ldr	r1, [pc, #228]	; (8005d74 <Pre_Drive_Var_Init+0x194>)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4613      	mov	r3, r2
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4413      	add	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	440b      	add	r3, r1
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	6010      	str	r0, [r2, #0]
 8005ca4:	889b      	ldrh	r3, [r3, #4]
 8005ca6:	8093      	strh	r3, [r2, #4]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d3e7      	bcc.n	8005c86 <Pre_Drive_Var_Init+0xa6>
		}

		// driveData의 0, 1번째 값 초기화
		// 0번 인덱스는 할당되지 않은 포인터에 접근하지 않도록 고정시켜둠
		// 실질적으로 주행은 1번 인덱스부터 시작
		driveDataBuffer[0].markState = MARK_STRAIGHT;
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <Pre_Drive_Var_Init+0x194>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	711a      	strb	r2, [r3, #4]


		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	e007      	b.n	8005cd2 <Pre_Drive_Var_Init+0xf2>

			crossCntTableBuffer[i] = 0;
 8005cc2:	4a2d      	ldr	r2, [pc, #180]	; (8005d78 <Pre_Drive_Var_Init+0x198>)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d9f4      	bls.n	8005cc2 <Pre_Drive_Var_Init+0xe2>
		}
	}

	// 2, 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_STRAIGHT) {
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <Pre_Drive_Var_Init+0x190>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <Pre_Drive_Var_Init+0x10c>

		// isReadAllMark 값 정상으로 변경
		isReadAllMark = CUSTOM_TRUE;
 8005ce0:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <Pre_Drive_Var_Init+0x19c>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]

		// 부스트 컨트롤 상태 업데이트
		starightBoostCntl = BOOST_CNTL_IDLE;
 8005ce6:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <Pre_Drive_Var_Init+0x1a0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
	}

	// 3차 주행에서만 초기화할 변수
	if (optimizeLevel >= OPTIMIZE_LEVEL_CURVE){
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <Pre_Drive_Var_Init+0x190>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d902      	bls.n	8005cfa <Pre_Drive_Var_Init+0x11a>

		// 커브 인라인 상태 업데이트
		curveInlineCntl = INLINE_CNTL_IDLE;
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <Pre_Drive_Var_Init+0x1a4>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
	}
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000008 	.word	0x20000008
 8005d0c:	20000018 	.word	0x20000018
 8005d10:	2000001c 	.word	0x2000001c
 8005d14:	20000004 	.word	0x20000004
 8005d18:	20000024 	.word	0x20000024
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	20000020 	.word	0x20000020
 8005d24:	20000028 	.word	0x20000028
 8005d28:	3c23d70a 	.word	0x3c23d70a
 8005d2c:	20001418 	.word	0x20001418
 8005d30:	2000141c 	.word	0x2000141c
 8005d34:	20000014 	.word	0x20000014
 8005d38:	20000015 	.word	0x20000015
 8005d3c:	20001420 	.word	0x20001420
 8005d40:	20001424 	.word	0x20001424
 8005d44:	20001428 	.word	0x20001428
 8005d48:	2000142c 	.word	0x2000142c
 8005d4c:	20001430 	.word	0x20001430
 8005d50:	20001434 	.word	0x20001434
 8005d54:	20000034 	.word	0x20000034
 8005d58:	20001438 	.word	0x20001438
 8005d5c:	20002e40 	.word	0x20002e40
 8005d60:	20002e44 	.word	0x20002e44
 8005d64:	20002e48 	.word	0x20002e48
 8005d68:	20002e4c 	.word	0x20002e4c
 8005d6c:	20002c3c 	.word	0x20002c3c
 8005d70:	20002e42 	.word	0x20002e42
 8005d74:	2000203c 	.word	0x2000203c
 8005d78:	20002d40 	.word	0x20002d40
 8005d7c:	20000035 	.word	0x20000035
 8005d80:	20001439 	.word	0x20001439
 8005d84:	2000143a 	.word	0x2000143a

08005d88 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8005d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8005d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8005daa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8005dba:	bf00      	nop
 8005dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d1f8      	bne.n	8005dbc <Custom_Delay_us+0x34>
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff ffcc 	bl	8005d88 <Custom_Delay_us>
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <Drive_Fit_In>:




// 피트인 함수
__STATIC_INLINE void	Drive_Fit_In(float s, float pinSpeed) {
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e02:	edc7 0a00 	vstr	s1, [r7]

	targetSpeed = pinSpeed;
 8005e06:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <Drive_Fit_In+0xa4>)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6013      	str	r3, [r2, #0]
	decele = ABS( (pinSpeed - curSpeed) * (pinSpeed + curSpeed) ) / (2 * s);
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e0e:	edd3 7a00 	vldr	s15, [r3]
 8005e12:	ed97 7a00 	vldr	s14, [r7]
 8005e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e1a:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e1c:	edd3 6a00 	vldr	s13, [r3]
 8005e20:	edd7 7a00 	vldr	s15, [r7]
 8005e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	d512      	bpl.n	8005e5c <Drive_Fit_In+0x64>
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e38:	edd3 7a00 	vldr	s15, [r3]
 8005e3c:	ed97 7a00 	vldr	s14, [r7]
 8005e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e46:	edd3 6a00 	vldr	s13, [r3]
 8005e4a:	edd7 7a00 	vldr	s15, [r7]
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	eef1 7a67 	vneg.f32	s15, s15
 8005e5a:	e00f      	b.n	8005e7c <Drive_Fit_In+0x84>
 8005e5c:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e5e:	edd3 7a00 	vldr	s15, [r3]
 8005e62:	ed97 7a00 	vldr	s14, [r7]
 8005e66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <Drive_Fit_In+0xa8>)
 8005e6c:	edd3 6a00 	vldr	s13, [r3]
 8005e70:	edd7 7a00 	vldr	s15, [r7]
 8005e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e80:	ee77 6a07 	vadd.f32	s13, s14, s14
 8005e84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e88:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <Drive_Fit_In+0xac>)
 8005e8a:	ed83 7a00 	vstr	s14, [r3]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000024 	.word	0x20000024
 8005ea0:	20000028 	.word	0x20000028
 8005ea4:	20000020 	.word	0x20000020

08005ea8 <Is_Drive_End>:





__STATIC_INLINE uint8_t	Is_Drive_End(uint8_t exitEcho) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]

	// endMark || lineOut
	if (endMarkCnt >= 2 || markState == MARK_LINE_OUT) {
 8005eb2:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <Is_Drive_End+0x70>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d803      	bhi.n	8005ec2 <Is_Drive_End+0x1a>
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <Is_Drive_End+0x74>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d125      	bne.n	8005f0e <Is_Drive_End+0x66>

		Drive_Fit_In(pitInLen, PIT_IN_TARGET_SPEED);
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <Is_Drive_End+0x78>)
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	eddf 0a16 	vldr	s1, [pc, #88]	; 8005f24 <Is_Drive_End+0x7c>
 8005ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed0:	f7ff ff92 	bl	8005df8 <Drive_Fit_In>

		while (curSpeed > DRIVE_END_DELAY_SPEED) {
 8005ed4:	bf00      	nop
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <Is_Drive_End+0x80>)
 8005ed8:	edd3 7a00 	vldr	s15, [r3]
 8005edc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005f2c <Is_Drive_End+0x84>
 8005ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	dcf5      	bgt.n	8005ed6 <Is_Drive_End+0x2e>
			//Drive_Speed_Cntl();
		}

		Custom_Delay_ms(DRIVE_END_DELAY_TIME_MS);
 8005eea:	20c8      	movs	r0, #200	; 0xc8
 8005eec:	f7ff ff74 	bl	8005dd8 <Custom_Delay_ms>

		if (endMarkCnt >= 2) {
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <Is_Drive_End+0x70>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d908      	bls.n	8005f0a <Is_Drive_End+0x62>

			exitEcho = EXIT_ECHO_END_MARK;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	71fb      	strb	r3, [r7, #7]

			optimizeLevel += 1;
 8005efc:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <Is_Drive_End+0x88>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <Is_Drive_End+0x88>)
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e001      	b.n	8005f0e <Is_Drive_End+0x66>
		}
		else {

			exitEcho = EXIT_ECHO_LINE_OUT;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	71fb      	strb	r3, [r7, #7]
		}
	}

	return exitEcho;
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20002e4c 	.word	0x20002e4c
 8005f1c:	20000034 	.word	0x20000034
 8005f20:	20000038 	.word	0x20000038
 8005f24:	3c23d70a 	.word	0x3c23d70a
 8005f28:	20000028 	.word	0x20000028
 8005f2c:	3dcccccd 	.word	0x3dcccccd
 8005f30:	20002e42 	.word	0x20002e42

08005f34 <Get_Line_Sensor_Cnt>:




// line sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Line_Sensor_Cnt() {
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8005f38:	4b1f      	ldr	r3, [pc, #124]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
	return ((state >> 6) & 0x01) + ((state >> 5) & 0x01) + ((state >> 4) & 0x01) + \
 8005f80:	4413      	add	r3, r2
 8005f82:	b2da      	uxtb	r2, r3
			((state >> 3) & 0x01) + ((state >> 2) & 0x01) + ((state >> 1) & 0x01);
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	089b      	lsrs	r3, r3, #2
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <Get_Line_Sensor_Cnt+0x84>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20002ee4 	.word	0x20002ee4

08005fbc <Get_Marker_Sensor_Cnt>:


// marker sensor가 읽은 값을 개수를 리턴함
__STATIC_INLINE uint8_t	Get_Marker_Sensor_Cnt() {
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
	return ((state >> 7) & 0x01) + ((state >> 0) & 0x01);
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <Get_Marker_Sensor_Cnt+0x30>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	09db      	lsrs	r3, r3, #7
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <Get_Marker_Sensor_Cnt+0x30>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	b2db      	uxtb	r3, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20002ee4 	.word	0x20002ee4

08005ff0 <Decision>:




// end line, right mark, left mark, straight를 판별하고 정해진 동작을 실행하는 함수
__STATIC_INLINE void	Decision(uint8_t sensorStateSum) {
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]


	// cross
	if (sensorStateSum == 0xff) {
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	2bff      	cmp	r3, #255	; 0xff
 8005ffe:	d103      	bne.n	8006008 <Decision+0x18>

		markState = MARK_CROSS;
 8006000:	4b19      	ldr	r3, [pc, #100]	; (8006068 <Decision+0x78>)
 8006002:	2205      	movs	r2, #5
 8006004:	701a      	strb	r2, [r3, #0]
		// 곡선주행 진입
		else {
			markState = MARK_CURVE_R;
		}
	}
}
 8006006:	e028      	b.n	800605a <Decision+0x6a>
	else if ( (sensorStateSum & 0x81) == 0x81 ) {
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	f003 0381 	and.w	r3, r3, #129	; 0x81
 800600e:	2b81      	cmp	r3, #129	; 0x81
 8006010:	d103      	bne.n	800601a <Decision+0x2a>
		markState = MARK_END;
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <Decision+0x78>)
 8006014:	2204      	movs	r2, #4
 8006016:	701a      	strb	r2, [r3, #0]
}
 8006018:	e01f      	b.n	800605a <Decision+0x6a>
	else if ( (sensorStateSum & 0x80) == 0x80 ) {
 800601a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da0b      	bge.n	800603a <Decision+0x4a>
		if (markState == MARK_CURVE_L) {
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <Decision+0x78>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b03      	cmp	r3, #3
 8006028:	d103      	bne.n	8006032 <Decision+0x42>
			markState = MARK_STRAIGHT;
 800602a:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <Decision+0x78>)
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
}
 8006030:	e013      	b.n	800605a <Decision+0x6a>
			markState = MARK_CURVE_L;
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <Decision+0x78>)
 8006034:	2203      	movs	r2, #3
 8006036:	701a      	strb	r2, [r3, #0]
}
 8006038:	e00f      	b.n	800605a <Decision+0x6a>
	else if ( (sensorStateSum & 0x01) == 0x01 ) {
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <Decision+0x6a>
		if (markState == MARK_CURVE_R) {
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <Decision+0x78>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d103      	bne.n	8006054 <Decision+0x64>
			markState = MARK_STRAIGHT;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <Decision+0x78>)
 800604e:	2201      	movs	r2, #1
 8006050:	701a      	strb	r2, [r3, #0]
}
 8006052:	e002      	b.n	800605a <Decision+0x6a>
			markState = MARK_CURVE_R;
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <Decision+0x78>)
 8006056:	2202      	movs	r2, #2
 8006058:	701a      	strb	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000034 	.word	0x20000034

0800606c <Drive_State_Machine>:





__STATIC_INLINE void	Drive_State_Machine() {
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0

	static uint32_t	lineOutStartTime;


	switch (driveState) {
 8006070:	4b42      	ldr	r3, [pc, #264]	; (800617c <Drive_State_Machine+0x110>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d87f      	bhi.n	8006178 <Drive_State_Machine+0x10c>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <Drive_State_Machine+0x14>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	08006095 	.word	0x08006095
 8006084:	080060df 	.word	0x080060df
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800612f 	.word	0x0800612f
 8006090:	08006141 	.word	0x08006141


		case DRIVE_STATE_IDLE :

				// 라인 센서 4개 이상 인식
				if (Get_Line_Sensor_Cnt() >= 4) {
 8006094:	f7ff ff4e 	bl	8005f34 <Get_Line_Sensor_Cnt>
 8006098:	4603      	mov	r3, r0
 800609a:	2b03      	cmp	r3, #3
 800609c:	d906      	bls.n	80060ac <Drive_State_Machine+0x40>

					sensorStateSum = 0x00;
 800609e:	4b38      	ldr	r3, [pc, #224]	; (8006180 <Drive_State_Machine+0x114>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]

					driveState = DRIVE_STATE_CROSS;
 80060a4:	4b35      	ldr	r3, [pc, #212]	; (800617c <Drive_State_Machine+0x110>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
					lineOutStartTime = uwTick;

					driveState = DRIVE_DECISION_LINE_OUT;
				}

				break;
 80060aa:	e05e      	b.n	800616a <Drive_State_Machine+0xfe>
				else if (Get_Marker_Sensor_Cnt() != 0) {
 80060ac:	f7ff ff86 	bl	8005fbc <Get_Marker_Sensor_Cnt>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <Drive_State_Machine+0x58>
					sensorStateSum = 0x00;
 80060b6:	4b32      	ldr	r3, [pc, #200]	; (8006180 <Drive_State_Machine+0x114>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
					driveState = DRIVE_STATE_MARKER;
 80060bc:	4b2f      	ldr	r3, [pc, #188]	; (800617c <Drive_State_Machine+0x110>)
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
				break;
 80060c2:	e052      	b.n	800616a <Drive_State_Machine+0xfe>
				else if (state == 0x00) {
 80060c4:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <Drive_State_Machine+0x118>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d14d      	bne.n	800616a <Drive_State_Machine+0xfe>
					lineOutStartTime = uwTick;
 80060ce:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <Drive_State_Machine+0x11c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2e      	ldr	r2, [pc, #184]	; (800618c <Drive_State_Machine+0x120>)
 80060d4:	6013      	str	r3, [r2, #0]
					driveState = DRIVE_DECISION_LINE_OUT;
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <Drive_State_Machine+0x110>)
 80060d8:	2204      	movs	r2, #4
 80060da:	701a      	strb	r2, [r3, #0]
				break;
 80060dc:	e045      	b.n	800616a <Drive_State_Machine+0xfe>


		case DRIVE_STATE_CROSS:

				// accum
				sensorStateSum |= state;
 80060de:	4b29      	ldr	r3, [pc, #164]	; (8006184 <Drive_State_Machine+0x118>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	4b26      	ldr	r3, [pc, #152]	; (8006180 <Drive_State_Machine+0x114>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <Drive_State_Machine+0x114>)
 80060ee:	701a      	strb	r2, [r3, #0]

				// 모든 센서를 읽었고 마크 센서가 선을 지나쳤을 때 IDLE
				if (sensorStateSum == 0xff && Get_Marker_Sensor_Cnt() == 0) {
 80060f0:	4b23      	ldr	r3, [pc, #140]	; (8006180 <Drive_State_Machine+0x114>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2bff      	cmp	r3, #255	; 0xff
 80060f6:	d13a      	bne.n	800616e <Drive_State_Machine+0x102>
 80060f8:	f7ff ff60 	bl	8005fbc <Get_Marker_Sensor_Cnt>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d135      	bne.n	800616e <Drive_State_Machine+0x102>

					driveState = DRIVE_STATE_DECISION;
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <Drive_State_Machine+0x110>)
 8006104:	2203      	movs	r2, #3
 8006106:	701a      	strb	r2, [r3, #0]
				}

				break;
 8006108:	e031      	b.n	800616e <Drive_State_Machine+0x102>


		case DRIVE_STATE_MARKER :

				// accum
				sensorStateSum |= state;
 800610a:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <Drive_State_Machine+0x118>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2da      	uxtb	r2, r3
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <Drive_State_Machine+0x114>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	b2da      	uxtb	r2, r3
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <Drive_State_Machine+0x114>)
 800611a:	701a      	strb	r2, [r3, #0]

				// 마커 센서가 0개 일 때
				if (Get_Marker_Sensor_Cnt() == 0) {
 800611c:	f7ff ff4e 	bl	8005fbc <Get_Marker_Sensor_Cnt>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d125      	bne.n	8006172 <Drive_State_Machine+0x106>

					driveState = DRIVE_STATE_DECISION;
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <Drive_State_Machine+0x110>)
 8006128:	2203      	movs	r2, #3
 800612a:	701a      	strb	r2, [r3, #0]
				}

				break;
 800612c:	e021      	b.n	8006172 <Drive_State_Machine+0x106>



		case DRIVE_STATE_DECISION :

				Decision(sensorStateSum);
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <Drive_State_Machine+0x114>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff ff5c 	bl	8005ff0 <Decision>

				driveState = DRIVE_STATE_IDLE;
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <Drive_State_Machine+0x110>)
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]

				break;
 800613e:	e01b      	b.n	8006178 <Drive_State_Machine+0x10c>



		case DRIVE_DECISION_LINE_OUT :

				if (state != 0x00) {
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <Drive_State_Machine+0x118>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <Drive_State_Machine+0xe6>

					driveState = DRIVE_STATE_IDLE;
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <Drive_State_Machine+0x110>)
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {

					markState = MARK_LINE_OUT;
				}

				break ;
 8006150:	e011      	b.n	8006176 <Drive_State_Machine+0x10a>
				else if (uwTick > lineOutStartTime + LINE_OUT_DELAY_MS) {
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <Drive_State_Machine+0x120>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <Drive_State_Machine+0x11c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	d209      	bcs.n	8006176 <Drive_State_Machine+0x10a>
					markState = MARK_LINE_OUT;
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <Drive_State_Machine+0x124>)
 8006164:	2206      	movs	r2, #6
 8006166:	701a      	strb	r2, [r3, #0]
				break ;
 8006168:	e005      	b.n	8006176 <Drive_State_Machine+0x10a>
				break;
 800616a:	bf00      	nop
 800616c:	e004      	b.n	8006178 <Drive_State_Machine+0x10c>
				break;
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <Drive_State_Machine+0x10c>
				break;
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <Drive_State_Machine+0x10c>
				break ;
 8006176:	bf00      	nop

	}
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20001438 	.word	0x20001438
 8006180:	20002e4d 	.word	0x20002e4d
 8006184:	20002ee4 	.word	0x20002ee4
 8006188:	20000270 	.word	0x20000270
 800618c:	20002e50 	.word	0x20002e50
 8006190:	20000034 	.word	0x20000034

08006194 <First_Drive>:




//1차 주행
void First_Drive() {
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0

	uint8_t exitEcho = EXIT_ECHO_IDLE;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]

	uint32_t startTime = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
	uint32_t endTime = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	607b      	str	r3, [r7, #4]

	Custom_OLED_Clear();
 80061a6:	f7fe fe0e 	bl	8004dc6 <Custom_OLED_Clear>

	//주행 전 변수값 초기화
	Pre_Drive_Setting();
 80061aa:	f7ff fae1 	bl	8005770 <Pre_Drive_Setting>

	Sensor_Start();
 80061ae:	f001 fa81 	bl	80076b4 <Sensor_Start>
	Motor_Start();
 80061b2:	f001 f999 	bl	80074e8 <Motor_Start>
	Speed_Control_Start();
 80061b6:	f001 f9cd 	bl	8007554 <Speed_Control_Start>

	startTime = uwTick;
 80061ba:	4b14      	ldr	r3, [pc, #80]	; (800620c <First_Drive+0x78>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]

	while (1) {

		//Drive_Test_Info_Oled();

		Drive_State_Machine();
 80061c0:	f7ff ff54 	bl	800606c <Drive_State_Machine>
		First_Drive_Ctrl();
 80061c4:	f000 f826 	bl	8006214 <First_Drive_Ctrl>

		//Drive_Speed_Cntl();
		if ( EXIT_ECHO_IDLE != (exitEcho = Is_Drive_End(exitEcho)) ) {
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fe6c 	bl	8005ea8 <Is_Drive_End>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f2      	beq.n	80061c0 <First_Drive+0x2c>

			endTime = uwTick;
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <First_Drive+0x78>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	607b      	str	r3, [r7, #4]
			break;
 80061e0:	bf00      	nop
		}
	}

	Motor_Stop();
 80061e2:	f001 f995 	bl	8007510 <Motor_Stop>
	Speed_Control_Stop();
 80061e6:	f001 f9c1 	bl	800756c <Speed_Control_Stop>
	Sensor_Stop();
 80061ea:	f001 fa7b 	bl	80076e4 <Sensor_Stop>


	First_Drive_Data_Cntl(exitEcho);
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f907 	bl	8006404 <First_Drive_Data_Cntl>

	Custom_OLED_Printf("%u", endTime - startTime);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	4619      	mov	r1, r3
 80061fe:	4804      	ldr	r0, [pc, #16]	; (8006210 <First_Drive+0x7c>)
 8006200:	f7fe fec6 	bl	8004f90 <Custom_OLED_Printf>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000270 	.word	0x20000270
 8006210:	0800a8c4 	.word	0x0800a8c4

08006214 <First_Drive_Ctrl>:





__STATIC_INLINE void First_Drive_Ctrl() {
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0

	if (markState == MARK_LINE_OUT) {
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <First_Drive_Ctrl+0x34>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b06      	cmp	r3, #6
 800621e:	d011      	beq.n	8006244 <First_Drive_Ctrl+0x30>

		return ;
	}

	// markState가 변경되었을 경우
	else if (markState != driveDataBuffer[driveDataIdx].markState) {
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <First_Drive_Ctrl+0x38>)
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	4a0a      	ldr	r2, [pc, #40]	; (8006250 <First_Drive_Ctrl+0x3c>)
 8006228:	460b      	mov	r3, r1
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	440b      	add	r3, r1
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <First_Drive_Ctrl+0x34>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d003      	beq.n	8006246 <First_Drive_Ctrl+0x32>

		// driveData 값 업데이트
		Set_First_Drive_Data();
 800623e:	f000 f809 	bl	8006254 <Set_First_Drive_Data>
 8006242:	e000      	b.n	8006246 <First_Drive_Ctrl+0x32>
		return ;
 8006244:	bf00      	nop
	}
}
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000034 	.word	0x20000034
 800624c:	20002c3c 	.word	0x20002c3c
 8006250:	2000203c 	.word	0x2000203c

08006254 <Set_First_Drive_Data>:



__STATIC_INLINE void Set_First_Drive_Data() {
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0

	// 크로스, 엔드마크가 아닐 경우
	if (markState != MARK_CROSS && markState != MARK_END) {
 8006258:	4b60      	ldr	r3, [pc, #384]	; (80063dc <Set_First_Drive_Data+0x188>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b05      	cmp	r3, #5
 800625e:	d054      	beq.n	800630a <Set_First_Drive_Data+0xb6>
 8006260:	4b5e      	ldr	r3, [pc, #376]	; (80063dc <Set_First_Drive_Data+0x188>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d050      	beq.n	800630a <Set_First_Drive_Data+0xb6>

		// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
		driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L - markStartTick_L;
 8006268:	4b5d      	ldr	r3, [pc, #372]	; (80063e0 <Set_First_Drive_Data+0x18c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	4b5d      	ldr	r3, [pc, #372]	; (80063e4 <Set_First_Drive_Data+0x190>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	495c      	ldr	r1, [pc, #368]	; (80063e8 <Set_First_Drive_Data+0x194>)
 8006276:	8809      	ldrh	r1, [r1, #0]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	b298      	uxth	r0, r3
 800627c:	4a5b      	ldr	r2, [pc, #364]	; (80063ec <Set_First_Drive_Data+0x198>)
 800627e:	460b      	mov	r3, r1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	440b      	add	r3, r1
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	4602      	mov	r2, r0
 800628a:	801a      	strh	r2, [r3, #0]
		driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R - markStartTick_R;
 800628c:	4b58      	ldr	r3, [pc, #352]	; (80063f0 <Set_First_Drive_Data+0x19c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	b29a      	uxth	r2, r3
 8006292:	4b58      	ldr	r3, [pc, #352]	; (80063f4 <Set_First_Drive_Data+0x1a0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	4953      	ldr	r1, [pc, #332]	; (80063e8 <Set_First_Drive_Data+0x194>)
 800629a:	8809      	ldrh	r1, [r1, #0]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	b298      	uxth	r0, r3
 80062a0:	4a52      	ldr	r2, [pc, #328]	; (80063ec <Set_First_Drive_Data+0x198>)
 80062a2:	460b      	mov	r3, r1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	440b      	add	r3, r1
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	3302      	adds	r3, #2
 80062ae:	4602      	mov	r2, r0
 80062b0:	801a      	strh	r2, [r3, #0]

		// 종료 시점에서의 읽은 크로스의 개수
		driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 80062b2:	4b51      	ldr	r3, [pc, #324]	; (80063f8 <Set_First_Drive_Data+0x1a4>)
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	4b4c      	ldr	r3, [pc, #304]	; (80063e8 <Set_First_Drive_Data+0x194>)
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	b2d0      	uxtb	r0, r2
 80062be:	4a4b      	ldr	r2, [pc, #300]	; (80063ec <Set_First_Drive_Data+0x198>)
 80062c0:	460b      	mov	r3, r1
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	440b      	add	r3, r1
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	3305      	adds	r3, #5
 80062cc:	4602      	mov	r2, r0
 80062ce:	701a      	strb	r2, [r3, #0]

		// drivePtr 값 인덱스 증가
		driveDataIdx += 1;
 80062d0:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <Set_First_Drive_Data+0x194>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	4b43      	ldr	r3, [pc, #268]	; (80063e8 <Set_First_Drive_Data+0x194>)
 80062da:	801a      	strh	r2, [r3, #0]

		// markStartTick 업데이트
		markStartTick_L = curTick_L;
 80062dc:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <Set_First_Drive_Data+0x18c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a40      	ldr	r2, [pc, #256]	; (80063e4 <Set_First_Drive_Data+0x190>)
 80062e2:	6013      	str	r3, [r2, #0]
		markStartTick_R = curTick_R;
 80062e4:	4b42      	ldr	r3, [pc, #264]	; (80063f0 <Set_First_Drive_Data+0x19c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a42      	ldr	r2, [pc, #264]	; (80063f4 <Set_First_Drive_Data+0x1a0>)
 80062ea:	6013      	str	r3, [r2, #0]


		// 증가된 구조체의 인덱스에 markState 저장
		driveDataBuffer[driveDataIdx].markState = markState;
 80062ec:	4b3e      	ldr	r3, [pc, #248]	; (80063e8 <Set_First_Drive_Data+0x194>)
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <Set_First_Drive_Data+0x188>)
 80062f4:	7818      	ldrb	r0, [r3, #0]
 80062f6:	4a3d      	ldr	r2, [pc, #244]	; (80063ec <Set_First_Drive_Data+0x198>)
 80062f8:	460b      	mov	r3, r1
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	440b      	add	r3, r1
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	3304      	adds	r3, #4
 8006304:	4602      	mov	r2, r0
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e063      	b.n	80063d2 <Set_First_Drive_Data+0x17e>
	}

	else {

		// 크로스일 경우
		if (markState == MARK_CROSS) {
 800630a:	4b34      	ldr	r3, [pc, #208]	; (80063dc <Set_First_Drive_Data+0x188>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b05      	cmp	r3, #5
 8006310:	d10f      	bne.n	8006332 <Set_First_Drive_Data+0xde>
			 *    n번째 크로스(crossCnt)		0		1		...		50
			 *    m번째 마크(driveDataIdx)		4(3)	6(5)	...		98
			 *
			 *    (0번째 마크에서 크로스를 읽었을 때 1번째 마크로 저장되도록 함, 0은 값이 없는 상태를 나타냄)
			 */
			crossCntTableBuffer[crossCnt] = driveDataIdx + 1;
 8006312:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <Set_First_Drive_Data+0x194>)
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	4a38      	ldr	r2, [pc, #224]	; (80063f8 <Set_First_Drive_Data+0x1a4>)
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	b299      	uxth	r1, r3
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <Set_First_Drive_Data+0x1a8>)
 8006320:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			crossCnt += 1;
 8006324:	4b34      	ldr	r3, [pc, #208]	; (80063f8 <Set_First_Drive_Data+0x1a4>)
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <Set_First_Drive_Data+0x1a4>)
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e041      	b.n	80063b6 <Set_First_Drive_Data+0x162>
		}

		// 엔드마크일 경우
		else if (markState == MARK_END){
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <Set_First_Drive_Data+0x188>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b04      	cmp	r3, #4
 8006338:	d13d      	bne.n	80063b6 <Set_First_Drive_Data+0x162>

			endMarkCnt += 1;
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <Set_First_Drive_Data+0x1ac>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <Set_First_Drive_Data+0x1ac>)
 8006344:	701a      	strb	r2, [r3, #0]

			if (endMarkCnt >= 2) {
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <Set_First_Drive_Data+0x1ac>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d933      	bls.n	80063b6 <Set_First_Drive_Data+0x162>

				// 현재마크에서 이동한 tick 값을 현재 인덱스의 구조체에 저장
				driveDataBuffer[driveDataIdx].tickCnt_L = curTick_L - markStartTick_L;
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <Set_First_Drive_Data+0x18c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	b29a      	uxth	r2, r3
 8006354:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <Set_First_Drive_Data+0x190>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	4923      	ldr	r1, [pc, #140]	; (80063e8 <Set_First_Drive_Data+0x194>)
 800635c:	8809      	ldrh	r1, [r1, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	b298      	uxth	r0, r3
 8006362:	4a22      	ldr	r2, [pc, #136]	; (80063ec <Set_First_Drive_Data+0x198>)
 8006364:	460b      	mov	r3, r1
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	440b      	add	r3, r1
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4413      	add	r3, r2
 800636e:	4602      	mov	r2, r0
 8006370:	801a      	strh	r2, [r3, #0]
				driveDataBuffer[driveDataIdx].tickCnt_R = curTick_R - markStartTick_R;
 8006372:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <Set_First_Drive_Data+0x19c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	b29a      	uxth	r2, r3
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <Set_First_Drive_Data+0x1a0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	491a      	ldr	r1, [pc, #104]	; (80063e8 <Set_First_Drive_Data+0x194>)
 8006380:	8809      	ldrh	r1, [r1, #0]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b298      	uxth	r0, r3
 8006386:	4a19      	ldr	r2, [pc, #100]	; (80063ec <Set_First_Drive_Data+0x198>)
 8006388:	460b      	mov	r3, r1
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	440b      	add	r3, r1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	4413      	add	r3, r2
 8006392:	3302      	adds	r3, #2
 8006394:	4602      	mov	r2, r0
 8006396:	801a      	strh	r2, [r3, #0]

				// 종료 시점에서의 읽은 크로스의 개수
				driveDataBuffer[driveDataIdx].crossCnt = crossCnt;
 8006398:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <Set_First_Drive_Data+0x1a4>)
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <Set_First_Drive_Data+0x194>)
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	b2d0      	uxtb	r0, r2
 80063a4:	4a11      	ldr	r2, [pc, #68]	; (80063ec <Set_First_Drive_Data+0x198>)
 80063a6:	460b      	mov	r3, r1
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	440b      	add	r3, r1
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	3305      	adds	r3, #5
 80063b2:	4602      	mov	r2, r0
 80063b4:	701a      	strb	r2, [r3, #0]
			}
		}

		// 크로스, 엔드마크는 읽은 후 이전 상태로 되돌림
		markState = driveDataBuffer[driveDataIdx].markState;
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <Set_First_Drive_Data+0x194>)
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <Set_First_Drive_Data+0x198>)
 80063be:	460b      	mov	r3, r1
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	440b      	add	r3, r1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <Set_First_Drive_Data+0x188>)
 80063ce:	701a      	strb	r2, [r3, #0]
	}

}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000034 	.word	0x20000034
 80063e0:	20001428 	.word	0x20001428
 80063e4:	20002e44 	.word	0x20002e44
 80063e8:	20002c3c 	.word	0x20002c3c
 80063ec:	2000203c 	.word	0x2000203c
 80063f0:	2000142c 	.word	0x2000142c
 80063f4:	20002e48 	.word	0x20002e48
 80063f8:	20002e40 	.word	0x20002e40
 80063fc:	20002d40 	.word	0x20002d40
 8006400:	20002e4c 	.word	0x20002e4c

08006404 <First_Drive_Data_Cntl>:





static void First_Drive_Data_Cntl(uint8_t exitEcho) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 1;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
	uint16_t markCnt_L = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	827b      	strh	r3, [r7, #18]
	uint16_t markCnt_R = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	823b      	strh	r3, [r7, #16]
	uint16_t crossCnt = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	81fb      	strh	r3, [r7, #14]

	if (exitEcho == EXIT_ECHO_END_MARK) {
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b01      	cmp	r3, #1
 8006422:	f040 808e 	bne.w	8006542 <First_Drive_Data_Cntl+0x13e>

		// 마크 개수 세기
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 8006426:	2301      	movs	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e04a      	b.n	80064c2 <First_Drive_Data_Cntl+0xbe>

			// 현재상태가 좌측 곡선인 경우
			if (driveDataBuffer[i].markState == MARK_CURVE_L) {
 800642c:	494e      	ldr	r1, [pc, #312]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	440b      	add	r3, r1
 800643a:	3304      	adds	r3, #4
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b03      	cmp	r3, #3
 8006440:	d103      	bne.n	800644a <First_Drive_Data_Cntl+0x46>

				markCnt_L += 1;
 8006442:	8a7b      	ldrh	r3, [r7, #18]
 8006444:	3301      	adds	r3, #1
 8006446:	827b      	strh	r3, [r7, #18]
 8006448:	e038      	b.n	80064bc <First_Drive_Data_Cntl+0xb8>
			}

			// 현재상태가 우측 곡선인 경우
			else if (driveDataBuffer[i].markState == MARK_CURVE_R) {
 800644a:	4947      	ldr	r1, [pc, #284]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4613      	mov	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	4413      	add	r3, r2
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	440b      	add	r3, r1
 8006458:	3304      	adds	r3, #4
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d103      	bne.n	8006468 <First_Drive_Data_Cntl+0x64>

				markCnt_R += 1;
 8006460:	8a3b      	ldrh	r3, [r7, #16]
 8006462:	3301      	adds	r3, #1
 8006464:	823b      	strh	r3, [r7, #16]
 8006466:	e029      	b.n	80064bc <First_Drive_Data_Cntl+0xb8>
			}

			// 직선 (인덱스가 1부터 시작하기에 지정되지 않은 메모리에 접근하는 행동을 방지함)
			else if (driveDataBuffer[i].markState == MARK_STRAIGHT) {
 8006468:	493f      	ldr	r1, [pc, #252]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4613      	mov	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	4413      	add	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	440b      	add	r3, r1
 8006476:	3304      	adds	r3, #4
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d11e      	bne.n	80064bc <First_Drive_Data_Cntl+0xb8>

				// 이전 상태가 좌측 곡선이었을 경우
				if (driveDataBuffer[i-1].markState == MARK_CURVE_L) {
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	4939      	ldr	r1, [pc, #228]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	440b      	add	r3, r1
 800648e:	3304      	adds	r3, #4
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d103      	bne.n	800649e <First_Drive_Data_Cntl+0x9a>
					markCnt_L += 1;
 8006496:	8a7b      	ldrh	r3, [r7, #18]
 8006498:	3301      	adds	r3, #1
 800649a:	827b      	strh	r3, [r7, #18]
 800649c:	e00e      	b.n	80064bc <First_Drive_Data_Cntl+0xb8>
				}

				// 이전 상태가 우측 곡선이었을 경우
				else if (driveDataBuffer[i-1].markState == MARK_CURVE_R) {
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	4931      	ldr	r1, [pc, #196]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 80064a4:	4613      	mov	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	440b      	add	r3, r1
 80064ae:	3304      	adds	r3, #4
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d102      	bne.n	80064bc <First_Drive_Data_Cntl+0xb8>
					markCnt_R += 1;
 80064b6:	8a3b      	ldrh	r3, [r7, #16]
 80064b8:	3301      	adds	r3, #1
 80064ba:	823b      	strh	r3, [r7, #16]
		for (i = 1; driveDataBuffer[i].markState != MARK_NONE && i < MAX_DRIVE_DATA_LEN; i++) {
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	3301      	adds	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	4929      	ldr	r1, [pc, #164]	; (8006568 <First_Drive_Data_Cntl+0x164>)
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	440b      	add	r3, r1
 80064d0:	3304      	adds	r3, #4
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <First_Drive_Data_Cntl+0xdc>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064de:	d3a5      	bcc.n	800642c <First_Drive_Data_Cntl+0x28>
				}
			}
		}

		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e005      	b.n	80064f2 <First_Drive_Data_Cntl+0xee>

			crossCnt++;
 80064e6:	89fb      	ldrh	r3, [r7, #14]
 80064e8:	3301      	adds	r3, #1
 80064ea:	81fb      	strh	r3, [r7, #14]
		for (i = 0; crossCntTableBuffer[i] != 0 && i < MAX_CROSS_CNT; i++) {
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	3301      	adds	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <First_Drive_Data_Cntl+0x168>)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <First_Drive_Data_Cntl+0x100>
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b7f      	cmp	r3, #127	; 0x7f
 8006502:	d9f0      	bls.n	80064e6 <First_Drive_Data_Cntl+0xe2>
		}

		Custom_OLED_Clear();
 8006504:	f7fe fc5f 	bl	8004dc6 <Custom_OLED_Clear>

		// OLED에 exitEcho 변수명 및 마크 개수 출력
		Custom_OLED_Printf("/0end mark");
 8006508:	4819      	ldr	r0, [pc, #100]	; (8006570 <First_Drive_Data_Cntl+0x16c>)
 800650a:	f7fe fd41 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1mark L:   %d", markCnt_L);
 800650e:	8a7b      	ldrh	r3, [r7, #18]
 8006510:	4619      	mov	r1, r3
 8006512:	4818      	ldr	r0, [pc, #96]	; (8006574 <First_Drive_Data_Cntl+0x170>)
 8006514:	f7fe fd3c 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2mark R:   %d", markCnt_R);
 8006518:	8a3b      	ldrh	r3, [r7, #16]
 800651a:	4619      	mov	r1, r3
 800651c:	4816      	ldr	r0, [pc, #88]	; (8006578 <First_Drive_Data_Cntl+0x174>)
 800651e:	f7fe fd37 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3cross:    %d", crossCnt);
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	4619      	mov	r1, r3
 8006526:	4815      	ldr	r0, [pc, #84]	; (800657c <First_Drive_Data_Cntl+0x178>)
 8006528:	f7fe fd32 	bl	8004f90 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 800652c:	bf00      	nop
 800652e:	f7ff f85f 	bl	80055f0 <Custom_Switch_Read>
 8006532:	4603      	mov	r3, r0
 8006534:	2b04      	cmp	r3, #4
 8006536:	d1fa      	bne.n	800652e <First_Drive_Data_Cntl+0x12a>

		First_Drive_Data_Update_Cntl(exitEcho);
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f822 	bl	8006584 <First_Drive_Data_Update_Cntl>
 8006540:	e00b      	b.n	800655a <First_Drive_Data_Cntl+0x156>
	}

	else if (exitEcho == EXIT_ECHO_LINE_OUT){
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d108      	bne.n	800655a <First_Drive_Data_Cntl+0x156>

		Custom_OLED_Printf("/0line out");
 8006548:	480d      	ldr	r0, [pc, #52]	; (8006580 <First_Drive_Data_Cntl+0x17c>)
 800654a:	f7fe fd21 	bl	8004f90 <Custom_OLED_Printf>

		while (CUSTOM_SW_3 != Custom_Switch_Read()) ;
 800654e:	bf00      	nop
 8006550:	f7ff f84e 	bl	80055f0 <Custom_Switch_Read>
 8006554:	4603      	mov	r3, r0
 8006556:	2b04      	cmp	r3, #4
 8006558:	d1fa      	bne.n	8006550 <First_Drive_Data_Cntl+0x14c>
	}

	Custom_OLED_Clear();
 800655a:	f7fe fc34 	bl	8004dc6 <Custom_OLED_Clear>
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000203c 	.word	0x2000203c
 800656c:	20002d40 	.word	0x20002d40
 8006570:	0800a8c8 	.word	0x0800a8c8
 8006574:	0800a8d4 	.word	0x0800a8d4
 8006578:	0800a8e4 	.word	0x0800a8e4
 800657c:	0800a8f4 	.word	0x0800a8f4
 8006580:	0800a904 	.word	0x0800a904

08006584 <First_Drive_Data_Update_Cntl>:



static void First_Drive_Data_Update_Cntl(uint8_t exitEcho) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]

	uint8_t sw;
	uint8_t isUpdate = CUSTOM_FALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]

	Custom_OLED_Printf("/5update: NO");
 8006592:	4847      	ldr	r0, [pc, #284]	; (80066b0 <First_Drive_Data_Update_Cntl+0x12c>)
 8006594:	f7fe fcfc 	bl	8004f90 <Custom_OLED_Printf>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006598:	e010      	b.n	80065bc <First_Drive_Data_Update_Cntl+0x38>

		// data 업데이트 함
		if (sw == CUSTOM_SW_1) {
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d105      	bne.n	80065ac <First_Drive_Data_Update_Cntl+0x28>
			Custom_OLED_Printf("/5update: YES");
 80065a0:	4844      	ldr	r0, [pc, #272]	; (80066b4 <First_Drive_Data_Update_Cntl+0x130>)
 80065a2:	f7fe fcf5 	bl	8004f90 <Custom_OLED_Printf>
			isUpdate = CUSTOM_TRUE;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
 80065aa:	e007      	b.n	80065bc <First_Drive_Data_Update_Cntl+0x38>
		}

		// data 업데이트 안함
		else if (sw == CUSTOM_SW_2) {
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d104      	bne.n	80065bc <First_Drive_Data_Update_Cntl+0x38>
			Custom_OLED_Printf("/5update: NO ");
 80065b2:	4841      	ldr	r0, [pc, #260]	; (80066b8 <First_Drive_Data_Update_Cntl+0x134>)
 80065b4:	f7fe fcec 	bl	8004f90 <Custom_OLED_Printf>
			isUpdate = CUSTOM_FALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80065bc:	f7ff f818 	bl	80055f0 <Custom_Switch_Read>
 80065c0:	4603      	mov	r3, r0
 80065c2:	72fb      	strb	r3, [r7, #11]
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d1e7      	bne.n	800659a <First_Drive_Data_Update_Cntl+0x16>
		}
	}
	Custom_OLED_Clear();
 80065ca:	f7fe fbfc 	bl	8004dc6 <Custom_OLED_Clear>

	if (driveData[0].markState == MARK_NONE || isUpdate == CUSTOM_TRUE) {
 80065ce:	4b3b      	ldr	r3, [pc, #236]	; (80066bc <First_Drive_Data_Update_Cntl+0x138>)
 80065d0:	791b      	ldrb	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <First_Drive_Data_Update_Cntl+0x58>
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d164      	bne.n	80066a6 <First_Drive_Data_Update_Cntl+0x122>

		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 80065dc:	2300      	movs	r3, #0
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	e04c      	b.n	800667c <First_Drive_Data_Update_Cntl+0xf8>
			driveData[i].tickCnt_L = driveDataBuffer[i].tickCnt_L;
 80065e2:	4937      	ldr	r1, [pc, #220]	; (80066c0 <First_Drive_Data_Update_Cntl+0x13c>)
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4613      	mov	r3, r2
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	4413      	add	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	440b      	add	r3, r1
 80065f0:	8818      	ldrh	r0, [r3, #0]
 80065f2:	4932      	ldr	r1, [pc, #200]	; (80066bc <First_Drive_Data_Update_Cntl+0x138>)
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4613      	mov	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	440b      	add	r3, r1
 8006600:	4602      	mov	r2, r0
 8006602:	801a      	strh	r2, [r3, #0]
			driveData[i].tickCnt_R = driveDataBuffer[i].tickCnt_R;
 8006604:	492e      	ldr	r1, [pc, #184]	; (80066c0 <First_Drive_Data_Update_Cntl+0x13c>)
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	440b      	add	r3, r1
 8006612:	3302      	adds	r3, #2
 8006614:	8818      	ldrh	r0, [r3, #0]
 8006616:	4929      	ldr	r1, [pc, #164]	; (80066bc <First_Drive_Data_Update_Cntl+0x138>)
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4613      	mov	r3, r2
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	4413      	add	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	440b      	add	r3, r1
 8006624:	3302      	adds	r3, #2
 8006626:	4602      	mov	r2, r0
 8006628:	801a      	strh	r2, [r3, #0]
			driveData[i].markState = driveDataBuffer[i].markState;
 800662a:	4925      	ldr	r1, [pc, #148]	; (80066c0 <First_Drive_Data_Update_Cntl+0x13c>)
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4613      	mov	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	4413      	add	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	440b      	add	r3, r1
 8006638:	3304      	adds	r3, #4
 800663a:	7818      	ldrb	r0, [r3, #0]
 800663c:	491f      	ldr	r1, [pc, #124]	; (80066bc <First_Drive_Data_Update_Cntl+0x138>)
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	440b      	add	r3, r1
 800664a:	3304      	adds	r3, #4
 800664c:	4602      	mov	r2, r0
 800664e:	701a      	strb	r2, [r3, #0]
			driveData[i].crossCnt = driveDataBuffer[i].crossCnt;
 8006650:	491b      	ldr	r1, [pc, #108]	; (80066c0 <First_Drive_Data_Update_Cntl+0x13c>)
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	440b      	add	r3, r1
 800665e:	3305      	adds	r3, #5
 8006660:	7818      	ldrb	r0, [r3, #0]
 8006662:	4916      	ldr	r1, [pc, #88]	; (80066bc <First_Drive_Data_Update_Cntl+0x138>)
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4613      	mov	r3, r2
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4413      	add	r3, r2
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	440b      	add	r3, r1
 8006670:	3305      	adds	r3, #5
 8006672:	4602      	mov	r2, r0
 8006674:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < MAX_DRIVE_DATA_LEN; i++) {
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006682:	d3ae      	bcc.n	80065e2 <First_Drive_Data_Update_Cntl+0x5e>
		}

		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e00a      	b.n	80066a0 <First_Drive_Data_Update_Cntl+0x11c>

			crossCntTable[i] = crossCntTableBuffer[i];
 800668a:	4a0e      	ldr	r2, [pc, #56]	; (80066c4 <First_Drive_Data_Update_Cntl+0x140>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006692:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <First_Drive_Data_Update_Cntl+0x144>)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t i = 0; i < MAX_CROSS_CNT; i++) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b7f      	cmp	r3, #127	; 0x7f
 80066a4:	d9f1      	bls.n	800668a <First_Drive_Data_Update_Cntl+0x106>
		}
	}
}
 80066a6:	bf00      	nop
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	0800a910 	.word	0x0800a910
 80066b4:	0800a920 	.word	0x0800a920
 80066b8:	0800a930 	.word	0x0800a930
 80066bc:	2000143c 	.word	0x2000143c
 80066c0:	2000203c 	.word	0x2000203c
 80066c4:	20002d40 	.word	0x20002d40
 80066c8:	20002c40 	.word	0x20002c40

080066cc <LL_USART_Enable>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60da      	str	r2, [r3, #12]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	605a      	str	r2, [r3, #4]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8006742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8006752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8006762:	bf00      	nop
 8006764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d1f8      	bne.n	8006764 <Custom_Delay_us+0x34>
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff ffcc 	bl	8006730 <Custom_Delay_us>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
	uwTick = 0;
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <Custom_Delay_Init_SysTick+0x20>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <Custom_Delay_Init_SysTick+0x24>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a05      	ldr	r2, [pc, #20]	; (80067c4 <Custom_Delay_Init_SysTick+0x24>)
 80067b0:	f043 0307 	orr.w	r3, r3, #7
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	20000270 	.word	0x20000270
 80067c4:	e000e010 	.word	0xe000e010

080067c8 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 80067d0:	bf00      	nop
 80067d2:	4808      	ldr	r0, [pc, #32]	; (80067f4 <__io_putchar+0x2c>)
 80067d4:	f7ff ff8a 	bl	80066ec <LL_USART_IsActiveFlag_TXE>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f9      	beq.n	80067d2 <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	4803      	ldr	r0, [pc, #12]	; (80067f4 <__io_putchar+0x2c>)
 80067e6:	f7ff ff94 	bl	8006712 <LL_USART_TransmitData8>
	return ch;
 80067ea:	687b      	ldr	r3, [r7, #4]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40004400 	.word	0x40004400

080067f8 <Init>:



void Init() {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b0be      	sub	sp, #248	; 0xf8
 80067fc:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 80067fe:	4838      	ldr	r0, [pc, #224]	; (80068e0 <Init+0xe8>)
 8006800:	f7ff ff64 	bl	80066cc <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8006804:	f7ff ffcc 	bl	80067a0 <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8006808:	f7fe fafc 	bl	8004e04 <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 800680c:	f7fe f92c 	bl	8004a68 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8006810:	f7fe faf8 	bl	8004e04 <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8006814:	4833      	ldr	r0, [pc, #204]	; (80068e4 <Init+0xec>)
 8006816:	f7fe fbbb 	bl	8004f90 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 800681a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800681e:	f7ff ffaf 	bl	8006780 <Custom_Delay_ms>

	/*
	 * 아래는 스위치를 사용하는 예제다.
	 * Custom_Switch_Read 함수 내부에는 1ms 딜레이가 존재하기 때문에, 이 함수를 주행 알고리즘 내부에 집어넣으면 성능이 크게 떨어지니 주의한.
	 */
	t_menuData menus[] = {
 8006822:	4a31      	ldr	r2, [pc, #196]	; (80068e8 <Init+0xf0>)
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	4611      	mov	r1, r2
 8006828:	22f0      	movs	r2, #240	; 0xf0
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fe21 	bl	8008472 <memcpy>
			{ "Test Velocity  ", Motor_Test_Velocity },
			{ "Test Position  ", Drive_Test_Position },
			{ "Current setting", Current_Setting },
	};

	uint8_t sw = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	uint8_t count = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t menuCnt = sizeof(menus) / sizeof(t_menuData);
 800683c:	230c      	movs	r3, #12
 800683e:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5

	Custom_OLED_Clear();
 8006842:	f7fe fac0 	bl	8004dc6 <Custom_OLED_Clear>
	while(1) {
		Custom_OLED_Clear();
 8006846:	f7fe fabe 	bl	8004dc6 <Custom_OLED_Clear>
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800684a:	e033      	b.n	80068b4 <Init+0xbc>
			Custom_OLED_Printf("%s", menus[count].menuName);
 800684c:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8006850:	1d39      	adds	r1, r7, #4
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	4619      	mov	r1, r3
 800685e:	4823      	ldr	r0, [pc, #140]	; (80068ec <Init+0xf4>)
 8006860:	f7fe fb96 	bl	8004f90 <Custom_OLED_Printf>

			if (sw == CUSTOM_SW_1) {
 8006864:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8006868:	2b01      	cmp	r3, #1
 800686a:	d10f      	bne.n	800688c <Init+0x94>
				if (count == 0)
 800686c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <Init+0x88>
					count = menuCnt - 1;
 8006874:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8006878:	3b01      	subs	r3, #1
 800687a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800687e:	e019      	b.n	80068b4 <Init+0xbc>
				else
					count--;
 8006880:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8006884:	3b01      	subs	r3, #1
 8006886:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 800688a:	e013      	b.n	80068b4 <Init+0xbc>
			}
			else if (sw == CUSTOM_SW_2) {
 800688c:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8006890:	2b02      	cmp	r3, #2
 8006892:	d10f      	bne.n	80068b4 <Init+0xbc>
				if (count == menuCnt - 1)
 8006894:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8006898:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800689c:	3b01      	subs	r3, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d103      	bne.n	80068aa <Init+0xb2>
					count = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 80068a8:	e004      	b.n	80068b4 <Init+0xbc>
				else
					count++;
 80068aa:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80068ae:	3301      	adds	r3, #1
 80068b0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		while(CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80068b4:	f7fe fe9c 	bl	80055f0 <Custom_Switch_Read>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 80068be:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d1c2      	bne.n	800684c <Init+0x54>
			}
		}
		menus[count].func();
 80068c6:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	33f8      	adds	r3, #248	; 0xf8
 80068d4:	443b      	add	r3, r7
 80068d6:	3be4      	subs	r3, #228	; 0xe4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4798      	blx	r3
		Custom_OLED_Clear();
 80068dc:	e7b3      	b.n	8006846 <Init+0x4e>
 80068de:	bf00      	nop
 80068e0:	40004400 	.word	0x40004400
 80068e4:	0800a980 	.word	0x0800a980
 80068e8:	0800a998 	.word	0x0800a998
 80068ec:	0800a994 	.word	0x0800a994

080068f0 <LL_TIM_EnableCounter>:
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f043 0201 	orr.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_TIM_SetAutoReload>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <LL_TIM_CC_EnableChannel>:
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	621a      	str	r2, [r3, #32]
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <LL_TIM_OC_SetCompareCH2>:
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8006972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3b01      	subs	r3, #1
 800697a:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 800697c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 800698c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 800699c:	bf00      	nop
 800699e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d1f8      	bne.n	800699e <Custom_Delay_us+0x34>
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069c8:	fb02 f303 	mul.w	r3, r2, r3
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ffcc 	bl	800696a <Custom_Delay_us>
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <Motor_L_Speed_Control>:
__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 80069e6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006a10 <Motor_L_Speed_Control+0x34>
 80069ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80069ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069fe:	ee17 1a90 	vmov	r1, s15
 8006a02:	4804      	ldr	r0, [pc, #16]	; (8006a14 <Motor_L_Speed_Control+0x38>)
 8006a04:	f7ff ff84 	bl	8006910 <LL_TIM_SetAutoReload>
}
 8006a08:	bf00      	nop
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	43cc3418 	.word	0x43cc3418
 8006a14:	40000400 	.word	0x40000400

08006a18 <Motor_R_Speed_Control>:
__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 8006a22:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006a4c <Motor_R_Speed_Control+0x34>
 8006a26:	ed97 7a01 	vldr	s14, [r7, #4]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a3a:	ee17 1a90 	vmov	r1, s15
 8006a3e:	4804      	ldr	r0, [pc, #16]	; (8006a50 <Motor_R_Speed_Control+0x38>)
 8006a40:	f7ff ff66 	bl	8006910 <LL_TIM_SetAutoReload>
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	43cc3418 	.word	0x43cc3418
 8006a50:	40000800 	.word	0x40000800

08006a54 <Custom_GPIO_Set>:
		uint32_t value) {
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	43db      	mvns	r3, r3
 8006a68:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <Custom_GPIO_Set+0x22>
 8006a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a74:	e000      	b.n	8006a78 <Custom_GPIO_Set+0x24>
 8006a76:	2100      	movs	r1, #0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	615a      	str	r2, [r3, #20]
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <Switch_Test>:
#include "custom_exception.h"




void Switch_Test() {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
	Custom_OLED_Clear();
 8006a96:	f7fe f996 	bl	8004dc6 <Custom_OLED_Clear>

	Custom_OLED_Printf("/0 1: no");
 8006a9a:	4824      	ldr	r0, [pc, #144]	; (8006b2c <Switch_Test+0x9c>)
 8006a9c:	f7fe fa78 	bl	8004f90 <Custom_OLED_Printf>
	Custom_OLED_Printf("/1 2: no");
 8006aa0:	4823      	ldr	r0, [pc, #140]	; (8006b30 <Switch_Test+0xa0>)
 8006aa2:	f7fe fa75 	bl	8004f90 <Custom_OLED_Printf>
	Custom_OLED_Printf("/2 3: no");
 8006aa6:	4823      	ldr	r0, [pc, #140]	; (8006b34 <Switch_Test+0xa4>)
 8006aa8:	f7fe fa72 	bl	8004f90 <Custom_OLED_Printf>
	Custom_OLED_Printf("/3 1, 2: no");
 8006aac:	4822      	ldr	r0, [pc, #136]	; (8006b38 <Switch_Test+0xa8>)
 8006aae:	f7fe fa6f 	bl	8004f90 <Custom_OLED_Printf>
	Custom_OLED_Printf("/4 1, 3: no");
 8006ab2:	4822      	ldr	r0, [pc, #136]	; (8006b3c <Switch_Test+0xac>)
 8006ab4:	f7fe fa6c 	bl	8004f90 <Custom_OLED_Printf>
	Custom_OLED_Printf("/5 2, 3: no");
 8006ab8:	4821      	ldr	r0, [pc, #132]	; (8006b40 <Switch_Test+0xb0>)
 8006aba:	f7fe fa69 	bl	8004f90 <Custom_OLED_Printf>

	uint8_t sw = Custom_Switch_Read();
 8006abe:	f7fe fd97 	bl	80055f0 <Custom_Switch_Read>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
	while(sw != CUSTOM_SW_ALL){
 8006ac6:	e027      	b.n	8006b18 <Switch_Test+0x88>
		sw = Custom_Switch_Read();
 8006ac8:	f7fe fd92 	bl	80055f0 <Custom_Switch_Read>
 8006acc:	4603      	mov	r3, r0
 8006ace:	71fb      	strb	r3, [r7, #7]

		if (CUSTOM_SW_1 == sw){
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d102      	bne.n	8006adc <Switch_Test+0x4c>
			Custom_OLED_Printf("/0 1: yes");
 8006ad6:	481b      	ldr	r0, [pc, #108]	; (8006b44 <Switch_Test+0xb4>)
 8006ad8:	f7fe fa5a 	bl	8004f90 <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_2 == sw){
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d102      	bne.n	8006ae8 <Switch_Test+0x58>
			Custom_OLED_Printf("/1 2: yes");
 8006ae2:	4819      	ldr	r0, [pc, #100]	; (8006b48 <Switch_Test+0xb8>)
 8006ae4:	f7fe fa54 	bl	8004f90 <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_3 == sw){
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d102      	bne.n	8006af4 <Switch_Test+0x64>
			Custom_OLED_Printf("/2 3: yes");
 8006aee:	4817      	ldr	r0, [pc, #92]	; (8006b4c <Switch_Test+0xbc>)
 8006af0:	f7fe fa4e 	bl	8004f90 <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_1_2 == sw){
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d102      	bne.n	8006b00 <Switch_Test+0x70>
			Custom_OLED_Printf("/3 1, 2: yes");
 8006afa:	4815      	ldr	r0, [pc, #84]	; (8006b50 <Switch_Test+0xc0>)
 8006afc:	f7fe fa48 	bl	8004f90 <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_1_3 == sw){
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d102      	bne.n	8006b0c <Switch_Test+0x7c>
			Custom_OLED_Printf("/4 1, 3: yes");
 8006b06:	4813      	ldr	r0, [pc, #76]	; (8006b54 <Switch_Test+0xc4>)
 8006b08:	f7fe fa42 	bl	8004f90 <Custom_OLED_Printf>
		}
		if (CUSTOM_SW_2_3 == sw){
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	2b06      	cmp	r3, #6
 8006b10:	d102      	bne.n	8006b18 <Switch_Test+0x88>
			Custom_OLED_Printf("/5 2, 3: yes");
 8006b12:	4811      	ldr	r0, [pc, #68]	; (8006b58 <Switch_Test+0xc8>)
 8006b14:	f7fe fa3c 	bl	8004f90 <Custom_OLED_Printf>
	while(sw != CUSTOM_SW_ALL){
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	d1d4      	bne.n	8006ac8 <Switch_Test+0x38>
		}
	}
	Custom_OLED_Clear();
 8006b1e:	f7fe f952 	bl	8004dc6 <Custom_OLED_Clear>
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	0800aa88 	.word	0x0800aa88
 8006b30:	0800aa94 	.word	0x0800aa94
 8006b34:	0800aaa0 	.word	0x0800aaa0
 8006b38:	0800aaac 	.word	0x0800aaac
 8006b3c:	0800aab8 	.word	0x0800aab8
 8006b40:	0800aac4 	.word	0x0800aac4
 8006b44:	0800aad0 	.word	0x0800aad0
 8006b48:	0800aadc 	.word	0x0800aadc
 8006b4c:	0800aae8 	.word	0x0800aae8
 8006b50:	0800aaf4 	.word	0x0800aaf4
 8006b54:	0800ab04 	.word	0x0800ab04
 8006b58:	0800ab14 	.word	0x0800ab14

08006b5c <Sensor_Test_Raw>:




void Sensor_Test_Raw() {
 8006b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af06      	add	r7, sp, #24
	Sensor_Start();
 8006b62:	f000 fda7 	bl	80076b4 <Sensor_Start>
	Custom_OLED_Clear();
 8006b66:	f7fe f92e 	bl	8004dc6 <Custom_OLED_Clear>

	// 센서의 Raw 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006b6a:	e053      	b.n	8006c14 <Sensor_Test_Raw+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006b6c:	4b30      	ldr	r3, [pc, #192]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b72:	461d      	mov	r5, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006b74:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b7a:	461e      	mov	r6, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b7e:	789b      	ldrb	r3, [r3, #2]
 8006b80:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b82:	469c      	mov	ip, r3
			sensorRawVals[0], sensorRawVals[1], sensorRawVals[2], sensorRawVals[3], \
 8006b84:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b8a:	461a      	mov	r2, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006b8c:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b8e:	791b      	ldrb	r3, [r3, #4]
 8006b90:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b92:	4619      	mov	r1, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b96:	795b      	ldrb	r3, [r3, #5]
 8006b98:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006b9a:	4618      	mov	r0, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006b9c:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006b9e:	799b      	ldrb	r3, [r3, #6]
 8006ba0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ba2:	461c      	mov	r4, r3
			sensorRawVals[4], sensorRawVals[5], sensorRawVals[6], sensorRawVals[7]);
 8006ba4:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006ba6:	79db      	ldrb	r3, [r3, #7]
 8006ba8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	9403      	str	r4, [sp, #12]
 8006bae:	9002      	str	r0, [sp, #8]
 8006bb0:	9101      	str	r1, [sp, #4]
 8006bb2:	9200      	str	r2, [sp, #0]
 8006bb4:	4663      	mov	r3, ip
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	4629      	mov	r1, r5
 8006bba:	481e      	ldr	r0, [pc, #120]	; (8006c34 <Sensor_Test_Raw+0xd8>)
 8006bbc:	f7fe f9e8 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bc2:	7a1b      	ldrb	r3, [r3, #8]
 8006bc4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bc6:	461d      	mov	r5, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006bc8:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bca:	7a5b      	ldrb	r3, [r3, #9]
 8006bcc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bce:	461e      	mov	r6, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bd2:	7a9b      	ldrb	r3, [r3, #10]
 8006bd4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bd6:	469c      	mov	ip, r3
			sensorRawVals[8], sensorRawVals[9], sensorRawVals[10], sensorRawVals[11], \
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bda:	7adb      	ldrb	r3, [r3, #11]
 8006bdc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bde:	461a      	mov	r2, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006be0:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006be2:	7b1b      	ldrb	r3, [r3, #12]
 8006be4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006be6:	4619      	mov	r1, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bea:	7b5b      	ldrb	r3, [r3, #13]
 8006bec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bee:	4618      	mov	r0, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bf2:	7b9b      	ldrb	r3, [r3, #14]
 8006bf4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bf6:	461c      	mov	r4, r3
			sensorRawVals[12], sensorRawVals[13], sensorRawVals[14], sensorRawVals[15]);
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <Sensor_Test_Raw+0xd4>)
 8006bfa:	7bdb      	ldrb	r3, [r3, #15]
 8006bfc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	9403      	str	r4, [sp, #12]
 8006c02:	9002      	str	r0, [sp, #8]
 8006c04:	9101      	str	r1, [sp, #4]
 8006c06:	9200      	str	r2, [sp, #0]
 8006c08:	4663      	mov	r3, ip
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	480a      	ldr	r0, [pc, #40]	; (8006c38 <Sensor_Test_Raw+0xdc>)
 8006c10:	f7fe f9be 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006c14:	f7fe fcec 	bl	80055f0 <Custom_Switch_Read>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d1a6      	bne.n	8006b6c <Sensor_Test_Raw+0x10>
	}

	Custom_OLED_Clear();
 8006c1e:	f7fe f8d2 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Stop();
 8006c22:	f000 fd5f 	bl	80076e4 <Sensor_Stop>
}
 8006c26:	bf00      	nop
 8006c28:	3704      	adds	r7, #4
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20002e94 	.word	0x20002e94
 8006c34:	0800ab24 	.word	0x0800ab24
 8006c38:	0800ab50 	.word	0x0800ab50

08006c3c <Sensor_Test_Normalized>:





void Sensor_Test_Normalized() {
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af06      	add	r7, sp, #24
	Sensor_Start();
 8006c42:	f000 fd37 	bl	80076b4 <Sensor_Start>
	Custom_OLED_Clear();
 8006c46:	f7fe f8be 	bl	8004dc6 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006c4a:	e053      	b.n	8006cf4 <Sensor_Test_Normalized+0xb8>
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006c4c:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c52:	461d      	mov	r5, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006c54:	4b2e      	ldr	r3, [pc, #184]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c5a:	461e      	mov	r6, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006c5c:	4b2c      	ldr	r3, [pc, #176]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c5e:	789b      	ldrb	r3, [r3, #2]
 8006c60:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c62:	469c      	mov	ip, r3
			sensorNormVals[0], sensorNormVals[1], sensorNormVals[2], sensorNormVals[3], \
 8006c64:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c6a:	461a      	mov	r2, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006c6c:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c6e:	791b      	ldrb	r3, [r3, #4]
 8006c70:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c72:	4619      	mov	r1, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c76:	795b      	ldrb	r3, [r3, #5]
 8006c78:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c7a:	4618      	mov	r0, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c7e:	799b      	ldrb	r3, [r3, #6]
 8006c80:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c82:	461c      	mov	r4, r3
			sensorNormVals[4], sensorNormVals[5], sensorNormVals[6], sensorNormVals[7]);
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006c86:	79db      	ldrb	r3, [r3, #7]
 8006c88:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	9403      	str	r4, [sp, #12]
 8006c8e:	9002      	str	r0, [sp, #8]
 8006c90:	9101      	str	r1, [sp, #4]
 8006c92:	9200      	str	r2, [sp, #0]
 8006c94:	4663      	mov	r3, ip
 8006c96:	4632      	mov	r2, r6
 8006c98:	4629      	mov	r1, r5
 8006c9a:	481e      	ldr	r0, [pc, #120]	; (8006d14 <Sensor_Test_Normalized+0xd8>)
 8006c9c:	f7fe f978 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006ca2:	7a1b      	ldrb	r3, [r3, #8]
 8006ca4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006ca6:	461d      	mov	r5, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006caa:	7a5b      	ldrb	r3, [r3, #9]
 8006cac:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cae:	461e      	mov	r6, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cb2:	7a9b      	ldrb	r3, [r3, #10]
 8006cb4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cb6:	469c      	mov	ip, r3
			sensorNormVals[8], sensorNormVals[9], sensorNormVals[10], sensorNormVals[11], \
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cba:	7adb      	ldrb	r3, [r3, #11]
 8006cbc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cbe:	461a      	mov	r2, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cc2:	7b1b      	ldrb	r3, [r3, #12]
 8006cc4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cc6:	4619      	mov	r1, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006cc8:	4b11      	ldr	r3, [pc, #68]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cca:	7b5b      	ldrb	r3, [r3, #13]
 8006ccc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cce:	4618      	mov	r0, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cd2:	7b9b      	ldrb	r3, [r3, #14]
 8006cd4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cd6:	461c      	mov	r4, r3
			sensorNormVals[12], sensorNormVals[13], sensorNormVals[14], sensorNormVals[15]);
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <Sensor_Test_Normalized+0xd4>)
 8006cda:	7bdb      	ldrb	r3, [r3, #15]
 8006cdc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9403      	str	r4, [sp, #12]
 8006ce2:	9002      	str	r0, [sp, #8]
 8006ce4:	9101      	str	r1, [sp, #4]
 8006ce6:	9200      	str	r2, [sp, #0]
 8006ce8:	4663      	mov	r3, ip
 8006cea:	4632      	mov	r2, r6
 8006cec:	4629      	mov	r1, r5
 8006cee:	480a      	ldr	r0, [pc, #40]	; (8006d18 <Sensor_Test_Normalized+0xdc>)
 8006cf0:	f7fe f94e 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006cf4:	f7fe fc7c 	bl	80055f0 <Custom_Switch_Read>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d1a6      	bne.n	8006c4c <Sensor_Test_Normalized+0x10>
	}

	Custom_OLED_Clear();
 8006cfe:	f7fe f862 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Stop();
 8006d02:	f000 fcef 	bl	80076e4 <Sensor_Stop>
}
 8006d06:	bf00      	nop
 8006d08:	3704      	adds	r7, #4
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20002ea4 	.word	0x20002ea4
 8006d14:	0800ab24 	.word	0x0800ab24
 8006d18:	0800ab50 	.word	0x0800ab50

08006d1c <Sensor_Test_State>:





void Sensor_Test_State() {
 8006d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af06      	add	r7, sp, #24
	uint8_t sw = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	71fb      	strb	r3, [r7, #7]

	Sensor_Start();
 8006d26:	f000 fcc5 	bl	80076b4 <Sensor_Start>
	Custom_OLED_Clear();
 8006d2a:	f7fe f84c 	bl	8004dc6 <Custom_OLED_Clear>

	// 센서의 State 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006d2e:	e0a1      	b.n	8006e74 <Sensor_Test_State+0x158>
		Custom_OLED_Printf("/0threshold: %3d", threshold);
 8006d30:	4b58      	ldr	r3, [pc, #352]	; (8006e94 <Sensor_Test_State+0x178>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	4619      	mov	r1, r3
 8006d38:	4857      	ldr	r0, [pc, #348]	; (8006e98 <Sensor_Test_State+0x17c>)
 8006d3a:	f7fe f929 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006d3e:	4b57      	ldr	r3, [pc, #348]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0501 	and.w	r5, r3, #1
 8006d4c:	4b53      	ldr	r3, [pc, #332]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	099b      	lsrs	r3, r3, #6
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 0601 	and.w	r6, r3, #1
 8006d5a:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 0c01 	and.w	ip, r3, #1
 8006d68:	4b4c      	ldr	r3, [pc, #304]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	4a49      	ldr	r2, [pc, #292]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	08d2      	lsrs	r2, r2, #3
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	f002 0201 	and.w	r2, r2, #1
 8006d84:	4945      	ldr	r1, [pc, #276]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d86:	7809      	ldrb	r1, [r1, #0]
 8006d88:	b2c9      	uxtb	r1, r1
 8006d8a:	0889      	lsrs	r1, r1, #2
 8006d8c:	b2c9      	uxtb	r1, r1
 8006d8e:	f001 0101 	and.w	r1, r1, #1
 8006d92:	4842      	ldr	r0, [pc, #264]	; (8006e9c <Sensor_Test_State+0x180>)
 8006d94:	7800      	ldrb	r0, [r0, #0]
 8006d96:	b2c0      	uxtb	r0, r0
 8006d98:	0840      	lsrs	r0, r0, #1
 8006d9a:	b2c0      	uxtb	r0, r0
 8006d9c:	f000 0001 	and.w	r0, r0, #1
			(state >> 7) & 1, (state >> 6) & 1, (state >> 5) & 1, (state >> 4) & 1, \
			(state >> 3) & 1, (state >> 2) & 1, (state >> 1) & 1, (state >> 0) & 1);
 8006da0:	4c3e      	ldr	r4, [pc, #248]	; (8006e9c <Sensor_Test_State+0x180>)
 8006da2:	7824      	ldrb	r4, [r4, #0]
 8006da4:	b2e4      	uxtb	r4, r4
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006da6:	f004 0401 	and.w	r4, r4, #1
 8006daa:	9404      	str	r4, [sp, #16]
 8006dac:	9003      	str	r0, [sp, #12]
 8006dae:	9102      	str	r1, [sp, #8]
 8006db0:	9201      	str	r2, [sp, #4]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4663      	mov	r3, ip
 8006db6:	4632      	mov	r2, r6
 8006db8:	4629      	mov	r1, r5
 8006dba:	4839      	ldr	r0, [pc, #228]	; (8006ea0 <Sensor_Test_State+0x184>)
 8006dbc:	f7fe f8e8 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <Sensor_Test_State+0x180>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	13db      	asrs	r3, r3, #15
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006dc8:	f003 0501 	and.w	r5, r3, #1
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
 8006dcc:	4b33      	ldr	r3, [pc, #204]	; (8006e9c <Sensor_Test_State+0x180>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	139b      	asrs	r3, r3, #14
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006dd4:	f003 0601 	and.w	r6, r3, #1
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
 8006dd8:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <Sensor_Test_State+0x180>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	135b      	asrs	r3, r3, #13
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006de0:	f003 0c01 	and.w	ip, r3, #1
			(state >> 15) & 1, (state >> 14) & 1, (state >> 13) & 1, (state >> 12) & 1, \
 8006de4:	4b2d      	ldr	r3, [pc, #180]	; (8006e9c <Sensor_Test_State+0x180>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	131b      	asrs	r3, r3, #12
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006dec:	f003 0301 	and.w	r3, r3, #1
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <Sensor_Test_State+0x180>)
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	12d2      	asrs	r2, r2, #11
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006df8:	f002 0201 	and.w	r2, r2, #1
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);
 8006dfc:	4927      	ldr	r1, [pc, #156]	; (8006e9c <Sensor_Test_State+0x180>)
 8006dfe:	7809      	ldrb	r1, [r1, #0]
 8006e00:	b2c9      	uxtb	r1, r1
 8006e02:	1289      	asrs	r1, r1, #10
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e04:	f001 0101 	and.w	r1, r1, #1
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);
 8006e08:	4824      	ldr	r0, [pc, #144]	; (8006e9c <Sensor_Test_State+0x180>)
 8006e0a:	7800      	ldrb	r0, [r0, #0]
 8006e0c:	b2c0      	uxtb	r0, r0
 8006e0e:	1240      	asrs	r0, r0, #9
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e10:	f000 0001 	and.w	r0, r0, #1
			(state >> 11) & 1, (state >> 10) & 1, (state >> 9) & 1, (state >> 8) & 1);
 8006e14:	4c21      	ldr	r4, [pc, #132]	; (8006e9c <Sensor_Test_State+0x180>)
 8006e16:	7824      	ldrb	r4, [r4, #0]
 8006e18:	b2e4      	uxtb	r4, r4
 8006e1a:	1224      	asrs	r4, r4, #8
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8006e1c:	f004 0401 	and.w	r4, r4, #1
 8006e20:	9404      	str	r4, [sp, #16]
 8006e22:	9003      	str	r0, [sp, #12]
 8006e24:	9102      	str	r1, [sp, #8]
 8006e26:	9201      	str	r2, [sp, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4663      	mov	r3, ip
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4629      	mov	r1, r5
 8006e30:	481c      	ldr	r0, [pc, #112]	; (8006ea4 <Sensor_Test_State+0x188>)
 8006e32:	f7fe f8ad 	bl	8004f90 <Custom_OLED_Printf>


		if (sw == CUSTOM_SW_1) {
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10c      	bne.n	8006e56 <Sensor_Test_State+0x13a>
			if (threshold > THRESHOLD_MIN) {
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b14      	cmp	r3, #20
 8006e44:	d916      	bls.n	8006e74 <Sensor_Test_State+0x158>
				threshold -= THRESHOLD_CHANGE_VAL;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	3b05      	subs	r3, #5
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	e00e      	b.n	8006e74 <Sensor_Test_State+0x158>
			}
		}
		else if (sw == CUSTOM_SW_2) {
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d10b      	bne.n	8006e74 <Sensor_Test_State+0x158>
			if (threshold < THRESHOLD_MAX) {
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2bf9      	cmp	r3, #249	; 0xf9
 8006e64:	d806      	bhi.n	8006e74 <Sensor_Test_State+0x158>
				threshold += THRESHOLD_CHANGE_VAL;
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	3305      	adds	r3, #5
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <Sensor_Test_State+0x178>)
 8006e72:	701a      	strb	r2, [r3, #0]
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8006e74:	f7fe fbbc 	bl	80055f0 <Custom_Switch_Read>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	71fb      	strb	r3, [r7, #7]
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	f47f af56 	bne.w	8006d30 <Sensor_Test_State+0x14>
			}
		}
	}

	Custom_OLED_Clear();
 8006e84:	f7fd ff9f 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Stop();
 8006e88:	f000 fc2c 	bl	80076e4 <Sensor_Stop>
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e94:	20000048 	.word	0x20000048
 8006e98:	0800ab7c 	.word	0x0800ab7c
 8006e9c:	20002ee4 	.word	0x20002ee4
 8006ea0:	0800ab24 	.word	0x0800ab24
 8006ea4:	0800ab50 	.word	0x0800ab50

08006ea8 <Battery_Test_Voltage>:


void Battery_Test_Voltage() {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	Sensor_Start();
 8006eae:	f000 fc01 	bl	80076b4 <Sensor_Start>
	Custom_OLED_Clear();
 8006eb2:	f7fd ff88 	bl	8004dc6 <Custom_OLED_Clear>

	// 센서의 Normalized 값을 디스플레이에 출력해 확인하기
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006eb6:	e022      	b.n	8006efe <Battery_Test_Voltage+0x56>
		uint32_t num1 = (uint32_t)voltage;
 8006eb8:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <Battery_Test_Voltage+0x70>)
 8006eba:	edd3 7a00 	vldr	s15, [r3]
 8006ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec2:	ee17 3a90 	vmov	r3, s15
 8006ec6:	607b      	str	r3, [r7, #4]
		uint32_t num2 = (uint32_t)(voltage * 100000 - num1 * 100000);
 8006ec8:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <Battery_Test_Voltage+0x70>)
 8006eca:	edd3 7a00 	vldr	s15, [r3]
 8006ece:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006f1c <Battery_Test_Voltage+0x74>
 8006ed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <Battery_Test_Voltage+0x78>)
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eee:	ee17 3a90 	vmov	r3, s15
 8006ef2:	603b      	str	r3, [r7, #0]

		Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	480a      	ldr	r0, [pc, #40]	; (8006f24 <Battery_Test_Voltage+0x7c>)
 8006efa:	f7fe f849 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 8006efe:	f7fe fb77 	bl	80055f0 <Custom_Switch_Read>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d1d7      	bne.n	8006eb8 <Battery_Test_Voltage+0x10>
	}

	Custom_OLED_Clear();
 8006f08:	f7fd ff5d 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Stop();
 8006f0c:	f000 fbea 	bl	80076e4 <Sensor_Stop>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20002ee8 	.word	0x20002ee8
 8006f1c:	47c35000 	.word	0x47c35000
 8006f20:	000186a0 	.word	0x000186a0
 8006f24:	0800ab90 	.word	0x0800ab90

08006f28 <MotorR_Test_Duty>:





void MotorR_Test_Duty() {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM11);
 8006f2e:	4846      	ldr	r0, [pc, #280]	; (8007048 <MotorR_Test_Duty+0x120>)
 8006f30:	f7ff fcde 	bl	80068f0 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM11, LL_TIM_CHANNEL_CH1);
 8006f34:	2101      	movs	r1, #1
 8006f36:	4844      	ldr	r0, [pc, #272]	; (8007048 <MotorR_Test_Duty+0x120>)
 8006f38:	f7ff fcf8 	bl	800692c <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM11, 0);
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4842      	ldr	r0, [pc, #264]	; (8007048 <MotorR_Test_Duty+0x120>)
 8006f40:	f7ff fd05 	bl	800694e <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM3);
 8006f44:	4841      	ldr	r0, [pc, #260]	; (800704c <MotorR_Test_Duty+0x124>)
 8006f46:	f7ff fcd3 	bl	80068f0 <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM11->ARR + 1;
 8006f4a:	4b3f      	ldr	r3, [pc, #252]	; (8007048 <MotorR_Test_Duty+0x120>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3301      	adds	r3, #1
 8006f52:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8006f5a:	f7fe fb49 	bl	80055f0 <Custom_Switch_Read>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 8006f62:	797b      	ldrb	r3, [r7, #5]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d069      	beq.n	800703c <MotorR_Test_Duty+0x114>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 8006f68:	797b      	ldrb	r3, [r7, #5]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d108      	bne.n	8006f80 <MotorR_Test_Duty+0x58>
		 duty_ratio -= 0.1f;
 8006f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f72:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007050 <MotorR_Test_Duty+0x128>
 8006f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f7a:	edc7 7a03 	vstr	s15, [r7, #12]
 8006f7e:	e00a      	b.n	8006f96 <MotorR_Test_Duty+0x6e>
		} else if (sw == CUSTOM_SW_2) {
 8006f80:	797b      	ldrb	r3, [r7, #5]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d107      	bne.n	8006f96 <MotorR_Test_Duty+0x6e>
		 duty_ratio += 0.1f;
 8006f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f8a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007050 <MotorR_Test_Duty+0x128>
 8006f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f92:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = abs(duty_ratio * level_max);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fac:	ee17 3a90 	vmov	r3, s15
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bfb8      	it	lt
 8006fb4:	425b      	neglt	r3, r3
 8006fb6:	60bb      	str	r3, [r7, #8]

		if (level > level_max) {
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	dd02      	ble.n	8006fc6 <MotorR_Test_Duty+0x9e>
		 level = level_max;
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	e004      	b.n	8006fd0 <MotorR_Test_Duty+0xa8>
		} else if (level < 0) {
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da01      	bge.n	8006fd0 <MotorR_Test_Duty+0xa8>
		 level = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM11->CCR1 = level;
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <MotorR_Test_Duty+0x120>)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOC, 1 << 4, duty_ratio < 0); // PA5
 8006fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	bf4c      	ite	mi
 8006fe4:	2301      	movmi	r3, #1
 8006fe6:	2300      	movpl	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	2110      	movs	r1, #16
 8006fee:	4819      	ldr	r0, [pc, #100]	; (8007054 <MotorR_Test_Duty+0x12c>)
 8006ff0:	f7ff fd30 	bl	8006a54 <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOC, 1 << 5, duty_ratio > 0); // PA6
 8006ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	bfcc      	ite	gt
 8007002:	2301      	movgt	r3, #1
 8007004:	2300      	movle	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	2120      	movs	r1, #32
 800700c:	4811      	ldr	r0, [pc, #68]	; (8007054 <MotorR_Test_Duty+0x12c>)
 800700e:	f7ff fd21 	bl	8006a54 <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7f9 faa0 	bl	8000558 <__aeabi_f2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	480e      	ldr	r0, [pc, #56]	; (8007058 <MotorR_Test_Duty+0x130>)
 800701e:	f7fd ffb7 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM11->CCR1);
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <MotorR_Test_Duty+0x120>)
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	4619      	mov	r1, r3
 8007028:	480c      	ldr	r0, [pc, #48]	; (800705c <MotorR_Test_Duty+0x134>)
 800702a:	f7fd ffb1 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM3->CNT);
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <MotorR_Test_Duty+0x124>)
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	4619      	mov	r1, r3
 8007034:	480a      	ldr	r0, [pc, #40]	; (8007060 <MotorR_Test_Duty+0x138>)
 8007036:	f7fd ffab 	bl	8004f90 <Custom_OLED_Printf>
	for (;;) {
 800703a:	e78e      	b.n	8006f5a <MotorR_Test_Duty+0x32>
		 break;
 800703c:	bf00      	nop
	}
}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40014800 	.word	0x40014800
 800704c:	40000400 	.word	0x40000400
 8007050:	3dcccccd 	.word	0x3dcccccd
 8007054:	40020800 	.word	0x40020800
 8007058:	0800ab9c 	.word	0x0800ab9c
 800705c:	0800abac 	.word	0x0800abac
 8007060:	0800abbc 	.word	0x0800abbc

08007064 <MotorL_Test_Duty>:


void MotorL_Test_Duty() {
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM10);
 800706a:	4846      	ldr	r0, [pc, #280]	; (8007184 <MotorL_Test_Duty+0x120>)
 800706c:	f7ff fc40 	bl	80068f0 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM10, LL_TIM_CHANNEL_CH1);
 8007070:	2101      	movs	r1, #1
 8007072:	4844      	ldr	r0, [pc, #272]	; (8007184 <MotorL_Test_Duty+0x120>)
 8007074:	f7ff fc5a 	bl	800692c <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH2(TIM10, 0);
 8007078:	2100      	movs	r1, #0
 800707a:	4842      	ldr	r0, [pc, #264]	; (8007184 <MotorL_Test_Duty+0x120>)
 800707c:	f7ff fc67 	bl	800694e <LL_TIM_OC_SetCompareCH2>

	LL_TIM_EnableCounter(TIM4);
 8007080:	4841      	ldr	r0, [pc, #260]	; (8007188 <MotorL_Test_Duty+0x124>)
 8007082:	f7ff fc35 	bl	80068f0 <LL_TIM_EnableCounter>

	const uint16_t level_max = TIM10->ARR + 1;
 8007086:	4b3f      	ldr	r3, [pc, #252]	; (8007184 <MotorL_Test_Duty+0x120>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	b29b      	uxth	r3, r3
 800708c:	3301      	adds	r3, #1
 800708e:	80fb      	strh	r3, [r7, #6]
	float duty_ratio = 0.0f;
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]

	for (;;) {

		// input
		uint8_t sw = Custom_Switch_Read();
 8007096:	f7fe faab 	bl	80055f0 <Custom_Switch_Read>
 800709a:	4603      	mov	r3, r0
 800709c:	717b      	strb	r3, [r7, #5]

		if (sw == CUSTOM_SW_3) {
 800709e:	797b      	ldrb	r3, [r7, #5]
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d069      	beq.n	8007178 <MotorL_Test_Duty+0x114>
		 break;
		} else if (sw == CUSTOM_SW_1) {
 80070a4:	797b      	ldrb	r3, [r7, #5]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d108      	bne.n	80070bc <MotorL_Test_Duty+0x58>
		 duty_ratio -= 0.1f;
 80070aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ae:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800718c <MotorL_Test_Duty+0x128>
 80070b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070b6:	edc7 7a03 	vstr	s15, [r7, #12]
 80070ba:	e00a      	b.n	80070d2 <MotorL_Test_Duty+0x6e>
		} else if (sw == CUSTOM_SW_2) {
 80070bc:	797b      	ldrb	r3, [r7, #5]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d107      	bne.n	80070d2 <MotorL_Test_Duty+0x6e>
		 duty_ratio += 0.1f;
 80070c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80070c6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800718c <MotorL_Test_Duty+0x128>
 80070ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070ce:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		// get level(CCR3)
		int level = abs(duty_ratio * level_max);
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80070e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e8:	ee17 3a90 	vmov	r3, s15
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bfb8      	it	lt
 80070f0:	425b      	neglt	r3, r3
 80070f2:	60bb      	str	r3, [r7, #8]

		if (level > level_max) {
 80070f4:	88fb      	ldrh	r3, [r7, #6]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	dd02      	ble.n	8007102 <MotorL_Test_Duty+0x9e>
		 level = level_max;
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	e004      	b.n	800710c <MotorL_Test_Duty+0xa8>
		} else if (level < 0) {
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	da01      	bge.n	800710c <MotorL_Test_Duty+0xa8>
		 level = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	60bb      	str	r3, [r7, #8]
		}

		// set level(CCR3) and direction
		TIM10->CCR1 = level;
 800710c:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <MotorL_Test_Duty+0x120>)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6353      	str	r3, [r2, #52]	; 0x34
		Custom_GPIO_Set(GPIOB, 1 << 4, duty_ratio > 0); // PA5
 8007112:	edd7 7a03 	vldr	s15, [r7, #12]
 8007116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711e:	bfcc      	ite	gt
 8007120:	2301      	movgt	r3, #1
 8007122:	2300      	movle	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	2110      	movs	r1, #16
 800712a:	4819      	ldr	r0, [pc, #100]	; (8007190 <MotorL_Test_Duty+0x12c>)
 800712c:	f7ff fc92 	bl	8006a54 <Custom_GPIO_Set>
		Custom_GPIO_Set(GPIOB, 1 << 5, duty_ratio < 0); // PA6
 8007130:	edd7 7a03 	vldr	s15, [r7, #12]
 8007134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713c:	bf4c      	ite	mi
 800713e:	2301      	movmi	r3, #1
 8007140:	2300      	movpl	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	2120      	movs	r1, #32
 8007148:	4811      	ldr	r0, [pc, #68]	; (8007190 <MotorL_Test_Duty+0x12c>)
 800714a:	f7ff fc83 	bl	8006a54 <Custom_GPIO_Set>
		Custom_OLED_Printf("/0Duty : %3.2f", duty_ratio);
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7f9 fa02 	bl	8000558 <__aeabi_f2d>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	480e      	ldr	r0, [pc, #56]	; (8007194 <MotorL_Test_Duty+0x130>)
 800715a:	f7fd ff19 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/1CCR3 : %4d", TIM10->CCR1);
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <MotorL_Test_Duty+0x120>)
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	4619      	mov	r1, r3
 8007164:	480c      	ldr	r0, [pc, #48]	; (8007198 <MotorL_Test_Duty+0x134>)
 8007166:	f7fd ff13 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/2ECOD : %9d", TIM4->CNT);
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <MotorL_Test_Duty+0x124>)
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	4619      	mov	r1, r3
 8007170:	480a      	ldr	r0, [pc, #40]	; (800719c <MotorL_Test_Duty+0x138>)
 8007172:	f7fd ff0d 	bl	8004f90 <Custom_OLED_Printf>
	for (;;) {
 8007176:	e78e      	b.n	8007096 <MotorL_Test_Duty+0x32>
		 break;
 8007178:	bf00      	nop
	}
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40014400 	.word	0x40014400
 8007188:	40000800 	.word	0x40000800
 800718c:	3dcccccd 	.word	0x3dcccccd
 8007190:	40020400 	.word	0x40020400
 8007194:	0800ab9c 	.word	0x0800ab9c
 8007198:	0800abac 	.word	0x0800abac
 800719c:	0800abbc 	.word	0x0800abbc

080071a0 <Motor_Test_Velocity>:





void Motor_Test_Velocity() {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
	uint8_t		sw = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
	float		speed = MIN_SPEED;
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <Motor_Test_Velocity+0xb4>)
 80071ac:	617b      	str	r3, [r7, #20]
	float		maxSpeed = 2.f;
 80071ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071b2:	60bb      	str	r3, [r7, #8]
	float		minSpeed = 1.f;
 80071b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80071b8:	607b      	str	r3, [r7, #4]
	float		accele = 1;
 80071ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80071be:	613b      	str	r3, [r7, #16]
	/*
	 * 모터 속도를 부드럽게 올렸다가 내리기를 반복한다.
	 */

	Motor_Start();
 80071c0:	f000 f992 	bl	80074e8 <Motor_Start>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80071c4:	e039      	b.n	800723a <Motor_Test_Velocity+0x9a>

		// accele / 1000인 이유는 단위 시간이 1ms이기 때문이다. 따라서 인터럽트는 500us 단위이기 때문에 인터럽트에서는 accele / 2000을 해야한다.
		speed += accele / 1000;
 80071c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80071ca:	eddf 6a23 	vldr	s13, [pc, #140]	; 8007258 <Motor_Test_Velocity+0xb8>
 80071ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80071d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071da:	edc7 7a05 	vstr	s15, [r7, #20]


		if (speed > maxSpeed) {
 80071de:	ed97 7a05 	vldr	s14, [r7, #20]
 80071e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80071e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ee:	dd08      	ble.n	8007202 <Motor_Test_Velocity+0x62>
			speed = maxSpeed;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	617b      	str	r3, [r7, #20]
			accele *= -1;
 80071f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80071f8:	eef1 7a67 	vneg.f32	s15, s15
 80071fc:	edc7 7a04 	vstr	s15, [r7, #16]
 8007200:	e010      	b.n	8007224 <Motor_Test_Velocity+0x84>
		}
		else if (speed < minSpeed) {
 8007202:	ed97 7a05 	vldr	s14, [r7, #20]
 8007206:	edd7 7a01 	vldr	s15, [r7, #4]
 800720a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800720e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007212:	d507      	bpl.n	8007224 <Motor_Test_Velocity+0x84>
			speed = minSpeed;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	617b      	str	r3, [r7, #20]
			accele *= -1;
 8007218:	edd7 7a04 	vldr	s15, [r7, #16]
 800721c:	eef1 7a67 	vneg.f32	s15, s15
 8007220:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		Motor_L_Speed_Control(speed);
 8007224:	ed97 0a05 	vldr	s0, [r7, #20]
 8007228:	f7ff fbd8 	bl	80069dc <Motor_L_Speed_Control>
		Motor_R_Speed_Control(speed);
 800722c:	ed97 0a05 	vldr	s0, [r7, #20]
 8007230:	f7ff fbf2 	bl	8006a18 <Motor_R_Speed_Control>

		Custom_Delay_ms(1);
 8007234:	2001      	movs	r0, #1
 8007236:	f7ff fbc0 	bl	80069ba <Custom_Delay_ms>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800723a:	f7fe f9d9 	bl	80055f0 <Custom_Switch_Read>
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d1be      	bne.n	80071c6 <Motor_Test_Velocity+0x26>
	}
	Motor_Stop();
 8007248:	f000 f962 	bl	8007510 <Motor_Stop>
}
 800724c:	bf00      	nop
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	3c23d70a 	.word	0x3c23d70a
 8007258:	447a0000 	.word	0x447a0000

0800725c <Drive_Test_Position>:





void Drive_Test_Position() {
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
	uint8_t	sw = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	71fb      	strb	r3, [r7, #7]

	Custom_OLED_Clear();
 8007266:	f7fd fdae 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Start();
 800726a:	f000 fa23 	bl	80076b4 <Sensor_Start>
	Speed_Control_Start();
 800726e:	f000 f971 	bl	8007554 <Speed_Control_Start>

	// 좌우 모터 포지션에 관한 변수
	positionVal = 0;
 8007272:	4b27      	ldr	r3, [pc, #156]	; (8007310 <Drive_Test_Position+0xb4>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
	positionCoef = POSITION_COEF_INIT;
 8007278:	4b26      	ldr	r3, [pc, #152]	; (8007314 <Drive_Test_Position+0xb8>)
 800727a:	4a27      	ldr	r2, [pc, #156]	; (8007318 <Drive_Test_Position+0xbc>)
 800727c:	601a      	str	r2, [r3, #0]

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800727e:	e035      	b.n	80072ec <Drive_Test_Position+0x90>

		Custom_OLED_Printf("/0pos:     %7d", positionVal);
 8007280:	4b23      	ldr	r3, [pc, #140]	; (8007310 <Drive_Test_Position+0xb4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	4825      	ldr	r0, [pc, #148]	; (800731c <Drive_Test_Position+0xc0>)
 8007288:	f7fd fe82 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/2speedL:  %f", (1 + positionVal * positionCoef));
 800728c:	4b20      	ldr	r3, [pc, #128]	; (8007310 <Drive_Test_Position+0xb4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <Drive_Test_Position+0xb8>)
 800729a:	edd3 7a00 	vldr	s15, [r3]
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072aa:	ee17 0a90 	vmov	r0, s15
 80072ae:	f7f9 f953 	bl	8000558 <__aeabi_f2d>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	481a      	ldr	r0, [pc, #104]	; (8007320 <Drive_Test_Position+0xc4>)
 80072b8:	f7fd fe6a 	bl	8004f90 <Custom_OLED_Printf>
		Custom_OLED_Printf("/3speedR:  %f", (1 - positionVal * positionCoef));
 80072bc:	4b14      	ldr	r3, [pc, #80]	; (8007310 <Drive_Test_Position+0xb4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <Drive_Test_Position+0xb8>)
 80072ca:	edd3 7a00 	vldr	s15, [r3]
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072da:	ee17 0a90 	vmov	r0, s15
 80072de:	f7f9 f93b 	bl	8000558 <__aeabi_f2d>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	480f      	ldr	r0, [pc, #60]	; (8007324 <Drive_Test_Position+0xc8>)
 80072e8:	f7fd fe52 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 80072ec:	f7fe f980 	bl	80055f0 <Custom_Switch_Read>
 80072f0:	4603      	mov	r3, r0
 80072f2:	71fb      	strb	r3, [r7, #7]
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d1c2      	bne.n	8007280 <Drive_Test_Position+0x24>
	}
	Speed_Control_Stop();
 80072fa:	f000 f937 	bl	800756c <Speed_Control_Stop>
	Sensor_Stop();
 80072fe:	f000 f9f1 	bl	80076e4 <Sensor_Stop>
	Custom_OLED_Clear();
 8007302:	f7fd fd60 	bl	8004dc6 <Custom_OLED_Clear>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20001418 	.word	0x20001418
 8007314:	20000010 	.word	0x20000010
 8007318:	387ba882 	.word	0x387ba882
 800731c:	0800abcc 	.word	0x0800abcc
 8007320:	0800abdc 	.word	0x0800abdc
 8007324:	0800abec 	.word	0x0800abec

08007328 <Current_Setting>:



void Current_Setting() {
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
	uint8_t		sw = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	72fb      	strb	r3, [r7, #11]
	float		acc = ACCELE_INIT;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <Current_Setting+0x7c>)
 8007334:	607b      	str	r3, [r7, #4]
	float		speed = MIN_SPEED;
 8007336:	4b1c      	ldr	r3, [pc, #112]	; (80073a8 <Current_Setting+0x80>)
 8007338:	60fb      	str	r3, [r7, #12]
	float		target = 2.0f;
 800733a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800733e:	603b      	str	r3, [r7, #0]

	Motor_Start();
 8007340:	f000 f8d2 	bl	80074e8 <Motor_Start>

	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 8007344:	e021      	b.n	800738a <Current_Setting+0x62>

		Motor_L_Speed_Control(speed);
 8007346:	ed97 0a03 	vldr	s0, [r7, #12]
 800734a:	f7ff fb47 	bl	80069dc <Motor_L_Speed_Control>
		Motor_R_Speed_Control(speed);
 800734e:	ed97 0a03 	vldr	s0, [r7, #12]
 8007352:	f7ff fb61 	bl	8006a18 <Motor_R_Speed_Control>

		speed += acc / 1000;
 8007356:	ed97 7a01 	vldr	s14, [r7, #4]
 800735a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80073ac <Current_Setting+0x84>
 800735e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007362:	ed97 7a03 	vldr	s14, [r7, #12]
 8007366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800736a:	edc7 7a03 	vstr	s15, [r7, #12]
		if (speed > target) {
 800736e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007372:	edd7 7a00 	vldr	s15, [r7]
 8007376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	dd01      	ble.n	8007384 <Current_Setting+0x5c>
			speed = target;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	60fb      	str	r3, [r7, #12]
		}

		Custom_Delay_ms(1);
 8007384:	2001      	movs	r0, #1
 8007386:	f7ff fb18 	bl	80069ba <Custom_Delay_ms>
	while (CUSTOM_SW_3 != (sw = Custom_Switch_Read())) {
 800738a:	f7fe f931 	bl	80055f0 <Custom_Switch_Read>
 800738e:	4603      	mov	r3, r0
 8007390:	72fb      	strb	r3, [r7, #11]
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	2b04      	cmp	r3, #4
 8007396:	d1d6      	bne.n	8007346 <Current_Setting+0x1e>
	}

	Motor_Stop();
 8007398:	f000 f8ba 	bl	8007510 <Motor_Stop>
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40e00000 	.word	0x40e00000
 80073a8:	3c23d70a 	.word	0x3c23d70a
 80073ac:	447a0000 	.word	0x447a0000

080073b0 <LL_TIM_EnableCounter>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f043 0201 	orr.w	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <LL_TIM_DisableCounter>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f023 0201 	bic.w	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <LL_TIM_EnableIT_UPDATE>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f043 0201 	orr.w	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <LL_TIM_DisableIT_UPDATE>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f023 0201 	bic.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	60da      	str	r2, [r3, #12]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <Custom_GPIO_Set_t>:

static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	43db      	mvns	r3, r3
 8007446:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	2a00      	cmp	r2, #0
 8007452:	d002      	beq.n	800745a <Custom_GPIO_Set_t+0x2a>
 8007454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007458:	e000      	b.n	800745c <Custom_GPIO_Set_t+0x2c>
 800745a:	2200      	movs	r2, #0
 800745c:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8007462:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8007464:	615a      	str	r2, [r3, #20]
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <Motor_Power_Off>:
volatile uint8_t	phaseR  = 0;




void Motor_Power_Off() {
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0

	Custom_GPIO_Set_t(motorL + 0, 0);
 8007478:	2100      	movs	r1, #0
 800747a:	4813      	ldr	r0, [pc, #76]	; (80074c8 <Motor_Power_Off+0x54>)
 800747c:	f7ff ffd8 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0);
 8007480:	4b12      	ldr	r3, [pc, #72]	; (80074cc <Motor_Power_Off+0x58>)
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff ffd3 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0);
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <Motor_Power_Off+0x5c>)
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff ffce 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0);
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <Motor_Power_Off+0x60>)
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff ffc9 	bl	8007430 <Custom_GPIO_Set_t>

	Custom_GPIO_Set_t(motorR + 0, 0);
 800749e:	2100      	movs	r1, #0
 80074a0:	480d      	ldr	r0, [pc, #52]	; (80074d8 <Motor_Power_Off+0x64>)
 80074a2:	f7ff ffc5 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0);
 80074a6:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <Motor_Power_Off+0x68>)
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff ffc0 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0);
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <Motor_Power_Off+0x6c>)
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff ffbb 	bl	8007430 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0);
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <Motor_Power_Off+0x70>)
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ffb6 	bl	8007430 <Custom_GPIO_Set_t>
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20002e54 	.word	0x20002e54
 80074cc:	20002e5c 	.word	0x20002e5c
 80074d0:	20002e64 	.word	0x20002e64
 80074d4:	20002e6c 	.word	0x20002e6c
 80074d8:	20002e74 	.word	0x20002e74
 80074dc:	20002e7c 	.word	0x20002e7c
 80074e0:	20002e84 	.word	0x20002e84
 80074e4:	20002e8c 	.word	0x20002e8c

080074e8 <Motor_Start>:





void Motor_Start() {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80074ec:	4806      	ldr	r0, [pc, #24]	; (8007508 <Motor_Start+0x20>)
 80074ee:	f7ff ff5f 	bl	80073b0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <Motor_Start+0x20>)
 80074f4:	f7ff ff7c 	bl	80073f0 <LL_TIM_EnableIT_UPDATE>

	LL_TIM_EnableCounter(TIM4);
 80074f8:	4804      	ldr	r0, [pc, #16]	; (800750c <Motor_Start+0x24>)
 80074fa:	f7ff ff59 	bl	80073b0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM4);
 80074fe:	4803      	ldr	r0, [pc, #12]	; (800750c <Motor_Start+0x24>)
 8007500:	f7ff ff76 	bl	80073f0 <LL_TIM_EnableIT_UPDATE>
}
 8007504:	bf00      	nop
 8007506:	bd80      	pop	{r7, pc}
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800

08007510 <Motor_Stop>:





void Motor_Stop() {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
	Motor_Power_Off();
 8007514:	f7ff ffae 	bl	8007474 <Motor_Power_Off>

	LL_TIM_DisableIT_UPDATE(TIM3);
 8007518:	480a      	ldr	r0, [pc, #40]	; (8007544 <Motor_Stop+0x34>)
 800751a:	f7ff ff79 	bl	8007410 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM3);
 800751e:	4809      	ldr	r0, [pc, #36]	; (8007544 <Motor_Stop+0x34>)
 8007520:	f7ff ff56 	bl	80073d0 <LL_TIM_DisableCounter>

	LL_TIM_DisableIT_UPDATE(TIM4);
 8007524:	4808      	ldr	r0, [pc, #32]	; (8007548 <Motor_Stop+0x38>)
 8007526:	f7ff ff73 	bl	8007410 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM4);
 800752a:	4807      	ldr	r0, [pc, #28]	; (8007548 <Motor_Stop+0x38>)
 800752c:	f7ff ff50 	bl	80073d0 <LL_TIM_DisableCounter>

	Motor_Power_Off();
 8007530:	f7ff ffa0 	bl	8007474 <Motor_Power_Off>

	curTick_L = 0;
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <Motor_Stop+0x3c>)
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
	curTick_R = 0;
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <Motor_Stop+0x40>)
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
}
 8007540:	bf00      	nop
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	20001428 	.word	0x20001428
 8007550:	2000142c 	.word	0x2000142c

08007554 <Speed_Control_Start>:




void Speed_Control_Start(){
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8007558:	4803      	ldr	r0, [pc, #12]	; (8007568 <Speed_Control_Start+0x14>)
 800755a:	f7ff ff29 	bl	80073b0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 800755e:	4802      	ldr	r0, [pc, #8]	; (8007568 <Speed_Control_Start+0x14>)
 8007560:	f7ff ff46 	bl	80073f0 <LL_TIM_EnableIT_UPDATE>
}
 8007564:	bf00      	nop
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40014000 	.word	0x40014000

0800756c <Speed_Control_Stop>:




void Speed_Control_Stop(){
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 8007570:	4803      	ldr	r0, [pc, #12]	; (8007580 <Speed_Control_Stop+0x14>)
 8007572:	f7ff ff4d 	bl	8007410 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8007576:	4802      	ldr	r0, [pc, #8]	; (8007580 <Speed_Control_Stop+0x14>)
 8007578:	f7ff ff2a 	bl	80073d0 <LL_TIM_DisableCounter>
}
 800757c:	bf00      	nop
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40014000 	.word	0x40014000

08007584 <LL_ADC_Enable>:
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <LL_ADC_Disable>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f023 0201 	bic.w	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_TIM_EnableCounter>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_TIM_DisableCounter>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f023 0201 	bic.w	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	601a      	str	r2, [r3, #0]
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <LL_TIM_EnableIT_UPDATE>:
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f043 0201 	orr.w	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LL_TIM_DisableIT_UPDATE>:
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f023 0201 	bic.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 800764c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3b01      	subs	r3, #1
 8007654:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8007656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8007666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8007676:	bf00      	nop
 8007678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d1f8      	bne.n	8007678 <Custom_Delay_us+0x34>
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff ffcc 	bl	8007644 <Custom_Delay_us>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <Sensor_Start>:





void Sensor_Start() {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0

	LL_ADC_Enable(ADC1);
 80076b8:	4808      	ldr	r0, [pc, #32]	; (80076dc <Sensor_Start+0x28>)
 80076ba:	f7ff ff63 	bl	8007584 <LL_ADC_Enable>
	Custom_Delay_ms(10); // ADC를 켜고 난 후, ADC 변환을 하기 전 내부 아날로그 안정화 작업을 위해 딜레이를 준다.
 80076be:	200a      	movs	r0, #10
 80076c0:	f7ff ffe8 	bl	8007694 <Custom_Delay_ms>

	LL_TIM_EnableCounter(TIM5); // TIM5의 타이머 카운터가 증가하도록 설정한다.
 80076c4:	4806      	ldr	r0, [pc, #24]	; (80076e0 <Sensor_Start+0x2c>)
 80076c6:	f7ff ff7d 	bl	80075c4 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM5); // TIM5의 인터럽트가 동작하도록 설정한다. 인터럽트가 발생하면 Core/Src/stm32f4xx_it.c 파일 내부에 있는 인터럽트 핸들러 함수가 호출된다.
 80076ca:	4805      	ldr	r0, [pc, #20]	; (80076e0 <Sensor_Start+0x2c>)
 80076cc:	f7ff ff9a 	bl	8007604 <LL_TIM_EnableIT_UPDATE>
	Custom_Delay_ms(10); // 센서 raw 값이 생성될 때까지 기다림
 80076d0:	200a      	movs	r0, #10
 80076d2:	f7ff ffdf 	bl	8007694 <Custom_Delay_ms>
}
 80076d6:	bf00      	nop
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40012000 	.word	0x40012000
 80076e0:	40000c00 	.word	0x40000c00

080076e4 <Sensor_Stop>:




void Sensor_Stop() {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
	LL_ADC_Disable(ADC1);
 80076e8:	4805      	ldr	r0, [pc, #20]	; (8007700 <Sensor_Stop+0x1c>)
 80076ea:	f7ff ff5b 	bl	80075a4 <LL_ADC_Disable>
	LL_TIM_DisableCounter(TIM5);
 80076ee:	4805      	ldr	r0, [pc, #20]	; (8007704 <Sensor_Stop+0x20>)
 80076f0:	f7ff ff78 	bl	80075e4 <LL_TIM_DisableCounter>
	LL_TIM_DisableIT_UPDATE(TIM5);
 80076f4:	4803      	ldr	r0, [pc, #12]	; (8007704 <Sensor_Stop+0x20>)
 80076f6:	f7ff ff95 	bl	8007624 <LL_TIM_DisableIT_UPDATE>
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40012000 	.word	0x40012000
 8007704:	40000c00 	.word	0x40000c00

08007708 <Sensor_Calibration>:





void Sensor_Calibration() {
 8007708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af06      	add	r7, sp, #24
	uint8_t	tmp = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < 8; i++) {
 8007712:	2300      	movs	r3, #0
 8007714:	71fb      	strb	r3, [r7, #7]
 8007716:	e00a      	b.n	800772e <Sensor_Calibration+0x26>
		whiteMaxs[i] = 0;
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	4a8d      	ldr	r2, [pc, #564]	; (8007950 <Sensor_Calibration+0x248>)
 800771c:	2100      	movs	r1, #0
 800771e:	54d1      	strb	r1, [r2, r3]
		blackMaxs[i] = 0;
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	4a8c      	ldr	r2, [pc, #560]	; (8007954 <Sensor_Calibration+0x24c>)
 8007724:	2100      	movs	r1, #0
 8007726:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	3301      	adds	r3, #1
 800772c:	71fb      	strb	r3, [r7, #7]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b07      	cmp	r3, #7
 8007732:	d9f1      	bls.n	8007718 <Sensor_Calibration+0x10>
	}

	Sensor_Start();
 8007734:	f7ff ffbe 	bl	80076b4 <Sensor_Start>

	// Get blackMax
	Custom_OLED_Clear();
 8007738:	f7fd fb45 	bl	8004dc6 <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800773c:	e06e      	b.n	800781c <Sensor_Calibration+0x114>
		Custom_OLED_Printf("/0Black Max");
 800773e:	4886      	ldr	r0, [pc, #536]	; (8007958 <Sensor_Calibration+0x250>)
 8007740:	f7fd fc26 	bl	8004f90 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 16; i++) {
 8007744:	2300      	movs	r3, #0
 8007746:	71bb      	strb	r3, [r7, #6]
 8007748:	e011      	b.n	800776e <Sensor_Calibration+0x66>
			if (blackMaxs[i] < (tmp = sensorRawVals[i])) {
 800774a:	79bb      	ldrb	r3, [r7, #6]
 800774c:	4a81      	ldr	r2, [pc, #516]	; (8007954 <Sensor_Calibration+0x24c>)
 800774e:	5cd3      	ldrb	r3, [r2, r3]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	79ba      	ldrb	r2, [r7, #6]
 8007754:	4981      	ldr	r1, [pc, #516]	; (800795c <Sensor_Calibration+0x254>)
 8007756:	5c8a      	ldrb	r2, [r1, r2]
 8007758:	70fa      	strb	r2, [r7, #3]
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	429a      	cmp	r2, r3
 800775e:	d903      	bls.n	8007768 <Sensor_Calibration+0x60>
				blackMaxs[i] = tmp;
 8007760:	79bb      	ldrb	r3, [r7, #6]
 8007762:	497c      	ldr	r1, [pc, #496]	; (8007954 <Sensor_Calibration+0x24c>)
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 16; i++) {
 8007768:	79bb      	ldrb	r3, [r7, #6]
 800776a:	3301      	adds	r3, #1
 800776c:	71bb      	strb	r3, [r7, #6]
 800776e:	79bb      	ldrb	r3, [r7, #6]
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d9ea      	bls.n	800774a <Sensor_Calibration+0x42>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007774:	4b77      	ldr	r3, [pc, #476]	; (8007954 <Sensor_Calibration+0x24c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800777a:	461d      	mov	r5, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800777c:	4b75      	ldr	r3, [pc, #468]	; (8007954 <Sensor_Calibration+0x24c>)
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007782:	461e      	mov	r6, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 8007784:	4b73      	ldr	r3, [pc, #460]	; (8007954 <Sensor_Calibration+0x24c>)
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800778a:	469c      	mov	ip, r3
			blackMaxs[0], blackMaxs[1], blackMaxs[2], blackMaxs[3], \
 800778c:	4b71      	ldr	r3, [pc, #452]	; (8007954 <Sensor_Calibration+0x24c>)
 800778e:	78db      	ldrb	r3, [r3, #3]
 8007790:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007792:	461a      	mov	r2, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 8007794:	4b6f      	ldr	r3, [pc, #444]	; (8007954 <Sensor_Calibration+0x24c>)
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 800779a:	4619      	mov	r1, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 800779c:	4b6d      	ldr	r3, [pc, #436]	; (8007954 <Sensor_Calibration+0x24c>)
 800779e:	795b      	ldrb	r3, [r3, #5]
 80077a0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077a2:	4618      	mov	r0, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80077a4:	4b6b      	ldr	r3, [pc, #428]	; (8007954 <Sensor_Calibration+0x24c>)
 80077a6:	799b      	ldrb	r3, [r3, #6]
 80077a8:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077aa:	461c      	mov	r4, r3
			blackMaxs[4], blackMaxs[5], blackMaxs[6], blackMaxs[7]);
 80077ac:	4b69      	ldr	r3, [pc, #420]	; (8007954 <Sensor_Calibration+0x24c>)
 80077ae:	79db      	ldrb	r3, [r3, #7]
 80077b0:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9403      	str	r4, [sp, #12]
 80077b6:	9002      	str	r0, [sp, #8]
 80077b8:	9101      	str	r1, [sp, #4]
 80077ba:	9200      	str	r2, [sp, #0]
 80077bc:	4663      	mov	r3, ip
 80077be:	4632      	mov	r2, r6
 80077c0:	4629      	mov	r1, r5
 80077c2:	4867      	ldr	r0, [pc, #412]	; (8007960 <Sensor_Calibration+0x258>)
 80077c4:	f7fd fbe4 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 80077c8:	4b62      	ldr	r3, [pc, #392]	; (8007954 <Sensor_Calibration+0x24c>)
 80077ca:	7a1b      	ldrb	r3, [r3, #8]
 80077cc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077ce:	461d      	mov	r5, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 80077d0:	4b60      	ldr	r3, [pc, #384]	; (8007954 <Sensor_Calibration+0x24c>)
 80077d2:	7a5b      	ldrb	r3, [r3, #9]
 80077d4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077d6:	461e      	mov	r6, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 80077d8:	4b5e      	ldr	r3, [pc, #376]	; (8007954 <Sensor_Calibration+0x24c>)
 80077da:	7a9b      	ldrb	r3, [r3, #10]
 80077dc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077de:	469c      	mov	ip, r3
			blackMaxs[8], blackMaxs[9], blackMaxs[10], blackMaxs[11], \
 80077e0:	4b5c      	ldr	r3, [pc, #368]	; (8007954 <Sensor_Calibration+0x24c>)
 80077e2:	7adb      	ldrb	r3, [r3, #11]
 80077e4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077e6:	461a      	mov	r2, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 80077e8:	4b5a      	ldr	r3, [pc, #360]	; (8007954 <Sensor_Calibration+0x24c>)
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077ee:	4619      	mov	r1, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 80077f0:	4b58      	ldr	r3, [pc, #352]	; (8007954 <Sensor_Calibration+0x24c>)
 80077f2:	7b5b      	ldrb	r3, [r3, #13]
 80077f4:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077f6:	4618      	mov	r0, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 80077f8:	4b56      	ldr	r3, [pc, #344]	; (8007954 <Sensor_Calibration+0x24c>)
 80077fa:	7b9b      	ldrb	r3, [r3, #14]
 80077fc:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80077fe:	461c      	mov	r4, r3
			blackMaxs[12], blackMaxs[13], blackMaxs[14], blackMaxs[15]);
 8007800:	4b54      	ldr	r3, [pc, #336]	; (8007954 <Sensor_Calibration+0x24c>)
 8007802:	7bdb      	ldrb	r3, [r3, #15]
 8007804:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	9403      	str	r4, [sp, #12]
 800780a:	9002      	str	r0, [sp, #8]
 800780c:	9101      	str	r1, [sp, #4]
 800780e:	9200      	str	r2, [sp, #0]
 8007810:	4663      	mov	r3, ip
 8007812:	4632      	mov	r2, r6
 8007814:	4629      	mov	r1, r5
 8007816:	4853      	ldr	r0, [pc, #332]	; (8007964 <Sensor_Calibration+0x25c>)
 8007818:	f7fd fbba 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800781c:	f7fd fee8 	bl	80055f0 <Custom_Switch_Read>
 8007820:	4603      	mov	r3, r0
 8007822:	2b04      	cmp	r3, #4
 8007824:	d18b      	bne.n	800773e <Sensor_Calibration+0x36>
	}

	// Get whiteMax
	Custom_OLED_Clear();
 8007826:	f7fd face 	bl	8004dc6 <Custom_OLED_Clear>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800782a:	e06e      	b.n	800790a <Sensor_Calibration+0x202>
		Custom_OLED_Printf("/0White Max");
 800782c:	484e      	ldr	r0, [pc, #312]	; (8007968 <Sensor_Calibration+0x260>)
 800782e:	f7fd fbaf 	bl	8004f90 <Custom_OLED_Printf>

		for (uint8_t i = 0; i < 16; i++) {
 8007832:	2300      	movs	r3, #0
 8007834:	717b      	strb	r3, [r7, #5]
 8007836:	e011      	b.n	800785c <Sensor_Calibration+0x154>
			if (whiteMaxs[i] < (tmp = sensorRawVals[i])) {
 8007838:	797b      	ldrb	r3, [r7, #5]
 800783a:	4a45      	ldr	r2, [pc, #276]	; (8007950 <Sensor_Calibration+0x248>)
 800783c:	5cd3      	ldrb	r3, [r2, r3]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	797a      	ldrb	r2, [r7, #5]
 8007842:	4946      	ldr	r1, [pc, #280]	; (800795c <Sensor_Calibration+0x254>)
 8007844:	5c8a      	ldrb	r2, [r1, r2]
 8007846:	70fa      	strb	r2, [r7, #3]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	429a      	cmp	r2, r3
 800784c:	d903      	bls.n	8007856 <Sensor_Calibration+0x14e>
				whiteMaxs[i] = tmp;
 800784e:	797b      	ldrb	r3, [r7, #5]
 8007850:	493f      	ldr	r1, [pc, #252]	; (8007950 <Sensor_Calibration+0x248>)
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	54ca      	strb	r2, [r1, r3]
		for (uint8_t i = 0; i < 16; i++) {
 8007856:	797b      	ldrb	r3, [r7, #5]
 8007858:	3301      	adds	r3, #1
 800785a:	717b      	strb	r3, [r7, #5]
 800785c:	797b      	ldrb	r3, [r7, #5]
 800785e:	2b0f      	cmp	r3, #15
 8007860:	d9ea      	bls.n	8007838 <Sensor_Calibration+0x130>
			}
		}
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007862:	4b3b      	ldr	r3, [pc, #236]	; (8007950 <Sensor_Calibration+0x248>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007868:	461d      	mov	r5, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800786a:	4b39      	ldr	r3, [pc, #228]	; (8007950 <Sensor_Calibration+0x248>)
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007870:	461e      	mov	r6, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 8007872:	4b37      	ldr	r3, [pc, #220]	; (8007950 <Sensor_Calibration+0x248>)
 8007874:	789b      	ldrb	r3, [r3, #2]
 8007876:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007878:	469c      	mov	ip, r3
			whiteMaxs[0], whiteMaxs[1], whiteMaxs[2], whiteMaxs[3], \
 800787a:	4b35      	ldr	r3, [pc, #212]	; (8007950 <Sensor_Calibration+0x248>)
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007880:	461a      	mov	r2, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007882:	4b33      	ldr	r3, [pc, #204]	; (8007950 <Sensor_Calibration+0x248>)
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007888:	4619      	mov	r1, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <Sensor_Calibration+0x248>)
 800788c:	795b      	ldrb	r3, [r3, #5]
 800788e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007890:	4618      	mov	r0, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 8007892:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <Sensor_Calibration+0x248>)
 8007894:	799b      	ldrb	r3, [r3, #6]
 8007896:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 8007898:	461c      	mov	r4, r3
			whiteMaxs[4], whiteMaxs[5], whiteMaxs[6], whiteMaxs[7]);
 800789a:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <Sensor_Calibration+0x248>)
 800789c:	79db      	ldrb	r3, [r3, #7]
 800789e:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/1%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078a0:	9304      	str	r3, [sp, #16]
 80078a2:	9403      	str	r4, [sp, #12]
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9101      	str	r1, [sp, #4]
 80078a8:	9200      	str	r2, [sp, #0]
 80078aa:	4663      	mov	r3, ip
 80078ac:	4632      	mov	r2, r6
 80078ae:	4629      	mov	r1, r5
 80078b0:	482b      	ldr	r0, [pc, #172]	; (8007960 <Sensor_Calibration+0x258>)
 80078b2:	f7fd fb6d 	bl	8004f90 <Custom_OLED_Printf>

		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 80078b6:	4b26      	ldr	r3, [pc, #152]	; (8007950 <Sensor_Calibration+0x248>)
 80078b8:	7a1b      	ldrb	r3, [r3, #8]
 80078ba:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078bc:	461d      	mov	r5, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <Sensor_Calibration+0x248>)
 80078c0:	7a5b      	ldrb	r3, [r3, #9]
 80078c2:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078c4:	461e      	mov	r6, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <Sensor_Calibration+0x248>)
 80078c8:	7a9b      	ldrb	r3, [r3, #10]
 80078ca:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078cc:	469c      	mov	ip, r3
			whiteMaxs[8], whiteMaxs[9], whiteMaxs[10], whiteMaxs[11], \
 80078ce:	4b20      	ldr	r3, [pc, #128]	; (8007950 <Sensor_Calibration+0x248>)
 80078d0:	7adb      	ldrb	r3, [r3, #11]
 80078d2:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078d4:	461a      	mov	r2, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 80078d6:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <Sensor_Calibration+0x248>)
 80078d8:	7b1b      	ldrb	r3, [r3, #12]
 80078da:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078dc:	4619      	mov	r1, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 80078de:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <Sensor_Calibration+0x248>)
 80078e0:	7b5b      	ldrb	r3, [r3, #13]
 80078e2:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078e4:	4618      	mov	r0, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <Sensor_Calibration+0x248>)
 80078e8:	7b9b      	ldrb	r3, [r3, #14]
 80078ea:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078ec:	461c      	mov	r4, r3
			whiteMaxs[12], whiteMaxs[13], whiteMaxs[14], whiteMaxs[15]);
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <Sensor_Calibration+0x248>)
 80078f0:	7bdb      	ldrb	r3, [r3, #15]
 80078f2:	b2db      	uxtb	r3, r3
		Custom_OLED_Printf("/3%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w%2x/r%2x/w", \
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	9403      	str	r4, [sp, #12]
 80078f8:	9002      	str	r0, [sp, #8]
 80078fa:	9101      	str	r1, [sp, #4]
 80078fc:	9200      	str	r2, [sp, #0]
 80078fe:	4663      	mov	r3, ip
 8007900:	4632      	mov	r2, r6
 8007902:	4629      	mov	r1, r5
 8007904:	4817      	ldr	r0, [pc, #92]	; (8007964 <Sensor_Calibration+0x25c>)
 8007906:	f7fd fb43 	bl	8004f90 <Custom_OLED_Printf>
	while (CUSTOM_SW_3 != Custom_Switch_Read()) {
 800790a:	f7fd fe71 	bl	80055f0 <Custom_Switch_Read>
 800790e:	4603      	mov	r3, r0
 8007910:	2b04      	cmp	r3, #4
 8007912:	d18b      	bne.n	800782c <Sensor_Calibration+0x124>
	}

	// Calculate ADC coefficients
	for (uint8_t i = 0; i < 16; i++) {
 8007914:	2300      	movs	r3, #0
 8007916:	713b      	strb	r3, [r7, #4]
 8007918:	e00f      	b.n	800793a <Sensor_Calibration+0x232>
		normalizeCoef[i] = whiteMaxs[i] - blackMaxs[i];
 800791a:	793b      	ldrb	r3, [r7, #4]
 800791c:	4a0c      	ldr	r2, [pc, #48]	; (8007950 <Sensor_Calibration+0x248>)
 800791e:	5cd3      	ldrb	r3, [r2, r3]
 8007920:	b2d9      	uxtb	r1, r3
 8007922:	793b      	ldrb	r3, [r7, #4]
 8007924:	4a0b      	ldr	r2, [pc, #44]	; (8007954 <Sensor_Calibration+0x24c>)
 8007926:	5cd3      	ldrb	r3, [r2, r3]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	793b      	ldrb	r3, [r7, #4]
 800792c:	1a8a      	subs	r2, r1, r2
 800792e:	b2d1      	uxtb	r1, r2
 8007930:	4a0e      	ldr	r2, [pc, #56]	; (800796c <Sensor_Calibration+0x264>)
 8007932:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 16; i++) {
 8007934:	793b      	ldrb	r3, [r7, #4]
 8007936:	3301      	adds	r3, #1
 8007938:	713b      	strb	r3, [r7, #4]
 800793a:	793b      	ldrb	r3, [r7, #4]
 800793c:	2b0f      	cmp	r3, #15
 800793e:	d9ec      	bls.n	800791a <Sensor_Calibration+0x212>
	}

	Custom_OLED_Clear();
 8007940:	f7fd fa41 	bl	8004dc6 <Custom_OLED_Clear>
	Sensor_Stop();
 8007944:	f7ff fece 	bl	80076e4 <Sensor_Stop>
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007950:	20002ec4 	.word	0x20002ec4
 8007954:	20002ed4 	.word	0x20002ed4
 8007958:	0800abfc 	.word	0x0800abfc
 800795c:	20002e94 	.word	0x20002e94
 8007960:	0800ac08 	.word	0x0800ac08
 8007964:	0800ac34 	.word	0x0800ac34
 8007968:	0800ac60 	.word	0x0800ac60
 800796c:	20002eb4 	.word	0x20002eb4

08007970 <__cvt>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	ec55 4b10 	vmov	r4, r5, d0
 8007978:	2d00      	cmp	r5, #0
 800797a:	460e      	mov	r6, r1
 800797c:	4619      	mov	r1, r3
 800797e:	462b      	mov	r3, r5
 8007980:	bfbb      	ittet	lt
 8007982:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007986:	461d      	movlt	r5, r3
 8007988:	2300      	movge	r3, #0
 800798a:	232d      	movlt	r3, #45	; 0x2d
 800798c:	700b      	strb	r3, [r1, #0]
 800798e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007990:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007994:	4691      	mov	r9, r2
 8007996:	f023 0820 	bic.w	r8, r3, #32
 800799a:	bfbc      	itt	lt
 800799c:	4622      	movlt	r2, r4
 800799e:	4614      	movlt	r4, r2
 80079a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079a4:	d005      	beq.n	80079b2 <__cvt+0x42>
 80079a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079aa:	d100      	bne.n	80079ae <__cvt+0x3e>
 80079ac:	3601      	adds	r6, #1
 80079ae:	2102      	movs	r1, #2
 80079b0:	e000      	b.n	80079b4 <__cvt+0x44>
 80079b2:	2103      	movs	r1, #3
 80079b4:	ab03      	add	r3, sp, #12
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	ab02      	add	r3, sp, #8
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	ec45 4b10 	vmov	d0, r4, r5
 80079c0:	4653      	mov	r3, sl
 80079c2:	4632      	mov	r2, r6
 80079c4:	f000 fdec 	bl	80085a0 <_dtoa_r>
 80079c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079cc:	4607      	mov	r7, r0
 80079ce:	d102      	bne.n	80079d6 <__cvt+0x66>
 80079d0:	f019 0f01 	tst.w	r9, #1
 80079d4:	d022      	beq.n	8007a1c <__cvt+0xac>
 80079d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079da:	eb07 0906 	add.w	r9, r7, r6
 80079de:	d110      	bne.n	8007a02 <__cvt+0x92>
 80079e0:	783b      	ldrb	r3, [r7, #0]
 80079e2:	2b30      	cmp	r3, #48	; 0x30
 80079e4:	d10a      	bne.n	80079fc <__cvt+0x8c>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f9 f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80079f2:	b918      	cbnz	r0, 80079fc <__cvt+0x8c>
 80079f4:	f1c6 0601 	rsb	r6, r6, #1
 80079f8:	f8ca 6000 	str.w	r6, [sl]
 80079fc:	f8da 3000 	ldr.w	r3, [sl]
 8007a00:	4499      	add	r9, r3
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7f9 f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a0e:	b108      	cbz	r0, 8007a14 <__cvt+0xa4>
 8007a10:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a14:	2230      	movs	r2, #48	; 0x30
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	454b      	cmp	r3, r9
 8007a1a:	d307      	bcc.n	8007a2c <__cvt+0xbc>
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a20:	1bdb      	subs	r3, r3, r7
 8007a22:	4638      	mov	r0, r7
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	b004      	add	sp, #16
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	1c59      	adds	r1, r3, #1
 8007a2e:	9103      	str	r1, [sp, #12]
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e7f0      	b.n	8007a16 <__cvt+0xa6>

08007a34 <__exponent>:
 8007a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a36:	4603      	mov	r3, r0
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	bfb8      	it	lt
 8007a3c:	4249      	neglt	r1, r1
 8007a3e:	f803 2b02 	strb.w	r2, [r3], #2
 8007a42:	bfb4      	ite	lt
 8007a44:	222d      	movlt	r2, #45	; 0x2d
 8007a46:	222b      	movge	r2, #43	; 0x2b
 8007a48:	2909      	cmp	r1, #9
 8007a4a:	7042      	strb	r2, [r0, #1]
 8007a4c:	dd2a      	ble.n	8007aa4 <__exponent+0x70>
 8007a4e:	f10d 0207 	add.w	r2, sp, #7
 8007a52:	4617      	mov	r7, r2
 8007a54:	260a      	movs	r6, #10
 8007a56:	4694      	mov	ip, r2
 8007a58:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a5c:	fb06 1415 	mls	r4, r6, r5, r1
 8007a60:	3430      	adds	r4, #48	; 0x30
 8007a62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007a66:	460c      	mov	r4, r1
 8007a68:	2c63      	cmp	r4, #99	; 0x63
 8007a6a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007a6e:	4629      	mov	r1, r5
 8007a70:	dcf1      	bgt.n	8007a56 <__exponent+0x22>
 8007a72:	3130      	adds	r1, #48	; 0x30
 8007a74:	f1ac 0402 	sub.w	r4, ip, #2
 8007a78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a7c:	1c41      	adds	r1, r0, #1
 8007a7e:	4622      	mov	r2, r4
 8007a80:	42ba      	cmp	r2, r7
 8007a82:	d30a      	bcc.n	8007a9a <__exponent+0x66>
 8007a84:	f10d 0209 	add.w	r2, sp, #9
 8007a88:	eba2 020c 	sub.w	r2, r2, ip
 8007a8c:	42bc      	cmp	r4, r7
 8007a8e:	bf88      	it	hi
 8007a90:	2200      	movhi	r2, #0
 8007a92:	4413      	add	r3, r2
 8007a94:	1a18      	subs	r0, r3, r0
 8007a96:	b003      	add	sp, #12
 8007a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007aa2:	e7ed      	b.n	8007a80 <__exponent+0x4c>
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	3130      	adds	r1, #48	; 0x30
 8007aa8:	7083      	strb	r3, [r0, #2]
 8007aaa:	70c1      	strb	r1, [r0, #3]
 8007aac:	1d03      	adds	r3, r0, #4
 8007aae:	e7f1      	b.n	8007a94 <__exponent+0x60>

08007ab0 <_printf_float>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	ed2d 8b02 	vpush	{d8}
 8007ab8:	b08d      	sub	sp, #52	; 0x34
 8007aba:	460c      	mov	r4, r1
 8007abc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	f000 fca3 	bl	8008410 <_localeconv_r>
 8007aca:	f8d0 a000 	ldr.w	sl, [r0]
 8007ace:	4650      	mov	r0, sl
 8007ad0:	f7f8 fbd6 	bl	8000280 <strlen>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ae4:	3307      	adds	r3, #7
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	f103 0208 	add.w	r2, r3, #8
 8007aee:	f8c8 2000 	str.w	r2, [r8]
 8007af2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007af6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b00:	ee08 0a10 	vmov	s16, r0
 8007b04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b0c:	4b9e      	ldr	r3, [pc, #632]	; (8007d88 <_printf_float+0x2d8>)
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b12:	f7f9 f813 	bl	8000b3c <__aeabi_dcmpun>
 8007b16:	bb88      	cbnz	r0, 8007b7c <_printf_float+0xcc>
 8007b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b1c:	4b9a      	ldr	r3, [pc, #616]	; (8007d88 <_printf_float+0x2d8>)
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b22:	f7f8 ffed 	bl	8000b00 <__aeabi_dcmple>
 8007b26:	bb48      	cbnz	r0, 8007b7c <_printf_float+0xcc>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8007b34:	b110      	cbz	r0, 8007b3c <_printf_float+0x8c>
 8007b36:	232d      	movs	r3, #45	; 0x2d
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	4a93      	ldr	r2, [pc, #588]	; (8007d8c <_printf_float+0x2dc>)
 8007b3e:	4b94      	ldr	r3, [pc, #592]	; (8007d90 <_printf_float+0x2e0>)
 8007b40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b44:	bf94      	ite	ls
 8007b46:	4690      	movls	r8, r2
 8007b48:	4698      	movhi	r8, r3
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	9b05      	ldr	r3, [sp, #20]
 8007b50:	f023 0304 	bic.w	r3, r3, #4
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	9700      	str	r7, [sp, #0]
 8007b5c:	4633      	mov	r3, r6
 8007b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f9da 	bl	8007f1c <_printf_common>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f040 8090 	bne.w	8007c8e <_printf_float+0x1de>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b72:	b00d      	add	sp, #52	; 0x34
 8007b74:	ecbd 8b02 	vpop	{d8}
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ffda 	bl	8000b3c <__aeabi_dcmpun>
 8007b88:	b140      	cbz	r0, 8007b9c <_printf_float+0xec>
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfbc      	itt	lt
 8007b90:	232d      	movlt	r3, #45	; 0x2d
 8007b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b96:	4a7f      	ldr	r2, [pc, #508]	; (8007d94 <_printf_float+0x2e4>)
 8007b98:	4b7f      	ldr	r3, [pc, #508]	; (8007d98 <_printf_float+0x2e8>)
 8007b9a:	e7d1      	b.n	8007b40 <_printf_float+0x90>
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ba2:	9206      	str	r2, [sp, #24]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	d13f      	bne.n	8007c28 <_printf_float+0x178>
 8007ba8:	2306      	movs	r3, #6
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	9b05      	ldr	r3, [sp, #20]
 8007bae:	6861      	ldr	r1, [r4, #4]
 8007bb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	ab0a      	add	r3, sp, #40	; 0x28
 8007bba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bbe:	ab09      	add	r3, sp, #36	; 0x24
 8007bc0:	ec49 8b10 	vmov	d0, r8, r9
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff fecf 	bl	8007970 <__cvt>
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd6:	2b47      	cmp	r3, #71	; 0x47
 8007bd8:	4680      	mov	r8, r0
 8007bda:	d108      	bne.n	8007bee <_printf_float+0x13e>
 8007bdc:	1cc8      	adds	r0, r1, #3
 8007bde:	db02      	blt.n	8007be6 <_printf_float+0x136>
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	4299      	cmp	r1, r3
 8007be4:	dd41      	ble.n	8007c6a <_printf_float+0x1ba>
 8007be6:	f1ab 0302 	sub.w	r3, fp, #2
 8007bea:	fa5f fb83 	uxtb.w	fp, r3
 8007bee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bf2:	d820      	bhi.n	8007c36 <_printf_float+0x186>
 8007bf4:	3901      	subs	r1, #1
 8007bf6:	465a      	mov	r2, fp
 8007bf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bfc:	9109      	str	r1, [sp, #36]	; 0x24
 8007bfe:	f7ff ff19 	bl	8007a34 <__exponent>
 8007c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c04:	1813      	adds	r3, r2, r0
 8007c06:	2a01      	cmp	r2, #1
 8007c08:	4681      	mov	r9, r0
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	dc02      	bgt.n	8007c14 <_printf_float+0x164>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	07d2      	lsls	r2, r2, #31
 8007c12:	d501      	bpl.n	8007c18 <_printf_float+0x168>
 8007c14:	3301      	adds	r3, #1
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d09c      	beq.n	8007b5a <_printf_float+0xaa>
 8007c20:	232d      	movs	r3, #45	; 0x2d
 8007c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c26:	e798      	b.n	8007b5a <_printf_float+0xaa>
 8007c28:	9a06      	ldr	r2, [sp, #24]
 8007c2a:	2a47      	cmp	r2, #71	; 0x47
 8007c2c:	d1be      	bne.n	8007bac <_printf_float+0xfc>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1bc      	bne.n	8007bac <_printf_float+0xfc>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7b9      	b.n	8007baa <_printf_float+0xfa>
 8007c36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c3a:	d118      	bne.n	8007c6e <_printf_float+0x1be>
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	dd0b      	ble.n	8007c5a <_printf_float+0x1aa>
 8007c42:	6121      	str	r1, [r4, #16]
 8007c44:	b913      	cbnz	r3, 8007c4c <_printf_float+0x19c>
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	07d0      	lsls	r0, r2, #31
 8007c4a:	d502      	bpl.n	8007c52 <_printf_float+0x1a2>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	440b      	add	r3, r1
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c54:	f04f 0900 	mov.w	r9, #0
 8007c58:	e7de      	b.n	8007c18 <_printf_float+0x168>
 8007c5a:	b913      	cbnz	r3, 8007c62 <_printf_float+0x1b2>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	07d2      	lsls	r2, r2, #31
 8007c60:	d501      	bpl.n	8007c66 <_printf_float+0x1b6>
 8007c62:	3302      	adds	r3, #2
 8007c64:	e7f4      	b.n	8007c50 <_printf_float+0x1a0>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e7f2      	b.n	8007c50 <_printf_float+0x1a0>
 8007c6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c70:	4299      	cmp	r1, r3
 8007c72:	db05      	blt.n	8007c80 <_printf_float+0x1d0>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	6121      	str	r1, [r4, #16]
 8007c78:	07d8      	lsls	r0, r3, #31
 8007c7a:	d5ea      	bpl.n	8007c52 <_printf_float+0x1a2>
 8007c7c:	1c4b      	adds	r3, r1, #1
 8007c7e:	e7e7      	b.n	8007c50 <_printf_float+0x1a0>
 8007c80:	2900      	cmp	r1, #0
 8007c82:	bfd4      	ite	le
 8007c84:	f1c1 0202 	rsble	r2, r1, #2
 8007c88:	2201      	movgt	r2, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	e7e0      	b.n	8007c50 <_printf_float+0x1a0>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	055a      	lsls	r2, r3, #21
 8007c92:	d407      	bmi.n	8007ca4 <_printf_float+0x1f4>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	4642      	mov	r2, r8
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d12c      	bne.n	8007cfc <_printf_float+0x24c>
 8007ca2:	e764      	b.n	8007b6e <_printf_float+0xbe>
 8007ca4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ca8:	f240 80e0 	bls.w	8007e6c <_printf_float+0x3bc>
 8007cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f7f8 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d034      	beq.n	8007d26 <_printf_float+0x276>
 8007cbc:	4a37      	ldr	r2, [pc, #220]	; (8007d9c <_printf_float+0x2ec>)
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af51 	beq.w	8007b6e <_printf_float+0xbe>
 8007ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	db02      	blt.n	8007cda <_printf_float+0x22a>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07d8      	lsls	r0, r3, #31
 8007cd8:	d510      	bpl.n	8007cfc <_printf_float+0x24c>
 8007cda:	ee18 3a10 	vmov	r3, s16
 8007cde:	4652      	mov	r2, sl
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f af41 	beq.w	8007b6e <_printf_float+0xbe>
 8007cec:	f04f 0800 	mov.w	r8, #0
 8007cf0:	f104 091a 	add.w	r9, r4, #26
 8007cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4543      	cmp	r3, r8
 8007cfa:	dc09      	bgt.n	8007d10 <_printf_float+0x260>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	079b      	lsls	r3, r3, #30
 8007d00:	f100 8107 	bmi.w	8007f12 <_printf_float+0x462>
 8007d04:	68e0      	ldr	r0, [r4, #12]
 8007d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d08:	4298      	cmp	r0, r3
 8007d0a:	bfb8      	it	lt
 8007d0c:	4618      	movlt	r0, r3
 8007d0e:	e730      	b.n	8007b72 <_printf_float+0xc2>
 8007d10:	2301      	movs	r3, #1
 8007d12:	464a      	mov	r2, r9
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f43f af27 	beq.w	8007b6e <_printf_float+0xbe>
 8007d20:	f108 0801 	add.w	r8, r8, #1
 8007d24:	e7e6      	b.n	8007cf4 <_printf_float+0x244>
 8007d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dc39      	bgt.n	8007da0 <_printf_float+0x2f0>
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <_printf_float+0x2ec>)
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f af19 	beq.w	8007b6e <_printf_float+0xbe>
 8007d3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d102      	bne.n	8007d4a <_printf_float+0x29a>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	07d9      	lsls	r1, r3, #31
 8007d48:	d5d8      	bpl.n	8007cfc <_printf_float+0x24c>
 8007d4a:	ee18 3a10 	vmov	r3, s16
 8007d4e:	4652      	mov	r2, sl
 8007d50:	4631      	mov	r1, r6
 8007d52:	4628      	mov	r0, r5
 8007d54:	47b8      	blx	r7
 8007d56:	3001      	adds	r0, #1
 8007d58:	f43f af09 	beq.w	8007b6e <_printf_float+0xbe>
 8007d5c:	f04f 0900 	mov.w	r9, #0
 8007d60:	f104 0a1a 	add.w	sl, r4, #26
 8007d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d66:	425b      	negs	r3, r3
 8007d68:	454b      	cmp	r3, r9
 8007d6a:	dc01      	bgt.n	8007d70 <_printf_float+0x2c0>
 8007d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6e:	e792      	b.n	8007c96 <_printf_float+0x1e6>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4652      	mov	r2, sl
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f aef7 	beq.w	8007b6e <_printf_float+0xbe>
 8007d80:	f109 0901 	add.w	r9, r9, #1
 8007d84:	e7ee      	b.n	8007d64 <_printf_float+0x2b4>
 8007d86:	bf00      	nop
 8007d88:	7fefffff 	.word	0x7fefffff
 8007d8c:	0800af24 	.word	0x0800af24
 8007d90:	0800af28 	.word	0x0800af28
 8007d94:	0800af2c 	.word	0x0800af2c
 8007d98:	0800af30 	.word	0x0800af30
 8007d9c:	0800af34 	.word	0x0800af34
 8007da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007da4:	429a      	cmp	r2, r3
 8007da6:	bfa8      	it	ge
 8007da8:	461a      	movge	r2, r3
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	4691      	mov	r9, r2
 8007dae:	dc37      	bgt.n	8007e20 <_printf_float+0x370>
 8007db0:	f04f 0b00 	mov.w	fp, #0
 8007db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007db8:	f104 021a 	add.w	r2, r4, #26
 8007dbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dbe:	9305      	str	r3, [sp, #20]
 8007dc0:	eba3 0309 	sub.w	r3, r3, r9
 8007dc4:	455b      	cmp	r3, fp
 8007dc6:	dc33      	bgt.n	8007e30 <_printf_float+0x380>
 8007dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	db3b      	blt.n	8007e48 <_printf_float+0x398>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07da      	lsls	r2, r3, #31
 8007dd4:	d438      	bmi.n	8007e48 <_printf_float+0x398>
 8007dd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007dda:	eba2 0903 	sub.w	r9, r2, r3
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	4591      	cmp	r9, r2
 8007de4:	bfa8      	it	ge
 8007de6:	4691      	movge	r9, r2
 8007de8:	f1b9 0f00 	cmp.w	r9, #0
 8007dec:	dc35      	bgt.n	8007e5a <_printf_float+0x3aa>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df6:	f104 0a1a 	add.w	sl, r4, #26
 8007dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	eba3 0309 	sub.w	r3, r3, r9
 8007e04:	4543      	cmp	r3, r8
 8007e06:	f77f af79 	ble.w	8007cfc <_printf_float+0x24c>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b8      	blx	r7
 8007e14:	3001      	adds	r0, #1
 8007e16:	f43f aeaa 	beq.w	8007b6e <_printf_float+0xbe>
 8007e1a:	f108 0801 	add.w	r8, r8, #1
 8007e1e:	e7ec      	b.n	8007dfa <_printf_float+0x34a>
 8007e20:	4613      	mov	r3, r2
 8007e22:	4631      	mov	r1, r6
 8007e24:	4642      	mov	r2, r8
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d1c0      	bne.n	8007db0 <_printf_float+0x300>
 8007e2e:	e69e      	b.n	8007b6e <_printf_float+0xbe>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	9205      	str	r2, [sp, #20]
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f ae97 	beq.w	8007b6e <_printf_float+0xbe>
 8007e40:	9a05      	ldr	r2, [sp, #20]
 8007e42:	f10b 0b01 	add.w	fp, fp, #1
 8007e46:	e7b9      	b.n	8007dbc <_printf_float+0x30c>
 8007e48:	ee18 3a10 	vmov	r3, s16
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	d1be      	bne.n	8007dd6 <_printf_float+0x326>
 8007e58:	e689      	b.n	8007b6e <_printf_float+0xbe>
 8007e5a:	9a05      	ldr	r2, [sp, #20]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	4442      	add	r2, r8
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	d1c1      	bne.n	8007dee <_printf_float+0x33e>
 8007e6a:	e680      	b.n	8007b6e <_printf_float+0xbe>
 8007e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6e:	2a01      	cmp	r2, #1
 8007e70:	dc01      	bgt.n	8007e76 <_printf_float+0x3c6>
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d53a      	bpl.n	8007eec <_printf_float+0x43c>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	f43f ae74 	beq.w	8007b6e <_printf_float+0xbe>
 8007e86:	ee18 3a10 	vmov	r3, s16
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f ae6b 	beq.w	8007b6e <_printf_float+0xbe>
 8007e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007ea4:	f7f8 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea8:	b9d8      	cbnz	r0, 8007ee2 <_printf_float+0x432>
 8007eaa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007eae:	f108 0201 	add.w	r2, r8, #1
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d10e      	bne.n	8007eda <_printf_float+0x42a>
 8007ebc:	e657      	b.n	8007b6e <_printf_float+0xbe>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f43f ae50 	beq.w	8007b6e <_printf_float+0xbe>
 8007ece:	f108 0801 	add.w	r8, r8, #1
 8007ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4543      	cmp	r3, r8
 8007ed8:	dcf1      	bgt.n	8007ebe <_printf_float+0x40e>
 8007eda:	464b      	mov	r3, r9
 8007edc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ee0:	e6da      	b.n	8007c98 <_printf_float+0x1e8>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	f104 0a1a 	add.w	sl, r4, #26
 8007eea:	e7f2      	b.n	8007ed2 <_printf_float+0x422>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4642      	mov	r2, r8
 8007ef0:	e7df      	b.n	8007eb2 <_printf_float+0x402>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	464a      	mov	r2, r9
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae36 	beq.w	8007b6e <_printf_float+0xbe>
 8007f02:	f108 0801 	add.w	r8, r8, #1
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f0a:	1a5b      	subs	r3, r3, r1
 8007f0c:	4543      	cmp	r3, r8
 8007f0e:	dcf0      	bgt.n	8007ef2 <_printf_float+0x442>
 8007f10:	e6f8      	b.n	8007d04 <_printf_float+0x254>
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	f104 0919 	add.w	r9, r4, #25
 8007f1a:	e7f4      	b.n	8007f06 <_printf_float+0x456>

08007f1c <_printf_common>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	4616      	mov	r6, r2
 8007f22:	4699      	mov	r9, r3
 8007f24:	688a      	ldr	r2, [r1, #8]
 8007f26:	690b      	ldr	r3, [r1, #16]
 8007f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	bfb8      	it	lt
 8007f30:	4613      	movlt	r3, r2
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f38:	4607      	mov	r7, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	b10a      	cbz	r2, 8007f42 <_printf_common+0x26>
 8007f3e:	3301      	adds	r3, #1
 8007f40:	6033      	str	r3, [r6, #0]
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	0699      	lsls	r1, r3, #26
 8007f46:	bf42      	ittt	mi
 8007f48:	6833      	ldrmi	r3, [r6, #0]
 8007f4a:	3302      	addmi	r3, #2
 8007f4c:	6033      	strmi	r3, [r6, #0]
 8007f4e:	6825      	ldr	r5, [r4, #0]
 8007f50:	f015 0506 	ands.w	r5, r5, #6
 8007f54:	d106      	bne.n	8007f64 <_printf_common+0x48>
 8007f56:	f104 0a19 	add.w	sl, r4, #25
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	6832      	ldr	r2, [r6, #0]
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dc26      	bgt.n	8007fb2 <_printf_common+0x96>
 8007f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f68:	1e13      	subs	r3, r2, #0
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	bf18      	it	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	0692      	lsls	r2, r2, #26
 8007f72:	d42b      	bmi.n	8007fcc <_printf_common+0xb0>
 8007f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	47c0      	blx	r8
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d01e      	beq.n	8007fc0 <_printf_common+0xa4>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	6922      	ldr	r2, [r4, #16]
 8007f86:	f003 0306 	and.w	r3, r3, #6
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	bf02      	ittt	eq
 8007f8e:	68e5      	ldreq	r5, [r4, #12]
 8007f90:	6833      	ldreq	r3, [r6, #0]
 8007f92:	1aed      	subeq	r5, r5, r3
 8007f94:	68a3      	ldr	r3, [r4, #8]
 8007f96:	bf0c      	ite	eq
 8007f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f9c:	2500      	movne	r5, #0
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	bfc4      	itt	gt
 8007fa2:	1a9b      	subgt	r3, r3, r2
 8007fa4:	18ed      	addgt	r5, r5, r3
 8007fa6:	2600      	movs	r6, #0
 8007fa8:	341a      	adds	r4, #26
 8007faa:	42b5      	cmp	r5, r6
 8007fac:	d11a      	bne.n	8007fe4 <_printf_common+0xc8>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e008      	b.n	8007fc4 <_printf_common+0xa8>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4638      	mov	r0, r7
 8007fba:	47c0      	blx	r8
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d103      	bne.n	8007fc8 <_printf_common+0xac>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	3501      	adds	r5, #1
 8007fca:	e7c6      	b.n	8007f5a <_printf_common+0x3e>
 8007fcc:	18e1      	adds	r1, r4, r3
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	2030      	movs	r0, #48	; 0x30
 8007fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fd6:	4422      	add	r2, r4
 8007fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	e7c7      	b.n	8007f74 <_printf_common+0x58>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4638      	mov	r0, r7
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d0e6      	beq.n	8007fc0 <_printf_common+0xa4>
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	e7d9      	b.n	8007faa <_printf_common+0x8e>
	...

08007ff8 <_printf_i>:
 8007ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	7e0f      	ldrb	r7, [r1, #24]
 8007ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008000:	2f78      	cmp	r7, #120	; 0x78
 8008002:	4691      	mov	r9, r2
 8008004:	4680      	mov	r8, r0
 8008006:	460c      	mov	r4, r1
 8008008:	469a      	mov	sl, r3
 800800a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800800e:	d807      	bhi.n	8008020 <_printf_i+0x28>
 8008010:	2f62      	cmp	r7, #98	; 0x62
 8008012:	d80a      	bhi.n	800802a <_printf_i+0x32>
 8008014:	2f00      	cmp	r7, #0
 8008016:	f000 80d4 	beq.w	80081c2 <_printf_i+0x1ca>
 800801a:	2f58      	cmp	r7, #88	; 0x58
 800801c:	f000 80c0 	beq.w	80081a0 <_printf_i+0x1a8>
 8008020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008028:	e03a      	b.n	80080a0 <_printf_i+0xa8>
 800802a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800802e:	2b15      	cmp	r3, #21
 8008030:	d8f6      	bhi.n	8008020 <_printf_i+0x28>
 8008032:	a101      	add	r1, pc, #4	; (adr r1, 8008038 <_printf_i+0x40>)
 8008034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008038:	08008091 	.word	0x08008091
 800803c:	080080a5 	.word	0x080080a5
 8008040:	08008021 	.word	0x08008021
 8008044:	08008021 	.word	0x08008021
 8008048:	08008021 	.word	0x08008021
 800804c:	08008021 	.word	0x08008021
 8008050:	080080a5 	.word	0x080080a5
 8008054:	08008021 	.word	0x08008021
 8008058:	08008021 	.word	0x08008021
 800805c:	08008021 	.word	0x08008021
 8008060:	08008021 	.word	0x08008021
 8008064:	080081a9 	.word	0x080081a9
 8008068:	080080d1 	.word	0x080080d1
 800806c:	08008163 	.word	0x08008163
 8008070:	08008021 	.word	0x08008021
 8008074:	08008021 	.word	0x08008021
 8008078:	080081cb 	.word	0x080081cb
 800807c:	08008021 	.word	0x08008021
 8008080:	080080d1 	.word	0x080080d1
 8008084:	08008021 	.word	0x08008021
 8008088:	08008021 	.word	0x08008021
 800808c:	0800816b 	.word	0x0800816b
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	1d1a      	adds	r2, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	602a      	str	r2, [r5, #0]
 8008098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800809c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080a0:	2301      	movs	r3, #1
 80080a2:	e09f      	b.n	80081e4 <_printf_i+0x1ec>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	0607      	lsls	r7, r0, #24
 80080aa:	f103 0104 	add.w	r1, r3, #4
 80080ae:	6029      	str	r1, [r5, #0]
 80080b0:	d501      	bpl.n	80080b6 <_printf_i+0xbe>
 80080b2:	681e      	ldr	r6, [r3, #0]
 80080b4:	e003      	b.n	80080be <_printf_i+0xc6>
 80080b6:	0646      	lsls	r6, r0, #25
 80080b8:	d5fb      	bpl.n	80080b2 <_printf_i+0xba>
 80080ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080be:	2e00      	cmp	r6, #0
 80080c0:	da03      	bge.n	80080ca <_printf_i+0xd2>
 80080c2:	232d      	movs	r3, #45	; 0x2d
 80080c4:	4276      	negs	r6, r6
 80080c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ca:	485a      	ldr	r0, [pc, #360]	; (8008234 <_printf_i+0x23c>)
 80080cc:	230a      	movs	r3, #10
 80080ce:	e012      	b.n	80080f6 <_printf_i+0xfe>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	6820      	ldr	r0, [r4, #0]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	6029      	str	r1, [r5, #0]
 80080d8:	0605      	lsls	r5, r0, #24
 80080da:	d501      	bpl.n	80080e0 <_printf_i+0xe8>
 80080dc:	681e      	ldr	r6, [r3, #0]
 80080de:	e002      	b.n	80080e6 <_printf_i+0xee>
 80080e0:	0641      	lsls	r1, r0, #25
 80080e2:	d5fb      	bpl.n	80080dc <_printf_i+0xe4>
 80080e4:	881e      	ldrh	r6, [r3, #0]
 80080e6:	4853      	ldr	r0, [pc, #332]	; (8008234 <_printf_i+0x23c>)
 80080e8:	2f6f      	cmp	r7, #111	; 0x6f
 80080ea:	bf0c      	ite	eq
 80080ec:	2308      	moveq	r3, #8
 80080ee:	230a      	movne	r3, #10
 80080f0:	2100      	movs	r1, #0
 80080f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080f6:	6865      	ldr	r5, [r4, #4]
 80080f8:	60a5      	str	r5, [r4, #8]
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	bfa2      	ittt	ge
 80080fe:	6821      	ldrge	r1, [r4, #0]
 8008100:	f021 0104 	bicge.w	r1, r1, #4
 8008104:	6021      	strge	r1, [r4, #0]
 8008106:	b90e      	cbnz	r6, 800810c <_printf_i+0x114>
 8008108:	2d00      	cmp	r5, #0
 800810a:	d04b      	beq.n	80081a4 <_printf_i+0x1ac>
 800810c:	4615      	mov	r5, r2
 800810e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008112:	fb03 6711 	mls	r7, r3, r1, r6
 8008116:	5dc7      	ldrb	r7, [r0, r7]
 8008118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800811c:	4637      	mov	r7, r6
 800811e:	42bb      	cmp	r3, r7
 8008120:	460e      	mov	r6, r1
 8008122:	d9f4      	bls.n	800810e <_printf_i+0x116>
 8008124:	2b08      	cmp	r3, #8
 8008126:	d10b      	bne.n	8008140 <_printf_i+0x148>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	07de      	lsls	r6, r3, #31
 800812c:	d508      	bpl.n	8008140 <_printf_i+0x148>
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	6861      	ldr	r1, [r4, #4]
 8008132:	4299      	cmp	r1, r3
 8008134:	bfde      	ittt	le
 8008136:	2330      	movle	r3, #48	; 0x30
 8008138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800813c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008140:	1b52      	subs	r2, r2, r5
 8008142:	6122      	str	r2, [r4, #16]
 8008144:	f8cd a000 	str.w	sl, [sp]
 8008148:	464b      	mov	r3, r9
 800814a:	aa03      	add	r2, sp, #12
 800814c:	4621      	mov	r1, r4
 800814e:	4640      	mov	r0, r8
 8008150:	f7ff fee4 	bl	8007f1c <_printf_common>
 8008154:	3001      	adds	r0, #1
 8008156:	d14a      	bne.n	80081ee <_printf_i+0x1f6>
 8008158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800815c:	b004      	add	sp, #16
 800815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	f043 0320 	orr.w	r3, r3, #32
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	4833      	ldr	r0, [pc, #204]	; (8008238 <_printf_i+0x240>)
 800816c:	2778      	movs	r7, #120	; 0x78
 800816e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	6829      	ldr	r1, [r5, #0]
 8008176:	061f      	lsls	r7, r3, #24
 8008178:	f851 6b04 	ldr.w	r6, [r1], #4
 800817c:	d402      	bmi.n	8008184 <_printf_i+0x18c>
 800817e:	065f      	lsls	r7, r3, #25
 8008180:	bf48      	it	mi
 8008182:	b2b6      	uxthmi	r6, r6
 8008184:	07df      	lsls	r7, r3, #31
 8008186:	bf48      	it	mi
 8008188:	f043 0320 	orrmi.w	r3, r3, #32
 800818c:	6029      	str	r1, [r5, #0]
 800818e:	bf48      	it	mi
 8008190:	6023      	strmi	r3, [r4, #0]
 8008192:	b91e      	cbnz	r6, 800819c <_printf_i+0x1a4>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	f023 0320 	bic.w	r3, r3, #32
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	2310      	movs	r3, #16
 800819e:	e7a7      	b.n	80080f0 <_printf_i+0xf8>
 80081a0:	4824      	ldr	r0, [pc, #144]	; (8008234 <_printf_i+0x23c>)
 80081a2:	e7e4      	b.n	800816e <_printf_i+0x176>
 80081a4:	4615      	mov	r5, r2
 80081a6:	e7bd      	b.n	8008124 <_printf_i+0x12c>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	6826      	ldr	r6, [r4, #0]
 80081ac:	6961      	ldr	r1, [r4, #20]
 80081ae:	1d18      	adds	r0, r3, #4
 80081b0:	6028      	str	r0, [r5, #0]
 80081b2:	0635      	lsls	r5, r6, #24
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	d501      	bpl.n	80081bc <_printf_i+0x1c4>
 80081b8:	6019      	str	r1, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <_printf_i+0x1ca>
 80081bc:	0670      	lsls	r0, r6, #25
 80081be:	d5fb      	bpl.n	80081b8 <_printf_i+0x1c0>
 80081c0:	8019      	strh	r1, [r3, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	4615      	mov	r5, r2
 80081c8:	e7bc      	b.n	8008144 <_printf_i+0x14c>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	602a      	str	r2, [r5, #0]
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	6862      	ldr	r2, [r4, #4]
 80081d4:	2100      	movs	r1, #0
 80081d6:	4628      	mov	r0, r5
 80081d8:	f7f8 f802 	bl	80001e0 <memchr>
 80081dc:	b108      	cbz	r0, 80081e2 <_printf_i+0x1ea>
 80081de:	1b40      	subs	r0, r0, r5
 80081e0:	6060      	str	r0, [r4, #4]
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	6123      	str	r3, [r4, #16]
 80081e6:	2300      	movs	r3, #0
 80081e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ec:	e7aa      	b.n	8008144 <_printf_i+0x14c>
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	462a      	mov	r2, r5
 80081f2:	4649      	mov	r1, r9
 80081f4:	4640      	mov	r0, r8
 80081f6:	47d0      	blx	sl
 80081f8:	3001      	adds	r0, #1
 80081fa:	d0ad      	beq.n	8008158 <_printf_i+0x160>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	079b      	lsls	r3, r3, #30
 8008200:	d413      	bmi.n	800822a <_printf_i+0x232>
 8008202:	68e0      	ldr	r0, [r4, #12]
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	4298      	cmp	r0, r3
 8008208:	bfb8      	it	lt
 800820a:	4618      	movlt	r0, r3
 800820c:	e7a6      	b.n	800815c <_printf_i+0x164>
 800820e:	2301      	movs	r3, #1
 8008210:	4632      	mov	r2, r6
 8008212:	4649      	mov	r1, r9
 8008214:	4640      	mov	r0, r8
 8008216:	47d0      	blx	sl
 8008218:	3001      	adds	r0, #1
 800821a:	d09d      	beq.n	8008158 <_printf_i+0x160>
 800821c:	3501      	adds	r5, #1
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	9903      	ldr	r1, [sp, #12]
 8008222:	1a5b      	subs	r3, r3, r1
 8008224:	42ab      	cmp	r3, r5
 8008226:	dcf2      	bgt.n	800820e <_printf_i+0x216>
 8008228:	e7eb      	b.n	8008202 <_printf_i+0x20a>
 800822a:	2500      	movs	r5, #0
 800822c:	f104 0619 	add.w	r6, r4, #25
 8008230:	e7f5      	b.n	800821e <_printf_i+0x226>
 8008232:	bf00      	nop
 8008234:	0800af36 	.word	0x0800af36
 8008238:	0800af47 	.word	0x0800af47

0800823c <std>:
 800823c:	2300      	movs	r3, #0
 800823e:	b510      	push	{r4, lr}
 8008240:	4604      	mov	r4, r0
 8008242:	e9c0 3300 	strd	r3, r3, [r0]
 8008246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800824a:	6083      	str	r3, [r0, #8]
 800824c:	8181      	strh	r1, [r0, #12]
 800824e:	6643      	str	r3, [r0, #100]	; 0x64
 8008250:	81c2      	strh	r2, [r0, #14]
 8008252:	6183      	str	r3, [r0, #24]
 8008254:	4619      	mov	r1, r3
 8008256:	2208      	movs	r2, #8
 8008258:	305c      	adds	r0, #92	; 0x5c
 800825a:	f000 f8d1 	bl	8008400 <memset>
 800825e:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <std+0x58>)
 8008260:	6263      	str	r3, [r4, #36]	; 0x24
 8008262:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <std+0x5c>)
 8008264:	62a3      	str	r3, [r4, #40]	; 0x28
 8008266:	4b0d      	ldr	r3, [pc, #52]	; (800829c <std+0x60>)
 8008268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800826a:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <std+0x64>)
 800826c:	6323      	str	r3, [r4, #48]	; 0x30
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <std+0x68>)
 8008270:	6224      	str	r4, [r4, #32]
 8008272:	429c      	cmp	r4, r3
 8008274:	d006      	beq.n	8008284 <std+0x48>
 8008276:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800827a:	4294      	cmp	r4, r2
 800827c:	d002      	beq.n	8008284 <std+0x48>
 800827e:	33d0      	adds	r3, #208	; 0xd0
 8008280:	429c      	cmp	r4, r3
 8008282:	d105      	bne.n	8008290 <std+0x54>
 8008284:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828c:	f000 b8ee 	b.w	800846c <__retarget_lock_init_recursive>
 8008290:	bd10      	pop	{r4, pc}
 8008292:	bf00      	nop
 8008294:	08009df1 	.word	0x08009df1
 8008298:	08009e13 	.word	0x08009e13
 800829c:	08009e4b 	.word	0x08009e4b
 80082a0:	08009e6f 	.word	0x08009e6f
 80082a4:	20002eec 	.word	0x20002eec

080082a8 <stdio_exit_handler>:
 80082a8:	4a02      	ldr	r2, [pc, #8]	; (80082b4 <stdio_exit_handler+0xc>)
 80082aa:	4903      	ldr	r1, [pc, #12]	; (80082b8 <stdio_exit_handler+0x10>)
 80082ac:	4803      	ldr	r0, [pc, #12]	; (80082bc <stdio_exit_handler+0x14>)
 80082ae:	f000 b869 	b.w	8008384 <_fwalk_sglue>
 80082b2:	bf00      	nop
 80082b4:	2000008c 	.word	0x2000008c
 80082b8:	08009691 	.word	0x08009691
 80082bc:	20000098 	.word	0x20000098

080082c0 <cleanup_stdio>:
 80082c0:	6841      	ldr	r1, [r0, #4]
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <cleanup_stdio+0x34>)
 80082c4:	4299      	cmp	r1, r3
 80082c6:	b510      	push	{r4, lr}
 80082c8:	4604      	mov	r4, r0
 80082ca:	d001      	beq.n	80082d0 <cleanup_stdio+0x10>
 80082cc:	f001 f9e0 	bl	8009690 <_fflush_r>
 80082d0:	68a1      	ldr	r1, [r4, #8]
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <cleanup_stdio+0x38>)
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d002      	beq.n	80082de <cleanup_stdio+0x1e>
 80082d8:	4620      	mov	r0, r4
 80082da:	f001 f9d9 	bl	8009690 <_fflush_r>
 80082de:	68e1      	ldr	r1, [r4, #12]
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <cleanup_stdio+0x3c>)
 80082e2:	4299      	cmp	r1, r3
 80082e4:	d004      	beq.n	80082f0 <cleanup_stdio+0x30>
 80082e6:	4620      	mov	r0, r4
 80082e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ec:	f001 b9d0 	b.w	8009690 <_fflush_r>
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	bf00      	nop
 80082f4:	20002eec 	.word	0x20002eec
 80082f8:	20002f54 	.word	0x20002f54
 80082fc:	20002fbc 	.word	0x20002fbc

08008300 <global_stdio_init.part.0>:
 8008300:	b510      	push	{r4, lr}
 8008302:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <global_stdio_init.part.0+0x30>)
 8008304:	4c0b      	ldr	r4, [pc, #44]	; (8008334 <global_stdio_init.part.0+0x34>)
 8008306:	4a0c      	ldr	r2, [pc, #48]	; (8008338 <global_stdio_init.part.0+0x38>)
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	4620      	mov	r0, r4
 800830c:	2200      	movs	r2, #0
 800830e:	2104      	movs	r1, #4
 8008310:	f7ff ff94 	bl	800823c <std>
 8008314:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008318:	2201      	movs	r2, #1
 800831a:	2109      	movs	r1, #9
 800831c:	f7ff ff8e 	bl	800823c <std>
 8008320:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008324:	2202      	movs	r2, #2
 8008326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832a:	2112      	movs	r1, #18
 800832c:	f7ff bf86 	b.w	800823c <std>
 8008330:	20003024 	.word	0x20003024
 8008334:	20002eec 	.word	0x20002eec
 8008338:	080082a9 	.word	0x080082a9

0800833c <__sfp_lock_acquire>:
 800833c:	4801      	ldr	r0, [pc, #4]	; (8008344 <__sfp_lock_acquire+0x8>)
 800833e:	f000 b896 	b.w	800846e <__retarget_lock_acquire_recursive>
 8008342:	bf00      	nop
 8008344:	20003029 	.word	0x20003029

08008348 <__sfp_lock_release>:
 8008348:	4801      	ldr	r0, [pc, #4]	; (8008350 <__sfp_lock_release+0x8>)
 800834a:	f000 b891 	b.w	8008470 <__retarget_lock_release_recursive>
 800834e:	bf00      	nop
 8008350:	20003029 	.word	0x20003029

08008354 <__sinit>:
 8008354:	b510      	push	{r4, lr}
 8008356:	4604      	mov	r4, r0
 8008358:	f7ff fff0 	bl	800833c <__sfp_lock_acquire>
 800835c:	6a23      	ldr	r3, [r4, #32]
 800835e:	b11b      	cbz	r3, 8008368 <__sinit+0x14>
 8008360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008364:	f7ff bff0 	b.w	8008348 <__sfp_lock_release>
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <__sinit+0x28>)
 800836a:	6223      	str	r3, [r4, #32]
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <__sinit+0x2c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f5      	bne.n	8008360 <__sinit+0xc>
 8008374:	f7ff ffc4 	bl	8008300 <global_stdio_init.part.0>
 8008378:	e7f2      	b.n	8008360 <__sinit+0xc>
 800837a:	bf00      	nop
 800837c:	080082c1 	.word	0x080082c1
 8008380:	20003024 	.word	0x20003024

08008384 <_fwalk_sglue>:
 8008384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008388:	4607      	mov	r7, r0
 800838a:	4688      	mov	r8, r1
 800838c:	4614      	mov	r4, r2
 800838e:	2600      	movs	r6, #0
 8008390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008394:	f1b9 0901 	subs.w	r9, r9, #1
 8008398:	d505      	bpl.n	80083a6 <_fwalk_sglue+0x22>
 800839a:	6824      	ldr	r4, [r4, #0]
 800839c:	2c00      	cmp	r4, #0
 800839e:	d1f7      	bne.n	8008390 <_fwalk_sglue+0xc>
 80083a0:	4630      	mov	r0, r6
 80083a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d907      	bls.n	80083bc <_fwalk_sglue+0x38>
 80083ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083b0:	3301      	adds	r3, #1
 80083b2:	d003      	beq.n	80083bc <_fwalk_sglue+0x38>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4638      	mov	r0, r7
 80083b8:	47c0      	blx	r8
 80083ba:	4306      	orrs	r6, r0
 80083bc:	3568      	adds	r5, #104	; 0x68
 80083be:	e7e9      	b.n	8008394 <_fwalk_sglue+0x10>

080083c0 <_vsiprintf_r>:
 80083c0:	b500      	push	{lr}
 80083c2:	b09b      	sub	sp, #108	; 0x6c
 80083c4:	9100      	str	r1, [sp, #0]
 80083c6:	9104      	str	r1, [sp, #16]
 80083c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083cc:	9105      	str	r1, [sp, #20]
 80083ce:	9102      	str	r1, [sp, #8]
 80083d0:	4905      	ldr	r1, [pc, #20]	; (80083e8 <_vsiprintf_r+0x28>)
 80083d2:	9103      	str	r1, [sp, #12]
 80083d4:	4669      	mov	r1, sp
 80083d6:	f000 ff2f 	bl	8009238 <_svfiprintf_r>
 80083da:	9b00      	ldr	r3, [sp, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	b01b      	add	sp, #108	; 0x6c
 80083e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80083e6:	bf00      	nop
 80083e8:	ffff0208 	.word	0xffff0208

080083ec <vsiprintf>:
 80083ec:	4613      	mov	r3, r2
 80083ee:	460a      	mov	r2, r1
 80083f0:	4601      	mov	r1, r0
 80083f2:	4802      	ldr	r0, [pc, #8]	; (80083fc <vsiprintf+0x10>)
 80083f4:	6800      	ldr	r0, [r0, #0]
 80083f6:	f7ff bfe3 	b.w	80083c0 <_vsiprintf_r>
 80083fa:	bf00      	nop
 80083fc:	200000e4 	.word	0x200000e4

08008400 <memset>:
 8008400:	4402      	add	r2, r0
 8008402:	4603      	mov	r3, r0
 8008404:	4293      	cmp	r3, r2
 8008406:	d100      	bne.n	800840a <memset+0xa>
 8008408:	4770      	bx	lr
 800840a:	f803 1b01 	strb.w	r1, [r3], #1
 800840e:	e7f9      	b.n	8008404 <memset+0x4>

08008410 <_localeconv_r>:
 8008410:	4800      	ldr	r0, [pc, #0]	; (8008414 <_localeconv_r+0x4>)
 8008412:	4770      	bx	lr
 8008414:	200001d8 	.word	0x200001d8

08008418 <__errno>:
 8008418:	4b01      	ldr	r3, [pc, #4]	; (8008420 <__errno+0x8>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	200000e4 	.word	0x200000e4

08008424 <__libc_init_array>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4d0d      	ldr	r5, [pc, #52]	; (800845c <__libc_init_array+0x38>)
 8008428:	4c0d      	ldr	r4, [pc, #52]	; (8008460 <__libc_init_array+0x3c>)
 800842a:	1b64      	subs	r4, r4, r5
 800842c:	10a4      	asrs	r4, r4, #2
 800842e:	2600      	movs	r6, #0
 8008430:	42a6      	cmp	r6, r4
 8008432:	d109      	bne.n	8008448 <__libc_init_array+0x24>
 8008434:	4d0b      	ldr	r5, [pc, #44]	; (8008464 <__libc_init_array+0x40>)
 8008436:	4c0c      	ldr	r4, [pc, #48]	; (8008468 <__libc_init_array+0x44>)
 8008438:	f002 f91e 	bl	800a678 <_init>
 800843c:	1b64      	subs	r4, r4, r5
 800843e:	10a4      	asrs	r4, r4, #2
 8008440:	2600      	movs	r6, #0
 8008442:	42a6      	cmp	r6, r4
 8008444:	d105      	bne.n	8008452 <__libc_init_array+0x2e>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	f855 3b04 	ldr.w	r3, [r5], #4
 800844c:	4798      	blx	r3
 800844e:	3601      	adds	r6, #1
 8008450:	e7ee      	b.n	8008430 <__libc_init_array+0xc>
 8008452:	f855 3b04 	ldr.w	r3, [r5], #4
 8008456:	4798      	blx	r3
 8008458:	3601      	adds	r6, #1
 800845a:	e7f2      	b.n	8008442 <__libc_init_array+0x1e>
 800845c:	0800b29c 	.word	0x0800b29c
 8008460:	0800b29c 	.word	0x0800b29c
 8008464:	0800b29c 	.word	0x0800b29c
 8008468:	0800b2a0 	.word	0x0800b2a0

0800846c <__retarget_lock_init_recursive>:
 800846c:	4770      	bx	lr

0800846e <__retarget_lock_acquire_recursive>:
 800846e:	4770      	bx	lr

08008470 <__retarget_lock_release_recursive>:
 8008470:	4770      	bx	lr

08008472 <memcpy>:
 8008472:	440a      	add	r2, r1
 8008474:	4291      	cmp	r1, r2
 8008476:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800847a:	d100      	bne.n	800847e <memcpy+0xc>
 800847c:	4770      	bx	lr
 800847e:	b510      	push	{r4, lr}
 8008480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008488:	4291      	cmp	r1, r2
 800848a:	d1f9      	bne.n	8008480 <memcpy+0xe>
 800848c:	bd10      	pop	{r4, pc}

0800848e <quorem>:
 800848e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008492:	6903      	ldr	r3, [r0, #16]
 8008494:	690c      	ldr	r4, [r1, #16]
 8008496:	42a3      	cmp	r3, r4
 8008498:	4607      	mov	r7, r0
 800849a:	db7e      	blt.n	800859a <quorem+0x10c>
 800849c:	3c01      	subs	r4, #1
 800849e:	f101 0814 	add.w	r8, r1, #20
 80084a2:	f100 0514 	add.w	r5, r0, #20
 80084a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084b4:	3301      	adds	r3, #1
 80084b6:	429a      	cmp	r2, r3
 80084b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80084c4:	d331      	bcc.n	800852a <quorem+0x9c>
 80084c6:	f04f 0e00 	mov.w	lr, #0
 80084ca:	4640      	mov	r0, r8
 80084cc:	46ac      	mov	ip, r5
 80084ce:	46f2      	mov	sl, lr
 80084d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80084d4:	b293      	uxth	r3, r2
 80084d6:	fb06 e303 	mla	r3, r6, r3, lr
 80084da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084de:	0c1a      	lsrs	r2, r3, #16
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	ebaa 0303 	sub.w	r3, sl, r3
 80084e6:	f8dc a000 	ldr.w	sl, [ip]
 80084ea:	fa13 f38a 	uxtah	r3, r3, sl
 80084ee:	fb06 220e 	mla	r2, r6, lr, r2
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084fa:	b292      	uxth	r2, r2
 80084fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008504:	f8bd 3000 	ldrh.w	r3, [sp]
 8008508:	4581      	cmp	r9, r0
 800850a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850e:	f84c 3b04 	str.w	r3, [ip], #4
 8008512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008516:	d2db      	bcs.n	80084d0 <quorem+0x42>
 8008518:	f855 300b 	ldr.w	r3, [r5, fp]
 800851c:	b92b      	cbnz	r3, 800852a <quorem+0x9c>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	3b04      	subs	r3, #4
 8008522:	429d      	cmp	r5, r3
 8008524:	461a      	mov	r2, r3
 8008526:	d32c      	bcc.n	8008582 <quorem+0xf4>
 8008528:	613c      	str	r4, [r7, #16]
 800852a:	4638      	mov	r0, r7
 800852c:	f001 fb60 	bl	8009bf0 <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	db22      	blt.n	800857a <quorem+0xec>
 8008534:	3601      	adds	r6, #1
 8008536:	4629      	mov	r1, r5
 8008538:	2000      	movs	r0, #0
 800853a:	f858 2b04 	ldr.w	r2, [r8], #4
 800853e:	f8d1 c000 	ldr.w	ip, [r1]
 8008542:	b293      	uxth	r3, r2
 8008544:	1ac3      	subs	r3, r0, r3
 8008546:	0c12      	lsrs	r2, r2, #16
 8008548:	fa13 f38c 	uxtah	r3, r3, ip
 800854c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855a:	45c1      	cmp	r9, r8
 800855c:	f841 3b04 	str.w	r3, [r1], #4
 8008560:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008564:	d2e9      	bcs.n	800853a <quorem+0xac>
 8008566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800856a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800856e:	b922      	cbnz	r2, 800857a <quorem+0xec>
 8008570:	3b04      	subs	r3, #4
 8008572:	429d      	cmp	r5, r3
 8008574:	461a      	mov	r2, r3
 8008576:	d30a      	bcc.n	800858e <quorem+0x100>
 8008578:	613c      	str	r4, [r7, #16]
 800857a:	4630      	mov	r0, r6
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	3b04      	subs	r3, #4
 8008586:	2a00      	cmp	r2, #0
 8008588:	d1ce      	bne.n	8008528 <quorem+0x9a>
 800858a:	3c01      	subs	r4, #1
 800858c:	e7c9      	b.n	8008522 <quorem+0x94>
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	3b04      	subs	r3, #4
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1f0      	bne.n	8008578 <quorem+0xea>
 8008596:	3c01      	subs	r4, #1
 8008598:	e7eb      	b.n	8008572 <quorem+0xe4>
 800859a:	2000      	movs	r0, #0
 800859c:	e7ee      	b.n	800857c <quorem+0xee>
	...

080085a0 <_dtoa_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	ed2d 8b04 	vpush	{d8-d9}
 80085a8:	69c5      	ldr	r5, [r0, #28]
 80085aa:	b093      	sub	sp, #76	; 0x4c
 80085ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085b0:	ec57 6b10 	vmov	r6, r7, d0
 80085b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085b8:	9107      	str	r1, [sp, #28]
 80085ba:	4604      	mov	r4, r0
 80085bc:	920a      	str	r2, [sp, #40]	; 0x28
 80085be:	930d      	str	r3, [sp, #52]	; 0x34
 80085c0:	b975      	cbnz	r5, 80085e0 <_dtoa_r+0x40>
 80085c2:	2010      	movs	r0, #16
 80085c4:	f000 ff36 	bl	8009434 <malloc>
 80085c8:	4602      	mov	r2, r0
 80085ca:	61e0      	str	r0, [r4, #28]
 80085cc:	b920      	cbnz	r0, 80085d8 <_dtoa_r+0x38>
 80085ce:	4bae      	ldr	r3, [pc, #696]	; (8008888 <_dtoa_r+0x2e8>)
 80085d0:	21ef      	movs	r1, #239	; 0xef
 80085d2:	48ae      	ldr	r0, [pc, #696]	; (800888c <_dtoa_r+0x2ec>)
 80085d4:	f001 fcee 	bl	8009fb4 <__assert_func>
 80085d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085dc:	6005      	str	r5, [r0, #0]
 80085de:	60c5      	str	r5, [r0, #12]
 80085e0:	69e3      	ldr	r3, [r4, #28]
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	b151      	cbz	r1, 80085fc <_dtoa_r+0x5c>
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	604a      	str	r2, [r1, #4]
 80085ea:	2301      	movs	r3, #1
 80085ec:	4093      	lsls	r3, r2
 80085ee:	608b      	str	r3, [r1, #8]
 80085f0:	4620      	mov	r0, r4
 80085f2:	f001 f8c1 	bl	8009778 <_Bfree>
 80085f6:	69e3      	ldr	r3, [r4, #28]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	1e3b      	subs	r3, r7, #0
 80085fe:	bfbb      	ittet	lt
 8008600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008604:	9303      	strlt	r3, [sp, #12]
 8008606:	2300      	movge	r3, #0
 8008608:	2201      	movlt	r2, #1
 800860a:	bfac      	ite	ge
 800860c:	f8c8 3000 	strge.w	r3, [r8]
 8008610:	f8c8 2000 	strlt.w	r2, [r8]
 8008614:	4b9e      	ldr	r3, [pc, #632]	; (8008890 <_dtoa_r+0x2f0>)
 8008616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800861a:	ea33 0308 	bics.w	r3, r3, r8
 800861e:	d11b      	bne.n	8008658 <_dtoa_r+0xb8>
 8008620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008622:	f242 730f 	movw	r3, #9999	; 0x270f
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800862c:	4333      	orrs	r3, r6
 800862e:	f000 8593 	beq.w	8009158 <_dtoa_r+0xbb8>
 8008632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008634:	b963      	cbnz	r3, 8008650 <_dtoa_r+0xb0>
 8008636:	4b97      	ldr	r3, [pc, #604]	; (8008894 <_dtoa_r+0x2f4>)
 8008638:	e027      	b.n	800868a <_dtoa_r+0xea>
 800863a:	4b97      	ldr	r3, [pc, #604]	; (8008898 <_dtoa_r+0x2f8>)
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	9800      	ldr	r0, [sp, #0]
 8008646:	b013      	add	sp, #76	; 0x4c
 8008648:	ecbd 8b04 	vpop	{d8-d9}
 800864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008650:	4b90      	ldr	r3, [pc, #576]	; (8008894 <_dtoa_r+0x2f4>)
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	3303      	adds	r3, #3
 8008656:	e7f3      	b.n	8008640 <_dtoa_r+0xa0>
 8008658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	ec51 0b17 	vmov	r0, r1, d7
 8008662:	eeb0 8a47 	vmov.f32	s16, s14
 8008666:	eef0 8a67 	vmov.f32	s17, s15
 800866a:	2300      	movs	r3, #0
 800866c:	f7f8 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8008670:	4681      	mov	r9, r0
 8008672:	b160      	cbz	r0, 800868e <_dtoa_r+0xee>
 8008674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008676:	2301      	movs	r3, #1
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8568 	beq.w	8009152 <_dtoa_r+0xbb2>
 8008682:	4b86      	ldr	r3, [pc, #536]	; (800889c <_dtoa_r+0x2fc>)
 8008684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	e7da      	b.n	8008644 <_dtoa_r+0xa4>
 800868e:	aa10      	add	r2, sp, #64	; 0x40
 8008690:	a911      	add	r1, sp, #68	; 0x44
 8008692:	4620      	mov	r0, r4
 8008694:	eeb0 0a48 	vmov.f32	s0, s16
 8008698:	eef0 0a68 	vmov.f32	s1, s17
 800869c:	f001 fb4e 	bl	8009d3c <__d2b>
 80086a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086a4:	4682      	mov	sl, r0
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	d07f      	beq.n	80087aa <_dtoa_r+0x20a>
 80086aa:	ee18 3a90 	vmov	r3, s17
 80086ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086b6:	ec51 0b18 	vmov	r0, r1, d8
 80086ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086c6:	4619      	mov	r1, r3
 80086c8:	2200      	movs	r2, #0
 80086ca:	4b75      	ldr	r3, [pc, #468]	; (80088a0 <_dtoa_r+0x300>)
 80086cc:	f7f7 fde4 	bl	8000298 <__aeabi_dsub>
 80086d0:	a367      	add	r3, pc, #412	; (adr r3, 8008870 <_dtoa_r+0x2d0>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 ff97 	bl	8000608 <__aeabi_dmul>
 80086da:	a367      	add	r3, pc, #412	; (adr r3, 8008878 <_dtoa_r+0x2d8>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fddc 	bl	800029c <__adddf3>
 80086e4:	4606      	mov	r6, r0
 80086e6:	4628      	mov	r0, r5
 80086e8:	460f      	mov	r7, r1
 80086ea:	f7f7 ff23 	bl	8000534 <__aeabi_i2d>
 80086ee:	a364      	add	r3, pc, #400	; (adr r3, 8008880 <_dtoa_r+0x2e0>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 ff88 	bl	8000608 <__aeabi_dmul>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	f7f8 fa2e 	bl	8000b68 <__aeabi_d2iz>
 800870c:	2200      	movs	r2, #0
 800870e:	4683      	mov	fp, r0
 8008710:	2300      	movs	r3, #0
 8008712:	4630      	mov	r0, r6
 8008714:	4639      	mov	r1, r7
 8008716:	f7f8 f9e9 	bl	8000aec <__aeabi_dcmplt>
 800871a:	b148      	cbz	r0, 8008730 <_dtoa_r+0x190>
 800871c:	4658      	mov	r0, fp
 800871e:	f7f7 ff09 	bl	8000534 <__aeabi_i2d>
 8008722:	4632      	mov	r2, r6
 8008724:	463b      	mov	r3, r7
 8008726:	f7f8 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800872a:	b908      	cbnz	r0, 8008730 <_dtoa_r+0x190>
 800872c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008730:	f1bb 0f16 	cmp.w	fp, #22
 8008734:	d857      	bhi.n	80087e6 <_dtoa_r+0x246>
 8008736:	4b5b      	ldr	r3, [pc, #364]	; (80088a4 <_dtoa_r+0x304>)
 8008738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	ec51 0b18 	vmov	r0, r1, d8
 8008744:	f7f8 f9d2 	bl	8000aec <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	d04e      	beq.n	80087ea <_dtoa_r+0x24a>
 800874c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008750:	2300      	movs	r3, #0
 8008752:	930c      	str	r3, [sp, #48]	; 0x30
 8008754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008756:	1b5b      	subs	r3, r3, r5
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	bf45      	ittet	mi
 800875c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008760:	9305      	strmi	r3, [sp, #20]
 8008762:	2300      	movpl	r3, #0
 8008764:	2300      	movmi	r3, #0
 8008766:	9206      	str	r2, [sp, #24]
 8008768:	bf54      	ite	pl
 800876a:	9305      	strpl	r3, [sp, #20]
 800876c:	9306      	strmi	r3, [sp, #24]
 800876e:	f1bb 0f00 	cmp.w	fp, #0
 8008772:	db3c      	blt.n	80087ee <_dtoa_r+0x24e>
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800877a:	445b      	add	r3, fp
 800877c:	9306      	str	r3, [sp, #24]
 800877e:	2300      	movs	r3, #0
 8008780:	9308      	str	r3, [sp, #32]
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	2b09      	cmp	r3, #9
 8008786:	d868      	bhi.n	800885a <_dtoa_r+0x2ba>
 8008788:	2b05      	cmp	r3, #5
 800878a:	bfc4      	itt	gt
 800878c:	3b04      	subgt	r3, #4
 800878e:	9307      	strgt	r3, [sp, #28]
 8008790:	9b07      	ldr	r3, [sp, #28]
 8008792:	f1a3 0302 	sub.w	r3, r3, #2
 8008796:	bfcc      	ite	gt
 8008798:	2500      	movgt	r5, #0
 800879a:	2501      	movle	r5, #1
 800879c:	2b03      	cmp	r3, #3
 800879e:	f200 8085 	bhi.w	80088ac <_dtoa_r+0x30c>
 80087a2:	e8df f003 	tbb	[pc, r3]
 80087a6:	3b2e      	.short	0x3b2e
 80087a8:	5839      	.short	0x5839
 80087aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087ae:	441d      	add	r5, r3
 80087b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087b4:	2b20      	cmp	r3, #32
 80087b6:	bfc1      	itttt	gt
 80087b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80087c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087c8:	bfd6      	itet	le
 80087ca:	f1c3 0320 	rsble	r3, r3, #32
 80087ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80087d2:	fa06 f003 	lslle.w	r0, r6, r3
 80087d6:	f7f7 fe9d 	bl	8000514 <__aeabi_ui2d>
 80087da:	2201      	movs	r2, #1
 80087dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087e0:	3d01      	subs	r5, #1
 80087e2:	920e      	str	r2, [sp, #56]	; 0x38
 80087e4:	e76f      	b.n	80086c6 <_dtoa_r+0x126>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e7b3      	b.n	8008752 <_dtoa_r+0x1b2>
 80087ea:	900c      	str	r0, [sp, #48]	; 0x30
 80087ec:	e7b2      	b.n	8008754 <_dtoa_r+0x1b4>
 80087ee:	9b05      	ldr	r3, [sp, #20]
 80087f0:	eba3 030b 	sub.w	r3, r3, fp
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f1cb 0300 	rsb	r3, fp, #0
 80087fa:	9308      	str	r3, [sp, #32]
 80087fc:	2300      	movs	r3, #0
 80087fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008800:	e7bf      	b.n	8008782 <_dtoa_r+0x1e2>
 8008802:	2300      	movs	r3, #0
 8008804:	9309      	str	r3, [sp, #36]	; 0x24
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	2b00      	cmp	r3, #0
 800880a:	dc52      	bgt.n	80088b2 <_dtoa_r+0x312>
 800880c:	2301      	movs	r3, #1
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	461a      	mov	r2, r3
 8008814:	920a      	str	r2, [sp, #40]	; 0x28
 8008816:	e00b      	b.n	8008830 <_dtoa_r+0x290>
 8008818:	2301      	movs	r3, #1
 800881a:	e7f3      	b.n	8008804 <_dtoa_r+0x264>
 800881c:	2300      	movs	r3, #0
 800881e:	9309      	str	r3, [sp, #36]	; 0x24
 8008820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008822:	445b      	add	r3, fp
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	3301      	adds	r3, #1
 8008828:	2b01      	cmp	r3, #1
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	bfb8      	it	lt
 800882e:	2301      	movlt	r3, #1
 8008830:	69e0      	ldr	r0, [r4, #28]
 8008832:	2100      	movs	r1, #0
 8008834:	2204      	movs	r2, #4
 8008836:	f102 0614 	add.w	r6, r2, #20
 800883a:	429e      	cmp	r6, r3
 800883c:	d93d      	bls.n	80088ba <_dtoa_r+0x31a>
 800883e:	6041      	str	r1, [r0, #4]
 8008840:	4620      	mov	r0, r4
 8008842:	f000 ff59 	bl	80096f8 <_Balloc>
 8008846:	9000      	str	r0, [sp, #0]
 8008848:	2800      	cmp	r0, #0
 800884a:	d139      	bne.n	80088c0 <_dtoa_r+0x320>
 800884c:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <_dtoa_r+0x308>)
 800884e:	4602      	mov	r2, r0
 8008850:	f240 11af 	movw	r1, #431	; 0x1af
 8008854:	e6bd      	b.n	80085d2 <_dtoa_r+0x32>
 8008856:	2301      	movs	r3, #1
 8008858:	e7e1      	b.n	800881e <_dtoa_r+0x27e>
 800885a:	2501      	movs	r5, #1
 800885c:	2300      	movs	r3, #0
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	9509      	str	r5, [sp, #36]	; 0x24
 8008862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	2200      	movs	r2, #0
 800886c:	2312      	movs	r3, #18
 800886e:	e7d1      	b.n	8008814 <_dtoa_r+0x274>
 8008870:	636f4361 	.word	0x636f4361
 8008874:	3fd287a7 	.word	0x3fd287a7
 8008878:	8b60c8b3 	.word	0x8b60c8b3
 800887c:	3fc68a28 	.word	0x3fc68a28
 8008880:	509f79fb 	.word	0x509f79fb
 8008884:	3fd34413 	.word	0x3fd34413
 8008888:	0800af65 	.word	0x0800af65
 800888c:	0800af7c 	.word	0x0800af7c
 8008890:	7ff00000 	.word	0x7ff00000
 8008894:	0800af61 	.word	0x0800af61
 8008898:	0800af58 	.word	0x0800af58
 800889c:	0800af35 	.word	0x0800af35
 80088a0:	3ff80000 	.word	0x3ff80000
 80088a4:	0800b078 	.word	0x0800b078
 80088a8:	0800afd4 	.word	0x0800afd4
 80088ac:	2301      	movs	r3, #1
 80088ae:	9309      	str	r3, [sp, #36]	; 0x24
 80088b0:	e7d7      	b.n	8008862 <_dtoa_r+0x2c2>
 80088b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	9304      	str	r3, [sp, #16]
 80088b8:	e7ba      	b.n	8008830 <_dtoa_r+0x290>
 80088ba:	3101      	adds	r1, #1
 80088bc:	0052      	lsls	r2, r2, #1
 80088be:	e7ba      	b.n	8008836 <_dtoa_r+0x296>
 80088c0:	69e3      	ldr	r3, [r4, #28]
 80088c2:	9a00      	ldr	r2, [sp, #0]
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	2b0e      	cmp	r3, #14
 80088ca:	f200 80a8 	bhi.w	8008a1e <_dtoa_r+0x47e>
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	f000 80a5 	beq.w	8008a1e <_dtoa_r+0x47e>
 80088d4:	f1bb 0f00 	cmp.w	fp, #0
 80088d8:	dd38      	ble.n	800894c <_dtoa_r+0x3ac>
 80088da:	4bc0      	ldr	r3, [pc, #768]	; (8008bdc <_dtoa_r+0x63c>)
 80088dc:	f00b 020f 	and.w	r2, fp, #15
 80088e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80088f0:	d019      	beq.n	8008926 <_dtoa_r+0x386>
 80088f2:	4bbb      	ldr	r3, [pc, #748]	; (8008be0 <_dtoa_r+0x640>)
 80088f4:	ec51 0b18 	vmov	r0, r1, d8
 80088f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088fc:	f7f7 ffae 	bl	800085c <__aeabi_ddiv>
 8008900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008904:	f008 080f 	and.w	r8, r8, #15
 8008908:	2503      	movs	r5, #3
 800890a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008be0 <_dtoa_r+0x640>
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	d10a      	bne.n	800892a <_dtoa_r+0x38a>
 8008914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008918:	4632      	mov	r2, r6
 800891a:	463b      	mov	r3, r7
 800891c:	f7f7 ff9e 	bl	800085c <__aeabi_ddiv>
 8008920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008924:	e02b      	b.n	800897e <_dtoa_r+0x3de>
 8008926:	2502      	movs	r5, #2
 8008928:	e7ef      	b.n	800890a <_dtoa_r+0x36a>
 800892a:	f018 0f01 	tst.w	r8, #1
 800892e:	d008      	beq.n	8008942 <_dtoa_r+0x3a2>
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008938:	f7f7 fe66 	bl	8000608 <__aeabi_dmul>
 800893c:	3501      	adds	r5, #1
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008946:	f109 0908 	add.w	r9, r9, #8
 800894a:	e7e0      	b.n	800890e <_dtoa_r+0x36e>
 800894c:	f000 809f 	beq.w	8008a8e <_dtoa_r+0x4ee>
 8008950:	f1cb 0600 	rsb	r6, fp, #0
 8008954:	4ba1      	ldr	r3, [pc, #644]	; (8008bdc <_dtoa_r+0x63c>)
 8008956:	4fa2      	ldr	r7, [pc, #648]	; (8008be0 <_dtoa_r+0x640>)
 8008958:	f006 020f 	and.w	r2, r6, #15
 800895c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	ec51 0b18 	vmov	r0, r1, d8
 8008968:	f7f7 fe4e 	bl	8000608 <__aeabi_dmul>
 800896c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008970:	1136      	asrs	r6, r6, #4
 8008972:	2300      	movs	r3, #0
 8008974:	2502      	movs	r5, #2
 8008976:	2e00      	cmp	r6, #0
 8008978:	d17e      	bne.n	8008a78 <_dtoa_r+0x4d8>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1d0      	bne.n	8008920 <_dtoa_r+0x380>
 800897e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008980:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8084 	beq.w	8008a92 <_dtoa_r+0x4f2>
 800898a:	4b96      	ldr	r3, [pc, #600]	; (8008be4 <_dtoa_r+0x644>)
 800898c:	2200      	movs	r2, #0
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f8 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d07b      	beq.n	8008a92 <_dtoa_r+0x4f2>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d078      	beq.n	8008a92 <_dtoa_r+0x4f2>
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd39      	ble.n	8008a1a <_dtoa_r+0x47a>
 80089a6:	4b90      	ldr	r3, [pc, #576]	; (8008be8 <_dtoa_r+0x648>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	f7f7 fe2b 	bl	8000608 <__aeabi_dmul>
 80089b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089b6:	9e01      	ldr	r6, [sp, #4]
 80089b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80089bc:	3501      	adds	r5, #1
 80089be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089c2:	4628      	mov	r0, r5
 80089c4:	f7f7 fdb6 	bl	8000534 <__aeabi_i2d>
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	f7f7 fe1c 	bl	8000608 <__aeabi_dmul>
 80089d0:	4b86      	ldr	r3, [pc, #536]	; (8008bec <_dtoa_r+0x64c>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	f7f7 fc62 	bl	800029c <__adddf3>
 80089d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d158      	bne.n	8008a98 <_dtoa_r+0x4f8>
 80089e6:	4b82      	ldr	r3, [pc, #520]	; (8008bf0 <_dtoa_r+0x650>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fc53 	bl	8000298 <__aeabi_dsub>
 80089f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089f6:	4680      	mov	r8, r0
 80089f8:	4689      	mov	r9, r1
 80089fa:	f7f8 f895 	bl	8000b28 <__aeabi_dcmpgt>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 8296 	bne.w	8008f30 <_dtoa_r+0x990>
 8008a04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a08:	4640      	mov	r0, r8
 8008a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f8 f86c 	bl	8000aec <__aeabi_dcmplt>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f040 8289 	bne.w	8008f2c <_dtoa_r+0x98c>
 8008a1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f2c0 814e 	blt.w	8008cc2 <_dtoa_r+0x722>
 8008a26:	f1bb 0f0e 	cmp.w	fp, #14
 8008a2a:	f300 814a 	bgt.w	8008cc2 <_dtoa_r+0x722>
 8008a2e:	4b6b      	ldr	r3, [pc, #428]	; (8008bdc <_dtoa_r+0x63c>)
 8008a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f280 80dc 	bge.w	8008bf8 <_dtoa_r+0x658>
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f300 80d8 	bgt.w	8008bf8 <_dtoa_r+0x658>
 8008a48:	f040 826f 	bne.w	8008f2a <_dtoa_r+0x98a>
 8008a4c:	4b68      	ldr	r3, [pc, #416]	; (8008bf0 <_dtoa_r+0x650>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fdd8 	bl	8000608 <__aeabi_dmul>
 8008a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a5c:	f7f8 f85a 	bl	8000b14 <__aeabi_dcmpge>
 8008a60:	9e04      	ldr	r6, [sp, #16]
 8008a62:	4637      	mov	r7, r6
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f040 8245 	bne.w	8008ef4 <_dtoa_r+0x954>
 8008a6a:	9d00      	ldr	r5, [sp, #0]
 8008a6c:	2331      	movs	r3, #49	; 0x31
 8008a6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008a72:	f10b 0b01 	add.w	fp, fp, #1
 8008a76:	e241      	b.n	8008efc <_dtoa_r+0x95c>
 8008a78:	07f2      	lsls	r2, r6, #31
 8008a7a:	d505      	bpl.n	8008a88 <_dtoa_r+0x4e8>
 8008a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a80:	f7f7 fdc2 	bl	8000608 <__aeabi_dmul>
 8008a84:	3501      	adds	r5, #1
 8008a86:	2301      	movs	r3, #1
 8008a88:	1076      	asrs	r6, r6, #1
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	e773      	b.n	8008976 <_dtoa_r+0x3d6>
 8008a8e:	2502      	movs	r5, #2
 8008a90:	e775      	b.n	800897e <_dtoa_r+0x3de>
 8008a92:	9e04      	ldr	r6, [sp, #16]
 8008a94:	465f      	mov	r7, fp
 8008a96:	e792      	b.n	80089be <_dtoa_r+0x41e>
 8008a98:	9900      	ldr	r1, [sp, #0]
 8008a9a:	4b50      	ldr	r3, [pc, #320]	; (8008bdc <_dtoa_r+0x63c>)
 8008a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aa0:	4431      	add	r1, r6
 8008aa2:	9102      	str	r1, [sp, #8]
 8008aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa6:	eeb0 9a47 	vmov.f32	s18, s14
 8008aaa:	eef0 9a67 	vmov.f32	s19, s15
 8008aae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	d044      	beq.n	8008b44 <_dtoa_r+0x5a4>
 8008aba:	494e      	ldr	r1, [pc, #312]	; (8008bf4 <_dtoa_r+0x654>)
 8008abc:	2000      	movs	r0, #0
 8008abe:	f7f7 fecd 	bl	800085c <__aeabi_ddiv>
 8008ac2:	ec53 2b19 	vmov	r2, r3, d9
 8008ac6:	f7f7 fbe7 	bl	8000298 <__aeabi_dsub>
 8008aca:	9d00      	ldr	r5, [sp, #0]
 8008acc:	ec41 0b19 	vmov	d9, r0, r1
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f7f8 f848 	bl	8000b68 <__aeabi_d2iz>
 8008ad8:	4606      	mov	r6, r0
 8008ada:	f7f7 fd2b 	bl	8000534 <__aeabi_i2d>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	f7f7 fbd7 	bl	8000298 <__aeabi_dsub>
 8008aea:	3630      	adds	r6, #48	; 0x30
 8008aec:	f805 6b01 	strb.w	r6, [r5], #1
 8008af0:	ec53 2b19 	vmov	r2, r3, d9
 8008af4:	4680      	mov	r8, r0
 8008af6:	4689      	mov	r9, r1
 8008af8:	f7f7 fff8 	bl	8000aec <__aeabi_dcmplt>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d164      	bne.n	8008bca <_dtoa_r+0x62a>
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	4937      	ldr	r1, [pc, #220]	; (8008be4 <_dtoa_r+0x644>)
 8008b06:	2000      	movs	r0, #0
 8008b08:	f7f7 fbc6 	bl	8000298 <__aeabi_dsub>
 8008b0c:	ec53 2b19 	vmov	r2, r3, d9
 8008b10:	f7f7 ffec 	bl	8000aec <__aeabi_dcmplt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f040 80b6 	bne.w	8008c86 <_dtoa_r+0x6e6>
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	429d      	cmp	r5, r3
 8008b1e:	f43f af7c 	beq.w	8008a1a <_dtoa_r+0x47a>
 8008b22:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <_dtoa_r+0x648>)
 8008b24:	ec51 0b19 	vmov	r0, r1, d9
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f7f7 fd6d 	bl	8000608 <__aeabi_dmul>
 8008b2e:	4b2e      	ldr	r3, [pc, #184]	; (8008be8 <_dtoa_r+0x648>)
 8008b30:	ec41 0b19 	vmov	d9, r0, r1
 8008b34:	2200      	movs	r2, #0
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	f7f7 fd65 	bl	8000608 <__aeabi_dmul>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	e7c5      	b.n	8008ad0 <_dtoa_r+0x530>
 8008b44:	ec51 0b17 	vmov	r0, r1, d7
 8008b48:	f7f7 fd5e 	bl	8000608 <__aeabi_dmul>
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	9d00      	ldr	r5, [sp, #0]
 8008b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b52:	ec41 0b19 	vmov	d9, r0, r1
 8008b56:	4649      	mov	r1, r9
 8008b58:	4640      	mov	r0, r8
 8008b5a:	f7f8 f805 	bl	8000b68 <__aeabi_d2iz>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	f7f7 fce8 	bl	8000534 <__aeabi_i2d>
 8008b64:	3630      	adds	r6, #48	; 0x30
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	f805 6b01 	strb.w	r6, [r5], #1
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	429d      	cmp	r5, r3
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	4689      	mov	r9, r1
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	d124      	bne.n	8008bce <_dtoa_r+0x62e>
 8008b84:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <_dtoa_r+0x654>)
 8008b86:	ec51 0b19 	vmov	r0, r1, d9
 8008b8a:	f7f7 fb87 	bl	800029c <__adddf3>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f7 ffc7 	bl	8000b28 <__aeabi_dcmpgt>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d173      	bne.n	8008c86 <_dtoa_r+0x6e6>
 8008b9e:	ec53 2b19 	vmov	r2, r3, d9
 8008ba2:	4914      	ldr	r1, [pc, #80]	; (8008bf4 <_dtoa_r+0x654>)
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f7f7 fb77 	bl	8000298 <__aeabi_dsub>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	f7f7 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f af2f 	beq.w	8008a1a <_dtoa_r+0x47a>
 8008bbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bbe:	1e6b      	subs	r3, r5, #1
 8008bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bc6:	2b30      	cmp	r3, #48	; 0x30
 8008bc8:	d0f8      	beq.n	8008bbc <_dtoa_r+0x61c>
 8008bca:	46bb      	mov	fp, r7
 8008bcc:	e04a      	b.n	8008c64 <_dtoa_r+0x6c4>
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <_dtoa_r+0x648>)
 8008bd0:	f7f7 fd1a 	bl	8000608 <__aeabi_dmul>
 8008bd4:	4680      	mov	r8, r0
 8008bd6:	4689      	mov	r9, r1
 8008bd8:	e7bd      	b.n	8008b56 <_dtoa_r+0x5b6>
 8008bda:	bf00      	nop
 8008bdc:	0800b078 	.word	0x0800b078
 8008be0:	0800b050 	.word	0x0800b050
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	40240000 	.word	0x40240000
 8008bec:	401c0000 	.word	0x401c0000
 8008bf0:	40140000 	.word	0x40140000
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bfc:	9d00      	ldr	r5, [sp, #0]
 8008bfe:	4642      	mov	r2, r8
 8008c00:	464b      	mov	r3, r9
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 fe29 	bl	800085c <__aeabi_ddiv>
 8008c0a:	f7f7 ffad 	bl	8000b68 <__aeabi_d2iz>
 8008c0e:	9001      	str	r0, [sp, #4]
 8008c10:	f7f7 fc90 	bl	8000534 <__aeabi_i2d>
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fb38 	bl	8000298 <__aeabi_dsub>
 8008c28:	9e01      	ldr	r6, [sp, #4]
 8008c2a:	9f04      	ldr	r7, [sp, #16]
 8008c2c:	3630      	adds	r6, #48	; 0x30
 8008c2e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c32:	9e00      	ldr	r6, [sp, #0]
 8008c34:	1bae      	subs	r6, r5, r6
 8008c36:	42b7      	cmp	r7, r6
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	d134      	bne.n	8008ca8 <_dtoa_r+0x708>
 8008c3e:	f7f7 fb2d 	bl	800029c <__adddf3>
 8008c42:	4642      	mov	r2, r8
 8008c44:	464b      	mov	r3, r9
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	f7f7 ff6d 	bl	8000b28 <__aeabi_dcmpgt>
 8008c4e:	b9c8      	cbnz	r0, 8008c84 <_dtoa_r+0x6e4>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	4630      	mov	r0, r6
 8008c56:	4639      	mov	r1, r7
 8008c58:	f7f7 ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c5c:	b110      	cbz	r0, 8008c64 <_dtoa_r+0x6c4>
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	07db      	lsls	r3, r3, #31
 8008c62:	d40f      	bmi.n	8008c84 <_dtoa_r+0x6e4>
 8008c64:	4651      	mov	r1, sl
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fd86 	bl	8009778 <_Bfree>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c70:	702b      	strb	r3, [r5, #0]
 8008c72:	f10b 0301 	add.w	r3, fp, #1
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f43f ace2 	beq.w	8008644 <_dtoa_r+0xa4>
 8008c80:	601d      	str	r5, [r3, #0]
 8008c82:	e4df      	b.n	8008644 <_dtoa_r+0xa4>
 8008c84:	465f      	mov	r7, fp
 8008c86:	462b      	mov	r3, r5
 8008c88:	461d      	mov	r5, r3
 8008c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8e:	2a39      	cmp	r2, #57	; 0x39
 8008c90:	d106      	bne.n	8008ca0 <_dtoa_r+0x700>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d1f7      	bne.n	8008c88 <_dtoa_r+0x6e8>
 8008c98:	9900      	ldr	r1, [sp, #0]
 8008c9a:	2230      	movs	r2, #48	; 0x30
 8008c9c:	3701      	adds	r7, #1
 8008c9e:	700a      	strb	r2, [r1, #0]
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e790      	b.n	8008bca <_dtoa_r+0x62a>
 8008ca8:	4ba3      	ldr	r3, [pc, #652]	; (8008f38 <_dtoa_r+0x998>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	f7f7 fcac 	bl	8000608 <__aeabi_dmul>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	f7f7 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d09e      	beq.n	8008bfe <_dtoa_r+0x65e>
 8008cc0:	e7d0      	b.n	8008c64 <_dtoa_r+0x6c4>
 8008cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	f000 80ca 	beq.w	8008e5e <_dtoa_r+0x8be>
 8008cca:	9a07      	ldr	r2, [sp, #28]
 8008ccc:	2a01      	cmp	r2, #1
 8008cce:	f300 80ad 	bgt.w	8008e2c <_dtoa_r+0x88c>
 8008cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	f000 80a5 	beq.w	8008e24 <_dtoa_r+0x884>
 8008cda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cde:	9e08      	ldr	r6, [sp, #32]
 8008ce0:	9d05      	ldr	r5, [sp, #20]
 8008ce2:	9a05      	ldr	r2, [sp, #20]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	9205      	str	r2, [sp, #20]
 8008ce8:	9a06      	ldr	r2, [sp, #24]
 8008cea:	2101      	movs	r1, #1
 8008cec:	441a      	add	r2, r3
 8008cee:	4620      	mov	r0, r4
 8008cf0:	9206      	str	r2, [sp, #24]
 8008cf2:	f000 fdf7 	bl	80098e4 <__i2b>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	b165      	cbz	r5, 8008d14 <_dtoa_r+0x774>
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dd09      	ble.n	8008d14 <_dtoa_r+0x774>
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	bfa8      	it	ge
 8008d06:	462b      	movge	r3, r5
 8008d08:	1ad2      	subs	r2, r2, r3
 8008d0a:	9205      	str	r2, [sp, #20]
 8008d0c:	9a06      	ldr	r2, [sp, #24]
 8008d0e:	1aed      	subs	r5, r5, r3
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	9b08      	ldr	r3, [sp, #32]
 8008d16:	b1f3      	cbz	r3, 8008d56 <_dtoa_r+0x7b6>
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 80a3 	beq.w	8008e66 <_dtoa_r+0x8c6>
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	dd10      	ble.n	8008d46 <_dtoa_r+0x7a6>
 8008d24:	4639      	mov	r1, r7
 8008d26:	4632      	mov	r2, r6
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fe9b 	bl	8009a64 <__pow5mult>
 8008d2e:	4652      	mov	r2, sl
 8008d30:	4601      	mov	r1, r0
 8008d32:	4607      	mov	r7, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fdeb 	bl	8009910 <__multiply>
 8008d3a:	4651      	mov	r1, sl
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fd1a 	bl	8009778 <_Bfree>
 8008d44:	46c2      	mov	sl, r8
 8008d46:	9b08      	ldr	r3, [sp, #32]
 8008d48:	1b9a      	subs	r2, r3, r6
 8008d4a:	d004      	beq.n	8008d56 <_dtoa_r+0x7b6>
 8008d4c:	4651      	mov	r1, sl
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fe88 	bl	8009a64 <__pow5mult>
 8008d54:	4682      	mov	sl, r0
 8008d56:	2101      	movs	r1, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fdc3 	bl	80098e4 <__i2b>
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	4606      	mov	r6, r0
 8008d64:	f340 8081 	ble.w	8008e6a <_dtoa_r+0x8ca>
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fe79 	bl	8009a64 <__pow5mult>
 8008d72:	9b07      	ldr	r3, [sp, #28]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	4606      	mov	r6, r0
 8008d78:	dd7a      	ble.n	8008e70 <_dtoa_r+0x8d0>
 8008d7a:	f04f 0800 	mov.w	r8, #0
 8008d7e:	6933      	ldr	r3, [r6, #16]
 8008d80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d84:	6918      	ldr	r0, [r3, #16]
 8008d86:	f000 fd5f 	bl	8009848 <__hi0bits>
 8008d8a:	f1c0 0020 	rsb	r0, r0, #32
 8008d8e:	9b06      	ldr	r3, [sp, #24]
 8008d90:	4418      	add	r0, r3
 8008d92:	f010 001f 	ands.w	r0, r0, #31
 8008d96:	f000 8094 	beq.w	8008ec2 <_dtoa_r+0x922>
 8008d9a:	f1c0 0320 	rsb	r3, r0, #32
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	f340 8085 	ble.w	8008eae <_dtoa_r+0x90e>
 8008da4:	9b05      	ldr	r3, [sp, #20]
 8008da6:	f1c0 001c 	rsb	r0, r0, #28
 8008daa:	4403      	add	r3, r0
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	9b06      	ldr	r3, [sp, #24]
 8008db0:	4403      	add	r3, r0
 8008db2:	4405      	add	r5, r0
 8008db4:	9306      	str	r3, [sp, #24]
 8008db6:	9b05      	ldr	r3, [sp, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	dd05      	ble.n	8008dc8 <_dtoa_r+0x828>
 8008dbc:	4651      	mov	r1, sl
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 fea9 	bl	8009b18 <__lshift>
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	9b06      	ldr	r3, [sp, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd05      	ble.n	8008dda <_dtoa_r+0x83a>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fea0 	bl	8009b18 <__lshift>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d072      	beq.n	8008ec6 <_dtoa_r+0x926>
 8008de0:	4631      	mov	r1, r6
 8008de2:	4650      	mov	r0, sl
 8008de4:	f000 ff04 	bl	8009bf0 <__mcmp>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	da6c      	bge.n	8008ec6 <_dtoa_r+0x926>
 8008dec:	2300      	movs	r3, #0
 8008dee:	4651      	mov	r1, sl
 8008df0:	220a      	movs	r2, #10
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 fce2 	bl	80097bc <__multadd>
 8008df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008dfe:	4682      	mov	sl, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 81b0 	beq.w	8009166 <_dtoa_r+0xbc6>
 8008e06:	2300      	movs	r3, #0
 8008e08:	4639      	mov	r1, r7
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fcd5 	bl	80097bc <__multadd>
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	4607      	mov	r7, r0
 8008e18:	f300 8096 	bgt.w	8008f48 <_dtoa_r+0x9a8>
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	dc59      	bgt.n	8008ed6 <_dtoa_r+0x936>
 8008e22:	e091      	b.n	8008f48 <_dtoa_r+0x9a8>
 8008e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e2a:	e758      	b.n	8008cde <_dtoa_r+0x73e>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	1e5e      	subs	r6, r3, #1
 8008e30:	9b08      	ldr	r3, [sp, #32]
 8008e32:	42b3      	cmp	r3, r6
 8008e34:	bfbf      	itttt	lt
 8008e36:	9b08      	ldrlt	r3, [sp, #32]
 8008e38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e3a:	9608      	strlt	r6, [sp, #32]
 8008e3c:	1af3      	sublt	r3, r6, r3
 8008e3e:	bfb4      	ite	lt
 8008e40:	18d2      	addlt	r2, r2, r3
 8008e42:	1b9e      	subge	r6, r3, r6
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	bfbc      	itt	lt
 8008e48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e4a:	2600      	movlt	r6, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	bfb7      	itett	lt
 8008e50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e58:	1a9d      	sublt	r5, r3, r2
 8008e5a:	2300      	movlt	r3, #0
 8008e5c:	e741      	b.n	8008ce2 <_dtoa_r+0x742>
 8008e5e:	9e08      	ldr	r6, [sp, #32]
 8008e60:	9d05      	ldr	r5, [sp, #20]
 8008e62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e64:	e748      	b.n	8008cf8 <_dtoa_r+0x758>
 8008e66:	9a08      	ldr	r2, [sp, #32]
 8008e68:	e770      	b.n	8008d4c <_dtoa_r+0x7ac>
 8008e6a:	9b07      	ldr	r3, [sp, #28]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	dc19      	bgt.n	8008ea4 <_dtoa_r+0x904>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	b9bb      	cbnz	r3, 8008ea4 <_dtoa_r+0x904>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e7a:	b99b      	cbnz	r3, 8008ea4 <_dtoa_r+0x904>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e82:	0d1b      	lsrs	r3, r3, #20
 8008e84:	051b      	lsls	r3, r3, #20
 8008e86:	b183      	cbz	r3, 8008eaa <_dtoa_r+0x90a>
 8008e88:	9b05      	ldr	r3, [sp, #20]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	3301      	adds	r3, #1
 8008e92:	9306      	str	r3, [sp, #24]
 8008e94:	f04f 0801 	mov.w	r8, #1
 8008e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f47f af6f 	bne.w	8008d7e <_dtoa_r+0x7de>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	e774      	b.n	8008d8e <_dtoa_r+0x7ee>
 8008ea4:	f04f 0800 	mov.w	r8, #0
 8008ea8:	e7f6      	b.n	8008e98 <_dtoa_r+0x8f8>
 8008eaa:	4698      	mov	r8, r3
 8008eac:	e7f4      	b.n	8008e98 <_dtoa_r+0x8f8>
 8008eae:	d082      	beq.n	8008db6 <_dtoa_r+0x816>
 8008eb0:	9a05      	ldr	r2, [sp, #20]
 8008eb2:	331c      	adds	r3, #28
 8008eb4:	441a      	add	r2, r3
 8008eb6:	9205      	str	r2, [sp, #20]
 8008eb8:	9a06      	ldr	r2, [sp, #24]
 8008eba:	441a      	add	r2, r3
 8008ebc:	441d      	add	r5, r3
 8008ebe:	9206      	str	r2, [sp, #24]
 8008ec0:	e779      	b.n	8008db6 <_dtoa_r+0x816>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	e7f4      	b.n	8008eb0 <_dtoa_r+0x910>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	dc37      	bgt.n	8008f3c <_dtoa_r+0x99c>
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	dd34      	ble.n	8008f3c <_dtoa_r+0x99c>
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	b963      	cbnz	r3, 8008ef4 <_dtoa_r+0x954>
 8008eda:	4631      	mov	r1, r6
 8008edc:	2205      	movs	r2, #5
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fc6c 	bl	80097bc <__multadd>
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f000 fe81 	bl	8009bf0 <__mcmp>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f73f adbb 	bgt.w	8008a6a <_dtoa_r+0x4ca>
 8008ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef6:	9d00      	ldr	r5, [sp, #0]
 8008ef8:	ea6f 0b03 	mvn.w	fp, r3
 8008efc:	f04f 0800 	mov.w	r8, #0
 8008f00:	4631      	mov	r1, r6
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 fc38 	bl	8009778 <_Bfree>
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	f43f aeab 	beq.w	8008c64 <_dtoa_r+0x6c4>
 8008f0e:	f1b8 0f00 	cmp.w	r8, #0
 8008f12:	d005      	beq.n	8008f20 <_dtoa_r+0x980>
 8008f14:	45b8      	cmp	r8, r7
 8008f16:	d003      	beq.n	8008f20 <_dtoa_r+0x980>
 8008f18:	4641      	mov	r1, r8
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fc2c 	bl	8009778 <_Bfree>
 8008f20:	4639      	mov	r1, r7
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fc28 	bl	8009778 <_Bfree>
 8008f28:	e69c      	b.n	8008c64 <_dtoa_r+0x6c4>
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	e7e1      	b.n	8008ef4 <_dtoa_r+0x954>
 8008f30:	46bb      	mov	fp, r7
 8008f32:	4637      	mov	r7, r6
 8008f34:	e599      	b.n	8008a6a <_dtoa_r+0x4ca>
 8008f36:	bf00      	nop
 8008f38:	40240000 	.word	0x40240000
 8008f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80c8 	beq.w	80090d4 <_dtoa_r+0xb34>
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	dd05      	ble.n	8008f58 <_dtoa_r+0x9b8>
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fde1 	bl	8009b18 <__lshift>
 8008f56:	4607      	mov	r7, r0
 8008f58:	f1b8 0f00 	cmp.w	r8, #0
 8008f5c:	d05b      	beq.n	8009016 <_dtoa_r+0xa76>
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fbc9 	bl	80096f8 <_Balloc>
 8008f66:	4605      	mov	r5, r0
 8008f68:	b928      	cbnz	r0, 8008f76 <_dtoa_r+0x9d6>
 8008f6a:	4b83      	ldr	r3, [pc, #524]	; (8009178 <_dtoa_r+0xbd8>)
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f72:	f7ff bb2e 	b.w	80085d2 <_dtoa_r+0x32>
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	3202      	adds	r2, #2
 8008f7a:	0092      	lsls	r2, r2, #2
 8008f7c:	f107 010c 	add.w	r1, r7, #12
 8008f80:	300c      	adds	r0, #12
 8008f82:	f7ff fa76 	bl	8008472 <memcpy>
 8008f86:	2201      	movs	r2, #1
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fdc4 	bl	8009b18 <__lshift>
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	3301      	adds	r3, #1
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	9308      	str	r3, [sp, #32]
 8008f9e:	9b02      	ldr	r3, [sp, #8]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	46b8      	mov	r8, r7
 8008fa6:	9306      	str	r3, [sp, #24]
 8008fa8:	4607      	mov	r7, r0
 8008faa:	9b04      	ldr	r3, [sp, #16]
 8008fac:	4631      	mov	r1, r6
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	f7ff fa6b 	bl	800848e <quorem>
 8008fb8:	4641      	mov	r1, r8
 8008fba:	9002      	str	r0, [sp, #8]
 8008fbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f000 fe15 	bl	8009bf0 <__mcmp>
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	9005      	str	r0, [sp, #20]
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fe2b 	bl	8009c28 <__mdiff>
 8008fd2:	68c2      	ldr	r2, [r0, #12]
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	bb02      	cbnz	r2, 800901a <_dtoa_r+0xa7a>
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4650      	mov	r0, sl
 8008fdc:	f000 fe08 	bl	8009bf0 <__mcmp>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe8:	f000 fbc6 	bl	8009778 <_Bfree>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff0:	9d04      	ldr	r5, [sp, #16]
 8008ff2:	ea43 0102 	orr.w	r1, r3, r2
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	4319      	orrs	r1, r3
 8008ffa:	d110      	bne.n	800901e <_dtoa_r+0xa7e>
 8008ffc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009000:	d029      	beq.n	8009056 <_dtoa_r+0xab6>
 8009002:	9b05      	ldr	r3, [sp, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd02      	ble.n	800900e <_dtoa_r+0xa6e>
 8009008:	9b02      	ldr	r3, [sp, #8]
 800900a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	f883 9000 	strb.w	r9, [r3]
 8009014:	e774      	b.n	8008f00 <_dtoa_r+0x960>
 8009016:	4638      	mov	r0, r7
 8009018:	e7ba      	b.n	8008f90 <_dtoa_r+0x9f0>
 800901a:	2201      	movs	r2, #1
 800901c:	e7e1      	b.n	8008fe2 <_dtoa_r+0xa42>
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	db04      	blt.n	800902e <_dtoa_r+0xa8e>
 8009024:	9907      	ldr	r1, [sp, #28]
 8009026:	430b      	orrs	r3, r1
 8009028:	9906      	ldr	r1, [sp, #24]
 800902a:	430b      	orrs	r3, r1
 800902c:	d120      	bne.n	8009070 <_dtoa_r+0xad0>
 800902e:	2a00      	cmp	r2, #0
 8009030:	dded      	ble.n	800900e <_dtoa_r+0xa6e>
 8009032:	4651      	mov	r1, sl
 8009034:	2201      	movs	r2, #1
 8009036:	4620      	mov	r0, r4
 8009038:	f000 fd6e 	bl	8009b18 <__lshift>
 800903c:	4631      	mov	r1, r6
 800903e:	4682      	mov	sl, r0
 8009040:	f000 fdd6 	bl	8009bf0 <__mcmp>
 8009044:	2800      	cmp	r0, #0
 8009046:	dc03      	bgt.n	8009050 <_dtoa_r+0xab0>
 8009048:	d1e1      	bne.n	800900e <_dtoa_r+0xa6e>
 800904a:	f019 0f01 	tst.w	r9, #1
 800904e:	d0de      	beq.n	800900e <_dtoa_r+0xa6e>
 8009050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009054:	d1d8      	bne.n	8009008 <_dtoa_r+0xa68>
 8009056:	9a01      	ldr	r2, [sp, #4]
 8009058:	2339      	movs	r3, #57	; 0x39
 800905a:	7013      	strb	r3, [r2, #0]
 800905c:	462b      	mov	r3, r5
 800905e:	461d      	mov	r5, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009066:	2a39      	cmp	r2, #57	; 0x39
 8009068:	d06c      	beq.n	8009144 <_dtoa_r+0xba4>
 800906a:	3201      	adds	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e747      	b.n	8008f00 <_dtoa_r+0x960>
 8009070:	2a00      	cmp	r2, #0
 8009072:	dd07      	ble.n	8009084 <_dtoa_r+0xae4>
 8009074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009078:	d0ed      	beq.n	8009056 <_dtoa_r+0xab6>
 800907a:	9a01      	ldr	r2, [sp, #4]
 800907c:	f109 0301 	add.w	r3, r9, #1
 8009080:	7013      	strb	r3, [r2, #0]
 8009082:	e73d      	b.n	8008f00 <_dtoa_r+0x960>
 8009084:	9b04      	ldr	r3, [sp, #16]
 8009086:	9a08      	ldr	r2, [sp, #32]
 8009088:	f803 9c01 	strb.w	r9, [r3, #-1]
 800908c:	4293      	cmp	r3, r2
 800908e:	d043      	beq.n	8009118 <_dtoa_r+0xb78>
 8009090:	4651      	mov	r1, sl
 8009092:	2300      	movs	r3, #0
 8009094:	220a      	movs	r2, #10
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fb90 	bl	80097bc <__multadd>
 800909c:	45b8      	cmp	r8, r7
 800909e:	4682      	mov	sl, r0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	f04f 020a 	mov.w	r2, #10
 80090a8:	4641      	mov	r1, r8
 80090aa:	4620      	mov	r0, r4
 80090ac:	d107      	bne.n	80090be <_dtoa_r+0xb1e>
 80090ae:	f000 fb85 	bl	80097bc <__multadd>
 80090b2:	4680      	mov	r8, r0
 80090b4:	4607      	mov	r7, r0
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	e775      	b.n	8008faa <_dtoa_r+0xa0a>
 80090be:	f000 fb7d 	bl	80097bc <__multadd>
 80090c2:	4639      	mov	r1, r7
 80090c4:	4680      	mov	r8, r0
 80090c6:	2300      	movs	r3, #0
 80090c8:	220a      	movs	r2, #10
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fb76 	bl	80097bc <__multadd>
 80090d0:	4607      	mov	r7, r0
 80090d2:	e7f0      	b.n	80090b6 <_dtoa_r+0xb16>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	9d00      	ldr	r5, [sp, #0]
 80090da:	4631      	mov	r1, r6
 80090dc:	4650      	mov	r0, sl
 80090de:	f7ff f9d6 	bl	800848e <quorem>
 80090e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090e6:	9b00      	ldr	r3, [sp, #0]
 80090e8:	f805 9b01 	strb.w	r9, [r5], #1
 80090ec:	1aea      	subs	r2, r5, r3
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	dd07      	ble.n	8009104 <_dtoa_r+0xb64>
 80090f4:	4651      	mov	r1, sl
 80090f6:	2300      	movs	r3, #0
 80090f8:	220a      	movs	r2, #10
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fb5e 	bl	80097bc <__multadd>
 8009100:	4682      	mov	sl, r0
 8009102:	e7ea      	b.n	80090da <_dtoa_r+0xb3a>
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfc8      	it	gt
 800910a:	461d      	movgt	r5, r3
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	bfd8      	it	le
 8009110:	2501      	movle	r5, #1
 8009112:	441d      	add	r5, r3
 8009114:	f04f 0800 	mov.w	r8, #0
 8009118:	4651      	mov	r1, sl
 800911a:	2201      	movs	r2, #1
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fcfb 	bl	8009b18 <__lshift>
 8009122:	4631      	mov	r1, r6
 8009124:	4682      	mov	sl, r0
 8009126:	f000 fd63 	bl	8009bf0 <__mcmp>
 800912a:	2800      	cmp	r0, #0
 800912c:	dc96      	bgt.n	800905c <_dtoa_r+0xabc>
 800912e:	d102      	bne.n	8009136 <_dtoa_r+0xb96>
 8009130:	f019 0f01 	tst.w	r9, #1
 8009134:	d192      	bne.n	800905c <_dtoa_r+0xabc>
 8009136:	462b      	mov	r3, r5
 8009138:	461d      	mov	r5, r3
 800913a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800913e:	2a30      	cmp	r2, #48	; 0x30
 8009140:	d0fa      	beq.n	8009138 <_dtoa_r+0xb98>
 8009142:	e6dd      	b.n	8008f00 <_dtoa_r+0x960>
 8009144:	9a00      	ldr	r2, [sp, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d189      	bne.n	800905e <_dtoa_r+0xabe>
 800914a:	f10b 0b01 	add.w	fp, fp, #1
 800914e:	2331      	movs	r3, #49	; 0x31
 8009150:	e796      	b.n	8009080 <_dtoa_r+0xae0>
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <_dtoa_r+0xbdc>)
 8009154:	f7ff ba99 	b.w	800868a <_dtoa_r+0xea>
 8009158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800915a:	2b00      	cmp	r3, #0
 800915c:	f47f aa6d 	bne.w	800863a <_dtoa_r+0x9a>
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <_dtoa_r+0xbe0>)
 8009162:	f7ff ba92 	b.w	800868a <_dtoa_r+0xea>
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	dcb5      	bgt.n	80090d8 <_dtoa_r+0xb38>
 800916c:	9b07      	ldr	r3, [sp, #28]
 800916e:	2b02      	cmp	r3, #2
 8009170:	f73f aeb1 	bgt.w	8008ed6 <_dtoa_r+0x936>
 8009174:	e7b0      	b.n	80090d8 <_dtoa_r+0xb38>
 8009176:	bf00      	nop
 8009178:	0800afd4 	.word	0x0800afd4
 800917c:	0800af34 	.word	0x0800af34
 8009180:	0800af58 	.word	0x0800af58

08009184 <__ssputs_r>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	688e      	ldr	r6, [r1, #8]
 800918a:	461f      	mov	r7, r3
 800918c:	42be      	cmp	r6, r7
 800918e:	680b      	ldr	r3, [r1, #0]
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4690      	mov	r8, r2
 8009196:	d82c      	bhi.n	80091f2 <__ssputs_r+0x6e>
 8009198:	898a      	ldrh	r2, [r1, #12]
 800919a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800919e:	d026      	beq.n	80091ee <__ssputs_r+0x6a>
 80091a0:	6965      	ldr	r5, [r4, #20]
 80091a2:	6909      	ldr	r1, [r1, #16]
 80091a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a8:	eba3 0901 	sub.w	r9, r3, r1
 80091ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b0:	1c7b      	adds	r3, r7, #1
 80091b2:	444b      	add	r3, r9
 80091b4:	106d      	asrs	r5, r5, #1
 80091b6:	429d      	cmp	r5, r3
 80091b8:	bf38      	it	cc
 80091ba:	461d      	movcc	r5, r3
 80091bc:	0553      	lsls	r3, r2, #21
 80091be:	d527      	bpl.n	8009210 <__ssputs_r+0x8c>
 80091c0:	4629      	mov	r1, r5
 80091c2:	f000 f95f 	bl	8009484 <_malloc_r>
 80091c6:	4606      	mov	r6, r0
 80091c8:	b360      	cbz	r0, 8009224 <__ssputs_r+0xa0>
 80091ca:	6921      	ldr	r1, [r4, #16]
 80091cc:	464a      	mov	r2, r9
 80091ce:	f7ff f950 	bl	8008472 <memcpy>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	6126      	str	r6, [r4, #16]
 80091e0:	6165      	str	r5, [r4, #20]
 80091e2:	444e      	add	r6, r9
 80091e4:	eba5 0509 	sub.w	r5, r5, r9
 80091e8:	6026      	str	r6, [r4, #0]
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	463e      	mov	r6, r7
 80091ee:	42be      	cmp	r6, r7
 80091f0:	d900      	bls.n	80091f4 <__ssputs_r+0x70>
 80091f2:	463e      	mov	r6, r7
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	4632      	mov	r2, r6
 80091f8:	4641      	mov	r1, r8
 80091fa:	f000 fe6b 	bl	8009ed4 <memmove>
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	1b9b      	subs	r3, r3, r6
 8009202:	60a3      	str	r3, [r4, #8]
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	4433      	add	r3, r6
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	2000      	movs	r0, #0
 800920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009210:	462a      	mov	r2, r5
 8009212:	f000 fe30 	bl	8009e76 <_realloc_r>
 8009216:	4606      	mov	r6, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	d1e0      	bne.n	80091de <__ssputs_r+0x5a>
 800921c:	6921      	ldr	r1, [r4, #16]
 800921e:	4650      	mov	r0, sl
 8009220:	f000 fefc 	bl	800a01c <_free_r>
 8009224:	230c      	movs	r3, #12
 8009226:	f8ca 3000 	str.w	r3, [sl]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009236:	e7e9      	b.n	800920c <__ssputs_r+0x88>

08009238 <_svfiprintf_r>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	4698      	mov	r8, r3
 800923e:	898b      	ldrh	r3, [r1, #12]
 8009240:	061b      	lsls	r3, r3, #24
 8009242:	b09d      	sub	sp, #116	; 0x74
 8009244:	4607      	mov	r7, r0
 8009246:	460d      	mov	r5, r1
 8009248:	4614      	mov	r4, r2
 800924a:	d50e      	bpl.n	800926a <_svfiprintf_r+0x32>
 800924c:	690b      	ldr	r3, [r1, #16]
 800924e:	b963      	cbnz	r3, 800926a <_svfiprintf_r+0x32>
 8009250:	2140      	movs	r1, #64	; 0x40
 8009252:	f000 f917 	bl	8009484 <_malloc_r>
 8009256:	6028      	str	r0, [r5, #0]
 8009258:	6128      	str	r0, [r5, #16]
 800925a:	b920      	cbnz	r0, 8009266 <_svfiprintf_r+0x2e>
 800925c:	230c      	movs	r3, #12
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009264:	e0d0      	b.n	8009408 <_svfiprintf_r+0x1d0>
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	616b      	str	r3, [r5, #20]
 800926a:	2300      	movs	r3, #0
 800926c:	9309      	str	r3, [sp, #36]	; 0x24
 800926e:	2320      	movs	r3, #32
 8009270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009274:	f8cd 800c 	str.w	r8, [sp, #12]
 8009278:	2330      	movs	r3, #48	; 0x30
 800927a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009420 <_svfiprintf_r+0x1e8>
 800927e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009282:	f04f 0901 	mov.w	r9, #1
 8009286:	4623      	mov	r3, r4
 8009288:	469a      	mov	sl, r3
 800928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928e:	b10a      	cbz	r2, 8009294 <_svfiprintf_r+0x5c>
 8009290:	2a25      	cmp	r2, #37	; 0x25
 8009292:	d1f9      	bne.n	8009288 <_svfiprintf_r+0x50>
 8009294:	ebba 0b04 	subs.w	fp, sl, r4
 8009298:	d00b      	beq.n	80092b2 <_svfiprintf_r+0x7a>
 800929a:	465b      	mov	r3, fp
 800929c:	4622      	mov	r2, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff ff6f 	bl	8009184 <__ssputs_r>
 80092a6:	3001      	adds	r0, #1
 80092a8:	f000 80a9 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ae:	445a      	add	r2, fp
 80092b0:	9209      	str	r2, [sp, #36]	; 0x24
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80a1 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092bc:	2300      	movs	r3, #0
 80092be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d2:	931a      	str	r3, [sp, #104]	; 0x68
 80092d4:	4654      	mov	r4, sl
 80092d6:	2205      	movs	r2, #5
 80092d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092dc:	4850      	ldr	r0, [pc, #320]	; (8009420 <_svfiprintf_r+0x1e8>)
 80092de:	f7f6 ff7f 	bl	80001e0 <memchr>
 80092e2:	9a04      	ldr	r2, [sp, #16]
 80092e4:	b9d8      	cbnz	r0, 800931e <_svfiprintf_r+0xe6>
 80092e6:	06d0      	lsls	r0, r2, #27
 80092e8:	bf44      	itt	mi
 80092ea:	2320      	movmi	r3, #32
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f0:	0711      	lsls	r1, r2, #28
 80092f2:	bf44      	itt	mi
 80092f4:	232b      	movmi	r3, #43	; 0x2b
 80092f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009300:	d015      	beq.n	800932e <_svfiprintf_r+0xf6>
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	4654      	mov	r4, sl
 8009306:	2000      	movs	r0, #0
 8009308:	f04f 0c0a 	mov.w	ip, #10
 800930c:	4621      	mov	r1, r4
 800930e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009312:	3b30      	subs	r3, #48	; 0x30
 8009314:	2b09      	cmp	r3, #9
 8009316:	d94d      	bls.n	80093b4 <_svfiprintf_r+0x17c>
 8009318:	b1b0      	cbz	r0, 8009348 <_svfiprintf_r+0x110>
 800931a:	9207      	str	r2, [sp, #28]
 800931c:	e014      	b.n	8009348 <_svfiprintf_r+0x110>
 800931e:	eba0 0308 	sub.w	r3, r0, r8
 8009322:	fa09 f303 	lsl.w	r3, r9, r3
 8009326:	4313      	orrs	r3, r2
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	46a2      	mov	sl, r4
 800932c:	e7d2      	b.n	80092d4 <_svfiprintf_r+0x9c>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9103      	str	r1, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfbb      	ittet	lt
 800933a:	425b      	neglt	r3, r3
 800933c:	f042 0202 	orrlt.w	r2, r2, #2
 8009340:	9307      	strge	r3, [sp, #28]
 8009342:	9307      	strlt	r3, [sp, #28]
 8009344:	bfb8      	it	lt
 8009346:	9204      	strlt	r2, [sp, #16]
 8009348:	7823      	ldrb	r3, [r4, #0]
 800934a:	2b2e      	cmp	r3, #46	; 0x2e
 800934c:	d10c      	bne.n	8009368 <_svfiprintf_r+0x130>
 800934e:	7863      	ldrb	r3, [r4, #1]
 8009350:	2b2a      	cmp	r3, #42	; 0x2a
 8009352:	d134      	bne.n	80093be <_svfiprintf_r+0x186>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	9203      	str	r2, [sp, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfb8      	it	lt
 8009360:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009364:	3402      	adds	r4, #2
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009430 <_svfiprintf_r+0x1f8>
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	2203      	movs	r2, #3
 8009370:	4650      	mov	r0, sl
 8009372:	f7f6 ff35 	bl	80001e0 <memchr>
 8009376:	b138      	cbz	r0, 8009388 <_svfiprintf_r+0x150>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	eba0 000a 	sub.w	r0, r0, sl
 800937e:	2240      	movs	r2, #64	; 0x40
 8009380:	4082      	lsls	r2, r0
 8009382:	4313      	orrs	r3, r2
 8009384:	3401      	adds	r4, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4825      	ldr	r0, [pc, #148]	; (8009424 <_svfiprintf_r+0x1ec>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009392:	2206      	movs	r2, #6
 8009394:	f7f6 ff24 	bl	80001e0 <memchr>
 8009398:	2800      	cmp	r0, #0
 800939a:	d038      	beq.n	800940e <_svfiprintf_r+0x1d6>
 800939c:	4b22      	ldr	r3, [pc, #136]	; (8009428 <_svfiprintf_r+0x1f0>)
 800939e:	bb1b      	cbnz	r3, 80093e8 <_svfiprintf_r+0x1b0>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3307      	adds	r3, #7
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	3308      	adds	r3, #8
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	4433      	add	r3, r6
 80093b0:	9309      	str	r3, [sp, #36]	; 0x24
 80093b2:	e768      	b.n	8009286 <_svfiprintf_r+0x4e>
 80093b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7a6      	b.n	800930c <_svfiprintf_r+0xd4>
 80093be:	2300      	movs	r3, #0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d0:	3a30      	subs	r2, #48	; 0x30
 80093d2:	2a09      	cmp	r2, #9
 80093d4:	d903      	bls.n	80093de <_svfiprintf_r+0x1a6>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c6      	beq.n	8009368 <_svfiprintf_r+0x130>
 80093da:	9105      	str	r1, [sp, #20]
 80093dc:	e7c4      	b.n	8009368 <_svfiprintf_r+0x130>
 80093de:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	e7f0      	b.n	80093ca <_svfiprintf_r+0x192>
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <_svfiprintf_r+0x1f4>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	f7fe fb5c 	bl	8007ab0 <_printf_float>
 80093f8:	1c42      	adds	r2, r0, #1
 80093fa:	4606      	mov	r6, r0
 80093fc:	d1d6      	bne.n	80093ac <_svfiprintf_r+0x174>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af2d 	bmi.w	8009260 <_svfiprintf_r+0x28>
 8009406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009408:	b01d      	add	sp, #116	; 0x74
 800940a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940e:	ab03      	add	r3, sp, #12
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	462a      	mov	r2, r5
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <_svfiprintf_r+0x1f4>)
 8009416:	a904      	add	r1, sp, #16
 8009418:	4638      	mov	r0, r7
 800941a:	f7fe fded 	bl	8007ff8 <_printf_i>
 800941e:	e7eb      	b.n	80093f8 <_svfiprintf_r+0x1c0>
 8009420:	0800afe5 	.word	0x0800afe5
 8009424:	0800afef 	.word	0x0800afef
 8009428:	08007ab1 	.word	0x08007ab1
 800942c:	08009185 	.word	0x08009185
 8009430:	0800afeb 	.word	0x0800afeb

08009434 <malloc>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <malloc+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f000 b823 	b.w	8009484 <_malloc_r>
 800943e:	bf00      	nop
 8009440:	200000e4 	.word	0x200000e4

08009444 <sbrk_aligned>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	4e0e      	ldr	r6, [pc, #56]	; (8009480 <sbrk_aligned+0x3c>)
 8009448:	460c      	mov	r4, r1
 800944a:	6831      	ldr	r1, [r6, #0]
 800944c:	4605      	mov	r5, r0
 800944e:	b911      	cbnz	r1, 8009456 <sbrk_aligned+0x12>
 8009450:	f000 fd8e 	bl	8009f70 <_sbrk_r>
 8009454:	6030      	str	r0, [r6, #0]
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f000 fd89 	bl	8009f70 <_sbrk_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d00a      	beq.n	8009478 <sbrk_aligned+0x34>
 8009462:	1cc4      	adds	r4, r0, #3
 8009464:	f024 0403 	bic.w	r4, r4, #3
 8009468:	42a0      	cmp	r0, r4
 800946a:	d007      	beq.n	800947c <sbrk_aligned+0x38>
 800946c:	1a21      	subs	r1, r4, r0
 800946e:	4628      	mov	r0, r5
 8009470:	f000 fd7e 	bl	8009f70 <_sbrk_r>
 8009474:	3001      	adds	r0, #1
 8009476:	d101      	bne.n	800947c <sbrk_aligned+0x38>
 8009478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800947c:	4620      	mov	r0, r4
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	20003030 	.word	0x20003030

08009484 <_malloc_r>:
 8009484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009488:	1ccd      	adds	r5, r1, #3
 800948a:	f025 0503 	bic.w	r5, r5, #3
 800948e:	3508      	adds	r5, #8
 8009490:	2d0c      	cmp	r5, #12
 8009492:	bf38      	it	cc
 8009494:	250c      	movcc	r5, #12
 8009496:	2d00      	cmp	r5, #0
 8009498:	4607      	mov	r7, r0
 800949a:	db01      	blt.n	80094a0 <_malloc_r+0x1c>
 800949c:	42a9      	cmp	r1, r5
 800949e:	d905      	bls.n	80094ac <_malloc_r+0x28>
 80094a0:	230c      	movs	r3, #12
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	2600      	movs	r6, #0
 80094a6:	4630      	mov	r0, r6
 80094a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009580 <_malloc_r+0xfc>
 80094b0:	f000 f916 	bl	80096e0 <__malloc_lock>
 80094b4:	f8d8 3000 	ldr.w	r3, [r8]
 80094b8:	461c      	mov	r4, r3
 80094ba:	bb5c      	cbnz	r4, 8009514 <_malloc_r+0x90>
 80094bc:	4629      	mov	r1, r5
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ffc0 	bl	8009444 <sbrk_aligned>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	4604      	mov	r4, r0
 80094c8:	d155      	bne.n	8009576 <_malloc_r+0xf2>
 80094ca:	f8d8 4000 	ldr.w	r4, [r8]
 80094ce:	4626      	mov	r6, r4
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	d145      	bne.n	8009560 <_malloc_r+0xdc>
 80094d4:	2c00      	cmp	r4, #0
 80094d6:	d048      	beq.n	800956a <_malloc_r+0xe6>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	4631      	mov	r1, r6
 80094dc:	4638      	mov	r0, r7
 80094de:	eb04 0903 	add.w	r9, r4, r3
 80094e2:	f000 fd45 	bl	8009f70 <_sbrk_r>
 80094e6:	4581      	cmp	r9, r0
 80094e8:	d13f      	bne.n	800956a <_malloc_r+0xe6>
 80094ea:	6821      	ldr	r1, [r4, #0]
 80094ec:	1a6d      	subs	r5, r5, r1
 80094ee:	4629      	mov	r1, r5
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff ffa7 	bl	8009444 <sbrk_aligned>
 80094f6:	3001      	adds	r0, #1
 80094f8:	d037      	beq.n	800956a <_malloc_r+0xe6>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	442b      	add	r3, r5
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	f8d8 3000 	ldr.w	r3, [r8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d038      	beq.n	800957a <_malloc_r+0xf6>
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	42a2      	cmp	r2, r4
 800950c:	d12b      	bne.n	8009566 <_malloc_r+0xe2>
 800950e:	2200      	movs	r2, #0
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	e00f      	b.n	8009534 <_malloc_r+0xb0>
 8009514:	6822      	ldr	r2, [r4, #0]
 8009516:	1b52      	subs	r2, r2, r5
 8009518:	d41f      	bmi.n	800955a <_malloc_r+0xd6>
 800951a:	2a0b      	cmp	r2, #11
 800951c:	d917      	bls.n	800954e <_malloc_r+0xca>
 800951e:	1961      	adds	r1, r4, r5
 8009520:	42a3      	cmp	r3, r4
 8009522:	6025      	str	r5, [r4, #0]
 8009524:	bf18      	it	ne
 8009526:	6059      	strne	r1, [r3, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	bf08      	it	eq
 800952c:	f8c8 1000 	streq.w	r1, [r8]
 8009530:	5162      	str	r2, [r4, r5]
 8009532:	604b      	str	r3, [r1, #4]
 8009534:	4638      	mov	r0, r7
 8009536:	f104 060b 	add.w	r6, r4, #11
 800953a:	f000 f8d7 	bl	80096ec <__malloc_unlock>
 800953e:	f026 0607 	bic.w	r6, r6, #7
 8009542:	1d23      	adds	r3, r4, #4
 8009544:	1af2      	subs	r2, r6, r3
 8009546:	d0ae      	beq.n	80094a6 <_malloc_r+0x22>
 8009548:	1b9b      	subs	r3, r3, r6
 800954a:	50a3      	str	r3, [r4, r2]
 800954c:	e7ab      	b.n	80094a6 <_malloc_r+0x22>
 800954e:	42a3      	cmp	r3, r4
 8009550:	6862      	ldr	r2, [r4, #4]
 8009552:	d1dd      	bne.n	8009510 <_malloc_r+0x8c>
 8009554:	f8c8 2000 	str.w	r2, [r8]
 8009558:	e7ec      	b.n	8009534 <_malloc_r+0xb0>
 800955a:	4623      	mov	r3, r4
 800955c:	6864      	ldr	r4, [r4, #4]
 800955e:	e7ac      	b.n	80094ba <_malloc_r+0x36>
 8009560:	4634      	mov	r4, r6
 8009562:	6876      	ldr	r6, [r6, #4]
 8009564:	e7b4      	b.n	80094d0 <_malloc_r+0x4c>
 8009566:	4613      	mov	r3, r2
 8009568:	e7cc      	b.n	8009504 <_malloc_r+0x80>
 800956a:	230c      	movs	r3, #12
 800956c:	603b      	str	r3, [r7, #0]
 800956e:	4638      	mov	r0, r7
 8009570:	f000 f8bc 	bl	80096ec <__malloc_unlock>
 8009574:	e797      	b.n	80094a6 <_malloc_r+0x22>
 8009576:	6025      	str	r5, [r4, #0]
 8009578:	e7dc      	b.n	8009534 <_malloc_r+0xb0>
 800957a:	605b      	str	r3, [r3, #4]
 800957c:	deff      	udf	#255	; 0xff
 800957e:	bf00      	nop
 8009580:	2000302c 	.word	0x2000302c

08009584 <__sflush_r>:
 8009584:	898a      	ldrh	r2, [r1, #12]
 8009586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958a:	4605      	mov	r5, r0
 800958c:	0710      	lsls	r0, r2, #28
 800958e:	460c      	mov	r4, r1
 8009590:	d458      	bmi.n	8009644 <__sflush_r+0xc0>
 8009592:	684b      	ldr	r3, [r1, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc05      	bgt.n	80095a4 <__sflush_r+0x20>
 8009598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	dc02      	bgt.n	80095a4 <__sflush_r+0x20>
 800959e:	2000      	movs	r0, #0
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	d0f9      	beq.n	800959e <__sflush_r+0x1a>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095b0:	682f      	ldr	r7, [r5, #0]
 80095b2:	6a21      	ldr	r1, [r4, #32]
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	d032      	beq.n	800961e <__sflush_r+0x9a>
 80095b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	075a      	lsls	r2, r3, #29
 80095be:	d505      	bpl.n	80095cc <__sflush_r+0x48>
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	1ac0      	subs	r0, r0, r3
 80095c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095c6:	b10b      	cbz	r3, 80095cc <__sflush_r+0x48>
 80095c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095ca:	1ac0      	subs	r0, r0, r3
 80095cc:	2300      	movs	r3, #0
 80095ce:	4602      	mov	r2, r0
 80095d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095d2:	6a21      	ldr	r1, [r4, #32]
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b0      	blx	r6
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	d106      	bne.n	80095ec <__sflush_r+0x68>
 80095de:	6829      	ldr	r1, [r5, #0]
 80095e0:	291d      	cmp	r1, #29
 80095e2:	d82b      	bhi.n	800963c <__sflush_r+0xb8>
 80095e4:	4a29      	ldr	r2, [pc, #164]	; (800968c <__sflush_r+0x108>)
 80095e6:	410a      	asrs	r2, r1
 80095e8:	07d6      	lsls	r6, r2, #31
 80095ea:	d427      	bmi.n	800963c <__sflush_r+0xb8>
 80095ec:	2200      	movs	r2, #0
 80095ee:	6062      	str	r2, [r4, #4]
 80095f0:	04d9      	lsls	r1, r3, #19
 80095f2:	6922      	ldr	r2, [r4, #16]
 80095f4:	6022      	str	r2, [r4, #0]
 80095f6:	d504      	bpl.n	8009602 <__sflush_r+0x7e>
 80095f8:	1c42      	adds	r2, r0, #1
 80095fa:	d101      	bne.n	8009600 <__sflush_r+0x7c>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b903      	cbnz	r3, 8009602 <__sflush_r+0x7e>
 8009600:	6560      	str	r0, [r4, #84]	; 0x54
 8009602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009604:	602f      	str	r7, [r5, #0]
 8009606:	2900      	cmp	r1, #0
 8009608:	d0c9      	beq.n	800959e <__sflush_r+0x1a>
 800960a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800960e:	4299      	cmp	r1, r3
 8009610:	d002      	beq.n	8009618 <__sflush_r+0x94>
 8009612:	4628      	mov	r0, r5
 8009614:	f000 fd02 	bl	800a01c <_free_r>
 8009618:	2000      	movs	r0, #0
 800961a:	6360      	str	r0, [r4, #52]	; 0x34
 800961c:	e7c0      	b.n	80095a0 <__sflush_r+0x1c>
 800961e:	2301      	movs	r3, #1
 8009620:	4628      	mov	r0, r5
 8009622:	47b0      	blx	r6
 8009624:	1c41      	adds	r1, r0, #1
 8009626:	d1c8      	bne.n	80095ba <__sflush_r+0x36>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0c5      	beq.n	80095ba <__sflush_r+0x36>
 800962e:	2b1d      	cmp	r3, #29
 8009630:	d001      	beq.n	8009636 <__sflush_r+0xb2>
 8009632:	2b16      	cmp	r3, #22
 8009634:	d101      	bne.n	800963a <__sflush_r+0xb6>
 8009636:	602f      	str	r7, [r5, #0]
 8009638:	e7b1      	b.n	800959e <__sflush_r+0x1a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	e7ad      	b.n	80095a0 <__sflush_r+0x1c>
 8009644:	690f      	ldr	r7, [r1, #16]
 8009646:	2f00      	cmp	r7, #0
 8009648:	d0a9      	beq.n	800959e <__sflush_r+0x1a>
 800964a:	0793      	lsls	r3, r2, #30
 800964c:	680e      	ldr	r6, [r1, #0]
 800964e:	bf08      	it	eq
 8009650:	694b      	ldreq	r3, [r1, #20]
 8009652:	600f      	str	r7, [r1, #0]
 8009654:	bf18      	it	ne
 8009656:	2300      	movne	r3, #0
 8009658:	eba6 0807 	sub.w	r8, r6, r7
 800965c:	608b      	str	r3, [r1, #8]
 800965e:	f1b8 0f00 	cmp.w	r8, #0
 8009662:	dd9c      	ble.n	800959e <__sflush_r+0x1a>
 8009664:	6a21      	ldr	r1, [r4, #32]
 8009666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009668:	4643      	mov	r3, r8
 800966a:	463a      	mov	r2, r7
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	2800      	cmp	r0, #0
 8009672:	dc06      	bgt.n	8009682 <__sflush_r+0xfe>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009680:	e78e      	b.n	80095a0 <__sflush_r+0x1c>
 8009682:	4407      	add	r7, r0
 8009684:	eba8 0800 	sub.w	r8, r8, r0
 8009688:	e7e9      	b.n	800965e <__sflush_r+0xda>
 800968a:	bf00      	nop
 800968c:	dfbffffe 	.word	0xdfbffffe

08009690 <_fflush_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	4605      	mov	r5, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b913      	cbnz	r3, 80096a0 <_fflush_r+0x10>
 800969a:	2500      	movs	r5, #0
 800969c:	4628      	mov	r0, r5
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	b118      	cbz	r0, 80096aa <_fflush_r+0x1a>
 80096a2:	6a03      	ldr	r3, [r0, #32]
 80096a4:	b90b      	cbnz	r3, 80096aa <_fflush_r+0x1a>
 80096a6:	f7fe fe55 	bl	8008354 <__sinit>
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0f3      	beq.n	800969a <_fflush_r+0xa>
 80096b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096b4:	07d0      	lsls	r0, r2, #31
 80096b6:	d404      	bmi.n	80096c2 <_fflush_r+0x32>
 80096b8:	0599      	lsls	r1, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_fflush_r+0x32>
 80096bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096be:	f7fe fed6 	bl	800846e <__retarget_lock_acquire_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	4621      	mov	r1, r4
 80096c6:	f7ff ff5d 	bl	8009584 <__sflush_r>
 80096ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096cc:	07da      	lsls	r2, r3, #31
 80096ce:	4605      	mov	r5, r0
 80096d0:	d4e4      	bmi.n	800969c <_fflush_r+0xc>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	d4e1      	bmi.n	800969c <_fflush_r+0xc>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f7fe fec9 	bl	8008470 <__retarget_lock_release_recursive>
 80096de:	e7dd      	b.n	800969c <_fflush_r+0xc>

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__malloc_lock+0x8>)
 80096e2:	f7fe bec4 	b.w	800846e <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	20003028 	.word	0x20003028

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f7fe bebf 	b.w	8008470 <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	20003028 	.word	0x20003028

080096f8 <_Balloc>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	69c6      	ldr	r6, [r0, #28]
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	b976      	cbnz	r6, 8009720 <_Balloc+0x28>
 8009702:	2010      	movs	r0, #16
 8009704:	f7ff fe96 	bl	8009434 <malloc>
 8009708:	4602      	mov	r2, r0
 800970a:	61e0      	str	r0, [r4, #28]
 800970c:	b920      	cbnz	r0, 8009718 <_Balloc+0x20>
 800970e:	4b18      	ldr	r3, [pc, #96]	; (8009770 <_Balloc+0x78>)
 8009710:	4818      	ldr	r0, [pc, #96]	; (8009774 <_Balloc+0x7c>)
 8009712:	216b      	movs	r1, #107	; 0x6b
 8009714:	f000 fc4e 	bl	8009fb4 <__assert_func>
 8009718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800971c:	6006      	str	r6, [r0, #0]
 800971e:	60c6      	str	r6, [r0, #12]
 8009720:	69e6      	ldr	r6, [r4, #28]
 8009722:	68f3      	ldr	r3, [r6, #12]
 8009724:	b183      	cbz	r3, 8009748 <_Balloc+0x50>
 8009726:	69e3      	ldr	r3, [r4, #28]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800972e:	b9b8      	cbnz	r0, 8009760 <_Balloc+0x68>
 8009730:	2101      	movs	r1, #1
 8009732:	fa01 f605 	lsl.w	r6, r1, r5
 8009736:	1d72      	adds	r2, r6, #5
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fc58 	bl	8009ff0 <_calloc_r>
 8009740:	b160      	cbz	r0, 800975c <_Balloc+0x64>
 8009742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009746:	e00e      	b.n	8009766 <_Balloc+0x6e>
 8009748:	2221      	movs	r2, #33	; 0x21
 800974a:	2104      	movs	r1, #4
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fc4f 	bl	8009ff0 <_calloc_r>
 8009752:	69e3      	ldr	r3, [r4, #28]
 8009754:	60f0      	str	r0, [r6, #12]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e4      	bne.n	8009726 <_Balloc+0x2e>
 800975c:	2000      	movs	r0, #0
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	6802      	ldr	r2, [r0, #0]
 8009762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009766:	2300      	movs	r3, #0
 8009768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800976c:	e7f7      	b.n	800975e <_Balloc+0x66>
 800976e:	bf00      	nop
 8009770:	0800af65 	.word	0x0800af65
 8009774:	0800aff6 	.word	0x0800aff6

08009778 <_Bfree>:
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	69c6      	ldr	r6, [r0, #28]
 800977c:	4605      	mov	r5, r0
 800977e:	460c      	mov	r4, r1
 8009780:	b976      	cbnz	r6, 80097a0 <_Bfree+0x28>
 8009782:	2010      	movs	r0, #16
 8009784:	f7ff fe56 	bl	8009434 <malloc>
 8009788:	4602      	mov	r2, r0
 800978a:	61e8      	str	r0, [r5, #28]
 800978c:	b920      	cbnz	r0, 8009798 <_Bfree+0x20>
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <_Bfree+0x3c>)
 8009790:	4809      	ldr	r0, [pc, #36]	; (80097b8 <_Bfree+0x40>)
 8009792:	218f      	movs	r1, #143	; 0x8f
 8009794:	f000 fc0e 	bl	8009fb4 <__assert_func>
 8009798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800979c:	6006      	str	r6, [r0, #0]
 800979e:	60c6      	str	r6, [r0, #12]
 80097a0:	b13c      	cbz	r4, 80097b2 <_Bfree+0x3a>
 80097a2:	69eb      	ldr	r3, [r5, #28]
 80097a4:	6862      	ldr	r2, [r4, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097ac:	6021      	str	r1, [r4, #0]
 80097ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	0800af65 	.word	0x0800af65
 80097b8:	0800aff6 	.word	0x0800aff6

080097bc <__multadd>:
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	690d      	ldr	r5, [r1, #16]
 80097c2:	4607      	mov	r7, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	461e      	mov	r6, r3
 80097c8:	f101 0c14 	add.w	ip, r1, #20
 80097cc:	2000      	movs	r0, #0
 80097ce:	f8dc 3000 	ldr.w	r3, [ip]
 80097d2:	b299      	uxth	r1, r3
 80097d4:	fb02 6101 	mla	r1, r2, r1, r6
 80097d8:	0c1e      	lsrs	r6, r3, #16
 80097da:	0c0b      	lsrs	r3, r1, #16
 80097dc:	fb02 3306 	mla	r3, r2, r6, r3
 80097e0:	b289      	uxth	r1, r1
 80097e2:	3001      	adds	r0, #1
 80097e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097e8:	4285      	cmp	r5, r0
 80097ea:	f84c 1b04 	str.w	r1, [ip], #4
 80097ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097f2:	dcec      	bgt.n	80097ce <__multadd+0x12>
 80097f4:	b30e      	cbz	r6, 800983a <__multadd+0x7e>
 80097f6:	68a3      	ldr	r3, [r4, #8]
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	dc19      	bgt.n	8009830 <__multadd+0x74>
 80097fc:	6861      	ldr	r1, [r4, #4]
 80097fe:	4638      	mov	r0, r7
 8009800:	3101      	adds	r1, #1
 8009802:	f7ff ff79 	bl	80096f8 <_Balloc>
 8009806:	4680      	mov	r8, r0
 8009808:	b928      	cbnz	r0, 8009816 <__multadd+0x5a>
 800980a:	4602      	mov	r2, r0
 800980c:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <__multadd+0x84>)
 800980e:	480d      	ldr	r0, [pc, #52]	; (8009844 <__multadd+0x88>)
 8009810:	21ba      	movs	r1, #186	; 0xba
 8009812:	f000 fbcf 	bl	8009fb4 <__assert_func>
 8009816:	6922      	ldr	r2, [r4, #16]
 8009818:	3202      	adds	r2, #2
 800981a:	f104 010c 	add.w	r1, r4, #12
 800981e:	0092      	lsls	r2, r2, #2
 8009820:	300c      	adds	r0, #12
 8009822:	f7fe fe26 	bl	8008472 <memcpy>
 8009826:	4621      	mov	r1, r4
 8009828:	4638      	mov	r0, r7
 800982a:	f7ff ffa5 	bl	8009778 <_Bfree>
 800982e:	4644      	mov	r4, r8
 8009830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009834:	3501      	adds	r5, #1
 8009836:	615e      	str	r6, [r3, #20]
 8009838:	6125      	str	r5, [r4, #16]
 800983a:	4620      	mov	r0, r4
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	0800afd4 	.word	0x0800afd4
 8009844:	0800aff6 	.word	0x0800aff6

08009848 <__hi0bits>:
 8009848:	0c03      	lsrs	r3, r0, #16
 800984a:	041b      	lsls	r3, r3, #16
 800984c:	b9d3      	cbnz	r3, 8009884 <__hi0bits+0x3c>
 800984e:	0400      	lsls	r0, r0, #16
 8009850:	2310      	movs	r3, #16
 8009852:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009856:	bf04      	itt	eq
 8009858:	0200      	lsleq	r0, r0, #8
 800985a:	3308      	addeq	r3, #8
 800985c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009860:	bf04      	itt	eq
 8009862:	0100      	lsleq	r0, r0, #4
 8009864:	3304      	addeq	r3, #4
 8009866:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800986a:	bf04      	itt	eq
 800986c:	0080      	lsleq	r0, r0, #2
 800986e:	3302      	addeq	r3, #2
 8009870:	2800      	cmp	r0, #0
 8009872:	db05      	blt.n	8009880 <__hi0bits+0x38>
 8009874:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009878:	f103 0301 	add.w	r3, r3, #1
 800987c:	bf08      	it	eq
 800987e:	2320      	moveq	r3, #32
 8009880:	4618      	mov	r0, r3
 8009882:	4770      	bx	lr
 8009884:	2300      	movs	r3, #0
 8009886:	e7e4      	b.n	8009852 <__hi0bits+0xa>

08009888 <__lo0bits>:
 8009888:	6803      	ldr	r3, [r0, #0]
 800988a:	f013 0207 	ands.w	r2, r3, #7
 800988e:	d00c      	beq.n	80098aa <__lo0bits+0x22>
 8009890:	07d9      	lsls	r1, r3, #31
 8009892:	d422      	bmi.n	80098da <__lo0bits+0x52>
 8009894:	079a      	lsls	r2, r3, #30
 8009896:	bf49      	itett	mi
 8009898:	085b      	lsrmi	r3, r3, #1
 800989a:	089b      	lsrpl	r3, r3, #2
 800989c:	6003      	strmi	r3, [r0, #0]
 800989e:	2201      	movmi	r2, #1
 80098a0:	bf5c      	itt	pl
 80098a2:	6003      	strpl	r3, [r0, #0]
 80098a4:	2202      	movpl	r2, #2
 80098a6:	4610      	mov	r0, r2
 80098a8:	4770      	bx	lr
 80098aa:	b299      	uxth	r1, r3
 80098ac:	b909      	cbnz	r1, 80098b2 <__lo0bits+0x2a>
 80098ae:	0c1b      	lsrs	r3, r3, #16
 80098b0:	2210      	movs	r2, #16
 80098b2:	b2d9      	uxtb	r1, r3
 80098b4:	b909      	cbnz	r1, 80098ba <__lo0bits+0x32>
 80098b6:	3208      	adds	r2, #8
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	0719      	lsls	r1, r3, #28
 80098bc:	bf04      	itt	eq
 80098be:	091b      	lsreq	r3, r3, #4
 80098c0:	3204      	addeq	r2, #4
 80098c2:	0799      	lsls	r1, r3, #30
 80098c4:	bf04      	itt	eq
 80098c6:	089b      	lsreq	r3, r3, #2
 80098c8:	3202      	addeq	r2, #2
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d403      	bmi.n	80098d6 <__lo0bits+0x4e>
 80098ce:	085b      	lsrs	r3, r3, #1
 80098d0:	f102 0201 	add.w	r2, r2, #1
 80098d4:	d003      	beq.n	80098de <__lo0bits+0x56>
 80098d6:	6003      	str	r3, [r0, #0]
 80098d8:	e7e5      	b.n	80098a6 <__lo0bits+0x1e>
 80098da:	2200      	movs	r2, #0
 80098dc:	e7e3      	b.n	80098a6 <__lo0bits+0x1e>
 80098de:	2220      	movs	r2, #32
 80098e0:	e7e1      	b.n	80098a6 <__lo0bits+0x1e>
	...

080098e4 <__i2b>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	2101      	movs	r1, #1
 80098ea:	f7ff ff05 	bl	80096f8 <_Balloc>
 80098ee:	4602      	mov	r2, r0
 80098f0:	b928      	cbnz	r0, 80098fe <__i2b+0x1a>
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <__i2b+0x24>)
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <__i2b+0x28>)
 80098f6:	f240 1145 	movw	r1, #325	; 0x145
 80098fa:	f000 fb5b 	bl	8009fb4 <__assert_func>
 80098fe:	2301      	movs	r3, #1
 8009900:	6144      	str	r4, [r0, #20]
 8009902:	6103      	str	r3, [r0, #16]
 8009904:	bd10      	pop	{r4, pc}
 8009906:	bf00      	nop
 8009908:	0800afd4 	.word	0x0800afd4
 800990c:	0800aff6 	.word	0x0800aff6

08009910 <__multiply>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	4691      	mov	r9, r2
 8009916:	690a      	ldr	r2, [r1, #16]
 8009918:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800991c:	429a      	cmp	r2, r3
 800991e:	bfb8      	it	lt
 8009920:	460b      	movlt	r3, r1
 8009922:	460c      	mov	r4, r1
 8009924:	bfbc      	itt	lt
 8009926:	464c      	movlt	r4, r9
 8009928:	4699      	movlt	r9, r3
 800992a:	6927      	ldr	r7, [r4, #16]
 800992c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009930:	68a3      	ldr	r3, [r4, #8]
 8009932:	6861      	ldr	r1, [r4, #4]
 8009934:	eb07 060a 	add.w	r6, r7, sl
 8009938:	42b3      	cmp	r3, r6
 800993a:	b085      	sub	sp, #20
 800993c:	bfb8      	it	lt
 800993e:	3101      	addlt	r1, #1
 8009940:	f7ff feda 	bl	80096f8 <_Balloc>
 8009944:	b930      	cbnz	r0, 8009954 <__multiply+0x44>
 8009946:	4602      	mov	r2, r0
 8009948:	4b44      	ldr	r3, [pc, #272]	; (8009a5c <__multiply+0x14c>)
 800994a:	4845      	ldr	r0, [pc, #276]	; (8009a60 <__multiply+0x150>)
 800994c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009950:	f000 fb30 	bl	8009fb4 <__assert_func>
 8009954:	f100 0514 	add.w	r5, r0, #20
 8009958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800995c:	462b      	mov	r3, r5
 800995e:	2200      	movs	r2, #0
 8009960:	4543      	cmp	r3, r8
 8009962:	d321      	bcc.n	80099a8 <__multiply+0x98>
 8009964:	f104 0314 	add.w	r3, r4, #20
 8009968:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800996c:	f109 0314 	add.w	r3, r9, #20
 8009970:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	1b3a      	subs	r2, r7, r4
 8009978:	3a15      	subs	r2, #21
 800997a:	f022 0203 	bic.w	r2, r2, #3
 800997e:	3204      	adds	r2, #4
 8009980:	f104 0115 	add.w	r1, r4, #21
 8009984:	428f      	cmp	r7, r1
 8009986:	bf38      	it	cc
 8009988:	2204      	movcc	r2, #4
 800998a:	9201      	str	r2, [sp, #4]
 800998c:	9a02      	ldr	r2, [sp, #8]
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	429a      	cmp	r2, r3
 8009992:	d80c      	bhi.n	80099ae <__multiply+0x9e>
 8009994:	2e00      	cmp	r6, #0
 8009996:	dd03      	ble.n	80099a0 <__multiply+0x90>
 8009998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800999c:	2b00      	cmp	r3, #0
 800999e:	d05b      	beq.n	8009a58 <__multiply+0x148>
 80099a0:	6106      	str	r6, [r0, #16]
 80099a2:	b005      	add	sp, #20
 80099a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a8:	f843 2b04 	str.w	r2, [r3], #4
 80099ac:	e7d8      	b.n	8009960 <__multiply+0x50>
 80099ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80099b2:	f1ba 0f00 	cmp.w	sl, #0
 80099b6:	d024      	beq.n	8009a02 <__multiply+0xf2>
 80099b8:	f104 0e14 	add.w	lr, r4, #20
 80099bc:	46a9      	mov	r9, r5
 80099be:	f04f 0c00 	mov.w	ip, #0
 80099c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099c6:	f8d9 1000 	ldr.w	r1, [r9]
 80099ca:	fa1f fb82 	uxth.w	fp, r2
 80099ce:	b289      	uxth	r1, r1
 80099d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80099d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099d8:	f8d9 2000 	ldr.w	r2, [r9]
 80099dc:	4461      	add	r1, ip
 80099de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80099e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099ea:	b289      	uxth	r1, r1
 80099ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099f0:	4577      	cmp	r7, lr
 80099f2:	f849 1b04 	str.w	r1, [r9], #4
 80099f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099fa:	d8e2      	bhi.n	80099c2 <__multiply+0xb2>
 80099fc:	9a01      	ldr	r2, [sp, #4]
 80099fe:	f845 c002 	str.w	ip, [r5, r2]
 8009a02:	9a03      	ldr	r2, [sp, #12]
 8009a04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	f1b9 0f00 	cmp.w	r9, #0
 8009a0e:	d021      	beq.n	8009a54 <__multiply+0x144>
 8009a10:	6829      	ldr	r1, [r5, #0]
 8009a12:	f104 0c14 	add.w	ip, r4, #20
 8009a16:	46ae      	mov	lr, r5
 8009a18:	f04f 0a00 	mov.w	sl, #0
 8009a1c:	f8bc b000 	ldrh.w	fp, [ip]
 8009a20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a24:	fb09 220b 	mla	r2, r9, fp, r2
 8009a28:	4452      	add	r2, sl
 8009a2a:	b289      	uxth	r1, r1
 8009a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a30:	f84e 1b04 	str.w	r1, [lr], #4
 8009a34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a3c:	f8be 1000 	ldrh.w	r1, [lr]
 8009a40:	fb09 110a 	mla	r1, r9, sl, r1
 8009a44:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a48:	4567      	cmp	r7, ip
 8009a4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a4e:	d8e5      	bhi.n	8009a1c <__multiply+0x10c>
 8009a50:	9a01      	ldr	r2, [sp, #4]
 8009a52:	50a9      	str	r1, [r5, r2]
 8009a54:	3504      	adds	r5, #4
 8009a56:	e799      	b.n	800998c <__multiply+0x7c>
 8009a58:	3e01      	subs	r6, #1
 8009a5a:	e79b      	b.n	8009994 <__multiply+0x84>
 8009a5c:	0800afd4 	.word	0x0800afd4
 8009a60:	0800aff6 	.word	0x0800aff6

08009a64 <__pow5mult>:
 8009a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a68:	4615      	mov	r5, r2
 8009a6a:	f012 0203 	ands.w	r2, r2, #3
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	d007      	beq.n	8009a84 <__pow5mult+0x20>
 8009a74:	4c25      	ldr	r4, [pc, #148]	; (8009b0c <__pow5mult+0xa8>)
 8009a76:	3a01      	subs	r2, #1
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a7e:	f7ff fe9d 	bl	80097bc <__multadd>
 8009a82:	4607      	mov	r7, r0
 8009a84:	10ad      	asrs	r5, r5, #2
 8009a86:	d03d      	beq.n	8009b04 <__pow5mult+0xa0>
 8009a88:	69f4      	ldr	r4, [r6, #28]
 8009a8a:	b97c      	cbnz	r4, 8009aac <__pow5mult+0x48>
 8009a8c:	2010      	movs	r0, #16
 8009a8e:	f7ff fcd1 	bl	8009434 <malloc>
 8009a92:	4602      	mov	r2, r0
 8009a94:	61f0      	str	r0, [r6, #28]
 8009a96:	b928      	cbnz	r0, 8009aa4 <__pow5mult+0x40>
 8009a98:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <__pow5mult+0xac>)
 8009a9a:	481e      	ldr	r0, [pc, #120]	; (8009b14 <__pow5mult+0xb0>)
 8009a9c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009aa0:	f000 fa88 	bl	8009fb4 <__assert_func>
 8009aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa8:	6004      	str	r4, [r0, #0]
 8009aaa:	60c4      	str	r4, [r0, #12]
 8009aac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ab4:	b94c      	cbnz	r4, 8009aca <__pow5mult+0x66>
 8009ab6:	f240 2171 	movw	r1, #625	; 0x271
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff ff12 	bl	80098e4 <__i2b>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	07eb      	lsls	r3, r5, #31
 8009ad0:	d50a      	bpl.n	8009ae8 <__pow5mult+0x84>
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ff1a 	bl	8009910 <__multiply>
 8009adc:	4639      	mov	r1, r7
 8009ade:	4680      	mov	r8, r0
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7ff fe49 	bl	8009778 <_Bfree>
 8009ae6:	4647      	mov	r7, r8
 8009ae8:	106d      	asrs	r5, r5, #1
 8009aea:	d00b      	beq.n	8009b04 <__pow5mult+0xa0>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	b938      	cbnz	r0, 8009b00 <__pow5mult+0x9c>
 8009af0:	4622      	mov	r2, r4
 8009af2:	4621      	mov	r1, r4
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ff0b 	bl	8009910 <__multiply>
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	f8c0 9000 	str.w	r9, [r0]
 8009b00:	4604      	mov	r4, r0
 8009b02:	e7e4      	b.n	8009ace <__pow5mult+0x6a>
 8009b04:	4638      	mov	r0, r7
 8009b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0800b140 	.word	0x0800b140
 8009b10:	0800af65 	.word	0x0800af65
 8009b14:	0800aff6 	.word	0x0800aff6

08009b18 <__lshift>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	6849      	ldr	r1, [r1, #4]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	4607      	mov	r7, r0
 8009b2a:	4691      	mov	r9, r2
 8009b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b30:	f108 0601 	add.w	r6, r8, #1
 8009b34:	42b3      	cmp	r3, r6
 8009b36:	db0b      	blt.n	8009b50 <__lshift+0x38>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff fddd 	bl	80096f8 <_Balloc>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	b948      	cbnz	r0, 8009b56 <__lshift+0x3e>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b28      	ldr	r3, [pc, #160]	; (8009be8 <__lshift+0xd0>)
 8009b46:	4829      	ldr	r0, [pc, #164]	; (8009bec <__lshift+0xd4>)
 8009b48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b4c:	f000 fa32 	bl	8009fb4 <__assert_func>
 8009b50:	3101      	adds	r1, #1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	e7ee      	b.n	8009b34 <__lshift+0x1c>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f100 0114 	add.w	r1, r0, #20
 8009b5c:	f100 0210 	add.w	r2, r0, #16
 8009b60:	4618      	mov	r0, r3
 8009b62:	4553      	cmp	r3, sl
 8009b64:	db33      	blt.n	8009bce <__lshift+0xb6>
 8009b66:	6920      	ldr	r0, [r4, #16]
 8009b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b6c:	f104 0314 	add.w	r3, r4, #20
 8009b70:	f019 091f 	ands.w	r9, r9, #31
 8009b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b7c:	d02b      	beq.n	8009bd6 <__lshift+0xbe>
 8009b7e:	f1c9 0e20 	rsb	lr, r9, #32
 8009b82:	468a      	mov	sl, r1
 8009b84:	2200      	movs	r2, #0
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	fa00 f009 	lsl.w	r0, r0, r9
 8009b8c:	4310      	orrs	r0, r2
 8009b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	459c      	cmp	ip, r3
 8009b98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b9c:	d8f3      	bhi.n	8009b86 <__lshift+0x6e>
 8009b9e:	ebac 0304 	sub.w	r3, ip, r4
 8009ba2:	3b15      	subs	r3, #21
 8009ba4:	f023 0303 	bic.w	r3, r3, #3
 8009ba8:	3304      	adds	r3, #4
 8009baa:	f104 0015 	add.w	r0, r4, #21
 8009bae:	4584      	cmp	ip, r0
 8009bb0:	bf38      	it	cc
 8009bb2:	2304      	movcc	r3, #4
 8009bb4:	50ca      	str	r2, [r1, r3]
 8009bb6:	b10a      	cbz	r2, 8009bbc <__lshift+0xa4>
 8009bb8:	f108 0602 	add.w	r6, r8, #2
 8009bbc:	3e01      	subs	r6, #1
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	612e      	str	r6, [r5, #16]
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	f7ff fdd8 	bl	8009778 <_Bfree>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	e7c5      	b.n	8009b62 <__lshift+0x4a>
 8009bd6:	3904      	subs	r1, #4
 8009bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009be0:	459c      	cmp	ip, r3
 8009be2:	d8f9      	bhi.n	8009bd8 <__lshift+0xc0>
 8009be4:	e7ea      	b.n	8009bbc <__lshift+0xa4>
 8009be6:	bf00      	nop
 8009be8:	0800afd4 	.word	0x0800afd4
 8009bec:	0800aff6 	.word	0x0800aff6

08009bf0 <__mcmp>:
 8009bf0:	b530      	push	{r4, r5, lr}
 8009bf2:	6902      	ldr	r2, [r0, #16]
 8009bf4:	690c      	ldr	r4, [r1, #16]
 8009bf6:	1b12      	subs	r2, r2, r4
 8009bf8:	d10e      	bne.n	8009c18 <__mcmp+0x28>
 8009bfa:	f100 0314 	add.w	r3, r0, #20
 8009bfe:	3114      	adds	r1, #20
 8009c00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c10:	42a5      	cmp	r5, r4
 8009c12:	d003      	beq.n	8009c1c <__mcmp+0x2c>
 8009c14:	d305      	bcc.n	8009c22 <__mcmp+0x32>
 8009c16:	2201      	movs	r2, #1
 8009c18:	4610      	mov	r0, r2
 8009c1a:	bd30      	pop	{r4, r5, pc}
 8009c1c:	4283      	cmp	r3, r0
 8009c1e:	d3f3      	bcc.n	8009c08 <__mcmp+0x18>
 8009c20:	e7fa      	b.n	8009c18 <__mcmp+0x28>
 8009c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c26:	e7f7      	b.n	8009c18 <__mcmp+0x28>

08009c28 <__mdiff>:
 8009c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	4606      	mov	r6, r0
 8009c30:	4611      	mov	r1, r2
 8009c32:	4620      	mov	r0, r4
 8009c34:	4690      	mov	r8, r2
 8009c36:	f7ff ffdb 	bl	8009bf0 <__mcmp>
 8009c3a:	1e05      	subs	r5, r0, #0
 8009c3c:	d110      	bne.n	8009c60 <__mdiff+0x38>
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff fd59 	bl	80096f8 <_Balloc>
 8009c46:	b930      	cbnz	r0, 8009c56 <__mdiff+0x2e>
 8009c48:	4b3a      	ldr	r3, [pc, #232]	; (8009d34 <__mdiff+0x10c>)
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	f240 2137 	movw	r1, #567	; 0x237
 8009c50:	4839      	ldr	r0, [pc, #228]	; (8009d38 <__mdiff+0x110>)
 8009c52:	f000 f9af 	bl	8009fb4 <__assert_func>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c60:	bfa4      	itt	ge
 8009c62:	4643      	movge	r3, r8
 8009c64:	46a0      	movge	r8, r4
 8009c66:	4630      	mov	r0, r6
 8009c68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c6c:	bfa6      	itte	ge
 8009c6e:	461c      	movge	r4, r3
 8009c70:	2500      	movge	r5, #0
 8009c72:	2501      	movlt	r5, #1
 8009c74:	f7ff fd40 	bl	80096f8 <_Balloc>
 8009c78:	b920      	cbnz	r0, 8009c84 <__mdiff+0x5c>
 8009c7a:	4b2e      	ldr	r3, [pc, #184]	; (8009d34 <__mdiff+0x10c>)
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	f240 2145 	movw	r1, #581	; 0x245
 8009c82:	e7e5      	b.n	8009c50 <__mdiff+0x28>
 8009c84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c88:	6926      	ldr	r6, [r4, #16]
 8009c8a:	60c5      	str	r5, [r0, #12]
 8009c8c:	f104 0914 	add.w	r9, r4, #20
 8009c90:	f108 0514 	add.w	r5, r8, #20
 8009c94:	f100 0e14 	add.w	lr, r0, #20
 8009c98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ca0:	f108 0210 	add.w	r2, r8, #16
 8009ca4:	46f2      	mov	sl, lr
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cb0:	fa11 f88b 	uxtah	r8, r1, fp
 8009cb4:	b299      	uxth	r1, r3
 8009cb6:	0c1b      	lsrs	r3, r3, #16
 8009cb8:	eba8 0801 	sub.w	r8, r8, r1
 8009cbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cc4:	fa1f f888 	uxth.w	r8, r8
 8009cc8:	1419      	asrs	r1, r3, #16
 8009cca:	454e      	cmp	r6, r9
 8009ccc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cd0:	f84a 3b04 	str.w	r3, [sl], #4
 8009cd4:	d8e8      	bhi.n	8009ca8 <__mdiff+0x80>
 8009cd6:	1b33      	subs	r3, r6, r4
 8009cd8:	3b15      	subs	r3, #21
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	3304      	adds	r3, #4
 8009ce0:	3415      	adds	r4, #21
 8009ce2:	42a6      	cmp	r6, r4
 8009ce4:	bf38      	it	cc
 8009ce6:	2304      	movcc	r3, #4
 8009ce8:	441d      	add	r5, r3
 8009cea:	4473      	add	r3, lr
 8009cec:	469e      	mov	lr, r3
 8009cee:	462e      	mov	r6, r5
 8009cf0:	4566      	cmp	r6, ip
 8009cf2:	d30e      	bcc.n	8009d12 <__mdiff+0xea>
 8009cf4:	f10c 0203 	add.w	r2, ip, #3
 8009cf8:	1b52      	subs	r2, r2, r5
 8009cfa:	f022 0203 	bic.w	r2, r2, #3
 8009cfe:	3d03      	subs	r5, #3
 8009d00:	45ac      	cmp	ip, r5
 8009d02:	bf38      	it	cc
 8009d04:	2200      	movcc	r2, #0
 8009d06:	4413      	add	r3, r2
 8009d08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d0c:	b17a      	cbz	r2, 8009d2e <__mdiff+0x106>
 8009d0e:	6107      	str	r7, [r0, #16]
 8009d10:	e7a4      	b.n	8009c5c <__mdiff+0x34>
 8009d12:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d16:	fa11 f288 	uxtah	r2, r1, r8
 8009d1a:	1414      	asrs	r4, r2, #16
 8009d1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d20:	b292      	uxth	r2, r2
 8009d22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d26:	f84e 2b04 	str.w	r2, [lr], #4
 8009d2a:	1421      	asrs	r1, r4, #16
 8009d2c:	e7e0      	b.n	8009cf0 <__mdiff+0xc8>
 8009d2e:	3f01      	subs	r7, #1
 8009d30:	e7ea      	b.n	8009d08 <__mdiff+0xe0>
 8009d32:	bf00      	nop
 8009d34:	0800afd4 	.word	0x0800afd4
 8009d38:	0800aff6 	.word	0x0800aff6

08009d3c <__d2b>:
 8009d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	460f      	mov	r7, r1
 8009d42:	2101      	movs	r1, #1
 8009d44:	ec59 8b10 	vmov	r8, r9, d0
 8009d48:	4616      	mov	r6, r2
 8009d4a:	f7ff fcd5 	bl	80096f8 <_Balloc>
 8009d4e:	4604      	mov	r4, r0
 8009d50:	b930      	cbnz	r0, 8009d60 <__d2b+0x24>
 8009d52:	4602      	mov	r2, r0
 8009d54:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <__d2b+0xac>)
 8009d56:	4825      	ldr	r0, [pc, #148]	; (8009dec <__d2b+0xb0>)
 8009d58:	f240 310f 	movw	r1, #783	; 0x30f
 8009d5c:	f000 f92a 	bl	8009fb4 <__assert_func>
 8009d60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d68:	bb2d      	cbnz	r5, 8009db6 <__d2b+0x7a>
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8009d70:	d026      	beq.n	8009dc0 <__d2b+0x84>
 8009d72:	4668      	mov	r0, sp
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	f7ff fd87 	bl	8009888 <__lo0bits>
 8009d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d7e:	b1e8      	cbz	r0, 8009dbc <__d2b+0x80>
 8009d80:	f1c0 0320 	rsb	r3, r0, #32
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	40c2      	lsrs	r2, r0
 8009d8c:	6163      	str	r3, [r4, #20]
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	61a3      	str	r3, [r4, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf14      	ite	ne
 8009d98:	2202      	movne	r2, #2
 8009d9a:	2201      	moveq	r2, #1
 8009d9c:	6122      	str	r2, [r4, #16]
 8009d9e:	b1bd      	cbz	r5, 8009dd0 <__d2b+0x94>
 8009da0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009da4:	4405      	add	r5, r0
 8009da6:	603d      	str	r5, [r7, #0]
 8009da8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dac:	6030      	str	r0, [r6, #0]
 8009dae:	4620      	mov	r0, r4
 8009db0:	b003      	add	sp, #12
 8009db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dba:	e7d6      	b.n	8009d6a <__d2b+0x2e>
 8009dbc:	6161      	str	r1, [r4, #20]
 8009dbe:	e7e7      	b.n	8009d90 <__d2b+0x54>
 8009dc0:	a801      	add	r0, sp, #4
 8009dc2:	f7ff fd61 	bl	8009888 <__lo0bits>
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	6163      	str	r3, [r4, #20]
 8009dca:	3020      	adds	r0, #32
 8009dcc:	2201      	movs	r2, #1
 8009dce:	e7e5      	b.n	8009d9c <__d2b+0x60>
 8009dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dd8:	6038      	str	r0, [r7, #0]
 8009dda:	6918      	ldr	r0, [r3, #16]
 8009ddc:	f7ff fd34 	bl	8009848 <__hi0bits>
 8009de0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009de4:	e7e2      	b.n	8009dac <__d2b+0x70>
 8009de6:	bf00      	nop
 8009de8:	0800afd4 	.word	0x0800afd4
 8009dec:	0800aff6 	.word	0x0800aff6

08009df0 <__sread>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df8:	f000 f8a8 	bl	8009f4c <_read_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	bfab      	itete	ge
 8009e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e02:	89a3      	ldrhlt	r3, [r4, #12]
 8009e04:	181b      	addge	r3, r3, r0
 8009e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e0a:	bfac      	ite	ge
 8009e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e0e:	81a3      	strhlt	r3, [r4, #12]
 8009e10:	bd10      	pop	{r4, pc}

08009e12 <__swrite>:
 8009e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e16:	461f      	mov	r7, r3
 8009e18:	898b      	ldrh	r3, [r1, #12]
 8009e1a:	05db      	lsls	r3, r3, #23
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	4616      	mov	r6, r2
 8009e22:	d505      	bpl.n	8009e30 <__swrite+0x1e>
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f000 f87c 	bl	8009f28 <_lseek_r>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	f000 b8a3 	b.w	8009f90 <_write_r>

08009e4a <__sseek>:
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e52:	f000 f869 	bl	8009f28 <_lseek_r>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	bf15      	itete	ne
 8009e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e66:	81a3      	strheq	r3, [r4, #12]
 8009e68:	bf18      	it	ne
 8009e6a:	81a3      	strhne	r3, [r4, #12]
 8009e6c:	bd10      	pop	{r4, pc}

08009e6e <__sclose>:
 8009e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e72:	f000 b849 	b.w	8009f08 <_close_r>

08009e76 <_realloc_r>:
 8009e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	460e      	mov	r6, r1
 8009e80:	b921      	cbnz	r1, 8009e8c <_realloc_r+0x16>
 8009e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e86:	4611      	mov	r1, r2
 8009e88:	f7ff bafc 	b.w	8009484 <_malloc_r>
 8009e8c:	b92a      	cbnz	r2, 8009e9a <_realloc_r+0x24>
 8009e8e:	f000 f8c5 	bl	800a01c <_free_r>
 8009e92:	4625      	mov	r5, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9a:	f000 f91d 	bl	800a0d8 <_malloc_usable_size_r>
 8009e9e:	4284      	cmp	r4, r0
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	d802      	bhi.n	8009eaa <_realloc_r+0x34>
 8009ea4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ea8:	d812      	bhi.n	8009ed0 <_realloc_r+0x5a>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4640      	mov	r0, r8
 8009eae:	f7ff fae9 	bl	8009484 <_malloc_r>
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d0ed      	beq.n	8009e94 <_realloc_r+0x1e>
 8009eb8:	42bc      	cmp	r4, r7
 8009eba:	4622      	mov	r2, r4
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	bf28      	it	cs
 8009ec0:	463a      	movcs	r2, r7
 8009ec2:	f7fe fad6 	bl	8008472 <memcpy>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4640      	mov	r0, r8
 8009eca:	f000 f8a7 	bl	800a01c <_free_r>
 8009ece:	e7e1      	b.n	8009e94 <_realloc_r+0x1e>
 8009ed0:	4635      	mov	r5, r6
 8009ed2:	e7df      	b.n	8009e94 <_realloc_r+0x1e>

08009ed4 <memmove>:
 8009ed4:	4288      	cmp	r0, r1
 8009ed6:	b510      	push	{r4, lr}
 8009ed8:	eb01 0402 	add.w	r4, r1, r2
 8009edc:	d902      	bls.n	8009ee4 <memmove+0x10>
 8009ede:	4284      	cmp	r4, r0
 8009ee0:	4623      	mov	r3, r4
 8009ee2:	d807      	bhi.n	8009ef4 <memmove+0x20>
 8009ee4:	1e43      	subs	r3, r0, #1
 8009ee6:	42a1      	cmp	r1, r4
 8009ee8:	d008      	beq.n	8009efc <memmove+0x28>
 8009eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef2:	e7f8      	b.n	8009ee6 <memmove+0x12>
 8009ef4:	4402      	add	r2, r0
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	428a      	cmp	r2, r1
 8009efa:	d100      	bne.n	8009efe <memmove+0x2a>
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f06:	e7f7      	b.n	8009ef8 <memmove+0x24>

08009f08 <_close_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d06      	ldr	r5, [pc, #24]	; (8009f24 <_close_r+0x1c>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	f7f9 f8dd 	bl	80030d2 <_close>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_close_r+0x1a>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_close_r+0x1a>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20003034 	.word	0x20003034

08009f28 <_lseek_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_lseek_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f9 f8f2 	bl	8003120 <_lseek>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_lseek_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_lseek_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20003034 	.word	0x20003034

08009f4c <_read_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_read_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f9 f880 	bl	8003060 <_read>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_read_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_read_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20003034 	.word	0x20003034

08009f70 <_sbrk_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_sbrk_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f9 f8de 	bl	800313c <_sbrk>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_sbrk_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_sbrk_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20003034 	.word	0x20003034

08009f90 <_write_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_write_r+0x20>)
 8009f94:	4604      	mov	r4, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f9 f87b 	bl	800309a <_write>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_write_r+0x1e>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_write_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20003034 	.word	0x20003034

08009fb4 <__assert_func>:
 8009fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <__assert_func+0x2c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	68d8      	ldr	r0, [r3, #12]
 8009fc2:	b14c      	cbz	r4, 8009fd8 <__assert_func+0x24>
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <__assert_func+0x30>)
 8009fc6:	9100      	str	r1, [sp, #0]
 8009fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fcc:	4906      	ldr	r1, [pc, #24]	; (8009fe8 <__assert_func+0x34>)
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f000 f88a 	bl	800a0e8 <fiprintf>
 8009fd4:	f000 f8a7 	bl	800a126 <abort>
 8009fd8:	4b04      	ldr	r3, [pc, #16]	; (8009fec <__assert_func+0x38>)
 8009fda:	461c      	mov	r4, r3
 8009fdc:	e7f3      	b.n	8009fc6 <__assert_func+0x12>
 8009fde:	bf00      	nop
 8009fe0:	200000e4 	.word	0x200000e4
 8009fe4:	0800b257 	.word	0x0800b257
 8009fe8:	0800b264 	.word	0x0800b264
 8009fec:	0800b292 	.word	0x0800b292

08009ff0 <_calloc_r>:
 8009ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ff2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ff6:	b94c      	cbnz	r4, 800a00c <_calloc_r+0x1c>
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	f7ff fa42 	bl	8009484 <_malloc_r>
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	4605      	mov	r5, r0
 800a004:	b930      	cbnz	r0, 800a014 <_calloc_r+0x24>
 800a006:	4628      	mov	r0, r5
 800a008:	b003      	add	sp, #12
 800a00a:	bd30      	pop	{r4, r5, pc}
 800a00c:	220c      	movs	r2, #12
 800a00e:	6002      	str	r2, [r0, #0]
 800a010:	2500      	movs	r5, #0
 800a012:	e7f8      	b.n	800a006 <_calloc_r+0x16>
 800a014:	4621      	mov	r1, r4
 800a016:	f7fe f9f3 	bl	8008400 <memset>
 800a01a:	e7f4      	b.n	800a006 <_calloc_r+0x16>

0800a01c <_free_r>:
 800a01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01e:	2900      	cmp	r1, #0
 800a020:	d044      	beq.n	800a0ac <_free_r+0x90>
 800a022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a026:	9001      	str	r0, [sp, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f1a1 0404 	sub.w	r4, r1, #4
 800a02e:	bfb8      	it	lt
 800a030:	18e4      	addlt	r4, r4, r3
 800a032:	f7ff fb55 	bl	80096e0 <__malloc_lock>
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <_free_r+0x94>)
 800a038:	9801      	ldr	r0, [sp, #4]
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	b933      	cbnz	r3, 800a04c <_free_r+0x30>
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a048:	f7ff bb50 	b.w	80096ec <__malloc_unlock>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d908      	bls.n	800a062 <_free_r+0x46>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf01      	itttt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	1949      	addeq	r1, r1, r5
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	e7ed      	b.n	800a03e <_free_r+0x22>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x50>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x46>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1855      	adds	r5, r2, r1
 800a070:	42a5      	cmp	r5, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x70>
 800a074:	6824      	ldr	r4, [r4, #0]
 800a076:	4421      	add	r1, r4
 800a078:	1854      	adds	r4, r2, r1
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1e0      	bne.n	800a042 <_free_r+0x26>
 800a080:	681c      	ldr	r4, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	440c      	add	r4, r1
 800a088:	6014      	str	r4, [r2, #0]
 800a08a:	e7da      	b.n	800a042 <_free_r+0x26>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x78>
 800a08e:	230c      	movs	r3, #12
 800a090:	6003      	str	r3, [r0, #0]
 800a092:	e7d6      	b.n	800a042 <_free_r+0x26>
 800a094:	6825      	ldr	r5, [r4, #0]
 800a096:	1961      	adds	r1, r4, r5
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1949      	addeq	r1, r1, r5
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7ca      	b.n	800a042 <_free_r+0x26>
 800a0ac:	b003      	add	sp, #12
 800a0ae:	bd30      	pop	{r4, r5, pc}
 800a0b0:	2000302c 	.word	0x2000302c

0800a0b4 <__ascii_mbtowc>:
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	b901      	cbnz	r1, 800a0ba <__ascii_mbtowc+0x6>
 800a0b8:	a901      	add	r1, sp, #4
 800a0ba:	b142      	cbz	r2, 800a0ce <__ascii_mbtowc+0x1a>
 800a0bc:	b14b      	cbz	r3, 800a0d2 <__ascii_mbtowc+0x1e>
 800a0be:	7813      	ldrb	r3, [r2, #0]
 800a0c0:	600b      	str	r3, [r1, #0]
 800a0c2:	7812      	ldrb	r2, [r2, #0]
 800a0c4:	1e10      	subs	r0, r2, #0
 800a0c6:	bf18      	it	ne
 800a0c8:	2001      	movne	r0, #1
 800a0ca:	b002      	add	sp, #8
 800a0cc:	4770      	bx	lr
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	e7fb      	b.n	800a0ca <__ascii_mbtowc+0x16>
 800a0d2:	f06f 0001 	mvn.w	r0, #1
 800a0d6:	e7f8      	b.n	800a0ca <__ascii_mbtowc+0x16>

0800a0d8 <_malloc_usable_size_r>:
 800a0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0dc:	1f18      	subs	r0, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bfbc      	itt	lt
 800a0e2:	580b      	ldrlt	r3, [r1, r0]
 800a0e4:	18c0      	addlt	r0, r0, r3
 800a0e6:	4770      	bx	lr

0800a0e8 <fiprintf>:
 800a0e8:	b40e      	push	{r1, r2, r3}
 800a0ea:	b503      	push	{r0, r1, lr}
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	ab03      	add	r3, sp, #12
 800a0f0:	4805      	ldr	r0, [pc, #20]	; (800a108 <fiprintf+0x20>)
 800a0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f6:	6800      	ldr	r0, [r0, #0]
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f000 f845 	bl	800a188 <_vfiprintf_r>
 800a0fe:	b002      	add	sp, #8
 800a100:	f85d eb04 	ldr.w	lr, [sp], #4
 800a104:	b003      	add	sp, #12
 800a106:	4770      	bx	lr
 800a108:	200000e4 	.word	0x200000e4

0800a10c <__ascii_wctomb>:
 800a10c:	b149      	cbz	r1, 800a122 <__ascii_wctomb+0x16>
 800a10e:	2aff      	cmp	r2, #255	; 0xff
 800a110:	bf85      	ittet	hi
 800a112:	238a      	movhi	r3, #138	; 0x8a
 800a114:	6003      	strhi	r3, [r0, #0]
 800a116:	700a      	strbls	r2, [r1, #0]
 800a118:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a11c:	bf98      	it	ls
 800a11e:	2001      	movls	r0, #1
 800a120:	4770      	bx	lr
 800a122:	4608      	mov	r0, r1
 800a124:	4770      	bx	lr

0800a126 <abort>:
 800a126:	b508      	push	{r3, lr}
 800a128:	2006      	movs	r0, #6
 800a12a:	f000 fa89 	bl	800a640 <raise>
 800a12e:	2001      	movs	r0, #1
 800a130:	f7f8 ff8c 	bl	800304c <_exit>

0800a134 <__sfputc_r>:
 800a134:	6893      	ldr	r3, [r2, #8]
 800a136:	3b01      	subs	r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	b410      	push	{r4}
 800a13c:	6093      	str	r3, [r2, #8]
 800a13e:	da08      	bge.n	800a152 <__sfputc_r+0x1e>
 800a140:	6994      	ldr	r4, [r2, #24]
 800a142:	42a3      	cmp	r3, r4
 800a144:	db01      	blt.n	800a14a <__sfputc_r+0x16>
 800a146:	290a      	cmp	r1, #10
 800a148:	d103      	bne.n	800a152 <__sfputc_r+0x1e>
 800a14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14e:	f000 b935 	b.w	800a3bc <__swbuf_r>
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	1c58      	adds	r0, r3, #1
 800a156:	6010      	str	r0, [r2, #0]
 800a158:	7019      	strb	r1, [r3, #0]
 800a15a:	4608      	mov	r0, r1
 800a15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <__sfputs_r>:
 800a162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	4614      	mov	r4, r2
 800a16a:	18d5      	adds	r5, r2, r3
 800a16c:	42ac      	cmp	r4, r5
 800a16e:	d101      	bne.n	800a174 <__sfputs_r+0x12>
 800a170:	2000      	movs	r0, #0
 800a172:	e007      	b.n	800a184 <__sfputs_r+0x22>
 800a174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a178:	463a      	mov	r2, r7
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ffda 	bl	800a134 <__sfputc_r>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d1f3      	bne.n	800a16c <__sfputs_r+0xa>
 800a184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a188 <_vfiprintf_r>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	460d      	mov	r5, r1
 800a18e:	b09d      	sub	sp, #116	; 0x74
 800a190:	4614      	mov	r4, r2
 800a192:	4698      	mov	r8, r3
 800a194:	4606      	mov	r6, r0
 800a196:	b118      	cbz	r0, 800a1a0 <_vfiprintf_r+0x18>
 800a198:	6a03      	ldr	r3, [r0, #32]
 800a19a:	b90b      	cbnz	r3, 800a1a0 <_vfiprintf_r+0x18>
 800a19c:	f7fe f8da 	bl	8008354 <__sinit>
 800a1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a2:	07d9      	lsls	r1, r3, #31
 800a1a4:	d405      	bmi.n	800a1b2 <_vfiprintf_r+0x2a>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	059a      	lsls	r2, r3, #22
 800a1aa:	d402      	bmi.n	800a1b2 <_vfiprintf_r+0x2a>
 800a1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ae:	f7fe f95e 	bl	800846e <__retarget_lock_acquire_recursive>
 800a1b2:	89ab      	ldrh	r3, [r5, #12]
 800a1b4:	071b      	lsls	r3, r3, #28
 800a1b6:	d501      	bpl.n	800a1bc <_vfiprintf_r+0x34>
 800a1b8:	692b      	ldr	r3, [r5, #16]
 800a1ba:	b99b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x5c>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f000 f93a 	bl	800a438 <__swsetup_r>
 800a1c4:	b170      	cbz	r0, 800a1e4 <_vfiprintf_r+0x5c>
 800a1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c8:	07dc      	lsls	r4, r3, #31
 800a1ca:	d504      	bpl.n	800a1d6 <_vfiprintf_r+0x4e>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1d0:	b01d      	add	sp, #116	; 0x74
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	89ab      	ldrh	r3, [r5, #12]
 800a1d8:	0598      	lsls	r0, r3, #22
 800a1da:	d4f7      	bmi.n	800a1cc <_vfiprintf_r+0x44>
 800a1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1de:	f7fe f947 	bl	8008470 <__retarget_lock_release_recursive>
 800a1e2:	e7f3      	b.n	800a1cc <_vfiprintf_r+0x44>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f2:	2330      	movs	r3, #48	; 0x30
 800a1f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3a8 <_vfiprintf_r+0x220>
 800a1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1fc:	f04f 0901 	mov.w	r9, #1
 800a200:	4623      	mov	r3, r4
 800a202:	469a      	mov	sl, r3
 800a204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a208:	b10a      	cbz	r2, 800a20e <_vfiprintf_r+0x86>
 800a20a:	2a25      	cmp	r2, #37	; 0x25
 800a20c:	d1f9      	bne.n	800a202 <_vfiprintf_r+0x7a>
 800a20e:	ebba 0b04 	subs.w	fp, sl, r4
 800a212:	d00b      	beq.n	800a22c <_vfiprintf_r+0xa4>
 800a214:	465b      	mov	r3, fp
 800a216:	4622      	mov	r2, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffa1 	bl	800a162 <__sfputs_r>
 800a220:	3001      	adds	r0, #1
 800a222:	f000 80a9 	beq.w	800a378 <_vfiprintf_r+0x1f0>
 800a226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a228:	445a      	add	r2, fp
 800a22a:	9209      	str	r2, [sp, #36]	; 0x24
 800a22c:	f89a 3000 	ldrb.w	r3, [sl]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80a1 	beq.w	800a378 <_vfiprintf_r+0x1f0>
 800a236:	2300      	movs	r3, #0
 800a238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a240:	f10a 0a01 	add.w	sl, sl, #1
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a24c:	931a      	str	r3, [sp, #104]	; 0x68
 800a24e:	4654      	mov	r4, sl
 800a250:	2205      	movs	r2, #5
 800a252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a256:	4854      	ldr	r0, [pc, #336]	; (800a3a8 <_vfiprintf_r+0x220>)
 800a258:	f7f5 ffc2 	bl	80001e0 <memchr>
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	b9d8      	cbnz	r0, 800a298 <_vfiprintf_r+0x110>
 800a260:	06d1      	lsls	r1, r2, #27
 800a262:	bf44      	itt	mi
 800a264:	2320      	movmi	r3, #32
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26a:	0713      	lsls	r3, r2, #28
 800a26c:	bf44      	itt	mi
 800a26e:	232b      	movmi	r3, #43	; 0x2b
 800a270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a274:	f89a 3000 	ldrb.w	r3, [sl]
 800a278:	2b2a      	cmp	r3, #42	; 0x2a
 800a27a:	d015      	beq.n	800a2a8 <_vfiprintf_r+0x120>
 800a27c:	9a07      	ldr	r2, [sp, #28]
 800a27e:	4654      	mov	r4, sl
 800a280:	2000      	movs	r0, #0
 800a282:	f04f 0c0a 	mov.w	ip, #10
 800a286:	4621      	mov	r1, r4
 800a288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28c:	3b30      	subs	r3, #48	; 0x30
 800a28e:	2b09      	cmp	r3, #9
 800a290:	d94d      	bls.n	800a32e <_vfiprintf_r+0x1a6>
 800a292:	b1b0      	cbz	r0, 800a2c2 <_vfiprintf_r+0x13a>
 800a294:	9207      	str	r2, [sp, #28]
 800a296:	e014      	b.n	800a2c2 <_vfiprintf_r+0x13a>
 800a298:	eba0 0308 	sub.w	r3, r0, r8
 800a29c:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	46a2      	mov	sl, r4
 800a2a6:	e7d2      	b.n	800a24e <_vfiprintf_r+0xc6>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	1d19      	adds	r1, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfbb      	ittet	lt
 800a2b4:	425b      	neglt	r3, r3
 800a2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ba:	9307      	strge	r3, [sp, #28]
 800a2bc:	9307      	strlt	r3, [sp, #28]
 800a2be:	bfb8      	it	lt
 800a2c0:	9204      	strlt	r2, [sp, #16]
 800a2c2:	7823      	ldrb	r3, [r4, #0]
 800a2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c6:	d10c      	bne.n	800a2e2 <_vfiprintf_r+0x15a>
 800a2c8:	7863      	ldrb	r3, [r4, #1]
 800a2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a2cc:	d134      	bne.n	800a338 <_vfiprintf_r+0x1b0>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	1d1a      	adds	r2, r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	9203      	str	r2, [sp, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	bfb8      	it	lt
 800a2da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2de:	3402      	adds	r4, #2
 800a2e0:	9305      	str	r3, [sp, #20]
 800a2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3b8 <_vfiprintf_r+0x230>
 800a2e6:	7821      	ldrb	r1, [r4, #0]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	4650      	mov	r0, sl
 800a2ec:	f7f5 ff78 	bl	80001e0 <memchr>
 800a2f0:	b138      	cbz	r0, 800a302 <_vfiprintf_r+0x17a>
 800a2f2:	9b04      	ldr	r3, [sp, #16]
 800a2f4:	eba0 000a 	sub.w	r0, r0, sl
 800a2f8:	2240      	movs	r2, #64	; 0x40
 800a2fa:	4082      	lsls	r2, r0
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	3401      	adds	r4, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a306:	4829      	ldr	r0, [pc, #164]	; (800a3ac <_vfiprintf_r+0x224>)
 800a308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a30c:	2206      	movs	r2, #6
 800a30e:	f7f5 ff67 	bl	80001e0 <memchr>
 800a312:	2800      	cmp	r0, #0
 800a314:	d03f      	beq.n	800a396 <_vfiprintf_r+0x20e>
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <_vfiprintf_r+0x228>)
 800a318:	bb1b      	cbnz	r3, 800a362 <_vfiprintf_r+0x1da>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	3307      	adds	r3, #7
 800a31e:	f023 0307 	bic.w	r3, r3, #7
 800a322:	3308      	adds	r3, #8
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	443b      	add	r3, r7
 800a32a:	9309      	str	r3, [sp, #36]	; 0x24
 800a32c:	e768      	b.n	800a200 <_vfiprintf_r+0x78>
 800a32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a332:	460c      	mov	r4, r1
 800a334:	2001      	movs	r0, #1
 800a336:	e7a6      	b.n	800a286 <_vfiprintf_r+0xfe>
 800a338:	2300      	movs	r3, #0
 800a33a:	3401      	adds	r4, #1
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	4619      	mov	r1, r3
 800a340:	f04f 0c0a 	mov.w	ip, #10
 800a344:	4620      	mov	r0, r4
 800a346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34a:	3a30      	subs	r2, #48	; 0x30
 800a34c:	2a09      	cmp	r2, #9
 800a34e:	d903      	bls.n	800a358 <_vfiprintf_r+0x1d0>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0c6      	beq.n	800a2e2 <_vfiprintf_r+0x15a>
 800a354:	9105      	str	r1, [sp, #20]
 800a356:	e7c4      	b.n	800a2e2 <_vfiprintf_r+0x15a>
 800a358:	fb0c 2101 	mla	r1, ip, r1, r2
 800a35c:	4604      	mov	r4, r0
 800a35e:	2301      	movs	r3, #1
 800a360:	e7f0      	b.n	800a344 <_vfiprintf_r+0x1bc>
 800a362:	ab03      	add	r3, sp, #12
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	462a      	mov	r2, r5
 800a368:	4b12      	ldr	r3, [pc, #72]	; (800a3b4 <_vfiprintf_r+0x22c>)
 800a36a:	a904      	add	r1, sp, #16
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7fd fb9f 	bl	8007ab0 <_printf_float>
 800a372:	4607      	mov	r7, r0
 800a374:	1c78      	adds	r0, r7, #1
 800a376:	d1d6      	bne.n	800a326 <_vfiprintf_r+0x19e>
 800a378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a37a:	07d9      	lsls	r1, r3, #31
 800a37c:	d405      	bmi.n	800a38a <_vfiprintf_r+0x202>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d402      	bmi.n	800a38a <_vfiprintf_r+0x202>
 800a384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a386:	f7fe f873 	bl	8008470 <__retarget_lock_release_recursive>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	065b      	lsls	r3, r3, #25
 800a38e:	f53f af1d 	bmi.w	800a1cc <_vfiprintf_r+0x44>
 800a392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a394:	e71c      	b.n	800a1d0 <_vfiprintf_r+0x48>
 800a396:	ab03      	add	r3, sp, #12
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	462a      	mov	r2, r5
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_vfiprintf_r+0x22c>)
 800a39e:	a904      	add	r1, sp, #16
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7fd fe29 	bl	8007ff8 <_printf_i>
 800a3a6:	e7e4      	b.n	800a372 <_vfiprintf_r+0x1ea>
 800a3a8:	0800afe5 	.word	0x0800afe5
 800a3ac:	0800afef 	.word	0x0800afef
 800a3b0:	08007ab1 	.word	0x08007ab1
 800a3b4:	0800a163 	.word	0x0800a163
 800a3b8:	0800afeb 	.word	0x0800afeb

0800a3bc <__swbuf_r>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	460e      	mov	r6, r1
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	b118      	cbz	r0, 800a3ce <__swbuf_r+0x12>
 800a3c6:	6a03      	ldr	r3, [r0, #32]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <__swbuf_r+0x12>
 800a3ca:	f7fd ffc3 	bl	8008354 <__sinit>
 800a3ce:	69a3      	ldr	r3, [r4, #24]
 800a3d0:	60a3      	str	r3, [r4, #8]
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	071a      	lsls	r2, r3, #28
 800a3d6:	d525      	bpl.n	800a424 <__swbuf_r+0x68>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	b31b      	cbz	r3, 800a424 <__swbuf_r+0x68>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	6922      	ldr	r2, [r4, #16]
 800a3e0:	1a98      	subs	r0, r3, r2
 800a3e2:	6963      	ldr	r3, [r4, #20]
 800a3e4:	b2f6      	uxtb	r6, r6
 800a3e6:	4283      	cmp	r3, r0
 800a3e8:	4637      	mov	r7, r6
 800a3ea:	dc04      	bgt.n	800a3f6 <__swbuf_r+0x3a>
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f7ff f94e 	bl	8009690 <_fflush_r>
 800a3f4:	b9e0      	cbnz	r0, 800a430 <__swbuf_r+0x74>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	701e      	strb	r6, [r3, #0]
 800a404:	6962      	ldr	r2, [r4, #20]
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	429a      	cmp	r2, r3
 800a40a:	d004      	beq.n	800a416 <__swbuf_r+0x5a>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d506      	bpl.n	800a420 <__swbuf_r+0x64>
 800a412:	2e0a      	cmp	r6, #10
 800a414:	d104      	bne.n	800a420 <__swbuf_r+0x64>
 800a416:	4621      	mov	r1, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f7ff f939 	bl	8009690 <_fflush_r>
 800a41e:	b938      	cbnz	r0, 800a430 <__swbuf_r+0x74>
 800a420:	4638      	mov	r0, r7
 800a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a424:	4621      	mov	r1, r4
 800a426:	4628      	mov	r0, r5
 800a428:	f000 f806 	bl	800a438 <__swsetup_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d0d5      	beq.n	800a3dc <__swbuf_r+0x20>
 800a430:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a434:	e7f4      	b.n	800a420 <__swbuf_r+0x64>
	...

0800a438 <__swsetup_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4b2a      	ldr	r3, [pc, #168]	; (800a4e4 <__swsetup_r+0xac>)
 800a43c:	4605      	mov	r5, r0
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	460c      	mov	r4, r1
 800a442:	b118      	cbz	r0, 800a44c <__swsetup_r+0x14>
 800a444:	6a03      	ldr	r3, [r0, #32]
 800a446:	b90b      	cbnz	r3, 800a44c <__swsetup_r+0x14>
 800a448:	f7fd ff84 	bl	8008354 <__sinit>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a452:	0718      	lsls	r0, r3, #28
 800a454:	d422      	bmi.n	800a49c <__swsetup_r+0x64>
 800a456:	06d9      	lsls	r1, r3, #27
 800a458:	d407      	bmi.n	800a46a <__swsetup_r+0x32>
 800a45a:	2309      	movs	r3, #9
 800a45c:	602b      	str	r3, [r5, #0]
 800a45e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a468:	e034      	b.n	800a4d4 <__swsetup_r+0x9c>
 800a46a:	0758      	lsls	r0, r3, #29
 800a46c:	d512      	bpl.n	800a494 <__swsetup_r+0x5c>
 800a46e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a470:	b141      	cbz	r1, 800a484 <__swsetup_r+0x4c>
 800a472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a476:	4299      	cmp	r1, r3
 800a478:	d002      	beq.n	800a480 <__swsetup_r+0x48>
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7ff fdce 	bl	800a01c <_free_r>
 800a480:	2300      	movs	r3, #0
 800a482:	6363      	str	r3, [r4, #52]	; 0x34
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	2300      	movs	r3, #0
 800a48e:	6063      	str	r3, [r4, #4]
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f043 0308 	orr.w	r3, r3, #8
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	b94b      	cbnz	r3, 800a4b4 <__swsetup_r+0x7c>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4aa:	d003      	beq.n	800a4b4 <__swsetup_r+0x7c>
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f000 f840 	bl	800a534 <__smakebuf_r>
 800a4b4:	89a0      	ldrh	r0, [r4, #12]
 800a4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4ba:	f010 0301 	ands.w	r3, r0, #1
 800a4be:	d00a      	beq.n	800a4d6 <__swsetup_r+0x9e>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	6963      	ldr	r3, [r4, #20]
 800a4c6:	425b      	negs	r3, r3
 800a4c8:	61a3      	str	r3, [r4, #24]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b943      	cbnz	r3, 800a4e0 <__swsetup_r+0xa8>
 800a4ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4d2:	d1c4      	bne.n	800a45e <__swsetup_r+0x26>
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	0781      	lsls	r1, r0, #30
 800a4d8:	bf58      	it	pl
 800a4da:	6963      	ldrpl	r3, [r4, #20]
 800a4dc:	60a3      	str	r3, [r4, #8]
 800a4de:	e7f4      	b.n	800a4ca <__swsetup_r+0x92>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	e7f7      	b.n	800a4d4 <__swsetup_r+0x9c>
 800a4e4:	200000e4 	.word	0x200000e4

0800a4e8 <__swhatbuf_r>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	b096      	sub	sp, #88	; 0x58
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	461e      	mov	r6, r3
 800a4f8:	da0d      	bge.n	800a516 <__swhatbuf_r+0x2e>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a500:	f04f 0100 	mov.w	r1, #0
 800a504:	bf0c      	ite	eq
 800a506:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a50a:	2340      	movne	r3, #64	; 0x40
 800a50c:	2000      	movs	r0, #0
 800a50e:	6031      	str	r1, [r6, #0]
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	b016      	add	sp, #88	; 0x58
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	466a      	mov	r2, sp
 800a518:	f000 f848 	bl	800a5ac <_fstat_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	dbec      	blt.n	800a4fa <__swhatbuf_r+0x12>
 800a520:	9901      	ldr	r1, [sp, #4]
 800a522:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a526:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a52a:	4259      	negs	r1, r3
 800a52c:	4159      	adcs	r1, r3
 800a52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a532:	e7eb      	b.n	800a50c <__swhatbuf_r+0x24>

0800a534 <__smakebuf_r>:
 800a534:	898b      	ldrh	r3, [r1, #12]
 800a536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a538:	079d      	lsls	r5, r3, #30
 800a53a:	4606      	mov	r6, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	d507      	bpl.n	800a550 <__smakebuf_r+0x1c>
 800a540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	2301      	movs	r3, #1
 800a54a:	6163      	str	r3, [r4, #20]
 800a54c:	b002      	add	sp, #8
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	ab01      	add	r3, sp, #4
 800a552:	466a      	mov	r2, sp
 800a554:	f7ff ffc8 	bl	800a4e8 <__swhatbuf_r>
 800a558:	9900      	ldr	r1, [sp, #0]
 800a55a:	4605      	mov	r5, r0
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7fe ff91 	bl	8009484 <_malloc_r>
 800a562:	b948      	cbnz	r0, 800a578 <__smakebuf_r+0x44>
 800a564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a568:	059a      	lsls	r2, r3, #22
 800a56a:	d4ef      	bmi.n	800a54c <__smakebuf_r+0x18>
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	f043 0302 	orr.w	r3, r3, #2
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	e7e3      	b.n	800a540 <__smakebuf_r+0xc>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	6020      	str	r0, [r4, #0]
 800a57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	9b00      	ldr	r3, [sp, #0]
 800a584:	6163      	str	r3, [r4, #20]
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	6120      	str	r0, [r4, #16]
 800a58a:	b15b      	cbz	r3, 800a5a4 <__smakebuf_r+0x70>
 800a58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a590:	4630      	mov	r0, r6
 800a592:	f000 f81d 	bl	800a5d0 <_isatty_r>
 800a596:	b128      	cbz	r0, 800a5a4 <__smakebuf_r+0x70>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f023 0303 	bic.w	r3, r3, #3
 800a59e:	f043 0301 	orr.w	r3, r3, #1
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	431d      	orrs	r5, r3
 800a5a8:	81a5      	strh	r5, [r4, #12]
 800a5aa:	e7cf      	b.n	800a54c <__smakebuf_r+0x18>

0800a5ac <_fstat_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	; (800a5cc <_fstat_r+0x20>)
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	4608      	mov	r0, r1
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	f7f8 fd96 	bl	80030ea <_fstat>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	d102      	bne.n	800a5c8 <_fstat_r+0x1c>
 800a5c2:	682b      	ldr	r3, [r5, #0]
 800a5c4:	b103      	cbz	r3, 800a5c8 <_fstat_r+0x1c>
 800a5c6:	6023      	str	r3, [r4, #0]
 800a5c8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20003034 	.word	0x20003034

0800a5d0 <_isatty_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d06      	ldr	r5, [pc, #24]	; (800a5ec <_isatty_r+0x1c>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f8 fd95 	bl	800310a <_isatty>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_isatty_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_isatty_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20003034 	.word	0x20003034

0800a5f0 <_raise_r>:
 800a5f0:	291f      	cmp	r1, #31
 800a5f2:	b538      	push	{r3, r4, r5, lr}
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	d904      	bls.n	800a604 <_raise_r+0x14>
 800a5fa:	2316      	movs	r3, #22
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a606:	b112      	cbz	r2, 800a60e <_raise_r+0x1e>
 800a608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a60c:	b94b      	cbnz	r3, 800a622 <_raise_r+0x32>
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f830 	bl	800a674 <_getpid_r>
 800a614:	462a      	mov	r2, r5
 800a616:	4601      	mov	r1, r0
 800a618:	4620      	mov	r0, r4
 800a61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a61e:	f000 b817 	b.w	800a650 <_kill_r>
 800a622:	2b01      	cmp	r3, #1
 800a624:	d00a      	beq.n	800a63c <_raise_r+0x4c>
 800a626:	1c59      	adds	r1, r3, #1
 800a628:	d103      	bne.n	800a632 <_raise_r+0x42>
 800a62a:	2316      	movs	r3, #22
 800a62c:	6003      	str	r3, [r0, #0]
 800a62e:	2001      	movs	r0, #1
 800a630:	e7e7      	b.n	800a602 <_raise_r+0x12>
 800a632:	2400      	movs	r4, #0
 800a634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a638:	4628      	mov	r0, r5
 800a63a:	4798      	blx	r3
 800a63c:	2000      	movs	r0, #0
 800a63e:	e7e0      	b.n	800a602 <_raise_r+0x12>

0800a640 <raise>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <raise+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f7ff bfd3 	b.w	800a5f0 <_raise_r>
 800a64a:	bf00      	nop
 800a64c:	200000e4 	.word	0x200000e4

0800a650 <_kill_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	; (800a670 <_kill_r+0x20>)
 800a654:	2300      	movs	r3, #0
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	f7f8 fce5 	bl	800302c <_kill>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d102      	bne.n	800a66c <_kill_r+0x1c>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	b103      	cbz	r3, 800a66c <_kill_r+0x1c>
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop
 800a670:	20003034 	.word	0x20003034

0800a674 <_getpid_r>:
 800a674:	f7f8 bcd2 	b.w	800301c <_getpid>

0800a678 <_init>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	bf00      	nop
 800a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67e:	bc08      	pop	{r3}
 800a680:	469e      	mov	lr, r3
 800a682:	4770      	bx	lr

0800a684 <_fini>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr
